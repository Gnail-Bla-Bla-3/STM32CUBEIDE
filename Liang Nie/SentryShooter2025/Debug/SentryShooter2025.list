
SentryShooter2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e288  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800e418  0800e418  0000f418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e584  0800e584  0001007c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e584  0800e584  0000f584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e58c  0800e58c  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e58c  0800e58c  0000f58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e590  0800e590  0000f590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800e594  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001007c  2**0
                  CONTENTS
 10 .bss          00005734  2000007c  2000007c  0001007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057b0  200057b0  0001007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c9c  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054b9  00000000  00000000  00035d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0003b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001813  00000000  00000000  0003d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026204  00000000  00000000  0003e8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002578a  00000000  00000000  00064ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10be  00000000  00000000  0008a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b32f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008744  00000000  00000000  0016b374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00173ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e400 	.word	0x0800e400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800e400 	.word	0x0800e400

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b988 	b.w	8000dd4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	468e      	mov	lr, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d962      	bls.n	8000bb8 <__udivmoddi4+0xdc>
 8000af2:	fab2 f682 	clz	r6, r2
 8000af6:	b14e      	cbz	r6, 8000b0c <__udivmoddi4+0x30>
 8000af8:	f1c6 0320 	rsb	r3, r6, #32
 8000afc:	fa01 f806 	lsl.w	r8, r1, r6
 8000b00:	fa20 f303 	lsr.w	r3, r0, r3
 8000b04:	40b7      	lsls	r7, r6
 8000b06:	ea43 0808 	orr.w	r8, r3, r8
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b22:	fb01 f20c 	mul.w	r2, r1, ip
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b30:	f080 80ea 	bcs.w	8000d08 <__udivmoddi4+0x22c>
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f240 80e7 	bls.w	8000d08 <__udivmoddi4+0x22c>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	443b      	add	r3, r7
 8000b3e:	1a9a      	subs	r2, r3, r2
 8000b40:	b2a3      	uxth	r3, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	459c      	cmp	ip, r3
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x8e>
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b5c:	f080 80d6 	bcs.w	8000d0c <__udivmoddi4+0x230>
 8000b60:	459c      	cmp	ip, r3
 8000b62:	f240 80d3 	bls.w	8000d0c <__udivmoddi4+0x230>
 8000b66:	443b      	add	r3, r7
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b6e:	eba3 030c 	sub.w	r3, r3, ip
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40f3      	lsrs	r3, r6
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xb6>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb0>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x14c>
 8000b9a:	4573      	cmp	r3, lr
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xc8>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 8105 	bhi.w	8000dae <__udivmoddi4+0x2d2>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	4690      	mov	r8, r2
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bb6:	e7e2      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8090 	beq.w	8000cde <__udivmoddi4+0x202>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f040 80a4 	bne.w	8000d10 <__udivmoddi4+0x234>
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	0c03      	lsrs	r3, r0, #16
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	b2bc      	uxth	r4, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb04 f20c 	mul.w	r2, r4, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x11e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x11c>
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f200 80e0 	bhi.w	8000db8 <__udivmoddi4+0x2dc>
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c08:	fb02 f404 	mul.w	r4, r2, r4
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x144>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x142>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f200 80ca 	bhi.w	8000db2 <__udivmoddi4+0x2d6>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa0e f401 	lsl.w	r4, lr, r1
 8000c38:	fa20 f306 	lsr.w	r3, r0, r6
 8000c3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	fa1f fc87 	uxth.w	ip, r7
 8000c4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x1a0>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 809c 	bcs.w	8000daa <__udivmoddi4+0x2ce>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8099 	bls.w	8000daa <__udivmoddi4+0x2ce>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	fa1f fe83 	uxth.w	lr, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c94:	45a4      	cmp	ip, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1ce>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c9e:	f080 8082 	bcs.w	8000da6 <__udivmoddi4+0x2ca>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d97f      	bls.n	8000da6 <__udivmoddi4+0x2ca>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cb6:	4564      	cmp	r4, ip
 8000cb8:	4673      	mov	r3, lr
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	d362      	bcc.n	8000d84 <__udivmoddi4+0x2a8>
 8000cbe:	d05f      	beq.n	8000d80 <__udivmoddi4+0x2a4>
 8000cc0:	b15d      	cbz	r5, 8000cda <__udivmoddi4+0x1fe>
 8000cc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	fa22 f301 	lsr.w	r3, r2, r1
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e74f      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000cde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ce2:	0c01      	lsrs	r1, r0, #16
 8000ce4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	46be      	mov	lr, r7
 8000cf8:	2620      	movs	r6, #32
 8000cfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cfe:	eba2 0208 	sub.w	r2, r2, r8
 8000d02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d06:	e766      	b.n	8000bd6 <__udivmoddi4+0xfa>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	e718      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	e72c      	b.n	8000b6a <__udivmoddi4+0x8e>
 8000d10:	f1c6 0220 	rsb	r2, r6, #32
 8000d14:	fa2e f302 	lsr.w	r3, lr, r2
 8000d18:	40b7      	lsls	r7, r6
 8000d1a:	40b1      	lsls	r1, r6
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d2a:	b2bc      	uxth	r4, r7
 8000d2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb08 f904 	mul.w	r9, r8, r4
 8000d3a:	40b0      	lsls	r0, r6
 8000d3c:	4589      	cmp	r9, r1
 8000d3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d42:	b280      	uxth	r0, r0
 8000d44:	d93e      	bls.n	8000dc4 <__udivmoddi4+0x2e8>
 8000d46:	1879      	adds	r1, r7, r1
 8000d48:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d4c:	d201      	bcs.n	8000d52 <__udivmoddi4+0x276>
 8000d4e:	4589      	cmp	r9, r1
 8000d50:	d81f      	bhi.n	8000d92 <__udivmoddi4+0x2b6>
 8000d52:	eba1 0109 	sub.w	r1, r1, r9
 8000d56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5a:	fb09 f804 	mul.w	r8, r9, r4
 8000d5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d62:	b292      	uxth	r2, r2
 8000d64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d68:	4542      	cmp	r2, r8
 8000d6a:	d229      	bcs.n	8000dc0 <__udivmoddi4+0x2e4>
 8000d6c:	18ba      	adds	r2, r7, r2
 8000d6e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d72:	d2c4      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d74:	4542      	cmp	r2, r8
 8000d76:	d2c2      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d78:	f1a9 0102 	sub.w	r1, r9, #2
 8000d7c:	443a      	add	r2, r7
 8000d7e:	e7be      	b.n	8000cfe <__udivmoddi4+0x222>
 8000d80:	45f0      	cmp	r8, lr
 8000d82:	d29d      	bcs.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d84:	ebbe 0302 	subs.w	r3, lr, r2
 8000d88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	e796      	b.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d92:	eba7 0909 	sub.w	r9, r7, r9
 8000d96:	4449      	add	r1, r9
 8000d98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da0:	fb09 f804 	mul.w	r8, r9, r4
 8000da4:	e7db      	b.n	8000d5e <__udivmoddi4+0x282>
 8000da6:	4673      	mov	r3, lr
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1ce>
 8000daa:	4650      	mov	r0, sl
 8000dac:	e766      	b.n	8000c7c <__udivmoddi4+0x1a0>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e6fd      	b.n	8000bae <__udivmoddi4+0xd2>
 8000db2:	443b      	add	r3, r7
 8000db4:	3a02      	subs	r2, #2
 8000db6:	e733      	b.n	8000c20 <__udivmoddi4+0x144>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	443b      	add	r3, r7
 8000dbe:	e71c      	b.n	8000bfa <__udivmoddi4+0x11e>
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	e79c      	b.n	8000cfe <__udivmoddi4+0x222>
 8000dc4:	eba1 0109 	sub.w	r1, r1, r9
 8000dc8:	46c4      	mov	ip, r8
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fb09 f804 	mul.w	r8, r9, r4
 8000dd2:	e7c4      	b.n	8000d5e <__udivmoddi4+0x282>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <BMI088_ACCEL_NS_L+0x18>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <BMI088_ACCEL_NS_L+0x1c>)
 8000de2:	8811      	ldrh	r1, [r2, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 fefa 	bl	8006be0 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <BMI088_ACCEL_NS_H+0x18>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <BMI088_ACCEL_NS_H+0x1c>)
 8000e02:	8811      	ldrh	r1, [r2, #0]
 8000e04:	2201      	movs	r2, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 feea 	bl	8006be0 <HAL_GPIO_WritePin>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000004 	.word	0x20000004

08000e18 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <BMI088_GYRO_NS_L+0x18>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <BMI088_GYRO_NS_L+0x1c>)
 8000e22:	8811      	ldrh	r1, [r2, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 feda 	bl	8006be0 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <BMI088_GYRO_NS_H+0x18>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <BMI088_GYRO_NS_H+0x1c>)
 8000e42:	8811      	ldrh	r1, [r2, #0]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 feca 	bl	8006be0 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000000c 	.word	0x2000000c

08000e58 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000e62:	f107 020f 	add.w	r2, r7, #15
 8000e66:	1df9      	adds	r1, r7, #7
 8000e68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <BMI088_read_write_byte+0x28>)
 8000e72:	f007 f9dd 	bl	8008230 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000774 	.word	0x20000774

08000e84 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000e88:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <IMU_get_temp+0x1c>)
 8000e8a:	4906      	ldr	r1, [pc, #24]	@ (8000ea4 <IMU_get_temp+0x20>)
 8000e8c:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <IMU_get_temp+0x24>)
 8000e8e:	f000 f80d 	bl	8000eac <BMI088_read>
	return temp;
 8000e92:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <IMU_get_temp+0x1c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	ee07 3a90 	vmov	s15, r3
}
 8000e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000b0 	.word	0x200000b0
 8000ea4:	200000a4 	.word	0x200000a4
 8000ea8:	20000098 	.word	0x20000098

08000eac <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000ec2:	f7ff ff89 	bl	8000dd8 <BMI088_ACCEL_NS_L>
 8000ec6:	2092      	movs	r0, #146	@ 0x92
 8000ec8:	f7ff ffc6 	bl	8000e58 <BMI088_read_write_byte>
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2012      	movs	r0, #18
 8000ed6:	f000 f8d3 	bl	8001080 <BMI088_read_muli_reg>
 8000eda:	f7ff ff8d 	bl	8000df8 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000ede:	7d7b      	ldrb	r3, [r7, #21]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000eee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	4b5f      	ldr	r3, [pc, #380]	@ (8001078 <BMI088_read+0x1cc>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f26:	4b54      	ldr	r3, [pc, #336]	@ (8001078 <BMI088_read+0x1cc>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f34:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f38:	7e7b      	ldrb	r3, [r7, #25]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7e3b      	ldrb	r3, [r7, #24]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <BMI088_read+0x1cc>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000f66:	f7ff ff57 	bl	8000e18 <BMI088_GYRO_NS_L>
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2208      	movs	r2, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f884 	bl	8001080 <BMI088_read_muli_reg>
 8000f78:	f7ff ff5e 	bl	8000e38 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000f7c:	7d3b      	ldrb	r3, [r7, #20]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d143      	bne.n	800100a <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <BMI088_read+0x1d0>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000fae:	7e7b      	ldrb	r3, [r7, #25]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7e3b      	ldrb	r3, [r7, #24]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <BMI088_read+0x1d0>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000fdc:	7efb      	ldrb	r3, [r7, #27]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	7ebb      	ldrb	r3, [r7, #26]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000fec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <BMI088_read+0x1d0>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3308      	adds	r3, #8
 8001002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001006:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800100a:	f7ff fee5 	bl	8000dd8 <BMI088_ACCEL_NS_L>
 800100e:	20a2      	movs	r0, #162	@ 0xa2
 8001010:	f7ff ff22 	bl	8000e58 <BMI088_read_write_byte>
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2202      	movs	r2, #2
 800101a:	4619      	mov	r1, r3
 800101c:	2022      	movs	r0, #34	@ 0x22
 800101e:	f000 f82f 	bl	8001080 <BMI088_read_muli_reg>
 8001022:	f7ff fee9 	bl	8000df8 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001026:	7d3b      	ldrb	r3, [r7, #20]
 8001028:	b21b      	sxth	r3, r3
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	b21a      	sxth	r2, r3
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	095b      	lsrs	r3, r3, #5
 8001032:	b2db      	uxtb	r3, r3
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800103a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800103e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001042:	db04      	blt.n	800104e <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 8001044:	8bfb      	ldrh	r3, [r7, #30]
 8001046:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800104a:	b29b      	uxth	r3, r3
 800104c:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 800104e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edc3 7a00 	vstr	s15, [r3]
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000010 	.word	0x20000010
 800107c:	20000014 	.word	0x20000014

08001080 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fedd 	bl	8000e58 <BMI088_read_write_byte>

    while (len != 0)
 800109e:	e00c      	b.n	80010ba <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 80010a0:	2055      	movs	r0, #85	@ 0x55
 80010a2:	f7ff fed9 	bl	8000e58 <BMI088_read_write_byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	701a      	strb	r2, [r3, #0]
        buf++;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	603b      	str	r3, [r7, #0]
        len--;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ef      	bne.n	80010a0 <BMI088_read_muli_reg+0x20>
    }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	f107 0210 	add.w	r2, r7, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f004 fb67 	bl	80057b2 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80010ea:	d813      	bhi.n	8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 80010ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010f0:	f240 80a2 	bls.w	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80010f4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	f200 809d 	bhi.w	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80010fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	08001215 	.word	0x08001215
 8001108:	08001227 	.word	0x08001227
 800110c:	08001239 	.word	0x08001239
 8001110:	08001239 	.word	0x08001239
 8001114:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001118:	2b0a      	cmp	r3, #10
 800111a:	f200 808d 	bhi.w	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a47      	ldr	r2, [pc, #284]	@ (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d134      	bne.n	800119a <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001130:	7a3b      	ldrb	r3, [r7, #8]
 8001132:	b21b      	sxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7a7b      	ldrb	r3, [r7, #9]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001144:	b291      	uxth	r1, r2
 8001146:	4a41      	ldr	r2, [pc, #260]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001148:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800114c:	7abb      	ldrb	r3, [r7, #10]
 800114e:	b21b      	sxth	r3, r3
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b219      	sxth	r1, r3
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	b21a      	sxth	r2, r3
 8001158:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800115c:	430a      	orrs	r2, r1
 800115e:	b211      	sxth	r1, r2
 8001160:	4a3a      	ldr	r2, [pc, #232]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	460a      	mov	r2, r1
 8001168:	805a      	strh	r2, [r3, #2]
 800116a:	7b3b      	ldrb	r3, [r7, #12]
 800116c:	b21b      	sxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b219      	sxth	r1, r3
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	b21a      	sxth	r2, r3
 8001176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117a:	430a      	orrs	r2, r1
 800117c:	b211      	sxth	r1, r2
 800117e:	4a33      	ldr	r2, [pc, #204]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	460a      	mov	r2, r1
 8001186:	809a      	strh	r2, [r3, #4]
 8001188:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800118c:	7bb9      	ldrb	r1, [r7, #14]
 800118e:	4a2f      	ldr	r2, [pc, #188]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	460a      	mov	r2, r1
 8001196:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001198:	e050      	b.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
            } else if (hcan == &hcan2) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d14c      	bne.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7a7b      	ldrb	r3, [r7, #9]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b6:	b291      	uxth	r1, r2
 80011b8:	4a24      	ldr	r2, [pc, #144]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80011ba:	330b      	adds	r3, #11
 80011bc:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80011c0:	7abb      	ldrb	r3, [r7, #10]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b219      	sxth	r1, r3
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011d0:	430a      	orrs	r2, r1
 80011d2:	b211      	sxth	r1, r2
 80011d4:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80011d6:	330b      	adds	r3, #11
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	460a      	mov	r2, r1
 80011de:	805a      	strh	r2, [r3, #2]
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b219      	sxth	r1, r3
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f0:	430a      	orrs	r2, r1
 80011f2:	b211      	sxth	r1, r2
 80011f4:	4a15      	ldr	r2, [pc, #84]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80011f6:	330b      	adds	r3, #11
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	809a      	strh	r2, [r3, #4]
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001204:	7bb9      	ldrb	r1, [r7, #14]
 8001206:	4a11      	ldr	r2, [pc, #68]	@ (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001208:	330b      	adds	r3, #11
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	460a      	mov	r2, r1
 8001210:	719a      	strb	r2, [r3, #6]
            break;
 8001212:	e013      	b.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001216:	461a      	mov	r2, r3
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001220:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 8001224:	e00b      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001228:	3308      	adds	r3, #8
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001232:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8001236:	e002      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 8001238:	bf00      	nop
 800123a:	e000      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
            break;
 800123c:	bf00      	nop
        }
    }
}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	@ 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200006d0 	.word	0x200006d0
 800124c:	2000012c 	.word	0x2000012c
 8001250:	200006f8 	.word	0x200006f8
 8001254:	2000053c 	.word	0x2000053c

08001258 <otherSignals>:
/*
uint64_t allRCShove() {
	return 0;
}
*/
uint64_t otherSignals(uint16_t data1, int8_t switch1, int8_t switch2) {
 8001258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800125c:	b090      	sub	sp, #64	@ 0x40
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	81fb      	strh	r3, [r7, #14]
 8001264:	460b      	mov	r3, r1
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	4613      	mov	r3, r2
 800126a:	733b      	strb	r3, [r7, #12]
	uint64_t temp2[4] = {0, 0, 0, 0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f00c fbe7 	bl	800da48 <memset>
	temp2[0] = (uint64_t)data1 << 48;
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	2200      	movs	r2, #0
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	040b      	lsls	r3, r1, #16
 800128e:	2200      	movs	r2, #0
 8001290:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp2[1] = (uint64_t)switch1 << 32;
 8001294:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001298:	17da      	asrs	r2, r3, #31
 800129a:	469a      	mov	sl, r3
 800129c:	4693      	mov	fp, r2
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	4653      	mov	r3, sl
 80012a8:	2200      	movs	r2, #0
 80012aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	temp2[2] = (uint64_t)switch2 << 16;
 80012ae:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80012b2:	17da      	asrs	r2, r3, #31
 80012b4:	461c      	mov	r4, r3
 80012b6:	4615      	mov	r5, r2
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	042b      	lsls	r3, r5, #16
 80012c2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80012c6:	0422      	lsls	r2, r4, #16
 80012c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp2[3] = 0;
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint64_t final = 0;;
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012ea:	e018      	b.n	800131e <otherSignals+0xc6>
		final = final + temp2[i];
 80012ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	3338      	adds	r3, #56	@ 0x38
 80012f4:	f107 0208 	add.w	r2, r7, #8
 80012f8:	4413      	add	r3, r2
 80012fa:	3b30      	subs	r3, #48	@ 0x30
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001304:	eb10 0802 	adds.w	r8, r0, r2
 8001308:	eb41 0903 	adc.w	r9, r1, r3
 800130c:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 8001310:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800131e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001322:	2b03      	cmp	r3, #3
 8001324:	dde2      	ble.n	80012ec <otherSignals+0x94>
	}
	return final;
 8001326:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
}
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	3740      	adds	r7, #64	@ 0x40
 8001330:	46bd      	mov	sp, r7
 8001332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001336 <fourBitShift>:

uint64_t fourBitShift(uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4) {
 8001336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133a:	b095      	sub	sp, #84	@ 0x54
 800133c:	af00      	add	r7, sp, #0
 800133e:	4616      	mov	r6, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	83fb      	strh	r3, [r7, #30]
 8001346:	460b      	mov	r3, r1
 8001348:	83bb      	strh	r3, [r7, #28]
 800134a:	4633      	mov	r3, r6
 800134c:	837b      	strh	r3, [r7, #26]
 800134e:	4613      	mov	r3, r2
 8001350:	833b      	strh	r3, [r7, #24]
	uint64_t temp1[4] = {0, 0, 0, 0};
 8001352:	f107 0020 	add.w	r0, r7, #32
 8001356:	2320      	movs	r3, #32
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f00c fb74 	bl	800da48 <memset>
	temp1[0] = (uint64_t)data1 << 48;
 8001360:	8bfb      	ldrh	r3, [r7, #30]
 8001362:	2200      	movs	r2, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	040b      	lsls	r3, r1, #16
 8001374:	2200      	movs	r2, #0
 8001376:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp1[1] = (uint64_t)data2 << 32;
 800137a:	8bbb      	ldrh	r3, [r7, #28]
 800137c:	2200      	movs	r2, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	60fa      	str	r2, [r7, #12]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	000b      	movs	r3, r1
 800138e:	2200      	movs	r2, #0
 8001390:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	temp1[2] = (uint64_t)data3 << 16;
 8001394:	8b7b      	ldrh	r3, [r7, #26]
 8001396:	2200      	movs	r2, #0
 8001398:	461c      	mov	r4, r3
 800139a:	4615      	mov	r5, r2
 800139c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80013a0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80013a4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
	temp1[3] = (uint64_t)data4;
 80013a8:	8b3b      	ldrh	r3, [r7, #24]
 80013aa:	2200      	movs	r2, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b4:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
	uint64_t final = 0;;
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013ca:	e018      	b.n	80013fe <fourBitShift+0xc8>
		final = final + temp1[i];
 80013cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	3338      	adds	r3, #56	@ 0x38
 80013d4:	f107 0218 	add.w	r2, r7, #24
 80013d8:	4413      	add	r3, r2
 80013da:	3b30      	subs	r3, #48	@ 0x30
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013e4:	eb10 0802 	adds.w	r8, r0, r2
 80013e8:	eb41 0903 	adc.w	r9, r1, r3
 80013ec:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 80013f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001402:	2b03      	cmp	r3, #3
 8001404:	dde2      	ble.n	80013cc <fourBitShift+0x96>
	}
	return final;
 8001406:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	3754      	adds	r7, #84	@ 0x54
 8001410:	46bd      	mov	sp, r7
 8001412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001418 <CAN_transmit>:

// sends a single uint64_t int, can use fourBitShift to send 4 uint16_t integers"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint64_t data) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	e9c7 2300 	strd	r2, r3, [r7]
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	460b      	mov	r3, r1
 8001428:	81bb      	strh	r3, [r7, #12]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <CAN_transmit+0x6c>)
 800142e:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <CAN_transmit+0x6c>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <CAN_transmit+0x6c>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <CAN_transmit+0x6c>)
 800143e:	2208      	movs	r2, #8
 8001440:	611a      	str	r2, [r3, #16]
    memcpy(&b2b_can_send_data[0], &data, 8);
 8001442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <CAN_transmit+0x70>)
 8001448:	4602      	mov	r2, r0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	460a      	mov	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
    if (bus == 1) {
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <CAN_transmit+0x4e>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <CAN_transmit+0x70>)
 800145c:	4909      	ldr	r1, [pc, #36]	@ (8001484 <CAN_transmit+0x6c>)
 800145e:	480b      	ldr	r0, [pc, #44]	@ (800148c <CAN_transmit+0x74>)
 8001460:	f004 f8cc 	bl	80055fc <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
    }
}
 8001464:	e009      	b.n	800147a <CAN_transmit+0x62>
    } else if (bus == 2) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d106      	bne.n	800147a <CAN_transmit+0x62>
    	HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <CAN_transmit+0x70>)
 8001472:	4904      	ldr	r1, [pc, #16]	@ (8001484 <CAN_transmit+0x6c>)
 8001474:	4806      	ldr	r0, [pc, #24]	@ (8001490 <CAN_transmit+0x78>)
 8001476:	f004 f8c1 	bl	80055fc <HAL_CAN_AddTxMessage>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000b4 	.word	0x200000b4
 8001488:	200000cc 	.word	0x200000cc
 800148c:	200006d0 	.word	0x200006d0
 8001490:	200006f8 	.word	0x200006f8

08001494 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	4603      	mov	r3, r0
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
 80014ae:	4613      	mov	r3, r2
 80014b0:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <CAN_DriveMotor+0xc0>)
 80014b6:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <CAN_DriveMotor+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <CAN_DriveMotor+0xc0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <CAN_DriveMotor+0xc0>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 80014ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ce:	121b      	asrs	r3, r3, #8
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <CAN_DriveMotor+0xc4>)
 80014d6:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <CAN_DriveMotor+0xc4>)
 80014de:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80014e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014e4:	121b      	asrs	r3, r3, #8
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <CAN_DriveMotor+0xc4>)
 80014ec:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80014ee:	883b      	ldrh	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <CAN_DriveMotor+0xc4>)
 80014f4:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80014f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <CAN_DriveMotor+0xc4>)
 8001502:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001504:	8c3b      	ldrh	r3, [r7, #32]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <CAN_DriveMotor+0xc4>)
 800150a:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 800150c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001510:	121b      	asrs	r3, r3, #8
 8001512:	b21b      	sxth	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <CAN_DriveMotor+0xc4>)
 8001518:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 800151a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <CAN_DriveMotor+0xc4>)
 8001520:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <CAN_DriveMotor+0xc4>)
 800152e:	4909      	ldr	r1, [pc, #36]	@ (8001554 <CAN_DriveMotor+0xc0>)
 8001530:	480a      	ldr	r0, [pc, #40]	@ (800155c <CAN_DriveMotor+0xc8>)
 8001532:	f004 f863 	bl	80055fc <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001536:	e009      	b.n	800154c <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d106      	bne.n	800154c <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <CAN_DriveMotor+0xc4>)
 8001544:	4903      	ldr	r1, [pc, #12]	@ (8001554 <CAN_DriveMotor+0xc0>)
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <CAN_DriveMotor+0xcc>)
 8001548:	f004 f858 	bl	80055fc <HAL_CAN_AddTxMessage>
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	200000dc 	.word	0x200000dc
 8001558:	200000f4 	.word	0x200000f4
 800155c:	200006d0 	.word	0x200006d0
 8001560:	200006f8 	.word	0x200006f8

08001564 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4623      	mov	r3, r4
 8001574:	71fb      	strb	r3, [r7, #7]
 8001576:	4603      	mov	r3, r0
 8001578:	71bb      	strb	r3, [r7, #6]
 800157a:	460b      	mov	r3, r1
 800157c:	717b      	strb	r3, [r7, #5]
 800157e:	4613      	mov	r3, r2
 8001580:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b04      	cmp	r3, #4
 8001586:	f000 8142 	beq.w	800180e <CAN_setMotorCtrlVal+0x2aa>
 800158a:	2b04      	cmp	r3, #4
 800158c:	f300 81e1 	bgt.w	8001952 <CAN_setMotorCtrlVal+0x3ee>
 8001590:	2b02      	cmp	r3, #2
 8001592:	dc02      	bgt.n	800159a <CAN_setMotorCtrlVal+0x36>
 8001594:	2b00      	cmp	r3, #0
 8001596:	dc04      	bgt.n	80015a2 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8001598:	e1db      	b.n	8001952 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800159a:	2b03      	cmp	r3, #3
 800159c:	f000 8097 	beq.w	80016ce <CAN_setMotorCtrlVal+0x16a>
}
 80015a0:	e1d7      	b.n	8001952 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80015a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	dc02      	bgt.n	80015b0 <CAN_setMotorCtrlVal+0x4c>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc05      	bgt.n	80015ba <CAN_setMotorCtrlVal+0x56>
					break;
 80015ae:	e08c      	b.n	80016ca <CAN_setMotorCtrlVal+0x166>
 80015b0:	3b05      	subs	r3, #5
			switch(motorID) {
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	f200 8089 	bhi.w	80016ca <CAN_setMotorCtrlVal+0x166>
 80015b8:	e042      	b.n	8001640 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015c2:	1e59      	subs	r1, r3, #1
 80015c4:	48bd      	ldr	r0, [pc, #756]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	49b8      	ldr	r1, [pc, #736]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	1e5a      	subs	r2, r3, #1
 80015ee:	49b3      	ldr	r1, [pc, #716]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3302      	adds	r3, #2
 80015fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	49ad      	ldr	r1, [pc, #692]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	3304      	adds	r3, #4
 8001612:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	48a8      	ldr	r0, [pc, #672]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4403      	add	r3, r0
 8001626:	3306      	adds	r3, #6
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	79f8      	ldrb	r0, [r7, #7]
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	9100      	str	r1, [sp, #0]
 8001632:	462b      	mov	r3, r5
 8001634:	4622      	mov	r2, r4
 8001636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163a:	f7ff ff2b 	bl	8001494 <CAN_DriveMotor>
					break;
 800163e:	e045      	b.n	80016cc <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001648:	1f59      	subs	r1, r3, #5
 800164a:	489c      	ldr	r0, [pc, #624]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3304      	adds	r3, #4
 8001658:	887a      	ldrh	r2, [r7, #2]
 800165a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	4996      	ldr	r1, [pc, #600]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3308      	adds	r3, #8
 8001670:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	4990      	ldr	r1, [pc, #576]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	330a      	adds	r3, #10
 8001686:	f9b3 5000 	ldrsh.w	r5, [r3]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	498b      	ldr	r1, [pc, #556]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	330c      	adds	r3, #12
 800169c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	4885      	ldr	r0, [pc, #532]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4403      	add	r3, r0
 80016b0:	330e      	adds	r3, #14
 80016b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b6:	79f8      	ldrb	r0, [r7, #7]
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9100      	str	r1, [sp, #0]
 80016bc:	462b      	mov	r3, r5
 80016be:	4622      	mov	r2, r4
 80016c0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80016c4:	f7ff fee6 	bl	8001494 <CAN_DriveMotor>
					break;
 80016c8:	e000      	b.n	80016cc <CAN_setMotorCtrlVal+0x168>
					break;
 80016ca:	bf00      	nop
			break;
 80016cc:	e141      	b.n	8001952 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80016ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	f000 8097 	beq.w	8001806 <CAN_setMotorCtrlVal+0x2a2>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	f300 8096 	bgt.w	800180a <CAN_setMotorCtrlVal+0x2a6>
 80016de:	2b04      	cmp	r3, #4
 80016e0:	dc02      	bgt.n	80016e8 <CAN_setMotorCtrlVal+0x184>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dc05      	bgt.n	80016f2 <CAN_setMotorCtrlVal+0x18e>
					break;
 80016e6:	e090      	b.n	800180a <CAN_setMotorCtrlVal+0x2a6>
 80016e8:	3b05      	subs	r3, #5
			switch(motorID) {
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	f200 808d 	bhi.w	800180a <CAN_setMotorCtrlVal+0x2a6>
 80016f0:	e044      	b.n	800177c <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	486f      	ldr	r0, [pc, #444]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	4969      	ldr	r1, [pc, #420]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3308      	adds	r3, #8
 8001722:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	4964      	ldr	r1, [pc, #400]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	330a      	adds	r3, #10
 8001738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	495e      	ldr	r1, [pc, #376]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	330c      	adds	r3, #12
 800174e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	4859      	ldr	r0, [pc, #356]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4403      	add	r3, r0
 8001762:	330e      	adds	r3, #14
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	79f8      	ldrb	r0, [r7, #7]
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	9100      	str	r1, [sp, #0]
 800176e:	462b      	mov	r3, r5
 8001770:	4622      	mov	r2, r4
 8001772:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001776:	f7ff fe8d 	bl	8001494 <CAN_DriveMotor>
					break;
 800177a:	e047      	b.n	800180c <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001784:	1f59      	subs	r1, r3, #5
 8001786:	484d      	ldr	r0, [pc, #308]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3308      	adds	r3, #8
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	4947      	ldr	r1, [pc, #284]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3310      	adds	r3, #16
 80017ac:	f9b3 4000 	ldrsh.w	r4, [r3]
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	4941      	ldr	r1, [pc, #260]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3312      	adds	r3, #18
 80017c2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	493c      	ldr	r1, [pc, #240]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3314      	adds	r3, #20
 80017d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	4836      	ldr	r0, [pc, #216]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4403      	add	r3, r0
 80017ec:	3316      	adds	r3, #22
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	79f8      	ldrb	r0, [r7, #7]
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	9100      	str	r1, [sp, #0]
 80017f8:	462b      	mov	r3, r5
 80017fa:	4622      	mov	r2, r4
 80017fc:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001800:	f7ff fe48 	bl	8001494 <CAN_DriveMotor>
					break;
 8001804:	e002      	b.n	800180c <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001806:	bf00      	nop
 8001808:	e0a3      	b.n	8001952 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800180a:	bf00      	nop
			break;
 800180c:	e0a1      	b.n	8001952 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 800180e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001812:	2b08      	cmp	r3, #8
 8001814:	f000 8099 	beq.w	800194a <CAN_setMotorCtrlVal+0x3e6>
 8001818:	2b08      	cmp	r3, #8
 800181a:	f300 8098 	bgt.w	800194e <CAN_setMotorCtrlVal+0x3ea>
 800181e:	2b04      	cmp	r3, #4
 8001820:	dc02      	bgt.n	8001828 <CAN_setMotorCtrlVal+0x2c4>
 8001822:	2b00      	cmp	r3, #0
 8001824:	dc05      	bgt.n	8001832 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001826:	e092      	b.n	800194e <CAN_setMotorCtrlVal+0x3ea>
 8001828:	3b05      	subs	r3, #5
			switch(motorID) {
 800182a:	2b02      	cmp	r3, #2
 800182c:	f200 808f 	bhi.w	800194e <CAN_setMotorCtrlVal+0x3ea>
 8001830:	e046      	b.n	80018c0 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800183a:	1e59      	subs	r1, r3, #1
 800183c:	481f      	ldr	r0, [pc, #124]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3304      	adds	r3, #4
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	4919      	ldr	r1, [pc, #100]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3308      	adds	r3, #8
 8001862:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	4914      	ldr	r1, [pc, #80]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	330a      	adds	r3, #10
 8001878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	490e      	ldr	r1, [pc, #56]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	330c      	adds	r3, #12
 800188e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	4809      	ldr	r0, [pc, #36]	@ (80018bc <CAN_setMotorCtrlVal+0x358>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4403      	add	r3, r0
 80018a2:	330e      	adds	r3, #14
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	79f8      	ldrb	r0, [r7, #7]
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	9100      	str	r1, [sp, #0]
 80018ae:	462b      	mov	r3, r5
 80018b0:	4622      	mov	r2, r4
 80018b2:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80018b6:	f7ff fded 	bl	8001494 <CAN_DriveMotor>
					break;
 80018ba:	e049      	b.n	8001950 <CAN_setMotorCtrlVal+0x3ec>
 80018bc:	200000fc 	.word	0x200000fc
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018c8:	1f59      	subs	r1, r3, #5
 80018ca:	4824      	ldr	r0, [pc, #144]	@ (800195c <CAN_setMotorCtrlVal+0x3f8>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3308      	adds	r3, #8
 80018d8:	887a      	ldrh	r2, [r7, #2]
 80018da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	491e      	ldr	r1, [pc, #120]	@ (800195c <CAN_setMotorCtrlVal+0x3f8>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3310      	adds	r3, #16
 80018f0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	4918      	ldr	r1, [pc, #96]	@ (800195c <CAN_setMotorCtrlVal+0x3f8>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3312      	adds	r3, #18
 8001906:	f9b3 5000 	ldrsh.w	r5, [r3]
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	4913      	ldr	r1, [pc, #76]	@ (800195c <CAN_setMotorCtrlVal+0x3f8>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3314      	adds	r3, #20
 800191c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	480d      	ldr	r0, [pc, #52]	@ (800195c <CAN_setMotorCtrlVal+0x3f8>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4403      	add	r3, r0
 8001930:	3316      	adds	r3, #22
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	79f8      	ldrb	r0, [r7, #7]
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	9100      	str	r1, [sp, #0]
 800193c:	462b      	mov	r3, r5
 800193e:	4622      	mov	r2, r4
 8001940:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001944:	f7ff fda6 	bl	8001494 <CAN_DriveMotor>
					break;
 8001948:	e002      	b.n	8001950 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800194e:	bf00      	nop
			break;
 8001950:	bf00      	nop
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bdb0      	pop	{r4, r5, r7, pc}
 800195a:	bf00      	nop
 800195c:	200000fc 	.word	0x200000fc

08001960 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	eef0 6a40 	vmov.f32	s13, s0
 8001972:	eeb0 7a60 	vmov.f32	s14, s1
 8001976:	eef0 7a41 	vmov.f32	s15, s2
 800197a:	4623      	mov	r3, r4
 800197c:	75fb      	strb	r3, [r7, #23]
 800197e:	4603      	mov	r3, r0
 8001980:	75bb      	strb	r3, [r7, #22]
 8001982:	460b      	mov	r3, r1
 8001984:	757b      	strb	r3, [r7, #21]
 8001986:	4613      	mov	r3, r2
 8001988:	827b      	strh	r3, [r7, #18]
 800198a:	edc7 6a01 	vstr	s13, [r7, #4]
 800198e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001992:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	3b01      	subs	r3, #1
 800199e:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80019a0:	7dbb      	ldrb	r3, [r7, #22]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	dc02      	bgt.n	80019ac <calcRPM_PID+0x4c>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc04      	bgt.n	80019b4 <calcRPM_PID+0x54>
 80019aa:	e00d      	b.n	80019c8 <calcRPM_PID+0x68>
 80019ac:	3b03      	subs	r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d80a      	bhi.n	80019c8 <calcRPM_PID+0x68>
 80019b2:	e004      	b.n	80019be <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80019b4:	7d7b      	ldrb	r3, [r7, #21]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019bc:	e009      	b.n	80019d2 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80019be:	7d7b      	ldrb	r3, [r7, #21]
 80019c0:	3303      	adds	r3, #3
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019c6:	e004      	b.n	80019d2 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019d0:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80019d2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80019d6:	7ffa      	ldrb	r2, [r7, #31]
 80019d8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019dc:	4c70      	ldr	r4, [pc, #448]	@ (8001ba0 <calcRPM_PID+0x240>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	4403      	add	r3, r0
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4423      	add	r3, r4
 80019ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f2:	7ffa      	ldrb	r2, [r7, #31]
 80019f4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019f8:	1ac9      	subs	r1, r1, r3
 80019fa:	4c6a      	ldr	r4, [pc, #424]	@ (8001ba4 <calcRPM_PID+0x244>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	4403      	add	r3, r0
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4423      	add	r3, r4
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001a10:	7ffa      	ldrb	r2, [r7, #31]
 8001a12:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a16:	4863      	ldr	r0, [pc, #396]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4403      	add	r3, r0
 8001a28:	3308      	adds	r3, #8
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	7ffa      	ldrb	r2, [r7, #31]
 8001a2e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a32:	4c5c      	ldr	r4, [pc, #368]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4403      	add	r3, r0
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4423      	add	r3, r4
 8001a44:	3304      	adds	r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	7ffa      	ldrb	r2, [r7, #31]
 8001a4a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a4e:	4419      	add	r1, r3
 8001a50:	4c54      	ldr	r4, [pc, #336]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4423      	add	r3, r4
 8001a62:	3308      	adds	r3, #8
 8001a64:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001a66:	7ffa      	ldrb	r2, [r7, #31]
 8001a68:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a6c:	484d      	ldr	r0, [pc, #308]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4403      	add	r3, r0
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	7ffa      	ldrb	r2, [r7, #31]
 8001a82:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a86:	4c46      	ldr	r4, [pc, #280]	@ (8001ba0 <calcRPM_PID+0x240>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	4403      	add	r3, r0
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4423      	add	r3, r4
 8001a98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a9c:	7ffa      	ldrb	r2, [r7, #31]
 8001a9e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001aa2:	1ac9      	subs	r1, r1, r3
 8001aa4:	4c3f      	ldr	r4, [pc, #252]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4423      	add	r3, r4
 8001ab6:	330c      	adds	r3, #12
 8001ab8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001aba:	7ffa      	ldrb	r2, [r7, #31]
 8001abc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001ac0:	4837      	ldr	r0, [pc, #220]	@ (8001ba0 <calcRPM_PID+0x240>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4403      	add	r3, r0
 8001ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ad6:	7ffa      	ldrb	r2, [r7, #31]
 8001ad8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001adc:	461c      	mov	r4, r3
 8001ade:	4831      	ldr	r0, [pc, #196]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4403      	add	r3, r0
 8001af0:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af6:	7ffa      	ldrb	r2, [r7, #31]
 8001af8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001afc:	4829      	ldr	r0, [pc, #164]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4403      	add	r3, r0
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b22:	7ffa      	ldrb	r2, [r7, #31]
 8001b24:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001b28:	481e      	ldr	r0, [pc, #120]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4403      	add	r3, r0
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b52:	7ffa      	ldrb	r2, [r7, #31]
 8001b54:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001b58:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <calcRPM_PID+0x244>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4403      	add	r3, r0
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001b88:	7dbb      	ldrb	r3, [r7, #22]
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f997 	bl	8001ec0 <applyCtrlLimit>
 8001b92:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	372c      	adds	r7, #44	@ 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000012c 	.word	0x2000012c
 8001ba4:	200001dc 	.word	0x200001dc

08001ba8 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b08b      	sub	sp, #44	@ 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4604      	mov	r4, r0
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	eef0 6a40 	vmov.f32	s13, s0
 8001bba:	eeb0 7a60 	vmov.f32	s14, s1
 8001bbe:	eef0 7a41 	vmov.f32	s15, s2
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	75fb      	strb	r3, [r7, #23]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	75bb      	strb	r3, [r7, #22]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	757b      	strb	r3, [r7, #21]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	827b      	strh	r3, [r7, #18]
 8001bd2:	edc7 6a01 	vstr	s13, [r7, #4]
 8001bd6:	ed87 7a02 	vstr	s14, [r7, #8]
 8001bda:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	dc02      	bgt.n	8001bfc <calcPosition_PID+0x54>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	dc04      	bgt.n	8001c04 <calcPosition_PID+0x5c>
 8001bfa:	e00d      	b.n	8001c18 <calcPosition_PID+0x70>
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d80a      	bhi.n	8001c18 <calcPosition_PID+0x70>
 8001c02:	e004      	b.n	8001c0e <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001c04:	7d7b      	ldrb	r3, [r7, #21]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001c0c:	e009      	b.n	8001c22 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001c0e:	7d7b      	ldrb	r3, [r7, #21]
 8001c10:	3303      	adds	r3, #3
 8001c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001c16:	e004      	b.n	8001c22 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8001c18:	7d7b      	ldrb	r3, [r7, #21]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001c20:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8001c22:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001c26:	7ffa      	ldrb	r2, [r7, #31]
 8001c28:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c2c:	4ca2      	ldr	r4, [pc, #648]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	4403      	add	r3, r0
 8001c3a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001c3e:	1acb      	subs	r3, r1, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db10      	blt.n	8001c66 <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8001c44:	8a79      	ldrh	r1, [r7, #18]
 8001c46:	7ffa      	ldrb	r2, [r7, #31]
 8001c48:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c4c:	4c9a      	ldr	r4, [pc, #616]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	4403      	add	r3, r0
 8001c5a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001c5e:	1acb      	subs	r3, r1, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	83bb      	strh	r3, [r7, #28]
 8001c64:	e012      	b.n	8001c8c <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8001c66:	8a79      	ldrh	r1, [r7, #18]
 8001c68:	7ffa      	ldrb	r2, [r7, #31]
 8001c6a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c6e:	4c92      	ldr	r4, [pc, #584]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	4403      	add	r3, r0
 8001c7c:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001c80:	1acb      	subs	r3, r1, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8001c8c:	7ffa      	ldrb	r2, [r7, #31]
 8001c8e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c92:	4889      	ldr	r0, [pc, #548]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db10      	blt.n	8001cd2 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8001cb0:	7ffa      	ldrb	r2, [r7, #31]
 8001cb2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001cb6:	4880      	ldr	r0, [pc, #512]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	837b      	strh	r3, [r7, #26]
 8001cd0:	e012      	b.n	8001cf8 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8001cd2:	7ffa      	ldrb	r2, [r7, #31]
 8001cd4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001cd8:	4877      	ldr	r0, [pc, #476]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8001cea:	8a7b      	ldrh	r3, [r7, #18]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8001cf8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001cfc:	7ffa      	ldrb	r2, [r7, #31]
 8001cfe:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d02:	4c6d      	ldr	r4, [pc, #436]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4403      	add	r3, r0
 8001d10:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001d14:	7ffa      	ldrb	r2, [r7, #31]
 8001d16:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d1a:	1ac9      	subs	r1, r1, r3
 8001d1c:	4c67      	ldr	r4, [pc, #412]	@ (8001ebc <calcPosition_PID+0x314>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	4403      	add	r3, r0
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4423      	add	r3, r4
 8001d2e:	3304      	adds	r3, #4
 8001d30:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001d32:	7ffa      	ldrb	r2, [r7, #31]
 8001d34:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d38:	4860      	ldr	r0, [pc, #384]	@ (8001ebc <calcPosition_PID+0x314>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4403      	add	r3, r0
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	7ffa      	ldrb	r2, [r7, #31]
 8001d50:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d54:	4c59      	ldr	r4, [pc, #356]	@ (8001ebc <calcPosition_PID+0x314>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	4403      	add	r3, r0
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4423      	add	r3, r4
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	7ffa      	ldrb	r2, [r7, #31]
 8001d6c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d70:	4419      	add	r1, r3
 8001d72:	4c52      	ldr	r4, [pc, #328]	@ (8001ebc <calcPosition_PID+0x314>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4403      	add	r3, r0
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4423      	add	r3, r4
 8001d84:	3308      	adds	r3, #8
 8001d86:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8001d88:	7ffa      	ldrb	r2, [r7, #31]
 8001d8a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d8e:	484b      	ldr	r0, [pc, #300]	@ (8001ebc <calcPosition_PID+0x314>)
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	7ffa      	ldrb	r2, [r7, #31]
 8001da4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001da8:	4c43      	ldr	r4, [pc, #268]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	4403      	add	r3, r0
 8001db6:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001dba:	7ffa      	ldrb	r2, [r7, #31]
 8001dbc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001dc0:	1ac9      	subs	r1, r1, r3
 8001dc2:	4c3e      	ldr	r4, [pc, #248]	@ (8001ebc <calcPosition_PID+0x314>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	4403      	add	r3, r0
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	4423      	add	r3, r4
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8001dd8:	7ffa      	ldrb	r2, [r7, #31]
 8001dda:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001dde:	4836      	ldr	r0, [pc, #216]	@ (8001eb8 <calcPosition_PID+0x310>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001df0:	7ffa      	ldrb	r2, [r7, #31]
 8001df2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001df6:	461c      	mov	r4, r3
 8001df8:	4830      	ldr	r0, [pc, #192]	@ (8001ebc <calcPosition_PID+0x314>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4403      	add	r3, r0
 8001e0a:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001e0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e10:	7ffa      	ldrb	r2, [r7, #31]
 8001e12:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e16:	4829      	ldr	r0, [pc, #164]	@ (8001ebc <calcPosition_PID+0x314>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4403      	add	r3, r0
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e3c:	7ffa      	ldrb	r2, [r7, #31]
 8001e3e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e42:	481e      	ldr	r0, [pc, #120]	@ (8001ebc <calcPosition_PID+0x314>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4403      	add	r3, r0
 8001e54:	3308      	adds	r3, #8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e68:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e6c:	7ffa      	ldrb	r2, [r7, #31]
 8001e6e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e72:	4812      	ldr	r0, [pc, #72]	@ (8001ebc <calcPosition_PID+0x314>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4403      	add	r3, r0
 8001e84:	330c      	adds	r3, #12
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9c:	ee17 3a90 	vmov	r3, s15
 8001ea0:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001ea2:	7dbb      	ldrb	r3, [r7, #22]
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f80a 	bl	8001ec0 <applyCtrlLimit>
 8001eac:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8001eae:	6a3b      	ldr	r3, [r7, #32]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	372c      	adds	r7, #44	@ 0x2c
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	2000012c 	.word	0x2000012c
 8001ebc:	200001dc 	.word	0x200001dc

08001ec0 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d009      	beq.n	8001ee6 <applyCtrlLimit+0x26>
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	dc29      	bgt.n	8001f2a <applyCtrlLimit+0x6a>
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	dc02      	bgt.n	8001ee0 <applyCtrlLimit+0x20>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dc03      	bgt.n	8001ee6 <applyCtrlLimit+0x26>
 8001ede:	e024      	b.n	8001f2a <applyCtrlLimit+0x6a>
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d00f      	beq.n	8001f04 <applyCtrlLimit+0x44>
 8001ee4:	e021      	b.n	8001f2a <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eec:	dd03      	ble.n	8001ef6 <applyCtrlLimit+0x36>
				val = 16384;
 8001eee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ef2:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001ef4:	e016      	b.n	8001f24 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001efc:	da12      	bge.n	8001f24 <applyCtrlLimit+0x64>
				val = -16384;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <applyCtrlLimit+0x78>)
 8001f00:	603b      	str	r3, [r7, #0]
			break;
 8001f02:	e00f      	b.n	8001f24 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	dd03      	ble.n	8001f16 <applyCtrlLimit+0x56>
				val = 25000;
 8001f0e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001f12:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001f14:	e008      	b.n	8001f28 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <applyCtrlLimit+0x7c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	da04      	bge.n	8001f28 <applyCtrlLimit+0x68>
				val = -25000;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <applyCtrlLimit+0x7c>)
 8001f20:	603b      	str	r3, [r7, #0]
			break;
 8001f22:	e001      	b.n	8001f28 <applyCtrlLimit+0x68>
			break;
 8001f24:	bf00      	nop
 8001f26:	e000      	b.n	8001f2a <applyCtrlLimit+0x6a>
			break;
 8001f28:	bf00      	nop
		}
	}
	return val;
 8001f2a:	683b      	ldr	r3, [r7, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	ffffc000 	.word	0xffffc000
 8001f3c:	ffff9e58 	.word	0xffff9e58

08001f40 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4604      	mov	r4, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	eef0 6a40 	vmov.f32	s13, s0
 8001f52:	eeb0 7a60 	vmov.f32	s14, s1
 8001f56:	eef0 7a41 	vmov.f32	s15, s2
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	75fb      	strb	r3, [r7, #23]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75bb      	strb	r3, [r7, #22]
 8001f62:	460b      	mov	r3, r1
 8001f64:	757b      	strb	r3, [r7, #21]
 8001f66:	4613      	mov	r3, r2
 8001f68:	827b      	strh	r3, [r7, #18]
 8001f6a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f6e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f72:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001f76:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f86:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001f8a:	7db9      	ldrb	r1, [r7, #22]
 8001f8c:	7df8      	ldrb	r0, [r7, #23]
 8001f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8001f92:	eef0 0a47 	vmov.f32	s1, s14
 8001f96:	eeb0 1a67 	vmov.f32	s2, s15
 8001f9a:	f7ff fce1 	bl	8001960 <calcRPM_PID>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001fa6:	7db9      	ldrb	r1, [r7, #22]
 8001fa8:	7df8      	ldrb	r0, [r7, #23]
 8001faa:	f7ff fadb 	bl	8001564 <CAN_setMotorCtrlVal>
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	4608      	mov	r0, r1
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	eef0 6a40 	vmov.f32	s13, s0
 8001fc8:	eeb0 7a60 	vmov.f32	s14, s1
 8001fcc:	eef0 7a41 	vmov.f32	s15, s2
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	75fb      	strb	r3, [r7, #23]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75bb      	strb	r3, [r7, #22]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	757b      	strb	r3, [r7, #21]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	827b      	strh	r3, [r7, #18]
 8001fe0:	edc7 6a01 	vstr	s13, [r7, #4]
 8001fe4:	ed87 7a02 	vstr	s14, [r7, #8]
 8001fe8:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8001fec:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ffc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002000:	7db9      	ldrb	r1, [r7, #22]
 8002002:	7df8      	ldrb	r0, [r7, #23]
 8002004:	eeb0 0a66 	vmov.f32	s0, s13
 8002008:	eef0 0a47 	vmov.f32	s1, s14
 800200c:	eeb0 1a67 	vmov.f32	s2, s15
 8002010:	f7ff fdca 	bl	8001ba8 <calcPosition_PID>
 8002014:	4603      	mov	r3, r0
 8002016:	b21b      	sxth	r3, r3
 8002018:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800201c:	7db9      	ldrb	r1, [r7, #22]
 800201e:	7df8      	ldrb	r0, [r7, #23]
 8002020:	f7ff faa0 	bl	8001564 <CAN_setMotorCtrlVal>
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <getMotorRPM>:
		}
	}
	return -1;
}

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	460b      	mov	r3, r1
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	4613      	mov	r3, r2
 800203c:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	2b02      	cmp	r3, #2
 8002042:	dc02      	bgt.n	800204a <getMotorRPM+0x1e>
 8002044:	2b00      	cmp	r3, #0
 8002046:	dc04      	bgt.n	8002052 <getMotorRPM+0x26>
 8002048:	e038      	b.n	80020bc <getMotorRPM+0x90>
 800204a:	3b03      	subs	r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d835      	bhi.n	80020bc <getMotorRPM+0x90>
 8002050:	e018      	b.n	8002084 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002052:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002056:	2b00      	cmp	r3, #0
 8002058:	dd2d      	ble.n	80020b6 <getMotorRPM+0x8a>
 800205a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800205e:	2b08      	cmp	r3, #8
 8002060:	dc29      	bgt.n	80020b6 <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800206a:	1e59      	subs	r1, r3, #1
 800206c:	4817      	ldr	r0, [pc, #92]	@ (80020cc <getMotorRPM+0xa0>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	440b      	add	r3, r1
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4403      	add	r3, r0
 800207e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002082:	e01d      	b.n	80020c0 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002084:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002088:	2b00      	cmp	r3, #0
 800208a:	dd16      	ble.n	80020ba <getMotorRPM+0x8e>
 800208c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002090:	2b07      	cmp	r3, #7
 8002092:	dc12      	bgt.n	80020ba <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800209c:	1cd9      	adds	r1, r3, #3
 800209e:	480b      	ldr	r0, [pc, #44]	@ (80020cc <getMotorRPM+0xa0>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4403      	add	r3, r0
 80020b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b4:	e004      	b.n	80020c0 <getMotorRPM+0x94>
			break;
 80020b6:	bf00      	nop
 80020b8:	e000      	b.n	80020bc <getMotorRPM+0x90>
			}
			break;
 80020ba:	bf00      	nop
		}
	}
	return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	2000012c 	.word	0x2000012c

080020d0 <getMotorTemperature>:
		}
	}
	return -1;
}

uint8_t getMotorTemperature(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	460b      	mov	r3, r1
 80020dc:	71bb      	strb	r3, [r7, #6]
 80020de:	4613      	mov	r3, r2
 80020e0:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	dc02      	bgt.n	80020ee <getMotorTemperature+0x1e>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	dc04      	bgt.n	80020f6 <getMotorTemperature+0x26>
 80020ec:	e036      	b.n	800215c <getMotorTemperature+0x8c>
 80020ee:	3b03      	subs	r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d833      	bhi.n	800215c <getMotorTemperature+0x8c>
 80020f4:	e017      	b.n	8002126 <getMotorTemperature+0x56>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 80020f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	dd2b      	ble.n	8002156 <getMotorTemperature+0x86>
 80020fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002102:	2b08      	cmp	r3, #8
 8002104:	dc27      	bgt.n	8002156 <getMotorTemperature+0x86>
				return motorFeedback[bus - 1][motorID - 1].temperate;
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	1e5a      	subs	r2, r3, #1
 800210a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800210e:	1e59      	subs	r1, r3, #1
 8002110:	4816      	ldr	r0, [pc, #88]	@ (800216c <getMotorTemperature+0x9c>)
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	440b      	add	r3, r1
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4403      	add	r3, r0
 8002122:	799b      	ldrb	r3, [r3, #6]
 8002124:	e01b      	b.n	800215e <getMotorTemperature+0x8e>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002126:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800212a:	2b00      	cmp	r3, #0
 800212c:	dd15      	ble.n	800215a <getMotorTemperature+0x8a>
 800212e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002132:	2b07      	cmp	r3, #7
 8002134:	dc11      	bgt.n	800215a <getMotorTemperature+0x8a>
				return motorFeedback[bus - 1][motorID + 3].temperate;
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800213e:	1cd9      	adds	r1, r3, #3
 8002140:	480a      	ldr	r0, [pc, #40]	@ (800216c <getMotorTemperature+0x9c>)
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	440b      	add	r3, r1
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4403      	add	r3, r0
 8002152:	799b      	ldrb	r3, [r3, #6]
 8002154:	e003      	b.n	800215e <getMotorTemperature+0x8e>
			break;
 8002156:	bf00      	nop
 8002158:	e000      	b.n	800215c <getMotorTemperature+0x8c>
			}
			break;
 800215a:	bf00      	nop
		}
	}
	return -1;
 800215c:	23ff      	movs	r3, #255	@ 0xff
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000012c 	.word	0x2000012c

08002170 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8002174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002178:	4905      	ldr	r1, [pc, #20]	@ (8002190 <usart_Init+0x20>)
 800217a:	4806      	ldr	r0, [pc, #24]	@ (8002194 <usart_Init+0x24>)
 800217c:	f007 fb38 	bl	80097f0 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002184:	4904      	ldr	r1, [pc, #16]	@ (8002198 <usart_Init+0x28>)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <usart_Init+0x2c>)
 8002188:	f007 fb32 	bl	80097f0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000033c 	.word	0x2000033c
 8002194:	20000934 	.word	0x20000934
 8002198:	2000043c 	.word	0x2000043c
 800219c:	200009bc 	.word	0x200009bc

080021a0 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80021a0:	b40f      	push	{r0, r1, r2, r3}
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <usart_printf+0x3c>)
 80021ac:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <usart_printf+0x3c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	480a      	ldr	r0, [pc, #40]	@ (80021e0 <usart_printf+0x40>)
 80021b6:	f00b fc3d 	bl	800da34 <vsiprintf>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <usart_printf+0x44>)
 80021c0:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <usart_printf+0x44>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4905      	ldr	r1, [pc, #20]	@ (80021e0 <usart_printf+0x40>)
 80021ca:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <usart_printf+0x48>)
 80021cc:	f007 fa92 	bl	80096f4 <HAL_UART_Transmit_DMA>
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021d8:	b004      	add	sp, #16
 80021da:	4770      	bx	lr
 80021dc:	20000568 	.word	0x20000568
 80021e0:	2000056c 	.word	0x2000056c
 80021e4:	2000066c 	.word	0x2000066c
 80021e8:	20000934 	.word	0x20000934

080021ec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	@ 0x28
 8002208:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800220a:	2301      	movs	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002212:	2301      	movs	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800222e:	463b      	mov	r3, r7
 8002230:	4619      	mov	r1, r3
 8002232:	480f      	ldr	r0, [pc, #60]	@ (8002270 <can_filter_init+0x6c>)
 8002234:	f003 f8be 	bl	80053b4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002238:	480d      	ldr	r0, [pc, #52]	@ (8002270 <can_filter_init+0x6c>)
 800223a:	f003 f99b 	bl	8005574 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800223e:	2102      	movs	r1, #2
 8002240:	480b      	ldr	r0, [pc, #44]	@ (8002270 <can_filter_init+0x6c>)
 8002242:	f003 fbc8 	bl	80059d6 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8002246:	230e      	movs	r3, #14
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 800224a:	230e      	movs	r3, #14
 800224c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4808      	ldr	r0, [pc, #32]	@ (8002274 <can_filter_init+0x70>)
 8002254:	f003 f8ae 	bl	80053b4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8002258:	4806      	ldr	r0, [pc, #24]	@ (8002274 <can_filter_init+0x70>)
 800225a:	f003 f98b 	bl	8005574 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800225e:	2102      	movs	r1, #2
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <can_filter_init+0x70>)
 8002262:	f003 fbb8 	bl	80059d6 <HAL_CAN_ActivateNotification>
}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	@ 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200006d0 	.word	0x200006d0
 8002274:	200006f8 	.word	0x200006f8

08002278 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8002282:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <imu_pwm_set+0x1c>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40014400 	.word	0x40014400

08002298 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80022a6:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <RC_init+0xac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <RC_init+0xac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b4:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <RC_init+0xac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <RC_init+0xac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0210 	orr.w	r2, r2, #16
 80022c4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80022c6:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <RC_init+0xb0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <RC_init+0xb0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80022d6:	e007      	b.n	80022e8 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <RC_init+0xb0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <RC_init+0xb0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80022e8:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <RC_init+0xb0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <RC_init+0xb0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a14      	ldr	r2, [pc, #80]	@ (800234c <RC_init+0xb4>)
 80022fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <RC_init+0xb0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <RC_init+0xb0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <RC_init+0xb0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <RC_init+0xb0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <RC_init+0xb0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002324:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <RC_init+0xb0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <RC_init+0xb0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000978 	.word	0x20000978
 8002348:	20000ac0 	.word	0x20000ac0
 800234c:	40004804 	.word	0x40004804

08002350 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8002358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800235c:	f008 fca6 	bl	800acac <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002360:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002404 <imu_temp_control_task+0xb4>
 8002364:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002408 <imu_temp_control_task+0xb8>
 8002368:	4a28      	ldr	r2, [pc, #160]	@ (800240c <imu_temp_control_task+0xbc>)
 800236a:	2100      	movs	r1, #0
 800236c:	4828      	ldr	r0, [pc, #160]	@ (8002410 <imu_temp_control_task+0xc0>)
 800236e:	f001 fa9d 	bl	80038ac <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <imu_temp_control_task+0xc4>)
 8002374:	2210      	movs	r2, #16
 8002376:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002378:	4826      	ldr	r0, [pc, #152]	@ (8002414 <imu_temp_control_task+0xc4>)
 800237a:	f005 fed0 	bl	800811e <HAL_SPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8002384:	f001 fa8c 	bl	80038a0 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8002388:	2000      	movs	r0, #0
 800238a:	f009 fdad 	bl	800bee8 <pcTaskGetName>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f009 fe3d 	bl	800c010 <xTaskGetHandle>
 8002396:	4603      	mov	r3, r0
 8002398:	4a1f      	ldr	r2, [pc, #124]	@ (8002418 <imu_temp_control_task+0xc8>)
 800239a:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 800239c:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <imu_temp_control_task+0xcc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80023a2:	bf00      	nop
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023a8:	2001      	movs	r0, #1
 80023aa:	f00a fa5d 	bl	800c868 <ulTaskNotifyTake>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d1f7      	bne.n	80023a4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80023b4:	f7fe fd66 	bl	8000e84 <IMU_get_temp>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002420 <imu_temp_control_task+0xd0>
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	4812      	ldr	r0, [pc, #72]	@ (8002410 <imu_temp_control_task+0xc0>)
 80023c6:	f001 fac8 	bl	800395a <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <imu_temp_control_task+0xc0>)
 80023cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d503      	bpl.n	80023e2 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <imu_temp_control_task+0xc0>)
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <imu_temp_control_task+0xc0>)
 80023e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ec:	ee17 3a90 	vmov	r3, s15
 80023f0:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 80023f2:	89fb      	ldrh	r3, [r7, #14]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff3f 	bl	8002278 <imu_pwm_set>
        osDelay(5);
 80023fa:	2005      	movs	r0, #5
 80023fc:	f008 fc56 	bl	800acac <osDelay>
    {
 8002400:	e7cf      	b.n	80023a2 <imu_temp_control_task+0x52>
 8002402:	bf00      	nop
 8002404:	45898000 	.word	0x45898000
 8002408:	458ca000 	.word	0x458ca000
 800240c:	0800e494 	.word	0x0800e494
 8002410:	20000678 	.word	0x20000678
 8002414:	20000774 	.word	0x20000774
 8002418:	20000670 	.word	0x20000670
 800241c:	20000674 	.word	0x20000674
 8002420:	42200000 	.word	0x42200000

08002424 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800242e:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_GPIO_EXTI_Callback+0x54>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	429a      	cmp	r2, r3
 8002436:	d11b      	bne.n	8002470 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_GPIO_EXTI_Callback+0x58>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002442:	f00a f983 	bl	800c74c <xTaskGetSchedulerState>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d011      	beq.n	8002470 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <HAL_GPIO_EXTI_Callback+0x5c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <HAL_GPIO_EXTI_Callback+0x60>)
 8002452:	4618      	mov	r0, r3
 8002454:	f00a fa54 	bl	800c900 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_GPIO_EXTI_Callback+0x60>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_EXTI_Callback+0x4c>
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_GPIO_EXTI_Callback+0x64>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000000e 	.word	0x2000000e
 800247c:	20000674 	.word	0x20000674
 8002480:	20000670 	.word	0x20000670
 8002484:	200006c0 	.word	0x200006c0
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	2206      	movs	r2, #6
 800249e:	4619      	mov	r1, r3
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f847 	bl	8002534 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80024a6:	7a7b      	ldrb	r3, [r7, #9]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80024b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002530 <ist8310_read_mag+0xa4>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	b21b      	sxth	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 80024e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002530 <ist8310_read_mag+0xa4>
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 80024fc:	7b7b      	ldrb	r3, [r7, #13]
 80024fe:	b21b      	sxth	r3, r3
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b21a      	sxth	r2, r3
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800250c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3308      	adds	r3, #8
 800251c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002530 <ist8310_read_mag+0xa4>
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	edc3 7a00 	vstr	s15, [r3]
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	3e99999a 	.word	0x3e99999a

08002534 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af04      	add	r7, sp, #16
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	4613      	mov	r3, r2
 8002542:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	b29a      	uxth	r2, r3
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	b29b      	uxth	r3, r3
 800254c:	210a      	movs	r1, #10
 800254e:	9102      	str	r1, [sp, #8]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	211c      	movs	r1, #28
 800255a:	4803      	ldr	r0, [pc, #12]	@ (8002568 <ist8310_IIC_read_muli_reg+0x34>)
 800255c:	f004 fcb6 	bl	8006ecc <HAL_I2C_Mem_Read>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000720 	.word	0x20000720

0800256c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002570:	f002 fdb2 	bl	80050d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002574:	f000 f868 	bl	8002648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002578:	f000 fcea 	bl	8002f50 <MX_GPIO_Init>
  MX_DMA_Init();
 800257c:	f000 fc9a 	bl	8002eb4 <MX_DMA_Init>
  MX_CAN1_Init();
 8002580:	f000 f8ce 	bl	8002720 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002584:	f000 f902 	bl	800278c <MX_CAN2_Init>
  MX_SPI1_Init();
 8002588:	f000 f964 	bl	8002854 <MX_SPI1_Init>
  MX_TIM4_Init();
 800258c:	f000 fa40 	bl	8002a10 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002590:	f000 fc10 	bl	8002db4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002594:	f000 fc64 	bl	8002e60 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002598:	f000 f992 	bl	80028c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800259c:	f000 fb20 	bl	8002be0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80025a0:	f000 fc32 	bl	8002e08 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80025a4:	f000 fbb8 	bl	8002d18 <MX_TIM10_Init>
  MX_I2C3_Init();
 80025a8:	f000 f926 	bl	80027f8 <MX_I2C3_Init>
  MX_TIM5_Init();
 80025ac:	f000 faa8 	bl	8002b00 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 80025b0:	f7ff fe28 	bl	8002204 <can_filter_init>
  remote_control_init();
 80025b4:	f001 fc5a 	bl	8003e6c <remote_control_init>
  usart_Init();
 80025b8:	f7ff fdda 	bl	8002170 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 80025bc:	f001 fc64 	bl	8003e88 <get_remote_control_point>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <main+0xa8>)
 80025c4:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025c6:	f008 fa95 	bl	800aaf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <main+0xac>)
 80025cc:	2100      	movs	r1, #0
 80025ce:	4813      	ldr	r0, [pc, #76]	@ (800261c <main+0xb0>)
 80025d0:	f008 fada 	bl	800ab88 <osThreadNew>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <main+0xb4>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80025da:	4a12      	ldr	r2, [pc, #72]	@ (8002624 <main+0xb8>)
 80025dc:	2100      	movs	r1, #0
 80025de:	4812      	ldr	r0, [pc, #72]	@ (8002628 <main+0xbc>)
 80025e0:	f008 fad2 	bl	800ab88 <osThreadNew>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a11      	ldr	r2, [pc, #68]	@ (800262c <main+0xc0>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80025ea:	4a11      	ldr	r2, [pc, #68]	@ (8002630 <main+0xc4>)
 80025ec:	2100      	movs	r1, #0
 80025ee:	4811      	ldr	r0, [pc, #68]	@ (8002634 <main+0xc8>)
 80025f0:	f008 faca 	bl	800ab88 <osThreadNew>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <main+0xcc>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80025fa:	4a10      	ldr	r2, [pc, #64]	@ (800263c <main+0xd0>)
 80025fc:	2100      	movs	r1, #0
 80025fe:	4810      	ldr	r0, [pc, #64]	@ (8002640 <main+0xd4>)
 8002600:	f008 fac2 	bl	800ab88 <osThreadNew>
 8002604:	4603      	mov	r3, r0
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <main+0xd8>)
 8002608:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800260a:	f008 fa97 	bl	800ab3c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800260e:	bf00      	nop
 8002610:	e7fd      	b.n	800260e <main+0xa2>
 8002612:	bf00      	nop
 8002614:	20000bf0 	.word	0x20000bf0
 8002618:	0800e4a0 	.word	0x0800e4a0
 800261c:	08003391 	.word	0x08003391
 8002620:	20000be0 	.word	0x20000be0
 8002624:	0800e4c4 	.word	0x0800e4c4
 8002628:	080033a1 	.word	0x080033a1
 800262c:	20000be4 	.word	0x20000be4
 8002630:	0800e4e8 	.word	0x0800e4e8
 8002634:	08002351 	.word	0x08002351
 8002638:	20000be8 	.word	0x20000be8
 800263c:	0800e50c 	.word	0x0800e50c
 8002640:	08003891 	.word	0x08003891
 8002644:	20000bec 	.word	0x20000bec

08002648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b094      	sub	sp, #80	@ 0x50
 800264c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	2230      	movs	r2, #48	@ 0x30
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f00b f9f6 	bl	800da48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <SystemClock_Config+0xd0>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	4a28      	ldr	r2, [pc, #160]	@ (8002718 <SystemClock_Config+0xd0>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	@ 0x40
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <SystemClock_Config+0xd0>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	4b23      	ldr	r3, [pc, #140]	@ (800271c <SystemClock_Config+0xd4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a22      	ldr	r2, [pc, #136]	@ (800271c <SystemClock_Config+0xd4>)
 8002692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b20      	ldr	r3, [pc, #128]	@ (800271c <SystemClock_Config+0xd4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ae:	2302      	movs	r3, #2
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80026b8:	2306      	movs	r3, #6
 80026ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026bc:	23a8      	movs	r3, #168	@ 0xa8
 80026be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026c4:	2304      	movs	r3, #4
 80026c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f005 f8a7 	bl	8007820 <HAL_RCC_OscConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026d8:	f001 f8e2 	bl	80038a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026dc:	230f      	movs	r3, #15
 80026de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026e0:	2302      	movs	r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	2105      	movs	r1, #5
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fb08 	bl	8007d10 <HAL_RCC_ClockConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002706:	f001 f8cb 	bl	80038a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800270a:	f005 fbe7 	bl	8007edc <HAL_RCC_EnableCSS>
}
 800270e:	bf00      	nop
 8002710:	3750      	adds	r7, #80	@ 0x50
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40007000 	.word	0x40007000

08002720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002724:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <MX_CAN1_Init+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800272a:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <MX_CAN1_Init+0x64>)
 800272c:	2203      	movs	r2, #3
 800272e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002730:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002736:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800273c:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <MX_CAN1_Init+0x64>)
 800273e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002744:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002746:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800274a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <MX_CAN1_Init+0x64>)
 800274e:	2200      	movs	r2, #0
 8002750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002754:	2200      	movs	r2, #0
 8002756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <MX_CAN1_Init+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002764:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <MX_CAN1_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002770:	4804      	ldr	r0, [pc, #16]	@ (8002784 <MX_CAN1_Init+0x64>)
 8002772:	f002 fd23 	bl	80051bc <HAL_CAN_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800277c:	f001 f890 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200006d0 	.word	0x200006d0
 8002788:	40006400 	.word	0x40006400

0800278c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <MX_CAN2_Init+0x64>)
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <MX_CAN2_Init+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002796:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_CAN2_Init+0x64>)
 8002798:	2203      	movs	r2, #3
 800279a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_CAN2_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027aa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80027ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027b2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80027b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80027be:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80027d0:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <MX_CAN2_Init+0x64>)
 80027de:	f002 fced 	bl	80051bc <HAL_CAN_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80027e8:	f001 f85a 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200006f8 	.word	0x200006f8
 80027f4:	40006800 	.word	0x40006800

080027f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <MX_I2C3_Init+0x50>)
 80027fe:	4a13      	ldr	r2, [pc, #76]	@ (800284c <MX_I2C3_Init+0x54>)
 8002800:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002804:	4a12      	ldr	r2, [pc, #72]	@ (8002850 <MX_I2C3_Init+0x58>)
 8002806:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <MX_I2C3_Init+0x50>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800281a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <MX_I2C3_Init+0x50>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <MX_I2C3_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <MX_I2C3_Init+0x50>)
 8002836:	f004 fa05 	bl	8006c44 <HAL_I2C_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002840:	f001 f82e 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000720 	.word	0x20000720
 800284c:	40005c00 	.word	0x40005c00
 8002850:	00061a80 	.word	0x00061a80

08002854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <MX_SPI1_Init+0x64>)
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <MX_SPI1_Init+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002866:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <MX_SPI1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002874:	2202      	movs	r2, #2
 8002876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <MX_SPI1_Init+0x64>)
 800287a:	2201      	movs	r2, #1
 800287c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002886:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002888:	2238      	movs	r2, #56	@ 0x38
 800288a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <MX_SPI1_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <MX_SPI1_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <MX_SPI1_Init+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <MX_SPI1_Init+0x64>)
 80028a0:	220a      	movs	r2, #10
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	@ (80028b8 <MX_SPI1_Init+0x64>)
 80028a6:	f005 fc3a 	bl	800811e <HAL_SPI_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028b0:	f000 fff6 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000774 	.word	0x20000774
 80028bc:	40013000 	.word	0x40013000

080028c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b092      	sub	sp, #72	@ 0x48
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2220      	movs	r2, #32
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00b f8ac 	bl	800da48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028f0:	4b45      	ldr	r3, [pc, #276]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80028f2:	4a46      	ldr	r2, [pc, #280]	@ (8002a0c <MX_TIM1_Init+0x14c>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80028f6:	4b44      	ldr	r3, [pc, #272]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80028f8:	2253      	movs	r2, #83	@ 0x53
 80028fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fc:	4b42      	ldr	r3, [pc, #264]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <MX_TIM1_Init+0x148>)
 8002904:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a08 <MX_TIM1_Init+0x148>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002910:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <MX_TIM1_Init+0x148>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <MX_TIM1_Init+0x148>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800291c:	483a      	ldr	r0, [pc, #232]	@ (8002a08 <MX_TIM1_Init+0x148>)
 800291e:	f005 ffab 	bl	8008878 <HAL_TIM_PWM_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002928:	f000 ffba 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002934:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002938:	4619      	mov	r1, r3
 800293a:	4833      	ldr	r0, [pc, #204]	@ (8002a08 <MX_TIM1_Init+0x148>)
 800293c:	f006 fdbe 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002946:	f000 ffab 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294a:	2360      	movs	r3, #96	@ 0x60
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	4826      	ldr	r0, [pc, #152]	@ (8002a08 <MX_TIM1_Init+0x148>)
 8002970:	f006 f90a 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800297a:	f000 ff91 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800297e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002982:	2204      	movs	r2, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4820      	ldr	r0, [pc, #128]	@ (8002a08 <MX_TIM1_Init+0x148>)
 8002988:	f006 f8fe 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002992:	f000 ff85 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299a:	2208      	movs	r2, #8
 800299c:	4619      	mov	r1, r3
 800299e:	481a      	ldr	r0, [pc, #104]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80029a0:	f006 f8f2 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80029aa:	f000 ff79 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b2:	220c      	movs	r2, #12
 80029b4:	4619      	mov	r1, r3
 80029b6:	4814      	ldr	r0, [pc, #80]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80029b8:	f006 f8e6 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80029c2:	f000 ff6d 	bl	80038a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4807      	ldr	r0, [pc, #28]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80029ea:	f006 fde3 	bl	80095b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80029f4:	f000 ff54 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029f8:	4803      	ldr	r0, [pc, #12]	@ (8002a08 <MX_TIM1_Init+0x148>)
 80029fa:	f001 ff73 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 80029fe:	bf00      	nop
 8002a00:	3748      	adds	r7, #72	@ 0x48
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200007cc 	.word	0x200007cc
 8002a0c:	40010000 	.word	0x40010000

08002a10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a42:	4a2e      	ldr	r2, [pc, #184]	@ (8002afc <MX_TIM4_Init+0xec>)
 8002a44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a54:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002a58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a66:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a68:	f005 fe4e 	bl	8008708 <HAL_TIM_Base_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a72:	f000 ff15 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a80:	4619      	mov	r1, r3
 8002a82:	481d      	ldr	r0, [pc, #116]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a84:	f006 f942 	bl	8008d0c <HAL_TIM_ConfigClockSource>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002a8e:	f000 ff07 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a92:	4819      	ldr	r0, [pc, #100]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002a94:	f005 fef0 	bl	8008878 <HAL_TIM_PWM_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002a9e:	f000 feff 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4811      	ldr	r0, [pc, #68]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002ab2:	f006 fd03 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002abc:	f000 fef0 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac0:	2360      	movs	r3, #96	@ 0x60
 8002ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002ac4:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002ada:	f006 f855 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002ae4:	f000 fedc 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ae8:	4803      	ldr	r0, [pc, #12]	@ (8002af8 <MX_TIM4_Init+0xe8>)
 8002aea:	f001 fefb 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8002aee:	bf00      	nop
 8002af0:	3738      	adds	r7, #56	@ 0x38
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000814 	.word	0x20000814
 8002afc:	40000800 	.word	0x40000800

08002b00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	615a      	str	r2, [r3, #20]
 8002b20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b22:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <MX_TIM5_Init+0xdc>)
 8002b26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8002b28:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b2a:	222a      	movs	r2, #42	@ 0x2a
 8002b2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002b34:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b36:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b42:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b48:	4823      	ldr	r0, [pc, #140]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b4a:	f005 fe95 	bl	8008878 <HAL_TIM_PWM_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002b54:	f000 fea4 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	4619      	mov	r1, r3
 8002b66:	481c      	ldr	r0, [pc, #112]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b68:	f006 fca8 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002b72:	f000 fe95 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b76:	2360      	movs	r3, #96	@ 0x60
 8002b78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4812      	ldr	r0, [pc, #72]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002b8e:	f005 fffb 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002b98:	f000 fe82 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480d      	ldr	r0, [pc, #52]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002ba4:	f005 fff0 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002bae:	f000 fe77 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4807      	ldr	r0, [pc, #28]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002bba:	f005 ffe5 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002bc4:	f000 fe6c 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002bc8:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <MX_TIM5_Init+0xd8>)
 8002bca:	f001 fe8b 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000085c 	.word	0x2000085c
 8002bdc:	40000c00 	.word	0x40000c00

08002be0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b092      	sub	sp, #72	@ 0x48
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2220      	movs	r2, #32
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00a ff1c 	bl	800da48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c10:	4b3f      	ldr	r3, [pc, #252]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c12:	4a40      	ldr	r2, [pc, #256]	@ (8002d14 <MX_TIM8_Init+0x134>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002c16:	4b3e      	ldr	r3, [pc, #248]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c18:	2253      	movs	r2, #83	@ 0x53
 8002c1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002c22:	4b3b      	ldr	r3, [pc, #236]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c24:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002c28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c30:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c36:	4b36      	ldr	r3, [pc, #216]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002c3c:	4834      	ldr	r0, [pc, #208]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c3e:	f005 fe1b 	bl	8008878 <HAL_TIM_PWM_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002c48:	f000 fe2a 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c58:	4619      	mov	r1, r3
 8002c5a:	482d      	ldr	r0, [pc, #180]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c5c:	f006 fc2e 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002c66:	f000 fe1b 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6a:	2360      	movs	r3, #96	@ 0x60
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c76:	2300      	movs	r3, #0
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4820      	ldr	r0, [pc, #128]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002c90:	f005 ff7a 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002c9a:	f000 fe01 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	481a      	ldr	r0, [pc, #104]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002ca8:	f005 ff6e 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002cb2:	f000 fdf5 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4814      	ldr	r0, [pc, #80]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002cc0:	f005 ff62 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002cca:	f000 fde9 	bl	80038a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4807      	ldr	r0, [pc, #28]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002cf2:	f006 fc5f 	bl	80095b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002cfc:	f000 fdd0 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d00:	4803      	ldr	r0, [pc, #12]	@ (8002d10 <MX_TIM8_Init+0x130>)
 8002d02:	f001 fdef 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8002d06:	bf00      	nop
 8002d08:	3748      	adds	r7, #72	@ 0x48
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200008a4 	.word	0x200008a4
 8002d14:	40010400 	.word	0x40010400

08002d18 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d32:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <MX_TIM10_Init+0x98>)
 8002d34:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002d36:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002d42:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d44:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002d48:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4a:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d50:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d56:	4815      	ldr	r0, [pc, #84]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d58:	f005 fcd6 	bl	8008708 <HAL_TIM_Base_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002d62:	f000 fd9d 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002d66:	4811      	ldr	r0, [pc, #68]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d68:	f005 fd86 	bl	8008878 <HAL_TIM_PWM_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002d72:	f000 fd95 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d76:	2360      	movs	r3, #96	@ 0x60
 8002d78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4807      	ldr	r0, [pc, #28]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d8e:	f005 fefb 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002d98:	f000 fd82 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002d9c:	4803      	ldr	r0, [pc, #12]	@ (8002dac <MX_TIM10_Init+0x94>)
 8002d9e:	f001 fda1 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8002da2:	bf00      	nop
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200008ec 	.word	0x200008ec
 8002db0:	40014400 	.word	0x40014400

08002db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_USART1_UART_Init+0x50>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dda:	220c      	movs	r2, #12
 8002ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dec:	f006 fc34 	bl	8009658 <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002df6:	f000 fd53 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000934 	.word	0x20000934
 8002e04:	40011000 	.word	0x40011000

08002e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <MX_USART3_UART_Init+0x50>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e14:	4a11      	ldr	r2, [pc, #68]	@ (8002e5c <MX_USART3_UART_Init+0x54>)
 8002e16:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <MX_USART3_UART_Init+0x4c>)
 8002e40:	f006 fc0a 	bl	8009658 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e4a:	f000 fd29 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000978 	.word	0x20000978
 8002e58:	40004800 	.word	0x40004800
 8002e5c:	000186a0 	.word	0x000186a0

08002e60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <MX_USART6_UART_Init+0x50>)
 8002e68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e86:	220c      	movs	r2, #12
 8002e88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_USART6_UART_Init+0x4c>)
 8002e98:	f006 fbde 	bl	8009658 <HAL_UART_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002ea2:	f000 fcfd 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200009bc 	.word	0x200009bc
 8002eb0:	40011400 	.word	0x40011400

08002eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002ee0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <MX_DMA_Init+0x98>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	200c      	movs	r0, #12
 8002ef8:	f003 f89d 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002efc:	200c      	movs	r0, #12
 8002efe:	f003 f8b6 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2105      	movs	r1, #5
 8002f06:	2039      	movs	r0, #57	@ 0x39
 8002f08:	f003 f895 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f0c:	2039      	movs	r0, #57	@ 0x39
 8002f0e:	f003 f8ae 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2105      	movs	r1, #5
 8002f16:	203a      	movs	r0, #58	@ 0x3a
 8002f18:	f003 f88d 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002f1c:	203a      	movs	r0, #58	@ 0x3a
 8002f1e:	f003 f8a6 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2105      	movs	r1, #5
 8002f26:	2045      	movs	r0, #69	@ 0x45
 8002f28:	f003 f885 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002f2c:	2045      	movs	r0, #69	@ 0x45
 8002f2e:	f003 f89e 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2105      	movs	r1, #5
 8002f36:	2046      	movs	r0, #70	@ 0x46
 8002f38:	f003 f87d 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002f3c:	2046      	movs	r0, #70	@ 0x46
 8002f3e:	f003 f896 	bl	800606e <HAL_NVIC_EnableIRQ>

}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08e      	sub	sp, #56	@ 0x38
 8002f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	4b77      	ldr	r3, [pc, #476]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	4a76      	ldr	r2, [pc, #472]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f76:	4b74      	ldr	r3, [pc, #464]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b6d      	ldr	r3, [pc, #436]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	4b69      	ldr	r3, [pc, #420]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a68      	ldr	r2, [pc, #416]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b66      	ldr	r3, [pc, #408]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	4b62      	ldr	r3, [pc, #392]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a61      	ldr	r2, [pc, #388]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fc4:	f043 0308 	orr.w	r3, r3, #8
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b5f      	ldr	r3, [pc, #380]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b54      	ldr	r3, [pc, #336]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a53      	ldr	r2, [pc, #332]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b51      	ldr	r3, [pc, #324]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b4d      	ldr	r3, [pc, #308]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a4c      	ldr	r2, [pc, #304]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b46      	ldr	r3, [pc, #280]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a45      	ldr	r2, [pc, #276]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b43      	ldr	r3, [pc, #268]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b3f      	ldr	r3, [pc, #252]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a3e      	ldr	r2, [pc, #248]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003050:	f043 0310 	orr.w	r3, r3, #16
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b3c      	ldr	r3, [pc, #240]	@ (8003148 <MX_GPIO_Init+0x1f8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	4839      	ldr	r0, [pc, #228]	@ (800314c <MX_GPIO_Init+0x1fc>)
 8003068:	f003 fdba 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	2110      	movs	r1, #16
 8003070:	4837      	ldr	r0, [pc, #220]	@ (8003150 <MX_GPIO_Init+0x200>)
 8003072:	f003 fdb5 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	2101      	movs	r1, #1
 800307a:	4836      	ldr	r0, [pc, #216]	@ (8003154 <MX_GPIO_Init+0x204>)
 800307c:	f003 fdb0 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003080:	2340      	movs	r3, #64	@ 0x40
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	2301      	movs	r3, #1
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003094:	4619      	mov	r1, r3
 8003096:	482d      	ldr	r0, [pc, #180]	@ (800314c <MX_GPIO_Init+0x1fc>)
 8003098:	f003 fc06 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800309c:	2308      	movs	r3, #8
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ae:	4619      	mov	r1, r3
 80030b0:	4826      	ldr	r0, [pc, #152]	@ (800314c <MX_GPIO_Init+0x1fc>)
 80030b2:	f003 fbf9 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c6:	4619      	mov	r1, r3
 80030c8:	4821      	ldr	r0, [pc, #132]	@ (8003150 <MX_GPIO_Init+0x200>)
 80030ca:	f003 fbed 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030ce:	2310      	movs	r3, #16
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030e2:	4619      	mov	r1, r3
 80030e4:	481a      	ldr	r0, [pc, #104]	@ (8003150 <MX_GPIO_Init+0x200>)
 80030e6:	f003 fbdf 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80030ea:	2330      	movs	r3, #48	@ 0x30
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	4816      	ldr	r0, [pc, #88]	@ (8003158 <MX_GPIO_Init+0x208>)
 8003100:	f003 fbd2 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003118:	4619      	mov	r1, r3
 800311a:	480e      	ldr	r0, [pc, #56]	@ (8003154 <MX_GPIO_Init+0x204>)
 800311c:	f003 fbc4 	bl	80068a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2105      	movs	r1, #5
 8003124:	2009      	movs	r0, #9
 8003126:	f002 ff86 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800312a:	2009      	movs	r0, #9
 800312c:	f002 ff9f 	bl	800606e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	200a      	movs	r0, #10
 8003136:	f002 ff7e 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800313a:	200a      	movs	r0, #10
 800313c:	f002 ff97 	bl	800606e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	@ 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	40021800 	.word	0x40021800
 8003150:	40020000 	.word	0x40020000
 8003154:	40020400 	.word	0x40020400
 8003158:	40020800 	.word	0x40020800

0800315c <fondlerAutoReverse>:

/* USER CODE BEGIN 4 */
// allVars[] 0 = wasShooting, 1 = indexerTargetReached, 2 = indexerStopped, 3 = jammed, 4 = cantShoot;
void fondlerAutoReverse (int8_t allVars[5], int8_t RCSwitch, int8_t M2006IDX, int8_t reverseRotation, PID_preset_t indexerPreset) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6178      	str	r0, [r7, #20]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	eef0 6a40 	vmov.f32	s13, s0
 800316e:	eeb0 7a60 	vmov.f32	s14, s1
 8003172:	eef0 7a41 	vmov.f32	s15, s2
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]
 800317a:	460b      	mov	r3, r1
 800317c:	74bb      	strb	r3, [r7, #18]
 800317e:	4613      	mov	r3, r2
 8003180:	747b      	strb	r3, [r7, #17]
 8003182:	edc7 6a01 	vstr	s13, [r7, #4]
 8003186:	ed87 7a02 	vstr	s14, [r7, #8]
 800318a:	edc7 7a03 	vstr	s15, [r7, #12]
	int16_t flywheelSpeed = getMotorRPM(Bus1, M3508, 1);
 800318e:	2201      	movs	r2, #1
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f7fe ff4a 	bl	800202c <getMotorRPM>
 8003198:	4603      	mov	r3, r0
 800319a:	83fb      	strh	r3, [r7, #30]
    if (((pc_control.left_button_down == 1) && (flywheelSpeed > 7000) && (allVars[4] == 0)) || (RCSwitch == 1)) {
 800319c:	4b7b      	ldr	r3, [pc, #492]	@ (800338c <fondlerAutoReverse+0x230>)
 800319e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10b      	bne.n	80031be <fondlerAutoReverse+0x62>
 80031a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031aa:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80031ae:	4293      	cmp	r3, r2
 80031b0:	dd05      	ble.n	80031be <fondlerAutoReverse+0x62>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3304      	adds	r3, #4
 80031b6:	f993 3000 	ldrsb.w	r3, [r3]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <fondlerAutoReverse+0x6c>
 80031be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f040 80be 	bne.w	8003344 <fondlerAutoReverse+0x1e8>
    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);
    	allVars[0] = 1;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]

		if (allVars[3] > 0 && allVars[2] == 0) {
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3303      	adds	r3, #3
 80031d2:	f993 3000 	ldrsb.w	r3, [r3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dd2f      	ble.n	800323a <fondlerAutoReverse+0xde>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3302      	adds	r3, #2
 80031de:	f993 3000 	ldrsb.w	r3, [r3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d129      	bne.n	800323a <fondlerAutoReverse+0xde>
			setMotorRPM(Bus1, M2006, M2006IDX, reverseRotation*15000, indexerPreset);
 80031e6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	0152      	lsls	r2, r2, #5
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	461a      	mov	r2, r3
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b21b      	sxth	r3, r3
 8003202:	edd7 6a01 	vldr	s13, [r7, #4]
 8003206:	ed97 7a02 	vldr	s14, [r7, #8]
 800320a:	edd7 7a03 	vldr	s15, [r7, #12]
 800320e:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8003212:	eeb0 0a66 	vmov.f32	s0, s13
 8003216:	eef0 0a47 	vmov.f32	s1, s14
 800321a:	eeb0 1a67 	vmov.f32	s2, s15
 800321e:	2102      	movs	r1, #2
 8003220:	2001      	movs	r0, #1
 8003222:	f7fe fe8d 	bl	8001f40 <setMotorRPM>
			allVars[3]--;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3303      	adds	r3, #3
 800322a:	f993 2000 	ldrsb.w	r2, [r3]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	3a01      	subs	r2, #1
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	b252      	sxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e083      	b.n	8003342 <fondlerAutoReverse+0x1e6>
		} else {
			allVars[2] = 0;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3302      	adds	r3, #2
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
			// usart_printf("BeansOutput1\r\n");
			setMotorRPM(Bus1, M2006, M2006IDX, -270*16*reverseRotation, indexerPreset);
 8003242:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	1ad2      	subs	r2, r2, r3
 8003252:	00d2      	lsls	r2, r2, #3
 8003254:	4413      	add	r3, r2
 8003256:	015b      	lsls	r3, r3, #5
 8003258:	b29b      	uxth	r3, r3
 800325a:	b21b      	sxth	r3, r3
 800325c:	edd7 6a01 	vldr	s13, [r7, #4]
 8003260:	ed97 7a02 	vldr	s14, [r7, #8]
 8003264:	edd7 7a03 	vldr	s15, [r7, #12]
 8003268:	f997 2012 	ldrsb.w	r2, [r7, #18]
 800326c:	eeb0 0a66 	vmov.f32	s0, s13
 8003270:	eef0 0a47 	vmov.f32	s1, s14
 8003274:	eeb0 1a67 	vmov.f32	s2, s15
 8003278:	2102      	movs	r1, #2
 800327a:	2001      	movs	r0, #1
 800327c:	f7fe fe60 	bl	8001f40 <setMotorRPM>
			if (reverseRotation == 1) {
 8003280:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d12e      	bne.n	80032e6 <fondlerAutoReverse+0x18a>
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) <= -10) {
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	f993 3000 	ldrsb.w	r3, [r3]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10f      	bne.n	80032b4 <fondlerAutoReverse+0x158>
 8003294:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003298:	461a      	mov	r2, r3
 800329a:	2102      	movs	r1, #2
 800329c:	2001      	movs	r0, #1
 800329e:	f7fe fec5 	bl	800202c <getMotorRPM>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f113 0f09 	cmn.w	r3, #9
 80032a8:	da04      	bge.n	80032b4 <fondlerAutoReverse+0x158>
					allVars[1] = 1;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e046      	b.n	8003342 <fondlerAutoReverse+0x1e6>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) > -1 && allVars[1] == 1) {         // jammed
 80032b4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80032b8:	461a      	mov	r2, r3
 80032ba:	2102      	movs	r1, #2
 80032bc:	2001      	movs	r0, #1
 80032be:	f7fe feb5 	bl	800202c <getMotorRPM>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db5c      	blt.n	8003382 <fondlerAutoReverse+0x226>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	f993 3000 	ldrsb.w	r3, [r3]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d156      	bne.n	8003382 <fondlerAutoReverse+0x226>
					allVars[3] = 12;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3303      	adds	r3, #3
 80032d8:	220c      	movs	r2, #12
 80032da:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 80032e4:	e04d      	b.n	8003382 <fondlerAutoReverse+0x226>
				}
			} else {
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) >= 10) {
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3301      	adds	r3, #1
 80032ea:	f993 3000 	ldrsb.w	r3, [r3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <fondlerAutoReverse+0x1b4>
 80032f2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80032f6:	461a      	mov	r2, r3
 80032f8:	2102      	movs	r1, #2
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7fe fe96 	bl	800202c <getMotorRPM>
 8003300:	4603      	mov	r3, r0
 8003302:	2b09      	cmp	r3, #9
 8003304:	dd04      	ble.n	8003310 <fondlerAutoReverse+0x1b4>
					allVars[1] = 1;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e018      	b.n	8003342 <fondlerAutoReverse+0x1e6>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) < 1 && allVars[1] == 1) {         // jammed
 8003310:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003314:	461a      	mov	r2, r3
 8003316:	2102      	movs	r1, #2
 8003318:	2001      	movs	r0, #1
 800331a:	f7fe fe87 	bl	800202c <getMotorRPM>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	dc2e      	bgt.n	8003382 <fondlerAutoReverse+0x226>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3301      	adds	r3, #1
 8003328:	f993 3000 	ldrsb.w	r3, [r3]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d128      	bne.n	8003382 <fondlerAutoReverse+0x226>
					allVars[3] = 12;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3303      	adds	r3, #3
 8003334:	220c      	movs	r2, #12
 8003336:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 8003340:	e01f      	b.n	8003382 <fondlerAutoReverse+0x226>
 8003342:	e01e      	b.n	8003382 <fondlerAutoReverse+0x226>
				}
			}
		}
    } else {
    	allVars[0] = 0;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
    	allVars[2] = 1;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3302      	adds	r3, #2
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    	allVars[1] = 0;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
    	setMotorRPM(Bus1, M2006, M2006IDX, 0, indexerPreset);
 800335a:	edd7 6a01 	vldr	s13, [r7, #4]
 800335e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003362:	edd7 7a03 	vldr	s15, [r7, #12]
 8003366:	f997 2012 	ldrsb.w	r2, [r7, #18]
 800336a:	eeb0 0a66 	vmov.f32	s0, s13
 800336e:	eef0 0a47 	vmov.f32	s1, s14
 8003372:	eeb0 1a67 	vmov.f32	s2, s15
 8003376:	2300      	movs	r3, #0
 8003378:	2102      	movs	r1, #2
 800337a:	2001      	movs	r0, #1
 800337c:	f7fe fde0 	bl	8001f40 <setMotorRPM>
    }
}
 8003380:	e000      	b.n	8003384 <fondlerAutoReverse+0x228>
		if (allVars[3] > 0 && allVars[2] == 0) {
 8003382:	bf00      	nop
}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000054c 	.word	0x2000054c

08003390 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8003398:	2005      	movs	r0, #5
 800339a:	f007 fc87 	bl	800acac <osDelay>
 800339e:	e7fb      	b.n	8003398 <TaskMain+0x8>

080033a0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a2:	b09b      	sub	sp, #108	@ 0x6c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 80033a8:	4bbd      	ldr	r3, [pc, #756]	@ (80036a0 <TaskChassis+0x300>)
 80033aa:	4abe      	ldr	r2, [pc, #760]	@ (80036a4 <TaskChassis+0x304>)
 80033ac:	49be      	ldr	r1, [pc, #760]	@ (80036a8 <TaskChassis+0x308>)
 80033ae:	48bf      	ldr	r0, [pc, #764]	@ (80036ac <TaskChassis+0x30c>)
 80033b0:	f000 fc1c 	bl	8003bec <PWMInit>

	PID_preset_t fondler = {3.0, 0.0, 0.0};
 80033b4:	4bbe      	ldr	r3, [pc, #760]	@ (80036b0 <TaskChassis+0x310>)
 80033b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	65bb      	str	r3, [r7, #88]	@ 0x58
	PID_preset_t flywheels2 = {3.0, 0.0, 0.0};
 80033c4:	4bba      	ldr	r3, [pc, #744]	@ (80036b0 <TaskChassis+0x310>)
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PID_preset_t flywheels = {7.0, 0.0, 0.0};
 80033d4:	4bb7      	ldr	r3, [pc, #732]	@ (80036b4 <TaskChassis+0x314>)
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	643b      	str	r3, [r7, #64]	@ 0x40
	PID_preset_t yawPresetVoltageRPM = {18.0, 0.0, 0.0};
 80033e4:	4bb4      	ldr	r3, [pc, #720]	@ (80036b8 <TaskChassis+0x318>)
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	@ 0x34
	PID_preset_t pitchBoi = {20.0, 0.0, 80.0};
 80033f4:	4ab1      	ldr	r2, [pc, #708]	@ (80036bc <TaskChassis+0x31c>)
 80033f6:	f107 0320 	add.w	r3, r7, #32
 80033fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80033fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t yawBoi = {50.0, 0.0, 0.0};
 8003400:	4baf      	ldr	r3, [pc, #700]	@ (80036c0 <TaskChassis+0x320>)
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]

	int16_t returnScaler = 2;
 8003410:	2302      	movs	r3, #2
 8003412:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	int8_t fondlerVars[2][5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
 8003416:	4aab      	ldr	r2, [pc, #684]	@ (80036c4 <TaskChassis+0x324>)
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	ca07      	ldmia	r2, {r0, r1, r2}
 800341e:	c303      	stmia	r3!, {r0, r1}
 8003420:	801a      	strh	r2, [r3, #0]

	int16_t currentAim = 2850;
 8003422:	f640 3322 	movw	r3, #2850	@ 0xb22
 8003426:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66


    	// FLywheel ID = 1, 2, 3, 4
    	// Indexers = 5, 6
    	// Pitch = 3
    	int16_t currentPos = getRCchannel(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f000 feec 	bl	8004208 <getRCchannel>
 8003430:	4603      	mov	r3, r0
 8003432:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    	if (getRCswitch(0) >= 2) {
 8003436:	2000      	movs	r0, #0
 8003438:	f000 fefa 	bl	8004230 <getRCswitch>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	dd33      	ble.n	80034aa <TaskChassis+0x10a>
    		uint16_t togoVal = ((currentPos)*1.28)+2850;
 8003442:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f86c 	bl	8000524 <__aeabi_i2d>
 800344c:	a38e      	add	r3, pc, #568	@ (adr r3, 8003688 <TaskChassis+0x2e8>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f8d1 	bl	80005f8 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003690 <TaskChassis+0x2f0>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fc ff12 	bl	800028c <__adddf3>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fafc 	bl	8000a6c <__aeabi_d2uiz>
 8003474:	4603      	mov	r3, r0
 8003476:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    		currentAim = togoVal;
 800347a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800347e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    		setMotorPosition(Bus1, GM6020, 3, togoVal, pitchBoi);
 8003482:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003486:	edd7 6a08 	vldr	s13, [r7, #32]
 800348a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800348e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003492:	eeb0 0a66 	vmov.f32	s0, s13
 8003496:	eef0 0a47 	vmov.f32	s1, s14
 800349a:	eeb0 1a67 	vmov.f32	s2, s15
 800349e:	2203      	movs	r2, #3
 80034a0:	2103      	movs	r1, #3
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fe fd87 	bl	8001fb6 <setMotorPosition>
 80034a8:	e043      	b.n	8003532 <TaskChassis+0x192>
    	} else {
    	// usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 3));
    		int16_t currentPos1 = getRCchannel(1)*0.1;
 80034aa:	2001      	movs	r0, #1
 80034ac:	f000 feac 	bl	8004208 <getRCchannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd f836 	bl	8000524 <__aeabi_i2d>
 80034b8:	a377      	add	r3, pc, #476	@ (adr r3, 8003698 <TaskChassis+0x2f8>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f7fd f89b 	bl	80005f8 <__aeabi_dmul>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd faa7 	bl	8000a1c <__aeabi_d2iz>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    		currentAim -= currentPos1;
 80034d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80034d8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    		if (currentAim > 3700) {
 80034e4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80034e8:	f640 6274 	movw	r2, #3700	@ 0xe74
 80034ec:	4293      	cmp	r3, r2
 80034ee:	dd04      	ble.n	80034fa <TaskChassis+0x15a>
    			currentAim = 3700;
 80034f0:	f640 6374 	movw	r3, #3700	@ 0xe74
 80034f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80034f8:	e008      	b.n	800350c <TaskChassis+0x16c>
    		} else if (currentAim < 2000) {
 80034fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80034fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003502:	da03      	bge.n	800350c <TaskChassis+0x16c>
    			currentAim = 2000;
 8003504:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003508:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    		}
    	setMotorPosition(Bus1, GM6020, 3, currentAim, pitchBoi);
 800350c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003510:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003514:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003518:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800351c:	eeb0 0a66 	vmov.f32	s0, s13
 8003520:	eef0 0a47 	vmov.f32	s1, s14
 8003524:	eeb0 1a67 	vmov.f32	s2, s15
 8003528:	2203      	movs	r2, #3
 800352a:	2103      	movs	r1, #3
 800352c:	2001      	movs	r0, #1
 800352e:	f7fe fd42 	bl	8001fb6 <setMotorPosition>
    	}
    	// usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 6));
    	// usart_printf("%d %d %d %d\r\n", -1*getMotorRPM(Bus1, M3508, 1), getMotorRPM(Bus1, M3508, 2), getMotorRPM(Bus1, M3508, 3), -1*getMotorRPM(Bus1, M3508, 4));
        uint16_t speed = 5000;
 8003532:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003536:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

        CAN_transmit(Bus2, 0x104, fourBitShift((uint16_t)(getRCchannel(0)+660), (uint16_t)(getRCchannel(1)+660), (uint16_t)(getRCchannel(2)+660), (uint16_t)(getRCchannel(3)+660)));
 800353a:	2000      	movs	r0, #0
 800353c:	f000 fe64 	bl	8004208 <getRCchannel>
 8003540:	4603      	mov	r3, r0
 8003542:	b29b      	uxth	r3, r3
 8003544:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003548:	b29c      	uxth	r4, r3
 800354a:	2001      	movs	r0, #1
 800354c:	f000 fe5c 	bl	8004208 <getRCchannel>
 8003550:	4603      	mov	r3, r0
 8003552:	b29b      	uxth	r3, r3
 8003554:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003558:	b29d      	uxth	r5, r3
 800355a:	2002      	movs	r0, #2
 800355c:	f000 fe54 	bl	8004208 <getRCchannel>
 8003560:	4603      	mov	r3, r0
 8003562:	b29b      	uxth	r3, r3
 8003564:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003568:	b29e      	uxth	r6, r3
 800356a:	2003      	movs	r0, #3
 800356c:	f000 fe4c 	bl	8004208 <getRCchannel>
 8003570:	4603      	mov	r3, r0
 8003572:	b29b      	uxth	r3, r3
 8003574:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003578:	b29b      	uxth	r3, r3
 800357a:	4632      	mov	r2, r6
 800357c:	4629      	mov	r1, r5
 800357e:	4620      	mov	r0, r4
 8003580:	f7fd fed9 	bl	8001336 <fourBitShift>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800358c:	2002      	movs	r0, #2
 800358e:	f7fd ff43 	bl	8001418 <CAN_transmit>
        //CAN_transmit(Bus1, 0x105, 0x1122334455667788);
        CAN_transmit(Bus2, 0x105, otherSignals((uint16_t)(getRCchannel(4)+660), getRCswitch(0), getRCswitch(1)));
 8003592:	2004      	movs	r0, #4
 8003594:	f000 fe38 	bl	8004208 <getRCchannel>
 8003598:	4603      	mov	r3, r0
 800359a:	b29b      	uxth	r3, r3
 800359c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80035a0:	b29c      	uxth	r4, r3
 80035a2:	2000      	movs	r0, #0
 80035a4:	f000 fe44 	bl	8004230 <getRCswitch>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461d      	mov	r5, r3
 80035ac:	2001      	movs	r0, #1
 80035ae:	f000 fe3f 	bl	8004230 <getRCswitch>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4629      	mov	r1, r5
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7fd fe4d 	bl	8001258 <otherSignals>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	f240 1105 	movw	r1, #261	@ 0x105
 80035c6:	2002      	movs	r0, #2
 80035c8:	f7fd ff26 	bl	8001418 <CAN_transmit>
        // CAN_transmit(Bus2, 0x105, 0x11223344);
        osDelay(2);
 80035cc:	2002      	movs	r0, #2
 80035ce:	f007 fb6d 	bl	800acac <osDelay>

        CAN_setMotorCtrlVal(Bus1, M3508, 3, getRCchannel(0)*24);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f000 fe18 	bl	8004208 <getRCchannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	0052      	lsls	r2, r2, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	2203      	movs	r2, #3
 80035ea:	2101      	movs	r1, #1
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fd ffb9 	bl	8001564 <CAN_setMotorCtrlVal>
        usart_printf("RPM: %d || Temp: %d\r\n",getMotorRPM(Bus1, M3508, 3), getMotorTemperature(Bus1, M3508, 3));
 80035f2:	2203      	movs	r2, #3
 80035f4:	2101      	movs	r1, #1
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7fe fd18 	bl	800202c <getMotorRPM>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461c      	mov	r4, r3
 8003600:	2203      	movs	r2, #3
 8003602:	2101      	movs	r1, #1
 8003604:	2001      	movs	r0, #1
 8003606:	f7fe fd63 	bl	80020d0 <getMotorTemperature>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4621      	mov	r1, r4
 8003610:	482d      	ldr	r0, [pc, #180]	@ (80036c8 <TaskChassis+0x328>)
 8003612:	f7fe fdc5 	bl	80021a0 <usart_printf>

        if (getRCswitch(1) > 1) {
 8003616:	2001      	movs	r0, #1
 8003618:	f000 fe0a 	bl	8004230 <getRCswitch>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	dd54      	ble.n	80036cc <TaskChassis+0x32c>
            // setMotorRPM(Bus1, M3508, 1, -1*speed, yawPresetVoltageRPM);
            setMotorRPM(Bus1, M3508, 2, speed, flywheels);
 8003622:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003626:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800362a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800362e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003632:	eeb0 0a66 	vmov.f32	s0, s13
 8003636:	eef0 0a47 	vmov.f32	s1, s14
 800363a:	eeb0 1a67 	vmov.f32	s2, s15
 800363e:	2202      	movs	r2, #2
 8003640:	2101      	movs	r1, #1
 8003642:	2001      	movs	r0, #1
 8003644:	f7fe fc7c 	bl	8001f40 <setMotorRPM>
            osDelay(2);
 8003648:	2002      	movs	r0, #2
 800364a:	f007 fb2f 	bl	800acac <osDelay>
            // setMotorRPM(Bus1, M3508, 3, speed, flywheels);
            osDelay(2);
 800364e:	2002      	movs	r0, #2
 8003650:	f007 fb2c 	bl	800acac <osDelay>
            setMotorRPM(Bus1, M3508, 4, -1*speed, flywheels);
 8003654:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003658:	425b      	negs	r3, r3
 800365a:	b29b      	uxth	r3, r3
 800365c:	b21b      	sxth	r3, r3
 800365e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003662:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003666:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800366a:	eeb0 0a66 	vmov.f32	s0, s13
 800366e:	eef0 0a47 	vmov.f32	s1, s14
 8003672:	eeb0 1a67 	vmov.f32	s2, s15
 8003676:	2204      	movs	r2, #4
 8003678:	2101      	movs	r1, #1
 800367a:	2001      	movs	r0, #1
 800367c:	f7fe fc60 	bl	8001f40 <setMotorRPM>
            osDelay(2);
 8003680:	2002      	movs	r0, #2
 8003682:	f007 fb13 	bl	800acac <osDelay>
 8003686:	e04e      	b.n	8003726 <TaskChassis+0x386>
 8003688:	47ae147b 	.word	0x47ae147b
 800368c:	3ff47ae1 	.word	0x3ff47ae1
 8003690:	00000000 	.word	0x00000000
 8003694:	40a64400 	.word	0x40a64400
 8003698:	9999999a 	.word	0x9999999a
 800369c:	3fb99999 	.word	0x3fb99999
 80036a0:	200008a4 	.word	0x200008a4
 80036a4:	2000085c 	.word	0x2000085c
 80036a8:	20000814 	.word	0x20000814
 80036ac:	200007cc 	.word	0x200007cc
 80036b0:	40400000 	.word	0x40400000
 80036b4:	40e00000 	.word	0x40e00000
 80036b8:	41900000 	.word	0x41900000
 80036bc:	0800e464 	.word	0x0800e464
 80036c0:	42480000 	.word	0x42480000
 80036c4:	0800e470 	.word	0x0800e470
 80036c8:	0800e44c 	.word	0x0800e44c
            // setMotorRPM(Bus1, M3508, 1, -1*speed, flywheels);
            // usart_printf("Shooting\r\n");
            // usart_printf("On\r\n");
        } else {
        	// setMotorRPM(Bus1, M3508, 1, 0, yawPresetVoltageRPM);
        	setMotorRPM(Bus1, M3508, 2, 0, flywheels);
 80036cc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80036d0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80036d4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80036d8:	eeb0 0a66 	vmov.f32	s0, s13
 80036dc:	eef0 0a47 	vmov.f32	s1, s14
 80036e0:	eeb0 1a67 	vmov.f32	s2, s15
 80036e4:	2300      	movs	r3, #0
 80036e6:	2202      	movs	r2, #2
 80036e8:	2101      	movs	r1, #1
 80036ea:	2001      	movs	r0, #1
 80036ec:	f7fe fc28 	bl	8001f40 <setMotorRPM>
        	osDelay(2);
 80036f0:	2002      	movs	r0, #2
 80036f2:	f007 fadb 	bl	800acac <osDelay>
        	// setMotorRPM(Bus1, M3508, 3, 0, flywheels);
        	osDelay(2);
 80036f6:	2002      	movs	r0, #2
 80036f8:	f007 fad8 	bl	800acac <osDelay>
        	setMotorRPM(Bus1, M3508, 4, 0, flywheels);
 80036fc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003700:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003704:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003708:	eeb0 0a66 	vmov.f32	s0, s13
 800370c:	eef0 0a47 	vmov.f32	s1, s14
 8003710:	eeb0 1a67 	vmov.f32	s2, s15
 8003714:	2300      	movs	r3, #0
 8003716:	2204      	movs	r2, #4
 8003718:	2101      	movs	r1, #1
 800371a:	2001      	movs	r0, #1
 800371c:	f7fe fc10 	bl	8001f40 <setMotorRPM>
        	osDelay(2);
 8003720:	2002      	movs	r0, #2
 8003722:	f007 fac3 	bl	800acac <osDelay>
        	// setMotorRPM(Bus1, M3508, 1, 0, flywheels);
        	// usart_printf("Off\r\n");
        }
        osDelay(2);
 8003726:	2002      	movs	r0, #2
 8003728:	f007 fac0 	bl	800acac <osDelay>

        setMotorRPM(Bus1, M2006, 1, getRCchannel(1)*14, flywheels2);
 800372c:	2001      	movs	r0, #1
 800372e:	f000 fd6b 	bl	8004208 <getRCchannel>
 8003732:	4603      	mov	r3, r0
 8003734:	b29b      	uxth	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	00d2      	lsls	r2, r2, #3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	b21b      	sxth	r3, r3
 8003742:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003746:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800374a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800374e:	eeb0 0a66 	vmov.f32	s0, s13
 8003752:	eef0 0a47 	vmov.f32	s1, s14
 8003756:	eeb0 1a67 	vmov.f32	s2, s15
 800375a:	2201      	movs	r2, #1
 800375c:	2102      	movs	r1, #2
 800375e:	2001      	movs	r0, #1
 8003760:	f7fe fbee 	bl	8001f40 <setMotorRPM>
        osDelay(2);
 8003764:	2002      	movs	r0, #2
 8003766:	f007 faa1 	bl	800acac <osDelay>
        if (getRCswitch(1) == 2) {
 800376a:	2001      	movs	r0, #1
 800376c:	f000 fd60 	bl	8004230 <getRCswitch>
 8003770:	4603      	mov	r3, r0
 8003772:	2b02      	cmp	r3, #2
 8003774:	d12b      	bne.n	80037ce <TaskChassis+0x42e>
        	fondlerAutoReverse (fondlerVars[0], 1, 5, -1, fondler);
 8003776:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800377a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800377e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003782:	f107 0008 	add.w	r0, r7, #8
 8003786:	eeb0 0a66 	vmov.f32	s0, s13
 800378a:	eef0 0a47 	vmov.f32	s1, s14
 800378e:	eeb0 1a67 	vmov.f32	s2, s15
 8003792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003796:	2205      	movs	r2, #5
 8003798:	2101      	movs	r1, #1
 800379a:	f7ff fcdf 	bl	800315c <fondlerAutoReverse>
        	osDelay(2);
 800379e:	2002      	movs	r0, #2
 80037a0:	f007 fa84 	bl	800acac <osDelay>
        	fondlerAutoReverse (fondlerVars[1], 1, 6, 1, fondler);
 80037a4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80037a8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80037ac:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	1d58      	adds	r0, r3, #5
 80037b6:	eeb0 0a66 	vmov.f32	s0, s13
 80037ba:	eef0 0a47 	vmov.f32	s1, s14
 80037be:	eeb0 1a67 	vmov.f32	s2, s15
 80037c2:	2301      	movs	r3, #1
 80037c4:	2206      	movs	r2, #6
 80037c6:	2101      	movs	r1, #1
 80037c8:	f7ff fcc8 	bl	800315c <fondlerAutoReverse>
 80037cc:	e02a      	b.n	8003824 <TaskChassis+0x484>
        	setMotorRPM(Bus1, M2006, 5, 5000, fondler);
        	osDelay(2);
        	setMotorRPM(Bus1, M2006, 6, -5000, fondler);
        	*/
        } else {
        	fondlerAutoReverse (fondlerVars[0], 0, 5, -1, fondler);
 80037ce:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80037d2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80037d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80037da:	f107 0008 	add.w	r0, r7, #8
 80037de:	eeb0 0a66 	vmov.f32	s0, s13
 80037e2:	eef0 0a47 	vmov.f32	s1, s14
 80037e6:	eeb0 1a67 	vmov.f32	s2, s15
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037ee:	2205      	movs	r2, #5
 80037f0:	2100      	movs	r1, #0
 80037f2:	f7ff fcb3 	bl	800315c <fondlerAutoReverse>
        	osDelay(2);
 80037f6:	2002      	movs	r0, #2
 80037f8:	f007 fa58 	bl	800acac <osDelay>
        	fondlerAutoReverse (fondlerVars[1], 0, 6, 1, fondler);
 80037fc:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003800:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003804:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	1d58      	adds	r0, r3, #5
 800380e:	eeb0 0a66 	vmov.f32	s0, s13
 8003812:	eef0 0a47 	vmov.f32	s1, s14
 8003816:	eeb0 1a67 	vmov.f32	s2, s15
 800381a:	2301      	movs	r3, #1
 800381c:	2206      	movs	r2, #6
 800381e:	2100      	movs	r1, #0
 8003820:	f7ff fc9c 	bl	800315c <fondlerAutoReverse>
        	setMotorRPM(Bus1, M3508, 5, 0, fondler);
        	osDelay(2);
        	setMotorRPM(Bus1, M2006, 6, 0, fondler);
        	*/
        }
        osDelay(2);
 8003824:	2002      	movs	r0, #2
 8003826:	f007 fa41 	bl	800acac <osDelay>
        setMotorRPM(Bus1, GM6020, 5, getRCchannel(4)*0.5, yawBoi);
 800382a:	2004      	movs	r0, #4
 800382c:	f000 fcec 	bl	8004208 <getRCchannel>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fe76 	bl	8000524 <__aeabi_i2d>
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <TaskChassis+0x4ec>)
 800383e:	f7fc fedb 	bl	80005f8 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fd f8e7 	bl	8000a1c <__aeabi_d2iz>
 800384e:	4603      	mov	r3, r0
 8003850:	b21b      	sxth	r3, r3
 8003852:	edd7 6a05 	vldr	s13, [r7, #20]
 8003856:	ed97 7a06 	vldr	s14, [r7, #24]
 800385a:	edd7 7a07 	vldr	s15, [r7, #28]
 800385e:	eeb0 0a66 	vmov.f32	s0, s13
 8003862:	eef0 0a47 	vmov.f32	s1, s14
 8003866:	eeb0 1a67 	vmov.f32	s2, s15
 800386a:	2205      	movs	r2, #5
 800386c:	2103      	movs	r1, #3
 800386e:	2001      	movs	r0, #1
 8003870:	f7fe fb66 	bl	8001f40 <setMotorRPM>

        osDelay(2);
 8003874:	2002      	movs	r0, #2
 8003876:	f007 fa19 	bl	800acac <osDelay>
		PWMTimerStarter();
 800387a:	f000 f9eb 	bl	8003c54 <PWMTimerStarter>
		RCkeysRefresh();
 800387e:	f000 fceb 	bl	8004258 <RCkeysRefresh>
        osDelay(10);
 8003882:	200a      	movs	r0, #10
 8003884:	f007 fa12 	bl	800acac <osDelay>
    for(;;) {
 8003888:	e5cf      	b.n	800342a <TaskChassis+0x8a>
 800388a:	bf00      	nop
 800388c:	3fe00000 	.word	0x3fe00000

08003890 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8003898:	2005      	movs	r0, #5
 800389a:	f007 fa07 	bl	800acac <osDelay>
 800389e:	e7fb      	b.n	8003898 <TaskTurret+0x8>

080038a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a4:	b672      	cpsid	i
}
 80038a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038a8:	bf00      	nop
 80038aa:	e7fd      	b.n	80038a8 <Error_Handler+0x8>

080038ac <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6178      	str	r0, [r7, #20]
 80038b4:	460b      	mov	r3, r1
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80038c0:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d042      	beq.n	800394e <PID_init+0xa2>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03f      	beq.n	800394e <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	7cfa      	ldrb	r2, [r7, #19]
 80038d2:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3304      	adds	r3, #4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3308      	adds	r3, #8
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	635a      	str	r2, [r3, #52]	@ 0x34
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	621a      	str	r2, [r3, #32]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	645a      	str	r2, [r3, #68]	@ 0x44
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800394c:	e000      	b.n	8003950 <PID_init+0xa4>
        return;
 800394e:	bf00      	nop
}
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	ed87 0a02 	vstr	s0, [r7, #8]
 8003966:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <PID_calc+0x1c>
    {
        return 0.0f;
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e130      	b.n	8003bd8 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8003992:	ed97 7a01 	vldr	s14, [r7, #4]
 8003996:	edd7 7a02 	vldr	s15, [r7, #8]
 800399a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 8095 	bne.w	8003ad8 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80039d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	dd04      	ble.n	8003a40 <PID_calc+0xe6>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a3e:	e014      	b.n	8003a6a <PID_calc+0x110>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	d507      	bpl.n	8003a6a <PID_calc+0x110>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a60:	eef1 7a67 	vneg.f32	s15, s15
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	dd04      	ble.n	8003aaa <PID_calc+0x150>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
 8003aa8:	e094      	b.n	8003bd4 <PID_calc+0x27a>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ab6:	eef1 7a67 	vneg.f32	s15, s15
 8003aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	f140 8087 	bpl.w	8003bd4 <PID_calc+0x27a>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003acc:	eef1 7a67 	vneg.f32	s15, s15
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	edc3 7a08 	vstr	s15, [r3, #32]
 8003ad6:	e07d      	b.n	8003bd4 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d179      	bne.n	8003bd4 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003af2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003b32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003b72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	dd04      	ble.n	8003baa <PID_calc+0x250>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	e014      	b.n	8003bd4 <PID_calc+0x27a>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	ed93 7a08 	vldr	s14, [r3, #32]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bb6:	eef1 7a67 	vneg.f32	s15, s15
 8003bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	d507      	bpl.n	8003bd4 <PID_calc+0x27a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bca:	eef1 7a67 	vneg.f32	s15, s15
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
}
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8003bfa:	4a12      	ldr	r2, [pc, #72]	@ (8003c44 <PWMInit+0x58>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8003c00:	4a11      	ldr	r2, [pc, #68]	@ (8003c48 <PWMInit+0x5c>)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8003c06:	4a11      	ldr	r2, [pc, #68]	@ (8003c4c <PWMInit+0x60>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8003c0c:	4a10      	ldr	r2, [pc, #64]	@ (8003c50 <PWMInit+0x64>)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8003c12:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <PWMInit+0x58>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fdc6 	bl	80087a8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <PWMInit+0x5c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 fdc1 	bl	80087a8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8003c26:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <PWMInit+0x60>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fdbc 	bl	80087a8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <PWMInit+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fdb7 	bl	80087a8 <HAL_TIM_Base_Start>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000bf4 	.word	0x20000bf4
 8003c48:	20000bf8 	.word	0x20000bf8
 8003c4c:	20000bfc 	.word	0x20000bfc
 8003c50:	20000c00 	.word	0x20000c00

08003c54 <PWMTimerStarter>:

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}


void PWMTimerStarter() {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	e0f1      	b.n	8003e44 <PWMTimerStarter+0x1f0>
		switch (i) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b0a      	cmp	r3, #10
 8003c64:	f200 80eb 	bhi.w	8003e3e <PWMTimerStarter+0x1ea>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <PWMTimerStarter+0x1c>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003cc3 	.word	0x08003cc3
 8003c78:	08003ce9 	.word	0x08003ce9
 8003c7c:	08003d0f 	.word	0x08003d0f
 8003c80:	08003d35 	.word	0x08003d35
 8003c84:	08003d5b 	.word	0x08003d5b
 8003c88:	08003d81 	.word	0x08003d81
 8003c8c:	08003da7 	.word	0x08003da7
 8003c90:	08003dcd 	.word	0x08003dcd
 8003c94:	08003df3 	.word	0x08003df3
 8003c98:	08003e19 	.word	0x08003e19
		case 0:
			if (whichPWMisOn[0] == 1) {
 8003c9c:	4b6e      	ldr	r3, [pc, #440]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d106      	bne.n	8003cb4 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f004 fe33 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8003cb2:	e0c4      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8003cb4:	4b69      	ldr	r3, [pc, #420]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 fef4 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003cc0:	e0bd      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003cc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d106      	bne.n	8003cda <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003ccc:	4b63      	ldr	r3, [pc, #396]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fe20 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8003cd8:	e0b1      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8003cda:	4b60      	ldr	r3, [pc, #384]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2104      	movs	r1, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fee1 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003ce6:	e0aa      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8003ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003cea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d106      	bne.n	8003d00 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2108      	movs	r1, #8
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 fe0d 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003cfe:	e09e      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003d00:	4b56      	ldr	r3, [pc, #344]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2108      	movs	r1, #8
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fece 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003d0c:	e097      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8003d0e:	4b52      	ldr	r3, [pc, #328]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003d10:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d106      	bne.n	8003d26 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	210c      	movs	r1, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fdfa 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8003d24:	e08b      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8003d26:	4b4d      	ldr	r3, [pc, #308]	@ (8003e5c <PWMTimerStarter+0x208>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	210c      	movs	r1, #12
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 febb 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003d32:	e084      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8003d34:	4b48      	ldr	r3, [pc, #288]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003d36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d106      	bne.n	8003d4c <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8003d3e:	4b48      	ldr	r3, [pc, #288]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 fde7 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8003d4a:	e078      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8003d4c:	4b44      	ldr	r3, [pc, #272]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 fea8 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003d58:	e071      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003d5c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8003d64:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2104      	movs	r1, #4
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 fdd4 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8003d70:	e065      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8003d72:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2104      	movs	r1, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f004 fe95 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003d7e:	e05e      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003d82:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d106      	bne.n	8003d98 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8003d8a:	4b35      	ldr	r3, [pc, #212]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2108      	movs	r1, #8
 8003d90:	4618      	mov	r0, r3
 8003d92:	f004 fdc1 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8003d96:	e052      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <PWMTimerStarter+0x20c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 fe82 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003da4:	e04b      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003da8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003db0:	4b2c      	ldr	r3, [pc, #176]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 fdae 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003dbc:	e03f      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003dbe:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f004 fe6f 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003dca:	e038      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003dcc:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003dce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d106      	bne.n	8003de4 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8003dd6:	4b23      	ldr	r3, [pc, #140]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2104      	movs	r1, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f004 fd9b 	bl	8008918 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8003de2:	e02c      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8003de4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2104      	movs	r1, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fe5c 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003df0:	e025      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8003df2:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003df4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2108      	movs	r1, #8
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fd88 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003e08:	e019      	b.n	8003e3e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003e0a:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <PWMTimerStarter+0x210>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2108      	movs	r1, #8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 fe49 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003e16:	e012      	b.n	8003e3e <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003e18:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <PWMTimerStarter+0x204>)
 8003e1a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d106      	bne.n	8003e30 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8003e22:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <PWMTimerStarter+0x214>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2108      	movs	r1, #8
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f004 fd75 	bl	8008918 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003e2e:	e005      	b.n	8003e3c <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <PWMTimerStarter+0x214>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2108      	movs	r1, #8
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 fe36 	bl	8008aa8 <HAL_TIM_PWM_Stop>
			break;
 8003e3c:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3301      	adds	r3, #1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b0a      	cmp	r3, #10
 8003e48:	f77f af0a 	ble.w	8003c60 <PWMTimerStarter+0xc>
		}
	}
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000c04 	.word	0x20000c04
 8003e5c:	20000bf4 	.word	0x20000bf4
 8003e60:	20000c00 	.word	0x20000c00
 8003e64:	20000bfc 	.word	0x20000bfc
 8003e68:	20000bf8 	.word	0x20000bf8

08003e6c <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003e70:	2224      	movs	r2, #36	@ 0x24
 8003e72:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <remote_control_init+0x14>)
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <remote_control_init+0x18>)
 8003e76:	f7fe fa0f 	bl	8002298 <RC_init>
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000c4c 	.word	0x20000c4c
 8003e84:	20000c28 	.word	0x20000c28

08003e88 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003e8c:	4b02      	ldr	r3, [pc, #8]	@ (8003e98 <get_remote_control_point+0x10>)
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20000c10 	.word	0x20000c10

08003e9c <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003ea2:	4b44      	ldr	r3, [pc, #272]	@ (8003fb4 <USART3_IRQHandler+0x118>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <USART3_IRQHandler+0x118>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb4 <USART3_IRQHandler+0x118>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003ec6:	e070      	b.n	8003faa <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <USART3_IRQHandler+0x11c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d06a      	beq.n	8003faa <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4b36      	ldr	r3, [pc, #216]	@ (8003fb4 <USART3_IRQHandler+0x118>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <USART3_IRQHandler+0x118>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003eea:	4b34      	ldr	r3, [pc, #208]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d12d      	bne.n	8003f54 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003ef8:	4b30      	ldr	r3, [pc, #192]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b2f      	ldr	r3, [pc, #188]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003f08:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <USART3_IRQHandler+0x124>)
 8003f18:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003f1a:	4b28      	ldr	r3, [pc, #160]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003f22:	4b26      	ldr	r3, [pc, #152]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f30:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003f32:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003f42:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc0 <USART3_IRQHandler+0x124>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d12f      	bne.n	8003faa <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003f4a:	491e      	ldr	r1, [pc, #120]	@ (8003fc4 <USART3_IRQHandler+0x128>)
 8003f4c:	481e      	ldr	r0, [pc, #120]	@ (8003fc8 <USART3_IRQHandler+0x12c>)
 8003f4e:	f000 f841 	bl	8003fd4 <sbus_to_rc>
}
 8003f52:	e02a      	b.n	8003faa <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003f64:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <USART3_IRQHandler+0x124>)
 8003f74:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003f76:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003f7e:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <USART3_IRQHandler+0x130>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <USART3_IRQHandler+0x130>)
 8003f84:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003f88:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <USART3_IRQHandler+0x120>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003f9a:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <USART3_IRQHandler+0x124>)
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	2b12      	cmp	r3, #18
 8003fa0:	d103      	bne.n	8003faa <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003fa2:	4908      	ldr	r1, [pc, #32]	@ (8003fc4 <USART3_IRQHandler+0x128>)
 8003fa4:	480a      	ldr	r0, [pc, #40]	@ (8003fd0 <USART3_IRQHandler+0x134>)
 8003fa6:	f000 f815 	bl	8003fd4 <sbus_to_rc>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000978 	.word	0x20000978
 8003fb8:	40004800 	.word	0x40004800
 8003fbc:	20000ac0 	.word	0x20000ac0
 8003fc0:	20000c70 	.word	0x20000c70
 8003fc4:	20000c10 	.word	0x20000c10
 8003fc8:	20000c28 	.word	0x20000c28
 8003fcc:	40026028 	.word	0x40026028
 8003fd0:	20000c4c 	.word	0x20000c4c

08003fd4 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 810b 	beq.w	80041fc <sbus_to_rc+0x228>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8107 	beq.w	80041fc <sbus_to_rc+0x228>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	b21a      	sxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	b21b      	sxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	b21b      	sxth	r3, r3
 8004008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400c:	b21a      	sxth	r2, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3301      	adds	r3, #1
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	b21a      	sxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3302      	adds	r3, #2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	b21b      	sxth	r3, r3
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	b21b      	sxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b21b      	sxth	r3, r3
 8004032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004036:	b21a      	sxth	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3302      	adds	r3, #2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	b2db      	uxtb	r3, r3
 8004048:	b21a      	sxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3303      	adds	r3, #3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	b21b      	sxth	r3, r3
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	b21b      	sxth	r3, r3
 8004058:	4313      	orrs	r3, r2
 800405a:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b2db      	uxtb	r3, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004064:	b21b      	sxth	r3, r3
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	b21b      	sxth	r3, r3
 800406a:	4313      	orrs	r3, r2
 800406c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	b21a      	sxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3305      	adds	r3, #5
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	b21b      	sxth	r3, r3
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	b21b      	sxth	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b21b      	sxth	r3, r3
 8004098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800409c:	b21a      	sxth	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3305      	adds	r3, #5
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3305      	adds	r3, #5
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	109b      	asrs	r3, r3, #2
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3306      	adds	r3, #6
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	b21a      	sxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3307      	adds	r3, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	b21a      	sxth	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3308      	adds	r3, #8
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	b21a      	sxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3309      	adds	r3, #9
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	b21b      	sxth	r3, r3
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	b21b      	sxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b21a      	sxth	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	330a      	adds	r3, #10
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	b21a      	sxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	330b      	adds	r3, #11
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	b21b      	sxth	r3, r3
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	b21b      	sxth	r3, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	b21a      	sxth	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	330c      	adds	r3, #12
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	330d      	adds	r3, #13
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	330e      	adds	r3, #14
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	b21a      	sxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	330f      	adds	r3, #15
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	b21b      	sxth	r3, r3
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b21b      	sxth	r3, r3
 8004166:	b29a      	uxth	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3310      	adds	r3, #16
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	b21a      	sxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3311      	adds	r3, #17
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	b21b      	sxth	r3, r3
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	b21b      	sxth	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	b21a      	sxth	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004192:	b21b      	sxth	r3, r3
 8004194:	b29b      	uxth	r3, r3
 8004196:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800419a:	b29b      	uxth	r3, r3
 800419c:	b21a      	sxth	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041be:	b21b      	sxth	r3, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041d4:	b21b      	sxth	r3, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b21a      	sxth	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041ea:	b21b      	sxth	r3, r3
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b21a      	sxth	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	811a      	strh	r2, [r3, #8]
 80041fa:	e000      	b.n	80041fe <sbus_to_rc+0x22a>
        return;
 80041fc:	bf00      	nop
}
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <getRCchannel+0x24>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800421a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800421e:	b21b      	sxth	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000018 	.word	0x20000018

08004230 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <getRCswitch+0x24>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	4413      	add	r3, r2
 8004244:	7a9b      	ldrb	r3, [r3, #10]
 8004246:	b25b      	sxtb	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000018 	.word	0x20000018

08004258 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 800425e:	4b85      	ldr	r3, [pc, #532]	@ (8004474 <RCkeysRefresh+0x21c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	7d1a      	ldrb	r2, [r3, #20]
 8004264:	7d5b      	ldrb	r3, [r3, #21]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	4313      	orrs	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 800426c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da07      	bge.n	8004284 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8004274:	4b80      	ldr	r3, [pc, #512]	@ (8004478 <RCkeysRefresh+0x220>)
 8004276:	2201      	movs	r2, #1
 8004278:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004280:	80fb      	strh	r3, [r7, #6]
 8004282:	e002      	b.n	800428a <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8004284:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <RCkeysRefresh+0x220>)
 8004286:	2200      	movs	r2, #0
 8004288:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004290:	d307      	bcc.n	80042a2 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8004292:	4b79      	ldr	r3, [pc, #484]	@ (8004478 <RCkeysRefresh+0x220>)
 8004294:	2201      	movs	r2, #1
 8004296:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800429e:	80fb      	strh	r3, [r7, #6]
 80042a0:	e002      	b.n	80042a8 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 80042a2:	4b75      	ldr	r3, [pc, #468]	@ (8004478 <RCkeysRefresh+0x220>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ae:	d307      	bcc.n	80042c0 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 80042b0:	4b71      	ldr	r3, [pc, #452]	@ (8004478 <RCkeysRefresh+0x220>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80042bc:	80fb      	strh	r3, [r7, #6]
 80042be:	e002      	b.n	80042c6 <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 80042c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004478 <RCkeysRefresh+0x220>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042cc:	d307      	bcc.n	80042de <RCkeysRefresh+0x86>
		pc_control.x = 1;
 80042ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <RCkeysRefresh+0x220>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80042da:	80fb      	strh	r3, [r7, #6]
 80042dc:	e002      	b.n	80042e4 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 80042de:	4b66      	ldr	r3, [pc, #408]	@ (8004478 <RCkeysRefresh+0x220>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ea:	d307      	bcc.n	80042fc <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 80042ec:	4b62      	ldr	r3, [pc, #392]	@ (8004478 <RCkeysRefresh+0x220>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80042f8:	80fb      	strh	r3, [r7, #6]
 80042fa:	e002      	b.n	8004302 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 80042fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004478 <RCkeysRefresh+0x220>)
 80042fe:	2200      	movs	r2, #0
 8004300:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004308:	d307      	bcc.n	800431a <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 800430a:	4b5b      	ldr	r3, [pc, #364]	@ (8004478 <RCkeysRefresh+0x220>)
 800430c:	2201      	movs	r2, #1
 800430e:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004316:	80fb      	strh	r3, [r7, #6]
 8004318:	e002      	b.n	8004320 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 800431a:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <RCkeysRefresh+0x220>)
 800431c:	2200      	movs	r2, #0
 800431e:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004326:	d307      	bcc.n	8004338 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8004328:	4b53      	ldr	r3, [pc, #332]	@ (8004478 <RCkeysRefresh+0x220>)
 800432a:	2201      	movs	r2, #1
 800432c:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004334:	80fb      	strh	r3, [r7, #6]
 8004336:	e002      	b.n	800433e <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8004338:	4b4f      	ldr	r3, [pc, #316]	@ (8004478 <RCkeysRefresh+0x220>)
 800433a:	2200      	movs	r2, #0
 800433c:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2bff      	cmp	r3, #255	@ 0xff
 8004342:	d907      	bls.n	8004354 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <RCkeysRefresh+0x220>)
 8004346:	2201      	movs	r2, #1
 8004348:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004350:	80fb      	strh	r3, [r7, #6]
 8004352:	e002      	b.n	800435a <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8004354:	4b48      	ldr	r3, [pc, #288]	@ (8004478 <RCkeysRefresh+0x220>)
 8004356:	2200      	movs	r2, #0
 8004358:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b7f      	cmp	r3, #127	@ 0x7f
 800435e:	d906      	bls.n	800436e <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <RCkeysRefresh+0x220>)
 8004362:	2201      	movs	r2, #1
 8004364:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	3b80      	subs	r3, #128	@ 0x80
 800436a:	80fb      	strh	r3, [r7, #6]
 800436c:	e002      	b.n	8004374 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 800436e:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <RCkeysRefresh+0x220>)
 8004370:	2200      	movs	r2, #0
 8004372:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	2b3f      	cmp	r3, #63	@ 0x3f
 8004378:	d906      	bls.n	8004388 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 800437a:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <RCkeysRefresh+0x220>)
 800437c:	2201      	movs	r2, #1
 800437e:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	3b40      	subs	r3, #64	@ 0x40
 8004384:	80fb      	strh	r3, [r7, #6]
 8004386:	e002      	b.n	800438e <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <RCkeysRefresh+0x220>)
 800438a:	2200      	movs	r2, #0
 800438c:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b1f      	cmp	r3, #31
 8004392:	d906      	bls.n	80043a2 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8004394:	4b38      	ldr	r3, [pc, #224]	@ (8004478 <RCkeysRefresh+0x220>)
 8004396:	2201      	movs	r2, #1
 8004398:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	3b20      	subs	r3, #32
 800439e:	80fb      	strh	r3, [r7, #6]
 80043a0:	e002      	b.n	80043a8 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 80043a2:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <RCkeysRefresh+0x220>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	d906      	bls.n	80043bc <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 80043ae:	4b32      	ldr	r3, [pc, #200]	@ (8004478 <RCkeysRefresh+0x220>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	3b10      	subs	r3, #16
 80043b8:	80fb      	strh	r3, [r7, #6]
 80043ba:	e002      	b.n	80043c2 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 80043bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <RCkeysRefresh+0x220>)
 80043be:	2200      	movs	r2, #0
 80043c0:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b07      	cmp	r3, #7
 80043c6:	d906      	bls.n	80043d6 <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <RCkeysRefresh+0x220>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	3b08      	subs	r3, #8
 80043d2:	80fb      	strh	r3, [r7, #6]
 80043d4:	e002      	b.n	80043dc <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 80043d6:	4b28      	ldr	r3, [pc, #160]	@ (8004478 <RCkeysRefresh+0x220>)
 80043d8:	2200      	movs	r2, #0
 80043da:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d906      	bls.n	80043f0 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <RCkeysRefresh+0x220>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	3b04      	subs	r3, #4
 80043ec:	80fb      	strh	r3, [r7, #6]
 80043ee:	e002      	b.n	80043f6 <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 80043f0:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <RCkeysRefresh+0x220>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d906      	bls.n	800440a <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 80043fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <RCkeysRefresh+0x220>)
 80043fe:	2201      	movs	r2, #1
 8004400:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	3b02      	subs	r3, #2
 8004406:	80fb      	strh	r3, [r7, #6]
 8004408:	e002      	b.n	8004410 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <RCkeysRefresh+0x220>)
 800440c:	2200      	movs	r2, #0
 800440e:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <RCkeysRefresh+0x220>)
 8004418:	2201      	movs	r2, #1
 800441a:	731a      	strb	r2, [r3, #12]
 800441c:	e002      	b.n	8004424 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 800441e:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <RCkeysRefresh+0x220>)
 8004420:	2200      	movs	r2, #0
 8004422:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <RCkeysRefresh+0x21c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800442c:	b21a      	sxth	r2, r3
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <RCkeysRefresh+0x220>)
 8004430:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <RCkeysRefresh+0x21c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800443a:	b21a      	sxth	r2, r3
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <RCkeysRefresh+0x220>)
 800443e:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <RCkeysRefresh+0x21c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004448:	b21a      	sxth	r2, r3
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <RCkeysRefresh+0x220>)
 800444c:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 800444e:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <RCkeysRefresh+0x21c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	7c9b      	ldrb	r3, [r3, #18]
 8004454:	b25a      	sxtb	r2, r3
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <RCkeysRefresh+0x220>)
 8004458:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <RCkeysRefresh+0x21c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	7cdb      	ldrb	r3, [r3, #19]
 8004460:	b25a      	sxtb	r2, r3
 8004462:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <RCkeysRefresh+0x220>)
 8004464:	71da      	strb	r2, [r3, #7]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000018 	.word	0x20000018
 8004478:	2000054c 	.word	0x2000054c

0800447c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <HAL_MspInit+0x54>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	4a11      	ldr	r2, [pc, #68]	@ (80044d0 <HAL_MspInit+0x54>)
 800448c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004490:	6453      	str	r3, [r2, #68]	@ 0x44
 8004492:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <HAL_MspInit+0x54>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_MspInit+0x54>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <HAL_MspInit+0x54>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ae:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <HAL_MspInit+0x54>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044ba:	2200      	movs	r2, #0
 80044bc:	210f      	movs	r1, #15
 80044be:	f06f 0001 	mvn.w	r0, #1
 80044c2:	f001 fdb8 	bl	8006036 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a4a      	ldr	r2, [pc, #296]	@ (800461c <HAL_CAN_MspInit+0x148>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d13d      	bne.n	8004572 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a48      	ldr	r2, [pc, #288]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 80044fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004500:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10d      	bne.n	8004524 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	4b45      	ldr	r3, [pc, #276]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a44      	ldr	r2, [pc, #272]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 8004512:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
 8004518:	4b42      	ldr	r3, [pc, #264]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	4a3d      	ldr	r2, [pc, #244]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 800452e:	f043 0308 	orr.w	r3, r3, #8
 8004532:	6313      	str	r3, [r2, #48]	@ 0x30
 8004534:	4b3b      	ldr	r3, [pc, #236]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004540:	2303      	movs	r3, #3
 8004542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004550:	2309      	movs	r3, #9
 8004552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004554:	f107 031c 	add.w	r3, r7, #28
 8004558:	4619      	mov	r1, r3
 800455a:	4833      	ldr	r0, [pc, #204]	@ (8004628 <HAL_CAN_MspInit+0x154>)
 800455c:	f002 f9a4 	bl	80068a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2105      	movs	r1, #5
 8004564:	2014      	movs	r0, #20
 8004566:	f001 fd66 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800456a:	2014      	movs	r0, #20
 800456c:	f001 fd7f 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004570:	e04f      	b.n	8004612 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2d      	ldr	r2, [pc, #180]	@ (800462c <HAL_CAN_MspInit+0x158>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d14a      	bne.n	8004612 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	4a27      	ldr	r2, [pc, #156]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6413      	str	r3, [r2, #64]	@ 0x40
 800458c:	4b25      	ldr	r3, [pc, #148]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a20      	ldr	r2, [pc, #128]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 80045a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80045a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004620 <HAL_CAN_MspInit+0x14c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10d      	bne.n	80045c6 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_CAN_MspInit+0x150>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80045e2:	2360      	movs	r3, #96	@ 0x60
 80045e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ee:	2303      	movs	r3, #3
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80045f2:	2309      	movs	r3, #9
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f6:	f107 031c 	add.w	r3, r7, #28
 80045fa:	4619      	mov	r1, r3
 80045fc:	480c      	ldr	r0, [pc, #48]	@ (8004630 <HAL_CAN_MspInit+0x15c>)
 80045fe:	f002 f953 	bl	80068a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004602:	2200      	movs	r2, #0
 8004604:	2105      	movs	r1, #5
 8004606:	2040      	movs	r0, #64	@ 0x40
 8004608:	f001 fd15 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800460c:	2040      	movs	r0, #64	@ 0x40
 800460e:	f001 fd2e 	bl	800606e <HAL_NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3730      	adds	r7, #48	@ 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40006400 	.word	0x40006400
 8004620:	20000c74 	.word	0x20000c74
 8004624:	40023800 	.word	0x40023800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40006800 	.word	0x40006800
 8004630:	40020400 	.word	0x40020400

08004634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a29      	ldr	r2, [pc, #164]	@ (80046f8 <HAL_I2C_MspInit+0xc4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d14b      	bne.n	80046ee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	4a27      	ldr	r2, [pc, #156]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6313      	str	r3, [r2, #48]	@ 0x30
 8004666:	4b25      	ldr	r3, [pc, #148]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6313      	str	r3, [r2, #48]	@ 0x30
 8004682:	4b1e      	ldr	r3, [pc, #120]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800468e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004694:	2312      	movs	r3, #18
 8004696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469c:	2303      	movs	r3, #3
 800469e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046a0:	2304      	movs	r3, #4
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4619      	mov	r1, r3
 80046aa:	4815      	ldr	r0, [pc, #84]	@ (8004700 <HAL_I2C_MspInit+0xcc>)
 80046ac:	f002 f8fc 	bl	80068a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046b6:	2312      	movs	r3, #18
 80046b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046c2:	2304      	movs	r3, #4
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	480d      	ldr	r0, [pc, #52]	@ (8004704 <HAL_I2C_MspInit+0xd0>)
 80046ce:	f002 f8eb 	bl	80068a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	4a08      	ldr	r2, [pc, #32]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 80046dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_I2C_MspInit+0xc8>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80046ee:	bf00      	nop
 80046f0:	3728      	adds	r7, #40	@ 0x28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40005c00 	.word	0x40005c00
 80046fc:	40023800 	.word	0x40023800
 8004700:	40020800 	.word	0x40020800
 8004704:	40020000 	.word	0x40020000

08004708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	@ 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <HAL_SPI_MspInit+0xc0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d149      	bne.n	80047be <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	4a26      	ldr	r2, [pc, #152]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004734:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004738:	6453      	str	r3, [r2, #68]	@ 0x44
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6313      	str	r3, [r2, #48]	@ 0x30
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6313      	str	r3, [r2, #48]	@ 0x30
 8004772:	4b16      	ldr	r3, [pc, #88]	@ (80047cc <HAL_SPI_MspInit+0xc4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800477e:	2318      	movs	r3, #24
 8004780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478a:	2303      	movs	r3, #3
 800478c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800478e:	2305      	movs	r3, #5
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	4619      	mov	r1, r3
 8004798:	480d      	ldr	r0, [pc, #52]	@ (80047d0 <HAL_SPI_MspInit+0xc8>)
 800479a:	f002 f885 	bl	80068a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a2:	2302      	movs	r3, #2
 80047a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047aa:	2303      	movs	r3, #3
 80047ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047ae:	2305      	movs	r3, #5
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b2:	f107 0314 	add.w	r3, r7, #20
 80047b6:	4619      	mov	r1, r3
 80047b8:	4806      	ldr	r0, [pc, #24]	@ (80047d4 <HAL_SPI_MspInit+0xcc>)
 80047ba:	f002 f875 	bl	80068a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047be:	bf00      	nop
 80047c0:	3728      	adds	r7, #40	@ 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40013000 	.word	0x40013000
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40020400 	.word	0x40020400
 80047d4:	40020000 	.word	0x40020000

080047d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <HAL_TIM_PWM_MspInit+0x8c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004806:	e026      	b.n	8004856 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a17      	ldr	r2, [pc, #92]	@ (800486c <HAL_TIM_PWM_MspInit+0x94>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	4a13      	ldr	r2, [pc, #76]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	6413      	str	r3, [r2, #64]	@ 0x40
 8004822:	4b11      	ldr	r3, [pc, #68]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
}
 800482e:	e012      	b.n	8004856 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0e      	ldr	r2, [pc, #56]	@ (8004870 <HAL_TIM_PWM_MspInit+0x98>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10d      	bne.n	8004856 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	4a09      	ldr	r2, [pc, #36]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	6453      	str	r3, [r2, #68]	@ 0x44
 800484a:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <HAL_TIM_PWM_MspInit+0x90>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40010000 	.word	0x40010000
 8004868:	40023800 	.word	0x40023800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400

08004874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a15      	ldr	r2, [pc, #84]	@ (80048d8 <HAL_TIM_Base_MspInit+0x64>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	4a13      	ldr	r2, [pc, #76]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6413      	str	r3, [r2, #64]	@ 0x40
 8004896:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80048a2:	e012      	b.n	80048ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	@ (80048e0 <HAL_TIM_Base_MspInit+0x6c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10d      	bne.n	80048ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	4a09      	ldr	r2, [pc, #36]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 80048b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <HAL_TIM_Base_MspInit+0x68>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40014400 	.word	0x40014400

080048e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	@ 0x38
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a6a      	ldr	r2, [pc, #424]	@ (8004aac <HAL_TIM_MspPostInit+0x1c8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d11f      	bne.n	8004946 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	4b69      	ldr	r3, [pc, #420]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	4a68      	ldr	r2, [pc, #416]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004910:	f043 0310 	orr.w	r3, r3, #16
 8004914:	6313      	str	r3, [r2, #48]	@ 0x30
 8004916:	4b66      	ldr	r3, [pc, #408]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8004922:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004930:	2300      	movs	r3, #0
 8004932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004934:	2301      	movs	r3, #1
 8004936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800493c:	4619      	mov	r1, r3
 800493e:	485d      	ldr	r0, [pc, #372]	@ (8004ab4 <HAL_TIM_MspPostInit+0x1d0>)
 8004940:	f001 ffb2 	bl	80068a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004944:	e0ae      	b.n	8004aa4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ab8 <HAL_TIM_MspPostInit+0x1d4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d11f      	bne.n	8004990 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	4b56      	ldr	r3, [pc, #344]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	4a55      	ldr	r2, [pc, #340]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004960:	4b53      	ldr	r3, [pc, #332]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800496c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004972:	2302      	movs	r3, #2
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004976:	2300      	movs	r3, #0
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497a:	2300      	movs	r3, #0
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800497e:	2302      	movs	r3, #2
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004986:	4619      	mov	r1, r3
 8004988:	484c      	ldr	r0, [pc, #304]	@ (8004abc <HAL_TIM_MspPostInit+0x1d8>)
 800498a:	f001 ff8d 	bl	80068a8 <HAL_GPIO_Init>
}
 800498e:	e089      	b.n	8004aa4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac0 <HAL_TIM_MspPostInit+0x1dc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d11f      	bne.n	80049da <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	4b44      	ldr	r3, [pc, #272]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	4a43      	ldr	r2, [pc, #268]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049aa:	4b41      	ldr	r3, [pc, #260]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80049b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	2302      	movs	r3, #2
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c4:	2300      	movs	r3, #0
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80049c8:	2302      	movs	r3, #2
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80049cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d0:	4619      	mov	r1, r3
 80049d2:	483c      	ldr	r0, [pc, #240]	@ (8004ac4 <HAL_TIM_MspPostInit+0x1e0>)
 80049d4:	f001 ff68 	bl	80068a8 <HAL_GPIO_Init>
}
 80049d8:	e064      	b.n	8004aa4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac8 <HAL_TIM_MspPostInit+0x1e4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d13c      	bne.n	8004a5e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	4b31      	ldr	r3, [pc, #196]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049f4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	4a29      	ldr	r2, [pc, #164]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a10:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004a1c:	23c0      	movs	r3, #192	@ 0xc0
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a34:	4619      	mov	r1, r3
 8004a36:	4825      	ldr	r0, [pc, #148]	@ (8004acc <HAL_TIM_MspPostInit+0x1e8>)
 8004a38:	f001 ff36 	bl	80068a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a3c:	2340      	movs	r3, #64	@ 0x40
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a40:	2302      	movs	r3, #2
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a54:	4619      	mov	r1, r3
 8004a56:	481e      	ldr	r0, [pc, #120]	@ (8004ad0 <HAL_TIM_MspPostInit+0x1ec>)
 8004a58:	f001 ff26 	bl	80068a8 <HAL_GPIO_Init>
}
 8004a5c:	e022      	b.n	8004aa4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <HAL_TIM_MspPostInit+0x1f0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d11d      	bne.n	8004aa4 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	4b10      	ldr	r3, [pc, #64]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a72:	f043 0320 	orr.w	r3, r3, #32
 8004a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a78:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1cc>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a84:	2340      	movs	r3, #64	@ 0x40
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a90:	2302      	movs	r3, #2
 8004a92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004a94:	2303      	movs	r3, #3
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480e      	ldr	r0, [pc, #56]	@ (8004ad8 <HAL_TIM_MspPostInit+0x1f4>)
 8004aa0:	f001 ff02 	bl	80068a8 <HAL_GPIO_Init>
}
 8004aa4:	bf00      	nop
 8004aa6:	3738      	adds	r7, #56	@ 0x38
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40020c00 	.word	0x40020c00
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40021c00 	.word	0x40021c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40020800 	.word	0x40020800
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40021400 	.word	0x40021400

08004adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	@ 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a90      	ldr	r2, [pc, #576]	@ (8004d3c <HAL_UART_MspInit+0x260>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f040 80b2 	bne.w	8004c64 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b00:	2300      	movs	r3, #0
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	4b8e      	ldr	r3, [pc, #568]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	4a8d      	ldr	r2, [pc, #564]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b0a:	f043 0310 	orr.w	r3, r3, #16
 8004b0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b10:	4b8b      	ldr	r3, [pc, #556]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	4b87      	ldr	r3, [pc, #540]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	4a86      	ldr	r2, [pc, #536]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2c:	4b84      	ldr	r3, [pc, #528]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	4b80      	ldr	r3, [pc, #512]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b40:	4a7f      	ldr	r2, [pc, #508]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b48:	4b7d      	ldr	r3, [pc, #500]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b60:	2303      	movs	r3, #3
 8004b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b64:	2307      	movs	r3, #7
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4875      	ldr	r0, [pc, #468]	@ (8004d44 <HAL_UART_MspInit+0x268>)
 8004b70:	f001 fe9a 	bl	80068a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b82:	2303      	movs	r3, #3
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b86:	2307      	movs	r3, #7
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b8e:	4619      	mov	r1, r3
 8004b90:	486d      	ldr	r0, [pc, #436]	@ (8004d48 <HAL_UART_MspInit+0x26c>)
 8004b92:	f001 fe89 	bl	80068a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004b96:	4b6d      	ldr	r3, [pc, #436]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004b98:	4a6d      	ldr	r2, [pc, #436]	@ (8004d50 <HAL_UART_MspInit+0x274>)
 8004b9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004b9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004ba2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ba4:	4b69      	ldr	r3, [pc, #420]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004baa:	4b68      	ldr	r3, [pc, #416]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb0:	4b66      	ldr	r3, [pc, #408]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb8:	4b64      	ldr	r3, [pc, #400]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004bc4:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004bca:	4b60      	ldr	r3, [pc, #384]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bcc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004bd0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004bd8:	485c      	ldr	r0, [pc, #368]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bda:	f001 fa63 	bl	80060a4 <HAL_DMA_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004be4:	f7fe fe5c 	bl	80038a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a58      	ldr	r2, [pc, #352]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bee:	4a57      	ldr	r2, [pc, #348]	@ (8004d4c <HAL_UART_MspInit+0x270>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004bf4:	4b57      	ldr	r3, [pc, #348]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004bf6:	4a58      	ldr	r2, [pc, #352]	@ (8004d58 <HAL_UART_MspInit+0x27c>)
 8004bf8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004bfa:	4b56      	ldr	r3, [pc, #344]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004bfc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c02:	4b54      	ldr	r3, [pc, #336]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c08:	4b52      	ldr	r3, [pc, #328]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c0e:	4b51      	ldr	r3, [pc, #324]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c16:	4b4f      	ldr	r3, [pc, #316]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004c22:	4b4c      	ldr	r3, [pc, #304]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004c28:	4b4a      	ldr	r3, [pc, #296]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c30:	4b48      	ldr	r3, [pc, #288]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c36:	4847      	ldr	r0, [pc, #284]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c38:	f001 fa34 	bl	80060a4 <HAL_DMA_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8004c42:	f7fe fe2d 	bl	80038a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a42      	ldr	r2, [pc, #264]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c4c:	4a41      	ldr	r2, [pc, #260]	@ (8004d54 <HAL_UART_MspInit+0x278>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004c52:	2200      	movs	r2, #0
 8004c54:	2105      	movs	r1, #5
 8004c56:	2025      	movs	r0, #37	@ 0x25
 8004c58:	f001 f9ed 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c5c:	2025      	movs	r0, #37	@ 0x25
 8004c5e:	f001 fa06 	bl	800606e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004c62:	e11c      	b.n	8004e9e <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3c      	ldr	r2, [pc, #240]	@ (8004d5c <HAL_UART_MspInit+0x280>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d17e      	bne.n	8004d6c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	4b33      	ldr	r3, [pc, #204]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	4a32      	ldr	r2, [pc, #200]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c7e:	4b30      	ldr	r3, [pc, #192]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <HAL_UART_MspInit+0x264>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004ca6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	2302      	movs	r3, #2
 8004cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004cb8:	2307      	movs	r3, #7
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4827      	ldr	r0, [pc, #156]	@ (8004d60 <HAL_UART_MspInit+0x284>)
 8004cc4:	f001 fdf0 	bl	80068a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004cc8:	4b26      	ldr	r3, [pc, #152]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cca:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_UART_MspInit+0x28c>)
 8004ccc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004cce:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004cd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cdc:	4b21      	ldr	r3, [pc, #132]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ce2:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004ce4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ce8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cea:	4b1e      	ldr	r3, [pc, #120]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cfc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004d00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004d04:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d06:	4b17      	ldr	r3, [pc, #92]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d0c:	4815      	ldr	r0, [pc, #84]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004d0e:	f001 f9c9 	bl	80060a4 <HAL_DMA_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004d18:	f7fe fdc2 	bl	80038a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d22:	4a10      	ldr	r2, [pc, #64]	@ (8004d64 <HAL_UART_MspInit+0x288>)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2105      	movs	r1, #5
 8004d2c:	2027      	movs	r0, #39	@ 0x27
 8004d2e:	f001 f982 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004d32:	2027      	movs	r0, #39	@ 0x27
 8004d34:	f001 f99b 	bl	800606e <HAL_NVIC_EnableIRQ>
}
 8004d38:	e0b1      	b.n	8004e9e <HAL_UART_MspInit+0x3c2>
 8004d3a:	bf00      	nop
 8004d3c:	40011000 	.word	0x40011000
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	20000a00 	.word	0x20000a00
 8004d50:	400264b8 	.word	0x400264b8
 8004d54:	20000a60 	.word	0x20000a60
 8004d58:	40026440 	.word	0x40026440
 8004d5c:	40004800 	.word	0x40004800
 8004d60:	40020800 	.word	0x40020800
 8004d64:	20000ac0 	.word	0x20000ac0
 8004d68:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea8 <HAL_UART_MspInit+0x3cc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f040 8093 	bne.w	8004e9e <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d80:	4a4a      	ldr	r2, [pc, #296]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004d82:	f043 0320 	orr.w	r3, r3, #32
 8004d86:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d88:	4b48      	ldr	r3, [pc, #288]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	4b44      	ldr	r3, [pc, #272]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	4a43      	ldr	r2, [pc, #268]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da4:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <HAL_UART_MspInit+0x3d0>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004db0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db6:	2302      	movs	r3, #2
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4838      	ldr	r0, [pc, #224]	@ (8004eb0 <HAL_UART_MspInit+0x3d4>)
 8004dce:	f001 fd6b 	bl	80068a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004dd2:	4b38      	ldr	r3, [pc, #224]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004dd4:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <HAL_UART_MspInit+0x3dc>)
 8004dd6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004dd8:	4b36      	ldr	r3, [pc, #216]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004dda:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004dde:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004de0:	4b34      	ldr	r3, [pc, #208]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de6:	4b33      	ldr	r3, [pc, #204]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004dec:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004df4:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004e00:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004e06:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e0c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e0e:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004e14:	4827      	ldr	r0, [pc, #156]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e16:	f001 f945 	bl	80060a4 <HAL_DMA_Init>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004e20:	f7fe fd3e 	bl	80038a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a23      	ldr	r2, [pc, #140]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e28:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e2a:	4a22      	ldr	r2, [pc, #136]	@ (8004eb4 <HAL_UART_MspInit+0x3d8>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004e30:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e32:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <HAL_UART_MspInit+0x3e4>)
 8004e34:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004e36:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e38:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004e3c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e40:	2240      	movs	r2, #64	@ 0x40
 8004e42:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e50:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e58:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004e64:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e66:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e6a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e6c:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004e72:	4812      	ldr	r0, [pc, #72]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e74:	f001 f916 	bl	80060a4 <HAL_DMA_Init>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004e7e:	f7fe fd0f 	bl	80038a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e86:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e88:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <HAL_UART_MspInit+0x3e0>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2105      	movs	r1, #5
 8004e92:	2047      	movs	r0, #71	@ 0x47
 8004e94:	f001 f8cf 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004e98:	2047      	movs	r0, #71	@ 0x47
 8004e9a:	f001 f8e8 	bl	800606e <HAL_NVIC_EnableIRQ>
}
 8004e9e:	bf00      	nop
 8004ea0:	3738      	adds	r7, #56	@ 0x38
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40011400 	.word	0x40011400
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40021800 	.word	0x40021800
 8004eb4:	20000b20 	.word	0x20000b20
 8004eb8:	40026428 	.word	0x40026428
 8004ebc:	20000b80 	.word	0x20000b80
 8004ec0:	400264a0 	.word	0x400264a0

08004ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004ec8:	f003 f90e 	bl	80080e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <NMI_Handler+0x8>

08004ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <HardFault_Handler+0x4>

08004ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <MemManage_Handler+0x4>

08004ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <BusFault_Handler+0x4>

08004ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <UsageFault_Handler+0x4>

08004ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f02:	f000 f93b 	bl	800517c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f06:	f007 fc21 	bl	800c74c <xTaskGetSchedulerState>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f10:	f008 fafa 	bl	800d508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004f1c:	2008      	movs	r0, #8
 8004f1e:	f001 fe79 	bl	8006c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004f22:	4802      	ldr	r0, [pc, #8]	@ (8004f2c <EXTI3_IRQHandler+0x14>)
 8004f24:	f7fd fab2 	bl	800248c <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200006c4 	.word	0x200006c4

08004f30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004f34:	2010      	movs	r0, #16
 8004f36:	f001 fe6d 	bl	8006c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004f44:	4802      	ldr	r0, [pc, #8]	@ (8004f50 <DMA1_Stream1_IRQHandler+0x10>)
 8004f46:	f001 fa45 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000ac0 	.word	0x20000ac0

08004f54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004f58:	4802      	ldr	r0, [pc, #8]	@ (8004f64 <CAN1_RX0_IRQHandler+0x10>)
 8004f5a:	f000 fd62 	bl	8005a22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200006d0 	.word	0x200006d0

08004f68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f6c:	4802      	ldr	r0, [pc, #8]	@ (8004f78 <USART1_IRQHandler+0x10>)
 8004f6e:	f004 fca5 	bl	80098bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000934 	.word	0x20000934

08004f7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004f80:	4802      	ldr	r0, [pc, #8]	@ (8004f8c <DMA2_Stream1_IRQHandler+0x10>)
 8004f82:	f001 fa27 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000b20 	.word	0x20000b20

08004f90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004f94:	4802      	ldr	r0, [pc, #8]	@ (8004fa0 <DMA2_Stream2_IRQHandler+0x10>)
 8004f96:	f001 fa1d 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000a60 	.word	0x20000a60

08004fa4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004fa8:	4802      	ldr	r0, [pc, #8]	@ (8004fb4 <CAN2_RX0_IRQHandler+0x10>)
 8004faa:	f000 fd3a 	bl	8005a22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200006f8 	.word	0x200006f8

08004fb8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004fbc:	4802      	ldr	r0, [pc, #8]	@ (8004fc8 <DMA2_Stream6_IRQHandler+0x10>)
 8004fbe:	f001 fa09 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000b80 	.word	0x20000b80

08004fcc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004fd0:	4802      	ldr	r0, [pc, #8]	@ (8004fdc <DMA2_Stream7_IRQHandler+0x10>)
 8004fd2:	f001 f9ff 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000a00 	.word	0x20000a00

08004fe0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004fe4:	4802      	ldr	r0, [pc, #8]	@ (8004ff0 <USART6_IRQHandler+0x10>)
 8004fe6:	f004 fc69 	bl	80098bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200009bc 	.word	0x200009bc

08004ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <_sbrk+0x5c>)
 8004ffe:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <_sbrk+0x60>)
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005008:	4b13      	ldr	r3, [pc, #76]	@ (8005058 <_sbrk+0x64>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005010:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <_sbrk+0x64>)
 8005012:	4a12      	ldr	r2, [pc, #72]	@ (800505c <_sbrk+0x68>)
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005016:	4b10      	ldr	r3, [pc, #64]	@ (8005058 <_sbrk+0x64>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	d207      	bcs.n	8005034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005024:	f008 fd18 	bl	800da58 <__errno>
 8005028:	4603      	mov	r3, r0
 800502a:	220c      	movs	r2, #12
 800502c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005032:	e009      	b.n	8005048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005034:	4b08      	ldr	r3, [pc, #32]	@ (8005058 <_sbrk+0x64>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800503a:	4b07      	ldr	r3, [pc, #28]	@ (8005058 <_sbrk+0x64>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	4a05      	ldr	r2, [pc, #20]	@ (8005058 <_sbrk+0x64>)
 8005044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20020000 	.word	0x20020000
 8005054:	00000400 	.word	0x00000400
 8005058:	20000c78 	.word	0x20000c78
 800505c:	200057b0 	.word	0x200057b0

08005060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <SystemInit+0x20>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506a:	4a05      	ldr	r2, [pc, #20]	@ (8005080 <SystemInit+0x20>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80050bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005088:	480d      	ldr	r0, [pc, #52]	@ (80050c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800508a:	490e      	ldr	r1, [pc, #56]	@ (80050c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800508c:	4a0e      	ldr	r2, [pc, #56]	@ (80050c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005090:	e002      	b.n	8005098 <LoopCopyDataInit>

08005092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005096:	3304      	adds	r3, #4

08005098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800509a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800509c:	d3f9      	bcc.n	8005092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509e:	4a0b      	ldr	r2, [pc, #44]	@ (80050cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050a0:	4c0b      	ldr	r4, [pc, #44]	@ (80050d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80050a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a4:	e001      	b.n	80050aa <LoopFillZerobss>

080050a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a8:	3204      	adds	r2, #4

080050aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050ac:	d3fb      	bcc.n	80050a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050ae:	f7ff ffd7 	bl	8005060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050b2:	f008 fcd7 	bl	800da64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050b6:	f7fd fa59 	bl	800256c <main>
  bx  lr    
 80050ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80050c8:	0800e594 	.word	0x0800e594
  ldr r2, =_sbss
 80050cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80050d0:	200057b0 	.word	0x200057b0

080050d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050d4:	e7fe      	b.n	80050d4 <ADC_IRQHandler>
	...

080050d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005118 <HAL_Init+0x40>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005118 <HAL_Init+0x40>)
 80050e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <HAL_Init+0x40>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005118 <HAL_Init+0x40>)
 80050ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050f4:	4b08      	ldr	r3, [pc, #32]	@ (8005118 <HAL_Init+0x40>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a07      	ldr	r2, [pc, #28]	@ (8005118 <HAL_Init+0x40>)
 80050fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005100:	2003      	movs	r0, #3
 8005102:	f000 ff8d 	bl	8006020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005106:	200f      	movs	r0, #15
 8005108:	f000 f808 	bl	800511c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800510c:	f7ff f9b6 	bl	800447c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023c00 	.word	0x40023c00

0800511c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <HAL_InitTick+0x54>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <HAL_InitTick+0x58>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005132:	fbb3 f3f1 	udiv	r3, r3, r1
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f000 ffa5 	bl	800608a <HAL_SYSTICK_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00e      	b.n	8005168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d80a      	bhi.n	8005166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005150:	2200      	movs	r2, #0
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005158:	f000 ff6d 	bl	8006036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800515c:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <HAL_InitTick+0x5c>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	2000001c 	.word	0x2000001c
 8005174:	20000024 	.word	0x20000024
 8005178:	20000020 	.word	0x20000020

0800517c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_IncTick+0x20>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_IncTick+0x24>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4413      	add	r3, r2
 800518c:	4a04      	ldr	r2, [pc, #16]	@ (80051a0 <HAL_IncTick+0x24>)
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000024 	.word	0x20000024
 80051a0:	20000c7c 	.word	0x20000c7c

080051a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return uwTick;
 80051a8:	4b03      	ldr	r3, [pc, #12]	@ (80051b8 <HAL_GetTick+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000c7c 	.word	0x20000c7c

080051bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0ed      	b.n	80053aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff f97a 	bl	80044d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f0:	f7ff ffd8 	bl	80051a4 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051f6:	e012      	b.n	800521e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051f8:	f7ff ffd4 	bl	80051a4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b0a      	cmp	r3, #10
 8005204:	d90b      	bls.n	800521e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2205      	movs	r2, #5
 8005216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0c5      	b.n	80053aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0e5      	beq.n	80051f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0202 	bic.w	r2, r2, #2
 800523a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800523c:	f7ff ffb2 	bl	80051a4 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005242:	e012      	b.n	800526a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005244:	f7ff ffae 	bl	80051a4 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b0a      	cmp	r3, #10
 8005250:	d90b      	bls.n	800526a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2205      	movs	r2, #5
 8005262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e09f      	b.n	80053aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7e1b      	ldrb	r3, [r3, #24]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e007      	b.n	80052a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7e5b      	ldrb	r3, [r3, #25]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d108      	bne.n	80052bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e007      	b.n	80052cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7e9b      	ldrb	r3, [r3, #26]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d108      	bne.n	80052e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0220 	orr.w	r2, r2, #32
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e007      	b.n	80052f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0220 	bic.w	r2, r2, #32
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7edb      	ldrb	r3, [r3, #27]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d108      	bne.n	8005310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0210 	bic.w	r2, r2, #16
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e007      	b.n	8005320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0210 	orr.w	r2, r2, #16
 800531e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7f1b      	ldrb	r3, [r3, #28]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d108      	bne.n	800533a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e007      	b.n	800534a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0208 	bic.w	r2, r2, #8
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7f5b      	ldrb	r3, [r3, #29]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0204 	orr.w	r2, r2, #4
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e007      	b.n	8005374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	ea42 0103 	orr.w	r1, r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d003      	beq.n	80053da <HAL_CAN_ConfigFilter+0x26>
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f040 80be 	bne.w	8005556 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80053da:	4b65      	ldr	r3, [pc, #404]	@ (8005570 <HAL_CAN_ConfigFilter+0x1bc>)
 80053dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053f4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	431a      	orrs	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	43db      	mvns	r3, r3
 800542c:	401a      	ands	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d123      	bne.n	8005484 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800545e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3248      	adds	r2, #72	@ 0x48
 8005464:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005478:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	3348      	adds	r3, #72	@ 0x48
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	440b      	add	r3, r1
 8005482:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d122      	bne.n	80054d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	431a      	orrs	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	3248      	adds	r2, #72	@ 0x48
 80054b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054c8:	6979      	ldr	r1, [r7, #20]
 80054ca:	3348      	adds	r3, #72	@ 0x48
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	440b      	add	r3, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	43db      	mvns	r3, r3
 80054e4:	401a      	ands	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80054ec:	e007      	b.n	80054fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	401a      	ands	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005518:	e007      	b.n	800552a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	431a      	orrs	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	431a      	orrs	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005548:	f023 0201 	bic.w	r2, r3, #1
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e006      	b.n	8005564 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40006400 	.word	0x40006400

08005574 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d12e      	bne.n	80055e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a0:	f7ff fe00 	bl	80051a4 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055a6:	e012      	b.n	80055ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055a8:	f7ff fdfc 	bl	80051a4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b0a      	cmp	r3, #10
 80055b4:	d90b      	bls.n	80055ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2205      	movs	r2, #5
 80055c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e012      	b.n	80055f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e006      	b.n	80055f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	@ 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005610:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800561a:	7ffb      	ldrb	r3, [r7, #31]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d003      	beq.n	8005628 <HAL_CAN_AddTxMessage+0x2c>
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	2b02      	cmp	r3, #2
 8005624:	f040 80b8 	bne.w	8005798 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a0 	beq.w	8005788 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d907      	bls.n	8005668 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e09e      	b.n	80057a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005668:	2201      	movs	r2, #1
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	409a      	lsls	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	6809      	ldr	r1, [r1, #0]
 8005688:	431a      	orrs	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	3318      	adds	r3, #24
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	440b      	add	r3, r1
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e00f      	b.n	80056b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80056aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3318      	adds	r3, #24
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	440b      	add	r3, r1
 80056b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3318      	adds	r3, #24
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	440b      	add	r3, r1
 80056c6:	3304      	adds	r3, #4
 80056c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	7d1b      	ldrb	r3, [r3, #20]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d111      	bne.n	80056f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	3318      	adds	r3, #24
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6811      	ldr	r1, [r2, #0]
 80056e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3318      	adds	r3, #24
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	440b      	add	r3, r1
 80056f2:	3304      	adds	r3, #4
 80056f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3307      	adds	r3, #7
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	061a      	lsls	r2, r3, #24
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3306      	adds	r3, #6
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3305      	adds	r3, #5
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	4313      	orrs	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	3204      	adds	r2, #4
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	4610      	mov	r0, r2
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	6811      	ldr	r1, [r2, #0]
 800571e:	ea43 0200 	orr.w	r2, r3, r0
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	440b      	add	r3, r1
 8005728:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800572c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3303      	adds	r3, #3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	061a      	lsls	r2, r3, #24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3302      	adds	r3, #2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3301      	adds	r3, #1
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	4313      	orrs	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	4610      	mov	r0, r2
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6811      	ldr	r1, [r2, #0]
 8005754:	ea43 0200 	orr.w	r2, r3, r0
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	440b      	add	r3, r1
 800575e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005762:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3318      	adds	r3, #24
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	4413      	add	r3, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6811      	ldr	r1, [r2, #0]
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	3318      	adds	r3, #24
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	440b      	add	r3, r1
 8005782:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e00e      	b.n	80057a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e006      	b.n	80057a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	@ 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d003      	beq.n	80057d6 <HAL_CAN_GetRxMessage+0x24>
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	f040 80f3 	bne.w	80059bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10e      	bne.n	80057fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0e7      	b.n	80059ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0d8      	b.n	80059ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	331b      	adds	r3, #27
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4413      	add	r3, r2
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0204 	and.w	r2, r3, #4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10c      	bne.n	8005850 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	331b      	adds	r3, #27
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	4413      	add	r3, r2
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	0d5b      	lsrs	r3, r3, #21
 8005846:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e00b      	b.n	8005868 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	331b      	adds	r3, #27
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	4413      	add	r3, r2
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	08db      	lsrs	r3, r3, #3
 8005860:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	331b      	adds	r3, #27
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	4413      	add	r3, r2
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0202 	and.w	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	331b      	adds	r3, #27
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	4413      	add	r3, r2
 800588a:	3304      	adds	r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	331b      	adds	r3, #27
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	4413      	add	r3, r2
 80058a2:	3304      	adds	r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	331b      	adds	r3, #27
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	0a1a      	lsrs	r2, r3, #8
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	4413      	add	r3, r2
 8005900:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	0c1a      	lsrs	r2, r3, #16
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3302      	adds	r3, #2
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4413      	add	r3, r2
 800591a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	0e1a      	lsrs	r2, r3, #24
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3303      	adds	r3, #3
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4413      	add	r3, r2
 8005934:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3304      	adds	r3, #4
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4413      	add	r3, r2
 800594c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	0a1a      	lsrs	r2, r3, #8
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	3305      	adds	r3, #5
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	4413      	add	r3, r2
 8005966:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0c1a      	lsrs	r2, r3, #16
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3306      	adds	r3, #6
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	4413      	add	r3, r2
 8005980:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0e1a      	lsrs	r2, r3, #24
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	3307      	adds	r3, #7
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d108      	bne.n	80059a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0220 	orr.w	r2, r2, #32
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	e007      	b.n	80059b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0220 	orr.w	r2, r2, #32
 80059b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e006      	b.n	80059ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d002      	beq.n	80059f4 <HAL_CAN_ActivateNotification+0x1e>
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d109      	bne.n	8005a08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6959      	ldr	r1, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e006      	b.n	8005a16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b08a      	sub	sp, #40	@ 0x28
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d07c      	beq.n	8005b62 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f983 	bl	8005d90 <HAL_CAN_TxMailbox0CompleteCallback>
 8005a8a:	e016      	b.n	8005aba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9e:	e00c      	b.n	8005aba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	e002      	b.n	8005aba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f989 	bl	8005dcc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d024      	beq.n	8005b0e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005acc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f963 	bl	8005da4 <HAL_CAN_TxMailbox1CompleteCallback>
 8005ade:	e016      	b.n	8005b0e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af2:	e00c      	b.n	8005b0e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	e002      	b.n	8005b0e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f969 	bl	8005de0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d024      	beq.n	8005b62 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f943 	bl	8005db8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005b32:	e016      	b.n	8005b62 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b46:	e00c      	b.n	8005b62 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d004      	beq.n	8005b5c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5a:	e002      	b.n	8005b62 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f949 	bl	8005df4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f930 	bl	8005e08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fb fa83 	bl	80010cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00c      	beq.n	8005bea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2210      	movs	r2, #16
 8005be8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2208      	movs	r2, #8
 8005c04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f912 	bl	8005e30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f8f9 	bl	8005e1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2210      	movs	r2, #16
 8005c44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8fc 	bl	8005e44 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00b      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2208      	movs	r2, #8
 8005c66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8f5 	bl	8005e58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d07b      	beq.n	8005d70 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d072      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d008      	beq.n	8005c9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d043      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d03e      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cf0:	2b60      	cmp	r3, #96	@ 0x60
 8005cf2:	d02b      	beq.n	8005d4c <HAL_CAN_IRQHandler+0x32a>
 8005cf4:	2b60      	cmp	r3, #96	@ 0x60
 8005cf6:	d82e      	bhi.n	8005d56 <HAL_CAN_IRQHandler+0x334>
 8005cf8:	2b50      	cmp	r3, #80	@ 0x50
 8005cfa:	d022      	beq.n	8005d42 <HAL_CAN_IRQHandler+0x320>
 8005cfc:	2b50      	cmp	r3, #80	@ 0x50
 8005cfe:	d82a      	bhi.n	8005d56 <HAL_CAN_IRQHandler+0x334>
 8005d00:	2b40      	cmp	r3, #64	@ 0x40
 8005d02:	d019      	beq.n	8005d38 <HAL_CAN_IRQHandler+0x316>
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d826      	bhi.n	8005d56 <HAL_CAN_IRQHandler+0x334>
 8005d08:	2b30      	cmp	r3, #48	@ 0x30
 8005d0a:	d010      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x30c>
 8005d0c:	2b30      	cmp	r3, #48	@ 0x30
 8005d0e:	d822      	bhi.n	8005d56 <HAL_CAN_IRQHandler+0x334>
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d002      	beq.n	8005d1a <HAL_CAN_IRQHandler+0x2f8>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d005      	beq.n	8005d24 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005d18:	e01d      	b.n	8005d56 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	f043 0308 	orr.w	r3, r3, #8
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d22:	e019      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	f043 0310 	orr.w	r3, r3, #16
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d2c:	e014      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	f043 0320 	orr.w	r3, r3, #32
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d36:	e00f      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d40:	e00a      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d4a:	e005      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d54:	e000      	b.n	8005d58 <HAL_CAN_IRQHandler+0x336>
            break;
 8005d56:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f872 	bl	8005e6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3728      	adds	r7, #40	@ 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eb2:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	60d3      	str	r3, [r2, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	e000ed00 	.word	0xe000ed00

08005ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ecc:	4b04      	ldr	r3, [pc, #16]	@ (8005ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	f003 0307 	and.w	r3, r3, #7
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db0b      	blt.n	8005f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	f003 021f 	and.w	r2, r3, #31
 8005efc:	4907      	ldr	r1, [pc, #28]	@ (8005f1c <__NVIC_EnableIRQ+0x38>)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2001      	movs	r0, #1
 8005f06:	fa00 f202 	lsl.w	r2, r0, r2
 8005f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e100 	.word	0xe000e100

08005f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	db0a      	blt.n	8005f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	490c      	ldr	r1, [pc, #48]	@ (8005f6c <__NVIC_SetPriority+0x4c>)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	0112      	lsls	r2, r2, #4
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	440b      	add	r3, r1
 8005f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f48:	e00a      	b.n	8005f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4908      	ldr	r1, [pc, #32]	@ (8005f70 <__NVIC_SetPriority+0x50>)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	3b04      	subs	r3, #4
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	761a      	strb	r2, [r3, #24]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000e100 	.word	0xe000e100
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	@ 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f1c3 0307 	rsb	r3, r3, #7
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	bf28      	it	cs
 8005f92:	2304      	movcs	r3, #4
 8005f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d902      	bls.n	8005fa4 <NVIC_EncodePriority+0x30>
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3b03      	subs	r3, #3
 8005fa2:	e000      	b.n	8005fa6 <NVIC_EncodePriority+0x32>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc6:	43d9      	mvns	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	4313      	orrs	r3, r2
         );
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	@ 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fec:	d301      	bcc.n	8005ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e00f      	b.n	8006012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800601c <SysTick_Config+0x40>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ffa:	210f      	movs	r1, #15
 8005ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006000:	f7ff ff8e 	bl	8005f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <SysTick_Config+0x40>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800600a:	4b04      	ldr	r3, [pc, #16]	@ (800601c <SysTick_Config+0x40>)
 800600c:	2207      	movs	r2, #7
 800600e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	e000e010 	.word	0xe000e010

08006020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff29 	bl	8005e80 <__NVIC_SetPriorityGrouping>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006048:	f7ff ff3e 	bl	8005ec8 <__NVIC_GetPriorityGrouping>
 800604c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	6978      	ldr	r0, [r7, #20]
 8006054:	f7ff ff8e 	bl	8005f74 <NVIC_EncodePriority>
 8006058:	4602      	mov	r2, r0
 800605a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ff5d 	bl	8005f20 <__NVIC_SetPriority>
}
 8006066:	bf00      	nop
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	4603      	mov	r3, r0
 8006076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff ff31 	bl	8005ee4 <__NVIC_EnableIRQ>
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ffa2 	bl	8005fdc <SysTick_Config>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060b0:	f7ff f878 	bl	80051a4 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e099      	b.n	80061f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e0:	e00f      	b.n	8006102 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060e2:	f7ff f85f 	bl	80051a4 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d908      	bls.n	8006102 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2203      	movs	r2, #3
 80060fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e078      	b.n	80061f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e8      	bne.n	80060e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4b38      	ldr	r3, [pc, #224]	@ (80061fc <HAL_DMA_Init+0x158>)
 800611c:	4013      	ands	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	2b04      	cmp	r3, #4
 800615a:	d107      	bne.n	800616c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	4313      	orrs	r3, r2
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0307 	bic.w	r3, r3, #7
 8006182:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	2b04      	cmp	r3, #4
 8006194:	d117      	bne.n	80061c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb01 	bl	80067b0 <DMA_CheckFifoParam>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2240      	movs	r2, #64	@ 0x40
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80061c2:	2301      	movs	r3, #1
 80061c4:	e016      	b.n	80061f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fab8 	bl	8006744 <DMA_CalcBaseAndBitshift>
 80061d4:	4603      	mov	r3, r0
 80061d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061dc:	223f      	movs	r2, #63	@ 0x3f
 80061de:	409a      	lsls	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	f010803f 	.word	0xf010803f

08006200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_DMA_Start_IT+0x26>
 8006222:	2302      	movs	r3, #2
 8006224:	e040      	b.n	80062a8 <HAL_DMA_Start_IT+0xa8>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d12f      	bne.n	800629a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fa4a 	bl	80066e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006258:	223f      	movs	r2, #63	@ 0x3f
 800625a:	409a      	lsls	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0216 	orr.w	r2, r2, #22
 800626e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0208 	orr.w	r2, r2, #8
 8006286:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e005      	b.n	80062a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
 80062a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062be:	f7fe ff71 	bl	80051a4 <HAL_GetTick>
 80062c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d008      	beq.n	80062e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2280      	movs	r2, #128	@ 0x80
 80062d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e052      	b.n	8006388 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0216 	bic.w	r2, r2, #22
 80062f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006300:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <HAL_DMA_Abort+0x62>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0208 	bic.w	r2, r2, #8
 8006320:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006332:	e013      	b.n	800635c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006334:	f7fe ff36 	bl	80051a4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b05      	cmp	r3, #5
 8006340:	d90c      	bls.n	800635c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2203      	movs	r2, #3
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e015      	b.n	8006388 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e4      	bne.n	8006334 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636e:	223f      	movs	r2, #63	@ 0x3f
 8006370:	409a      	lsls	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d004      	beq.n	80063ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2280      	movs	r2, #128	@ 0x80
 80063a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e00c      	b.n	80063c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2205      	movs	r2, #5
 80063b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e0:	4b8e      	ldr	r3, [pc, #568]	@ (800661c <HAL_DMA_IRQHandler+0x248>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006620 <HAL_DMA_IRQHandler+0x24c>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0a9b      	lsrs	r3, r3, #10
 80063ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fe:	2208      	movs	r2, #8
 8006400:	409a      	lsls	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642c:	2208      	movs	r2, #8
 800642e:	409a      	lsls	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006444:	2201      	movs	r2, #1
 8006446:	409a      	lsls	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d012      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647a:	2204      	movs	r2, #4
 800647c:	409a      	lsls	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4013      	ands	r3, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d012      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	2204      	movs	r2, #4
 800649a:	409a      	lsls	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f043 0204 	orr.w	r2, r3, #4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b0:	2210      	movs	r2, #16
 80064b2:	409a      	lsls	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d043      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03c      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ce:	2210      	movs	r2, #16
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d024      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	e01f      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	e016      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0208 	bic.w	r2, r2, #8
 8006532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006548:	2220      	movs	r2, #32
 800654a:	409a      	lsls	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 808f 	beq.w	8006674 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8087 	beq.w	8006674 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656a:	2220      	movs	r2, #32
 800656c:	409a      	lsls	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b05      	cmp	r3, #5
 800657c:	d136      	bne.n	80065ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0216 	bic.w	r2, r2, #22
 800658c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800659c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_DMA_IRQHandler+0x1da>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0208 	bic.w	r2, r2, #8
 80065bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c2:	223f      	movs	r2, #63	@ 0x3f
 80065c4:	409a      	lsls	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d07e      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
        }
        return;
 80065ea:	e079      	b.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10d      	bne.n	8006624 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	2b00      	cmp	r3, #0
 800660e:	d031      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	e02c      	b.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
 800661a:	bf00      	nop
 800661c:	2000001c 	.word	0x2000001c
 8006620:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d023      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
 8006634:	e01e      	b.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10f      	bne.n	8006664 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0210 	bic.w	r2, r2, #16
 8006652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	2b00      	cmp	r3, #0
 800667a:	d032      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d022      	beq.n	80066ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2205      	movs	r2, #5
 800668c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d307      	bcc.n	80066bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f2      	bne.n	80066a0 <HAL_DMA_IRQHandler+0x2cc>
 80066ba:	e000      	b.n	80066be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80066bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
 80066de:	e000      	b.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80066e0:	bf00      	nop
    }
  }
}
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d108      	bne.n	8006728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006726:	e007      	b.n	8006738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	3b10      	subs	r3, #16
 8006754:	4a14      	ldr	r2, [pc, #80]	@ (80067a8 <DMA_CalcBaseAndBitshift+0x64>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800675e:	4a13      	ldr	r2, [pc, #76]	@ (80067ac <DMA_CalcBaseAndBitshift+0x68>)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d909      	bls.n	8006786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	659a      	str	r2, [r3, #88]	@ 0x58
 8006784:	e007      	b.n	8006796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	aaaaaaab 	.word	0xaaaaaaab
 80067ac:	0800e548 	.word	0x0800e548

080067b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11f      	bne.n	800680a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d856      	bhi.n	800687e <DMA_CheckFifoParam+0xce>
 80067d0:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <DMA_CheckFifoParam+0x28>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	080067e9 	.word	0x080067e9
 80067e4:	0800687f 	.word	0x0800687f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d046      	beq.n	8006882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f8:	e043      	b.n	8006882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006802:	d140      	bne.n	8006886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006808:	e03d      	b.n	8006886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006812:	d121      	bne.n	8006858 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d837      	bhi.n	800688a <DMA_CheckFifoParam+0xda>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <DMA_CheckFifoParam+0x70>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	08006837 	.word	0x08006837
 8006828:	08006831 	.word	0x08006831
 800682c:	08006849 	.word	0x08006849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      break;
 8006834:	e030      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d025      	beq.n	800688e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006846:	e022      	b.n	800688e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006850:	d11f      	bne.n	8006892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006856:	e01c      	b.n	8006892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d903      	bls.n	8006866 <DMA_CheckFifoParam+0xb6>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d003      	beq.n	800686c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006864:	e018      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
      break;
 800686a:	e015      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
      break;
 800687c:	e00b      	b.n	8006896 <DMA_CheckFifoParam+0xe6>
      break;
 800687e:	bf00      	nop
 8006880:	e00a      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;
 8006882:	bf00      	nop
 8006884:	e008      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;
 8006886:	bf00      	nop
 8006888:	e006      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;
 800688a:	bf00      	nop
 800688c:	e004      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;   
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <DMA_CheckFifoParam+0xe8>
      break;
 8006896:	bf00      	nop
    }
  } 
  
  return status; 
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop

080068a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	@ 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	e16b      	b.n	8006b9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068c4:	2201      	movs	r2, #1
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4013      	ands	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	429a      	cmp	r2, r3
 80068de:	f040 815a 	bne.w	8006b96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d005      	beq.n	80068fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d130      	bne.n	800695c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	2203      	movs	r2, #3
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	4013      	ands	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	4313      	orrs	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006930:	2201      	movs	r2, #1
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4013      	ands	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	f003 0201 	and.w	r2, r3, #1
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d017      	beq.n	8006998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	2203      	movs	r2, #3
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	43db      	mvns	r3, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4013      	ands	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4313      	orrs	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d123      	bne.n	80069ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	08da      	lsrs	r2, r3, #3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3208      	adds	r2, #8
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	220f      	movs	r2, #15
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	43db      	mvns	r3, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4013      	ands	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	08da      	lsrs	r2, r3, #3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3208      	adds	r2, #8
 80069e6:	69b9      	ldr	r1, [r7, #24]
 80069e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	2203      	movs	r2, #3
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 0203 	and.w	r2, r3, #3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80b4 	beq.w	8006b96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	4b60      	ldr	r3, [pc, #384]	@ (8006bb4 <HAL_GPIO_Init+0x30c>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	4a5f      	ldr	r2, [pc, #380]	@ (8006bb4 <HAL_GPIO_Init+0x30c>)
 8006a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb4 <HAL_GPIO_Init+0x30c>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006bb8 <HAL_GPIO_Init+0x310>)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	3302      	adds	r3, #2
 8006a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	220f      	movs	r2, #15
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a52      	ldr	r2, [pc, #328]	@ (8006bbc <HAL_GPIO_Init+0x314>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02b      	beq.n	8006ace <HAL_GPIO_Init+0x226>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a51      	ldr	r2, [pc, #324]	@ (8006bc0 <HAL_GPIO_Init+0x318>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d025      	beq.n	8006aca <HAL_GPIO_Init+0x222>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a50      	ldr	r2, [pc, #320]	@ (8006bc4 <HAL_GPIO_Init+0x31c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01f      	beq.n	8006ac6 <HAL_GPIO_Init+0x21e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a4f      	ldr	r2, [pc, #316]	@ (8006bc8 <HAL_GPIO_Init+0x320>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d019      	beq.n	8006ac2 <HAL_GPIO_Init+0x21a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a4e      	ldr	r2, [pc, #312]	@ (8006bcc <HAL_GPIO_Init+0x324>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_GPIO_Init+0x216>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a4d      	ldr	r2, [pc, #308]	@ (8006bd0 <HAL_GPIO_Init+0x328>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00d      	beq.n	8006aba <HAL_GPIO_Init+0x212>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8006bd4 <HAL_GPIO_Init+0x32c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d007      	beq.n	8006ab6 <HAL_GPIO_Init+0x20e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8006bd8 <HAL_GPIO_Init+0x330>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d101      	bne.n	8006ab2 <HAL_GPIO_Init+0x20a>
 8006aae:	2307      	movs	r3, #7
 8006ab0:	e00e      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	e00c      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006ab6:	2306      	movs	r3, #6
 8006ab8:	e00a      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006aba:	2305      	movs	r3, #5
 8006abc:	e008      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e006      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e004      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e002      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_GPIO_Init+0x228>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	f002 0203 	and.w	r2, r2, #3
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	4093      	lsls	r3, r2
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ae0:	4935      	ldr	r1, [pc, #212]	@ (8006bb8 <HAL_GPIO_Init+0x310>)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	089b      	lsrs	r3, r3, #2
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aee:	4b3b      	ldr	r3, [pc, #236]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b12:	4a32      	ldr	r2, [pc, #200]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b18:	4b30      	ldr	r3, [pc, #192]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b3c:	4a27      	ldr	r2, [pc, #156]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b42:	4b26      	ldr	r3, [pc, #152]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b66:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b90:	4a12      	ldr	r2, [pc, #72]	@ (8006bdc <HAL_GPIO_Init+0x334>)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b0f      	cmp	r3, #15
 8006ba0:	f67f ae90 	bls.w	80068c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	3724      	adds	r7, #36	@ 0x24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	40013800 	.word	0x40013800
 8006bbc:	40020000 	.word	0x40020000
 8006bc0:	40020400 	.word	0x40020400
 8006bc4:	40020800 	.word	0x40020800
 8006bc8:	40020c00 	.word	0x40020c00
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40021400 	.word	0x40021400
 8006bd4:	40021800 	.word	0x40021800
 8006bd8:	40021c00 	.word	0x40021c00
 8006bdc:	40013c00 	.word	0x40013c00

08006be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
 8006bec:	4613      	mov	r3, r2
 8006bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bf0:	787b      	ldrb	r3, [r7, #1]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bf6:	887a      	ldrh	r2, [r7, #2]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bfc:	e003      	b.n	8006c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bfe:	887b      	ldrh	r3, [r7, #2]
 8006c00:	041a      	lsls	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	619a      	str	r2, [r3, #24]
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c1e:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c20:	695a      	ldr	r2, [r3, #20]
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d006      	beq.n	8006c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c2a:	4a05      	ldr	r2, [pc, #20]	@ (8006c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fb fbf6 	bl	8002424 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40013c00 	.word	0x40013c00

08006c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e12b      	b.n	8006eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fd fce2 	bl	8004634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	@ 0x24
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ca8:	f001 f9f6 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 8006cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4a81      	ldr	r2, [pc, #516]	@ (8006eb8 <HAL_I2C_Init+0x274>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d807      	bhi.n	8006cc8 <HAL_I2C_Init+0x84>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a80      	ldr	r2, [pc, #512]	@ (8006ebc <HAL_I2C_Init+0x278>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	bf94      	ite	ls
 8006cc0:	2301      	movls	r3, #1
 8006cc2:	2300      	movhi	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e006      	b.n	8006cd6 <HAL_I2C_Init+0x92>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a7d      	ldr	r2, [pc, #500]	@ (8006ec0 <HAL_I2C_Init+0x27c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	bf94      	ite	ls
 8006cd0:	2301      	movls	r3, #1
 8006cd2:	2300      	movhi	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0e7      	b.n	8006eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a78      	ldr	r2, [pc, #480]	@ (8006ec4 <HAL_I2C_Init+0x280>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0c9b      	lsrs	r3, r3, #18
 8006ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8006eb8 <HAL_I2C_Init+0x274>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d802      	bhi.n	8006d18 <HAL_I2C_Init+0xd4>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3301      	adds	r3, #1
 8006d16:	e009      	b.n	8006d2c <HAL_I2C_Init+0xe8>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	4a69      	ldr	r2, [pc, #420]	@ (8006ec8 <HAL_I2C_Init+0x284>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	099b      	lsrs	r3, r3, #6
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	430b      	orrs	r3, r1
 8006d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	495c      	ldr	r1, [pc, #368]	@ (8006eb8 <HAL_I2C_Init+0x274>)
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	d819      	bhi.n	8006d80 <HAL_I2C_Init+0x13c>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1e59      	subs	r1, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d5a:	1c59      	adds	r1, r3, #1
 8006d5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d60:	400b      	ands	r3, r1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_I2C_Init+0x138>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	1e59      	subs	r1, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d74:	3301      	adds	r3, #1
 8006d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7a:	e051      	b.n	8006e20 <HAL_I2C_Init+0x1dc>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	e04f      	b.n	8006e20 <HAL_I2C_Init+0x1dc>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d111      	bne.n	8006dac <HAL_I2C_Init+0x168>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1e58      	subs	r0, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6859      	ldr	r1, [r3, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	440b      	add	r3, r1
 8006d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf0c      	ite	eq
 8006da4:	2301      	moveq	r3, #1
 8006da6:	2300      	movne	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e012      	b.n	8006dd2 <HAL_I2C_Init+0x18e>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	1e58      	subs	r0, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6859      	ldr	r1, [r3, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	0099      	lsls	r1, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf0c      	ite	eq
 8006dcc:	2301      	moveq	r3, #1
 8006dce:	2300      	movne	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_I2C_Init+0x196>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e022      	b.n	8006e20 <HAL_I2C_Init+0x1dc>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10e      	bne.n	8006e00 <HAL_I2C_Init+0x1bc>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1e58      	subs	r0, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6859      	ldr	r1, [r3, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	440b      	add	r3, r1
 8006df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006df4:	3301      	adds	r3, #1
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfe:	e00f      	b.n	8006e20 <HAL_I2C_Init+0x1dc>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1e58      	subs	r0, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6859      	ldr	r1, [r3, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	0099      	lsls	r1, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e16:	3301      	adds	r3, #1
 8006e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	6809      	ldr	r1, [r1, #0]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6911      	ldr	r1, [r2, #16]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68d2      	ldr	r2, [r2, #12]
 8006e5a:	4311      	orrs	r1, r2
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6812      	ldr	r2, [r2, #0]
 8006e60:	430b      	orrs	r3, r1
 8006e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0201 	orr.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	000186a0 	.word	0x000186a0
 8006ebc:	001e847f 	.word	0x001e847f
 8006ec0:	003d08ff 	.word	0x003d08ff
 8006ec4:	431bde83 	.word	0x431bde83
 8006ec8:	10624dd3 	.word	0x10624dd3

08006ecc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	@ 0x30
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	817b      	strh	r3, [r7, #10]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	813b      	strh	r3, [r7, #8]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ee6:	f7fe f95d 	bl	80051a4 <HAL_GetTick>
 8006eea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	f040 8208 	bne.w	800730a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	2319      	movs	r3, #25
 8006f00:	2201      	movs	r2, #1
 8006f02:	497b      	ldr	r1, [pc, #492]	@ (80070f0 <HAL_I2C_Mem_Read+0x224>)
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 faef 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
 8006f12:	e1fb      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_I2C_Mem_Read+0x56>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e1f4      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d007      	beq.n	8006f48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2222      	movs	r2, #34	@ 0x22
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4a5b      	ldr	r2, [pc, #364]	@ (80070f4 <HAL_I2C_Mem_Read+0x228>)
 8006f88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f8a:	88f8      	ldrh	r0, [r7, #6]
 8006f8c:	893a      	ldrh	r2, [r7, #8]
 8006f8e:	8979      	ldrh	r1, [r7, #10]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	4603      	mov	r3, r0
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f9bc 	bl	8007318 <I2C_RequestMemoryRead>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e1b0      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e184      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d11b      	bne.n	800701a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e164      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701e:	2b02      	cmp	r3, #2
 8007020:	d11b      	bne.n	800705a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007030:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	e144      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007070:	e138      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007076:	2b03      	cmp	r3, #3
 8007078:	f200 80f1 	bhi.w	800725e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007080:	2b01      	cmp	r3, #1
 8007082:	d123      	bne.n	80070cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007086:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fb44 	bl	8007716 <I2C_WaitOnRXNEFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e139      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070ca:	e10b      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d14e      	bne.n	8007172 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	2200      	movs	r2, #0
 80070dc:	4906      	ldr	r1, [pc, #24]	@ (80070f8 <HAL_I2C_Mem_Read+0x22c>)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa02 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e10e      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
 80070ee:	bf00      	nop
 80070f0:	00100002 	.word	0x00100002
 80070f4:	ffff0000 	.word	0xffff0000
 80070f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800710a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007170:	e0b8      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	2200      	movs	r2, #0
 800717a:	4966      	ldr	r1, [pc, #408]	@ (8007314 <HAL_I2C_Mem_Read+0x448>)
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f9b3 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0bf      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800719a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	2200      	movs	r2, #0
 80071d6:	494f      	ldr	r1, [pc, #316]	@ (8007314 <HAL_I2C_Mem_Read+0x448>)
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f985 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e091      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691a      	ldr	r2, [r3, #16]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800725c:	e042      	b.n	80072e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800725e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007260:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fa57 	bl	8007716 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e04c      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d118      	bne.n	80072e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f47f aec2 	bne.w	8007072 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800730a:	2302      	movs	r3, #2
  }
}
 800730c:	4618      	mov	r0, r3
 800730e:	3728      	adds	r7, #40	@ 0x28
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	00010004 	.word	0x00010004

08007318 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af02      	add	r7, sp, #8
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	4608      	mov	r0, r1
 8007322:	4611      	mov	r1, r2
 8007324:	461a      	mov	r2, r3
 8007326:	4603      	mov	r3, r0
 8007328:	817b      	strh	r3, [r7, #10]
 800732a:	460b      	mov	r3, r1
 800732c:	813b      	strh	r3, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007340:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	2200      	movs	r2, #0
 800735a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f8c2 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007378:	d103      	bne.n	8007382 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007380:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e0aa      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007386:	897b      	ldrh	r3, [r7, #10]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	6a3a      	ldr	r2, [r7, #32]
 800739a:	4952      	ldr	r1, [pc, #328]	@ (80074e4 <I2C_RequestMemoryRead+0x1cc>)
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f8fa 	bl	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e097      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c4:	6a39      	ldr	r1, [r7, #32]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f964 	bl	8007694 <I2C_WaitOnTXEFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d107      	bne.n	80073ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e076      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d105      	bne.n	8007400 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f4:	893b      	ldrh	r3, [r7, #8]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	611a      	str	r2, [r3, #16]
 80073fe:	e021      	b.n	8007444 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007400:	893b      	ldrh	r3, [r7, #8]
 8007402:	0a1b      	lsrs	r3, r3, #8
 8007404:	b29b      	uxth	r3, r3
 8007406:	b2da      	uxtb	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007410:	6a39      	ldr	r1, [r7, #32]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f93e 	bl	8007694 <I2C_WaitOnTXEFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	2b04      	cmp	r3, #4
 8007424:	d107      	bne.n	8007436 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e050      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	b2da      	uxtb	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007446:	6a39      	ldr	r1, [r7, #32]
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f923 	bl	8007694 <I2C_WaitOnTXEFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00d      	beq.n	8007470 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	2b04      	cmp	r3, #4
 800745a:	d107      	bne.n	800746c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e035      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800747e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2200      	movs	r2, #0
 8007488:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f82b 	bl	80074e8 <I2C_WaitOnFlagUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a6:	d103      	bne.n	80074b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e013      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074b4:	897b      	ldrh	r3, [r7, #10]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	4906      	ldr	r1, [pc, #24]	@ (80074e4 <I2C_RequestMemoryRead+0x1cc>)
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f863 	bl	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	00010002 	.word	0x00010002

080074e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074f8:	e025      	b.n	8007546 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007500:	d021      	beq.n	8007546 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007502:	f7fd fe4f 	bl	80051a4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d116      	bne.n	8007546 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e023      	b.n	800758e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10d      	bne.n	800756c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	43da      	mvns	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	e00c      	b.n	8007586 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	43da      	mvns	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4013      	ands	r3, r2
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	429a      	cmp	r2, r3
 800758a:	d0b6      	beq.n	80074fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a4:	e051      	b.n	800764a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b4:	d123      	bne.n	80075fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e046      	b.n	800768c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007604:	d021      	beq.n	800764a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007606:	f7fd fdcd 	bl	80051a4 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d116      	bne.n	800764a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	f043 0220 	orr.w	r2, r3, #32
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e020      	b.n	800768c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10c      	bne.n	800766e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	43da      	mvns	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	bf14      	ite	ne
 8007666:	2301      	movne	r3, #1
 8007668:	2300      	moveq	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	e00b      	b.n	8007686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	43da      	mvns	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4013      	ands	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d18d      	bne.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076a0:	e02d      	b.n	80076fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f88d 	bl	80077c2 <I2C_IsAcknowledgeFailed>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e02d      	b.n	800770e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b8:	d021      	beq.n	80076fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ba:	f7fd fd73 	bl	80051a4 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d116      	bne.n	80076fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e007      	b.n	800770e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007708:	2b80      	cmp	r3, #128	@ 0x80
 800770a:	d1ca      	bne.n	80076a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007722:	e042      	b.n	80077aa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b10      	cmp	r3, #16
 8007730:	d119      	bne.n	8007766 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0210 	mvn.w	r2, #16
 800773a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e029      	b.n	80077ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007766:	f7fd fd1d 	bl	80051a4 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d116      	bne.n	80077aa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007796:	f043 0220 	orr.w	r2, r3, #32
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e007      	b.n	80077ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b4:	2b40      	cmp	r3, #64	@ 0x40
 80077b6:	d1b5      	bne.n	8007724 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d8:	d11b      	bne.n	8007812 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	f043 0204 	orr.w	r2, r3, #4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e267      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d075      	beq.n	800792a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800783e:	4b88      	ldr	r3, [pc, #544]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b04      	cmp	r3, #4
 8007848:	d00c      	beq.n	8007864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800784a:	4b85      	ldr	r3, [pc, #532]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007852:	2b08      	cmp	r3, #8
 8007854:	d112      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007856:	4b82      	ldr	r3, [pc, #520]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800785e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007862:	d10b      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007864:	4b7e      	ldr	r3, [pc, #504]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d05b      	beq.n	8007928 <HAL_RCC_OscConfig+0x108>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d157      	bne.n	8007928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e242      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007884:	d106      	bne.n	8007894 <HAL_RCC_OscConfig+0x74>
 8007886:	4b76      	ldr	r3, [pc, #472]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a75      	ldr	r2, [pc, #468]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800788c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e01d      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCC_OscConfig+0x98>
 800789e:	4b70      	ldr	r3, [pc, #448]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6f      	ldr	r2, [pc, #444]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6c      	ldr	r2, [pc, #432]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00b      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 80078b8:	4b69      	ldr	r3, [pc, #420]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a68      	ldr	r2, [pc, #416]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b66      	ldr	r3, [pc, #408]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a65      	ldr	r2, [pc, #404]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fd fc64 	bl	80051a4 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fd fc60 	bl	80051a4 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	@ 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e207      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0xc0>
 80078fe:	e014      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fd fc50 	bl	80051a4 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007908:	f7fd fc4c 	bl	80051a4 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	@ 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e1f3      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791a:	4b51      	ldr	r3, [pc, #324]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0xe8>
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d063      	beq.n	80079fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007936:	4b4a      	ldr	r3, [pc, #296]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007942:	4b47      	ldr	r3, [pc, #284]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800794a:	2b08      	cmp	r3, #8
 800794c:	d11c      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794e:	4b44      	ldr	r3, [pc, #272]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d116      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795a:	4b41      	ldr	r3, [pc, #260]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e1c7      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007972:	4b3b      	ldr	r3, [pc, #236]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4937      	ldr	r1, [pc, #220]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007986:	e03a      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007990:	4b34      	ldr	r3, [pc, #208]	@ (8007a64 <HAL_RCC_OscConfig+0x244>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fd fc05 	bl	80051a4 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800799e:	f7fd fc01 	bl	80051a4 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1a8      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4925      	ldr	r1, [pc, #148]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]
 80079d0:	e015      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d2:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <HAL_RCC_OscConfig+0x244>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fd fbe4 	bl	80051a4 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e0:	f7fd fbe0 	bl	80051a4 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e187      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d036      	beq.n	8007a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a12:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fd fbc4 	bl	80051a4 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a20:	f7fd fbc0 	bl	80051a4 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e167      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a32:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x200>
 8007a3e:	e01b      	b.n	8007a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a40:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a46:	f7fd fbad 	bl	80051a4 <HAL_GetTick>
 8007a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a4c:	e00e      	b.n	8007a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a4e:	f7fd fba9 	bl	80051a4 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d907      	bls.n	8007a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e150      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	42470000 	.word	0x42470000
 8007a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	4b88      	ldr	r3, [pc, #544]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ea      	bne.n	8007a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8097 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a8a:	4b81      	ldr	r3, [pc, #516]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab6:	4b77      	ldr	r3, [pc, #476]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d118      	bne.n	8007af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac2:	4b74      	ldr	r3, [pc, #464]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ace:	f7fd fb69 	bl	80051a4 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad6:	f7fd fb65 	bl	80051a4 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e10c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <HAL_RCC_OscConfig+0x2ea>
 8007afc:	4b64      	ldr	r3, [pc, #400]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b00:	4a63      	ldr	r2, [pc, #396]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b08:	e01c      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d10c      	bne.n	8007b2c <HAL_RCC_OscConfig+0x30c>
 8007b12:	4b5f      	ldr	r3, [pc, #380]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b16:	4a5e      	ldr	r2, [pc, #376]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b18:	f043 0304 	orr.w	r3, r3, #4
 8007b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a5b      	ldr	r2, [pc, #364]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b2a:	e00b      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b2c:	4b58      	ldr	r3, [pc, #352]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b30:	4a57      	ldr	r2, [pc, #348]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b38:	4b55      	ldr	r3, [pc, #340]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3c:	4a54      	ldr	r2, [pc, #336]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	f023 0304 	bic.w	r3, r3, #4
 8007b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fd fb2a 	bl	80051a4 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b54:	f7fd fb26 	bl	80051a4 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e0cb      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	4b49      	ldr	r3, [pc, #292]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ee      	beq.n	8007b54 <HAL_RCC_OscConfig+0x334>
 8007b76:	e014      	b.n	8007ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b78:	f7fd fb14 	bl	80051a4 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b80:	f7fd fb10 	bl	80051a4 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e0b5      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b96:	4b3e      	ldr	r3, [pc, #248]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ee      	bne.n	8007b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba8:	4b39      	ldr	r3, [pc, #228]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bac:	4a38      	ldr	r2, [pc, #224]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80a1 	beq.w	8007d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bbe:	4b34      	ldr	r3, [pc, #208]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d05c      	beq.n	8007c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d141      	bne.n	8007c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd2:	4b31      	ldr	r3, [pc, #196]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fd fae4 	bl	80051a4 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be0:	f7fd fae0 	bl	80051a4 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e087      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	019b      	lsls	r3, r3, #6
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	3b01      	subs	r3, #1
 8007c18:	041b      	lsls	r3, r3, #16
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	491b      	ldr	r1, [pc, #108]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2e:	f7fd fab9 	bl	80051a4 <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c36:	f7fd fab5 	bl	80051a4 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e05c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c48:	4b11      	ldr	r3, [pc, #68]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <HAL_RCC_OscConfig+0x416>
 8007c54:	e054      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c56:	4b10      	ldr	r3, [pc, #64]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5c:	f7fd faa2 	bl	80051a4 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fd fa9e 	bl	80051a4 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e045      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c76:	4b06      	ldr	r3, [pc, #24]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x444>
 8007c82:	e03d      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e038      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000
 8007c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d0c <HAL_RCC_OscConfig+0x4ec>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d028      	beq.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d121      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d11a      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d111      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d107      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40023800 	.word	0x40023800

08007d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0cc      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d24:	4b68      	ldr	r3, [pc, #416]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d90c      	bls.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d32:	4b65      	ldr	r3, [pc, #404]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d3a:	4b63      	ldr	r3, [pc, #396]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d001      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0b8      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d020      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d64:	4b59      	ldr	r3, [pc, #356]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	4a58      	ldr	r2, [pc, #352]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d7c:	4b53      	ldr	r3, [pc, #332]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a52      	ldr	r2, [pc, #328]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d88:	4b50      	ldr	r3, [pc, #320]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	494d      	ldr	r1, [pc, #308]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d107      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dae:	4b47      	ldr	r3, [pc, #284]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d119      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e07f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d003      	beq.n	8007dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dce:	4b3f      	ldr	r3, [pc, #252]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e06f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dde:	4b3b      	ldr	r3, [pc, #236]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e067      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dee:	4b37      	ldr	r3, [pc, #220]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 0203 	bic.w	r2, r3, #3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4934      	ldr	r1, [pc, #208]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e00:	f7fd f9d0 	bl	80051a4 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e06:	e00a      	b.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e08:	f7fd f9cc 	bl	80051a4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e04f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 020c 	and.w	r2, r3, #12
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d1eb      	bne.n	8007e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e30:	4b25      	ldr	r3, [pc, #148]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d20c      	bcs.n	8007e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3e:	4b22      	ldr	r3, [pc, #136]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e46:	4b20      	ldr	r3, [pc, #128]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d001      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e032      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e64:	4b19      	ldr	r3, [pc, #100]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4916      	ldr	r1, [pc, #88]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e82:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	490e      	ldr	r1, [pc, #56]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e96:	f000 f82d 	bl	8007ef4 <HAL_RCC_GetSysClockFreq>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	091b      	lsrs	r3, r3, #4
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	490a      	ldr	r1, [pc, #40]	@ (8007ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ea8:	5ccb      	ldrb	r3, [r1, r3]
 8007eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eb2:	4b09      	ldr	r3, [pc, #36]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd f930 	bl	800511c <HAL_InitTick>

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023c00 	.word	0x40023c00
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	0800e530 	.word	0x0800e530
 8007ed4:	2000001c 	.word	0x2000001c
 8007ed8:	20000020 	.word	0x20000020

08007edc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	@ (8007ef0 <HAL_RCC_EnableCSS+0x14>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	4247004c 	.word	0x4247004c

08007ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef8:	b090      	sub	sp, #64	@ 0x40
 8007efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f04:	2300      	movs	r3, #0
 8007f06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f0c:	4b59      	ldr	r3, [pc, #356]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 030c 	and.w	r3, r3, #12
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d00d      	beq.n	8007f34 <HAL_RCC_GetSysClockFreq+0x40>
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	f200 80a1 	bhi.w	8008060 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_RCC_GetSysClockFreq+0x34>
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d003      	beq.n	8007f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f26:	e09b      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f28:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007f2c:	e09b      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f2e:	4b53      	ldr	r3, [pc, #332]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f32:	e098      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f34:	4b4f      	ldr	r3, [pc, #316]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d028      	beq.n	8007f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	099b      	lsrs	r3, r3, #6
 8007f50:	2200      	movs	r2, #0
 8007f52:	623b      	str	r3, [r7, #32]
 8007f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4b47      	ldr	r3, [pc, #284]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f60:	fb03 f201 	mul.w	r2, r3, r1
 8007f64:	2300      	movs	r3, #0
 8007f66:	fb00 f303 	mul.w	r3, r0, r3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	4a43      	ldr	r2, [pc, #268]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8007f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f74:	460a      	mov	r2, r1
 8007f76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7a:	4413      	add	r3, r2
 8007f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f80:	2200      	movs	r2, #0
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f8e:	f7f8 fd8d 	bl	8000aac <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4613      	mov	r3, r2
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f9a:	e053      	b.n	8008044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9c:	4b35      	ldr	r3, [pc, #212]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	099b      	lsrs	r3, r3, #6
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	617a      	str	r2, [r7, #20]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007fae:	f04f 0b00 	mov.w	fp, #0
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	465b      	mov	r3, fp
 8007fb6:	f04f 0000 	mov.w	r0, #0
 8007fba:	f04f 0100 	mov.w	r1, #0
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fc4:	0150      	lsls	r0, r2, #5
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	ebb2 080a 	subs.w	r8, r2, sl
 8007fce:	eb63 090b 	sbc.w	r9, r3, fp
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8007fea:	eb63 0509 	sbc.w	r5, r3, r9
 8007fee:	f04f 0200 	mov.w	r2, #0
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	00eb      	lsls	r3, r5, #3
 8007ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ffc:	00e2      	lsls	r2, r4, #3
 8007ffe:	4614      	mov	r4, r2
 8008000:	461d      	mov	r5, r3
 8008002:	eb14 030a 	adds.w	r3, r4, sl
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	eb45 030b 	adc.w	r3, r5, fp
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800801a:	4629      	mov	r1, r5
 800801c:	028b      	lsls	r3, r1, #10
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008024:	4621      	mov	r1, r4
 8008026:	028a      	lsls	r2, r1, #10
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802e:	2200      	movs	r2, #0
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	60fa      	str	r2, [r7, #12]
 8008034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008038:	f7f8 fd38 	bl	8000aac <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4613      	mov	r3, r2
 8008042:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008044:	4b0b      	ldr	r3, [pc, #44]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	3301      	adds	r3, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800805e:	e002      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x184>)
 8008062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008068:	4618      	mov	r0, r3
 800806a:	3740      	adds	r7, #64	@ 0x40
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400
 800807c:	00b71b00 	.word	0x00b71b00

08008080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008084:	4b03      	ldr	r3, [pc, #12]	@ (8008094 <HAL_RCC_GetHCLKFreq+0x14>)
 8008086:	681b      	ldr	r3, [r3, #0]
}
 8008088:	4618      	mov	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000001c 	.word	0x2000001c

08008098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800809c:	f7ff fff0 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4903      	ldr	r1, [pc, #12]	@ (80080bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40023800 	.word	0x40023800
 80080bc:	0800e540 	.word	0x0800e540

080080c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080c4:	f7ff ffdc 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	0b5b      	lsrs	r3, r3, #13
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4903      	ldr	r1, [pc, #12]	@ (80080e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d6:	5ccb      	ldrb	r3, [r1, r3]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	0800e540 	.word	0x0800e540

080080e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80080ec:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <HAL_RCC_NMI_IRQHandler+0x20>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f4:	2b80      	cmp	r3, #128	@ 0x80
 80080f6:	d104      	bne.n	8008102 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80080f8:	f000 f80a 	bl	8008110 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80080fc:	4b03      	ldr	r3, [pc, #12]	@ (800810c <HAL_RCC_NMI_IRQHandler+0x24>)
 80080fe:	2280      	movs	r2, #128	@ 0x80
 8008100:	701a      	strb	r2, [r3, #0]
  }
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40023800 	.word	0x40023800
 800810c:	4002380e 	.word	0x4002380e

08008110 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e07b      	b.n	8008228 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008140:	d009      	beq.n	8008156 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	61da      	str	r2, [r3, #28]
 8008148:	e005      	b.n	8008156 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d106      	bne.n	8008176 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fc fac9 	bl	8004708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800818c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	ea42 0103 	orr.w	r1, r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	f003 0104 	and.w	r1, r3, #4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fc:	f003 0210 	and.w	r2, r3, #16
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69da      	ldr	r2, [r3, #28]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008216:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08c      	sub	sp, #48	@ 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800823e:	2301      	movs	r3, #1
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x26>
 8008252:	2302      	movs	r3, #2
 8008254:	e18a      	b.n	800856c <HAL_SPI_TransmitReceive+0x33c>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800825e:	f7fc ffa1 	bl	80051a4 <HAL_GetTick>
 8008262:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800826a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008274:	887b      	ldrh	r3, [r7, #2]
 8008276:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008278:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800827c:	2b01      	cmp	r3, #1
 800827e:	d00f      	beq.n	80082a0 <HAL_SPI_TransmitReceive+0x70>
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008286:	d107      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x68>
 8008290:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008294:	2b04      	cmp	r3, #4
 8008296:	d003      	beq.n	80082a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008298:	2302      	movs	r3, #2
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800829e:	e15b      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_SPI_TransmitReceive+0x82>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_SPI_TransmitReceive+0x82>
 80082ac:	887b      	ldrh	r3, [r7, #2]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80082b8:	e14e      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d003      	beq.n	80082ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2205      	movs	r2, #5
 80082ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	887a      	ldrh	r2, [r7, #2]
 80082de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	887a      	ldrh	r2, [r7, #2]
 80082e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	887a      	ldrh	r2, [r7, #2]
 80082f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	887a      	ldrh	r2, [r7, #2]
 80082f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830e:	2b40      	cmp	r3, #64	@ 0x40
 8008310:	d007      	beq.n	8008322 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008320:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800832a:	d178      	bne.n	800841e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <HAL_SPI_TransmitReceive+0x10a>
 8008334:	8b7b      	ldrh	r3, [r7, #26]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d166      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	881a      	ldrh	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800835e:	e053      	b.n	8008408 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d11b      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x176>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d016      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x176>
 8008378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837a:	2b01      	cmp	r3, #1
 800837c:	d113      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	881a      	ldrh	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838e:	1c9a      	adds	r2, r3, #2
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d119      	bne.n	80083e8 <HAL_SPI_TransmitReceive+0x1b8>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d014      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	b292      	uxth	r2, r2
 80083ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	1c9a      	adds	r2, r3, #2
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083e4:	2301      	movs	r3, #1
 80083e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083e8:	f7fc fedc 	bl	80051a4 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d807      	bhi.n	8008408 <HAL_SPI_TransmitReceive+0x1d8>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083fe:	d003      	beq.n	8008408 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008406:	e0a7      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800840c:	b29b      	uxth	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1a6      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x130>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1a1      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x130>
 800841c:	e07c      	b.n	8008518 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_SPI_TransmitReceive+0x1fc>
 8008426:	8b7b      	ldrh	r3, [r7, #26]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d16b      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008452:	e057      	b.n	8008504 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d11c      	bne.n	800849c <HAL_SPI_TransmitReceive+0x26c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d017      	beq.n	800849c <HAL_SPI_TransmitReceive+0x26c>
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d114      	bne.n	800849c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	7812      	ldrb	r2, [r2, #0]
 800847e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d119      	bne.n	80084de <HAL_SPI_TransmitReceive+0x2ae>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d014      	beq.n	80084de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084da:	2301      	movs	r3, #1
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084de:	f7fc fe61 	bl	80051a4 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d803      	bhi.n	80084f6 <HAL_SPI_TransmitReceive+0x2c6>
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084f4:	d102      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x2cc>
 80084f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008502:	e029      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1a2      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x224>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d19d      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f8b1 	bl	8008684 <SPI_EndRxTxTransaction>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d006      	beq.n	8008536 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008534:	e010      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	e000      	b.n	8008558 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008568:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800856c:	4618      	mov	r0, r3
 800856e:	3730      	adds	r7, #48	@ 0x30
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	4613      	mov	r3, r2
 8008582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008584:	f7fc fe0e 	bl	80051a4 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4413      	add	r3, r2
 8008592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008594:	f7fc fe06 	bl	80051a4 <HAL_GetTick>
 8008598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	015b      	lsls	r3, r3, #5
 80085a0:	0d1b      	lsrs	r3, r3, #20
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	fb02 f303 	mul.w	r3, r2, r3
 80085a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085aa:	e054      	b.n	8008656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085b2:	d050      	beq.n	8008656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085b4:	f7fc fdf6 	bl	80051a4 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d902      	bls.n	80085ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d13d      	bne.n	8008646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085e2:	d111      	bne.n	8008608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ec:	d004      	beq.n	80085f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f6:	d107      	bne.n	8008608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008610:	d10f      	bne.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e017      	b.n	8008676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3b01      	subs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4013      	ands	r3, r2
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d19b      	bne.n	80085ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	2000001c 	.word	0x2000001c

08008684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af02      	add	r7, sp, #8
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008690:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <SPI_EndRxTxTransaction+0x7c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1b      	ldr	r2, [pc, #108]	@ (8008704 <SPI_EndRxTxTransaction+0x80>)
 8008696:	fba2 2303 	umull	r2, r3, r2, r3
 800869a:	0d5b      	lsrs	r3, r3, #21
 800869c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80086a0:	fb02 f303 	mul.w	r3, r2, r3
 80086a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086ae:	d112      	bne.n	80086d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	2180      	movs	r1, #128	@ 0x80
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff5a 	bl	8008574 <SPI_WaitFlagStateUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ca:	f043 0220 	orr.w	r2, r3, #32
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e00f      	b.n	80086f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3b01      	subs	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ec:	2b80      	cmp	r3, #128	@ 0x80
 80086ee:	d0f2      	beq.n	80086d6 <SPI_EndRxTxTransaction+0x52>
 80086f0:	e000      	b.n	80086f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80086f2:	bf00      	nop
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	2000001c 	.word	0x2000001c
 8008704:	165e9f81 	.word	0x165e9f81

08008708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e041      	b.n	800879e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fc f8a0 	bl	8004874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3304      	adds	r3, #4
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f000 fba8 	bl	8008e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d001      	beq.n	80087c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e046      	b.n	800884e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a23      	ldr	r2, [pc, #140]	@ (800885c <HAL_TIM_Base_Start+0xb4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d022      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087da:	d01d      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008860 <HAL_TIM_Base_Start+0xb8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008864 <HAL_TIM_Base_Start+0xbc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008868 <HAL_TIM_Base_Start+0xc0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1b      	ldr	r2, [pc, #108]	@ (800886c <HAL_TIM_Base_Start+0xc4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a19      	ldr	r2, [pc, #100]	@ (8008870 <HAL_TIM_Base_Start+0xc8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIM_Base_Start+0x70>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a18      	ldr	r2, [pc, #96]	@ (8008874 <HAL_TIM_Base_Start+0xcc>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d111      	bne.n	800883c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b06      	cmp	r3, #6
 8008828:	d010      	beq.n	800884c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0201 	orr.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883a:	e007      	b.n	800884c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	40010000 	.word	0x40010000
 8008860:	40000400 	.word	0x40000400
 8008864:	40000800 	.word	0x40000800
 8008868:	40000c00 	.word	0x40000c00
 800886c:	40010400 	.word	0x40010400
 8008870:	40014000 	.word	0x40014000
 8008874:	40001800 	.word	0x40001800

08008878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e041      	b.n	800890e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fb ff9a 	bl	80047d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f000 faf0 	bl	8008e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d109      	bne.n	800893c <HAL_TIM_PWM_Start+0x24>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	bf14      	ite	ne
 8008934:	2301      	movne	r3, #1
 8008936:	2300      	moveq	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	e022      	b.n	8008982 <HAL_TIM_PWM_Start+0x6a>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b04      	cmp	r3, #4
 8008940:	d109      	bne.n	8008956 <HAL_TIM_PWM_Start+0x3e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b01      	cmp	r3, #1
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	e015      	b.n	8008982 <HAL_TIM_PWM_Start+0x6a>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b08      	cmp	r3, #8
 800895a:	d109      	bne.n	8008970 <HAL_TIM_PWM_Start+0x58>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e008      	b.n	8008982 <HAL_TIM_PWM_Start+0x6a>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	bf14      	ite	ne
 800897c:	2301      	movne	r3, #1
 800897e:	2300      	moveq	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e07c      	b.n	8008a84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <HAL_TIM_PWM_Start+0x82>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008998:	e013      	b.n	80089c2 <HAL_TIM_PWM_Start+0xaa>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d104      	bne.n	80089aa <HAL_TIM_PWM_Start+0x92>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089a8:	e00b      	b.n	80089c2 <HAL_TIM_PWM_Start+0xaa>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_PWM_Start+0xa2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089b8:	e003      	b.n	80089c2 <HAL_TIM_PWM_Start+0xaa>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2202      	movs	r2, #2
 80089be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2201      	movs	r2, #1
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fd50 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a8c <HAL_TIM_PWM_Start+0x174>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d004      	beq.n	80089e4 <HAL_TIM_PWM_Start+0xcc>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2c      	ldr	r2, [pc, #176]	@ (8008a90 <HAL_TIM_PWM_Start+0x178>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d101      	bne.n	80089e8 <HAL_TIM_PWM_Start+0xd0>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <HAL_TIM_PWM_Start+0xd2>
 80089e8:	2300      	movs	r3, #0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a22      	ldr	r2, [pc, #136]	@ (8008a8c <HAL_TIM_PWM_Start+0x174>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d022      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a10:	d01d      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1f      	ldr	r2, [pc, #124]	@ (8008a94 <HAL_TIM_PWM_Start+0x17c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d018      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1d      	ldr	r2, [pc, #116]	@ (8008a98 <HAL_TIM_PWM_Start+0x180>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d013      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008a9c <HAL_TIM_PWM_Start+0x184>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a16      	ldr	r2, [pc, #88]	@ (8008a90 <HAL_TIM_PWM_Start+0x178>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d009      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	@ (8008aa0 <HAL_TIM_PWM_Start+0x188>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x136>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a16      	ldr	r2, [pc, #88]	@ (8008aa4 <HAL_TIM_PWM_Start+0x18c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d111      	bne.n	8008a72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b06      	cmp	r3, #6
 8008a5e:	d010      	beq.n	8008a82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0201 	orr.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a70:	e007      	b.n	8008a82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0201 	orr.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400
 8008a94:	40000400 	.word	0x40000400
 8008a98:	40000800 	.word	0x40000800
 8008a9c:	40000c00 	.word	0x40000c00
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	40001800 	.word	0x40001800

08008aa8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fcd8 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8008b80 <HAL_TIM_PWM_Stop+0xd8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_TIM_PWM_Stop+0x2c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a2d      	ldr	r2, [pc, #180]	@ (8008b84 <HAL_TIM_PWM_Stop+0xdc>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_PWM_Stop+0x30>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_TIM_PWM_Stop+0x32>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d017      	beq.n	8008b0e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ae8:	4013      	ands	r3, r2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10f      	bne.n	8008b0e <HAL_TIM_PWM_Stop+0x66>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	f240 4344 	movw	r3, #1092	@ 0x444
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <HAL_TIM_PWM_Stop+0x66>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b18:	4013      	ands	r3, r2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <HAL_TIM_PWM_Stop+0x96>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	f240 4344 	movw	r3, #1092	@ 0x444
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d107      	bne.n	8008b3e <HAL_TIM_PWM_Stop+0x96>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_TIM_PWM_Stop+0xa6>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b4c:	e013      	b.n	8008b76 <HAL_TIM_PWM_Stop+0xce>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d104      	bne.n	8008b5e <HAL_TIM_PWM_Stop+0xb6>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b5c:	e00b      	b.n	8008b76 <HAL_TIM_PWM_Stop+0xce>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d104      	bne.n	8008b6e <HAL_TIM_PWM_Stop+0xc6>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b6c:	e003      	b.n	8008b76 <HAL_TIM_PWM_Stop+0xce>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40010400 	.word	0x40010400

08008b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e0ae      	b.n	8008d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	f200 809f 	bhi.w	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008cf5 	.word	0x08008cf5
 8008bc4:	08008cf5 	.word	0x08008cf5
 8008bc8:	08008cf5 	.word	0x08008cf5
 8008bcc:	08008c31 	.word	0x08008c31
 8008bd0:	08008cf5 	.word	0x08008cf5
 8008bd4:	08008cf5 	.word	0x08008cf5
 8008bd8:	08008cf5 	.word	0x08008cf5
 8008bdc:	08008c73 	.word	0x08008c73
 8008be0:	08008cf5 	.word	0x08008cf5
 8008be4:	08008cf5 	.word	0x08008cf5
 8008be8:	08008cf5 	.word	0x08008cf5
 8008bec:	08008cb3 	.word	0x08008cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f9f0 	bl	8008fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0208 	orr.w	r2, r2, #8
 8008c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0204 	bic.w	r2, r2, #4
 8008c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6999      	ldr	r1, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691a      	ldr	r2, [r3, #16]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	619a      	str	r2, [r3, #24]
      break;
 8008c2e:	e064      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fa40 	bl	80090bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6999      	ldr	r1, [r3, #24]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	021a      	lsls	r2, r3, #8
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	619a      	str	r2, [r3, #24]
      break;
 8008c70:	e043      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fa95 	bl	80091a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0208 	orr.w	r2, r2, #8
 8008c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0204 	bic.w	r2, r2, #4
 8008c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69d9      	ldr	r1, [r3, #28]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	61da      	str	r2, [r3, #28]
      break;
 8008cb0:	e023      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fae9 	bl	8009290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69d9      	ldr	r1, [r3, #28]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	61da      	str	r2, [r3, #28]
      break;
 8008cf2:	e002      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e0b4      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x186>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d60:	d03e      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0xd4>
 8008d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d66:	f200 8087 	bhi.w	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d6e:	f000 8086 	beq.w	8008e7e <HAL_TIM_ConfigClockSource+0x172>
 8008d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d76:	d87f      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b70      	cmp	r3, #112	@ 0x70
 8008d7a:	d01a      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0xa6>
 8008d7c:	2b70      	cmp	r3, #112	@ 0x70
 8008d7e:	d87b      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d80:	2b60      	cmp	r3, #96	@ 0x60
 8008d82:	d050      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x11a>
 8008d84:	2b60      	cmp	r3, #96	@ 0x60
 8008d86:	d877      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d88:	2b50      	cmp	r3, #80	@ 0x50
 8008d8a:	d03c      	beq.n	8008e06 <HAL_TIM_ConfigClockSource+0xfa>
 8008d8c:	2b50      	cmp	r3, #80	@ 0x50
 8008d8e:	d873      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d90:	2b40      	cmp	r3, #64	@ 0x40
 8008d92:	d058      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x13a>
 8008d94:	2b40      	cmp	r3, #64	@ 0x40
 8008d96:	d86f      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d98:	2b30      	cmp	r3, #48	@ 0x30
 8008d9a:	d064      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008d9c:	2b30      	cmp	r3, #48	@ 0x30
 8008d9e:	d86b      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008da0:	2b20      	cmp	r3, #32
 8008da2:	d060      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d867      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d05c      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d05a      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008db0:	e062      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	6899      	ldr	r1, [r3, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f000 fb35 	bl	8009430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	609a      	str	r2, [r3, #8]
      break;
 8008dde:	e04f      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	6899      	ldr	r1, [r3, #8]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f000 fb1e 	bl	8009430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e02:	609a      	str	r2, [r3, #8]
      break;
 8008e04:	e03c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f000 fa92 	bl	800933c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2150      	movs	r1, #80	@ 0x50
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 faeb 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008e24:	e02c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6859      	ldr	r1, [r3, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f000 fab1 	bl	800939a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2160      	movs	r1, #96	@ 0x60
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fadb 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008e44:	e01c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6859      	ldr	r1, [r3, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 fa72 	bl	800933c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2140      	movs	r1, #64	@ 0x40
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 facb 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008e64:	e00c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f000 fac2 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008e76:	e003      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7c:	e000      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a40      	ldr	r2, [pc, #256]	@ (8008fb0 <TIM_Base_SetConfig+0x114>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d013      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eba:	d00f      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8008fb4 <TIM_Base_SetConfig+0x118>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00b      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8008fb8 <TIM_Base_SetConfig+0x11c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d007      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a3b      	ldr	r2, [pc, #236]	@ (8008fbc <TIM_Base_SetConfig+0x120>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8008fc0 <TIM_Base_SetConfig+0x124>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d108      	bne.n	8008eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8008fb0 <TIM_Base_SetConfig+0x114>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008efc:	d027      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb4 <TIM_Base_SetConfig+0x118>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d023      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb8 <TIM_Base_SetConfig+0x11c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d01f      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a2a      	ldr	r2, [pc, #168]	@ (8008fbc <TIM_Base_SetConfig+0x120>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d01b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a29      	ldr	r2, [pc, #164]	@ (8008fc0 <TIM_Base_SetConfig+0x124>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d017      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a28      	ldr	r2, [pc, #160]	@ (8008fc4 <TIM_Base_SetConfig+0x128>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d013      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a27      	ldr	r2, [pc, #156]	@ (8008fc8 <TIM_Base_SetConfig+0x12c>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00f      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a26      	ldr	r2, [pc, #152]	@ (8008fcc <TIM_Base_SetConfig+0x130>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a25      	ldr	r2, [pc, #148]	@ (8008fd0 <TIM_Base_SetConfig+0x134>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a24      	ldr	r2, [pc, #144]	@ (8008fd4 <TIM_Base_SetConfig+0x138>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a23      	ldr	r2, [pc, #140]	@ (8008fd8 <TIM_Base_SetConfig+0x13c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d108      	bne.n	8008f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb0 <TIM_Base_SetConfig+0x114>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d003      	beq.n	8008f94 <TIM_Base_SetConfig+0xf8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc0 <TIM_Base_SetConfig+0x124>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d103      	bne.n	8008f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	615a      	str	r2, [r3, #20]
}
 8008fa2:	bf00      	nop
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	40010000 	.word	0x40010000
 8008fb4:	40000400 	.word	0x40000400
 8008fb8:	40000800 	.word	0x40000800
 8008fbc:	40000c00 	.word	0x40000c00
 8008fc0:	40010400 	.word	0x40010400
 8008fc4:	40014000 	.word	0x40014000
 8008fc8:	40014400 	.word	0x40014400
 8008fcc:	40014800 	.word	0x40014800
 8008fd0:	40001800 	.word	0x40001800
 8008fd4:	40001c00 	.word	0x40001c00
 8008fd8:	40002000 	.word	0x40002000

08008fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f023 0201 	bic.w	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0302 	bic.w	r3, r3, #2
 8009024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a20      	ldr	r2, [pc, #128]	@ (80090b4 <TIM_OC1_SetConfig+0xd8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d003      	beq.n	8009040 <TIM_OC1_SetConfig+0x64>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a1f      	ldr	r2, [pc, #124]	@ (80090b8 <TIM_OC1_SetConfig+0xdc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d10c      	bne.n	800905a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0308 	bic.w	r3, r3, #8
 8009046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 0304 	bic.w	r3, r3, #4
 8009058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a15      	ldr	r2, [pc, #84]	@ (80090b4 <TIM_OC1_SetConfig+0xd8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_OC1_SetConfig+0x8e>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a14      	ldr	r2, [pc, #80]	@ (80090b8 <TIM_OC1_SetConfig+0xdc>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d111      	bne.n	800908e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40010400 	.word	0x40010400

080090bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f023 0210 	bic.w	r2, r3, #16
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f023 0320 	bic.w	r3, r3, #32
 8009106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a22      	ldr	r2, [pc, #136]	@ (80091a0 <TIM_OC2_SetConfig+0xe4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC2_SetConfig+0x68>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a21      	ldr	r2, [pc, #132]	@ (80091a4 <TIM_OC2_SetConfig+0xe8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d10d      	bne.n	8009140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800912a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800913e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a17      	ldr	r2, [pc, #92]	@ (80091a0 <TIM_OC2_SetConfig+0xe4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d003      	beq.n	8009150 <TIM_OC2_SetConfig+0x94>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a16      	ldr	r2, [pc, #88]	@ (80091a4 <TIM_OC2_SetConfig+0xe8>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d113      	bne.n	8009178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800915e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	621a      	str	r2, [r3, #32]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40010400 	.word	0x40010400

080091a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a21      	ldr	r2, [pc, #132]	@ (8009288 <TIM_OC3_SetConfig+0xe0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d003      	beq.n	800920e <TIM_OC3_SetConfig+0x66>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a20      	ldr	r2, [pc, #128]	@ (800928c <TIM_OC3_SetConfig+0xe4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d10d      	bne.n	800922a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <TIM_OC3_SetConfig+0xe0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_OC3_SetConfig+0x92>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a15      	ldr	r2, [pc, #84]	@ (800928c <TIM_OC3_SetConfig+0xe4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d113      	bne.n	8009262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400

08009290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	031b      	lsls	r3, r3, #12
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a12      	ldr	r2, [pc, #72]	@ (8009334 <TIM_OC4_SetConfig+0xa4>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d003      	beq.n	80092f8 <TIM_OC4_SetConfig+0x68>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a11      	ldr	r2, [pc, #68]	@ (8009338 <TIM_OC4_SetConfig+0xa8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d109      	bne.n	800930c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	019b      	lsls	r3, r3, #6
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40010000 	.word	0x40010000
 8009338:	40010400 	.word	0x40010400

0800933c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	f023 0201 	bic.w	r2, r3, #1
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f023 030a 	bic.w	r3, r3, #10
 8009378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800939a:	b480      	push	{r7}
 800939c:	b087      	sub	sp, #28
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f023 0210 	bic.w	r2, r3, #16
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	031b      	lsls	r3, r3, #12
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	621a      	str	r2, [r3, #32]
}
 80093ee:	bf00      	nop
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	f043 0307 	orr.w	r3, r3, #7
 800941c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	609a      	str	r2, [r3, #8]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800944a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2201      	movs	r2, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1a      	ldr	r2, [r3, #32]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	43db      	mvns	r3, r3
 8009492:	401a      	ands	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e05a      	b.n	800958a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a21      	ldr	r2, [pc, #132]	@ (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d022      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009520:	d01d      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a1d      	ldr	r2, [pc, #116]	@ (800959c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d018      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1b      	ldr	r2, [pc, #108]	@ (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a1a      	ldr	r2, [pc, #104]	@ (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a18      	ldr	r2, [pc, #96]	@ (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a17      	ldr	r2, [pc, #92]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a15      	ldr	r2, [pc, #84]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d10c      	bne.n	8009578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4313      	orrs	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40010000 	.word	0x40010000
 800959c:	40000400 	.word	0x40000400
 80095a0:	40000800 	.word	0x40000800
 80095a4:	40000c00 	.word	0x40000c00
 80095a8:	40010400 	.word	0x40010400
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40001800 	.word	0x40001800

080095b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e03d      	b.n	800964c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e03f      	b.n	80096ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7fb fa2c 	bl	8004adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	@ 0x24
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800969a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 ff81 	bl	800a5a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08c      	sub	sp, #48	@ 0x30
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b20      	cmp	r3, #32
 800970c:	d165      	bne.n	80097da <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <HAL_UART_Transmit_DMA+0x26>
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e05e      	b.n	80097dc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_UART_Transmit_DMA+0x38>
 8009728:	2302      	movs	r3, #2
 800972a:	e057      	b.n	80097dc <HAL_UART_Transmit_DMA+0xe8>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	88fa      	ldrh	r2, [r7, #6]
 800973e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	88fa      	ldrh	r2, [r7, #6]
 8009744:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2221      	movs	r2, #33	@ 0x21
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009758:	4a22      	ldr	r2, [pc, #136]	@ (80097e4 <HAL_UART_Transmit_DMA+0xf0>)
 800975a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009760:	4a21      	ldr	r2, [pc, #132]	@ (80097e8 <HAL_UART_Transmit_DMA+0xf4>)
 8009762:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009768:	4a20      	ldr	r2, [pc, #128]	@ (80097ec <HAL_UART_Transmit_DMA+0xf8>)
 800976a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009770:	2200      	movs	r2, #0
 8009772:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800977e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009780:	6819      	ldr	r1, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3304      	adds	r3, #4
 8009788:	461a      	mov	r2, r3
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	f7fc fd38 	bl	8006200 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009798:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3314      	adds	r3, #20
 80097a8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	617b      	str	r3, [r7, #20]
   return(result);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3314      	adds	r3, #20
 80097c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80097c4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6a39      	ldr	r1, [r7, #32]
 80097c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e5      	bne.n	80097a2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e000      	b.n	80097dc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80097da:	2302      	movs	r3, #2
  }
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3730      	adds	r7, #48	@ 0x30
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	08009e3d 	.word	0x08009e3d
 80097e8:	08009ed7 	.word	0x08009ed7
 80097ec:	0800a04f 	.word	0x0800a04f

080097f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08c      	sub	sp, #48	@ 0x30
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b20      	cmp	r3, #32
 8009808:	d152      	bne.n	80098b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009810:	88fb      	ldrh	r3, [r7, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e04b      	b.n	80098b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009824:	2302      	movs	r3, #2
 8009826:	e044      	b.n	80098b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	461a      	mov	r2, r3
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 fc51 	bl	800a0e4 <UART_Start_Receive_DMA>
 8009842:	4603      	mov	r3, r0
 8009844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009848:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800984c:	2b00      	cmp	r3, #0
 800984e:	d12c      	bne.n	80098aa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009854:	2b01      	cmp	r3, #1
 8009856:	d125      	bne.n	80098a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	613b      	str	r3, [r7, #16]
 800986c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	330c      	adds	r3, #12
 8009874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	617b      	str	r3, [r7, #20]
   return(result);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f043 0310 	orr.w	r3, r3, #16
 8009884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800988e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6a39      	ldr	r1, [r7, #32]
 8009894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	61fb      	str	r3, [r7, #28]
   return(result);
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e5      	bne.n	800986e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80098a2:	e002      	b.n	80098aa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80098aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098ae:	e000      	b.n	80098b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80098b0:	2302      	movs	r3, #2
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3730      	adds	r7, #48	@ 0x30
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b0ba      	sub	sp, #232	@ 0xe8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80098fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10f      	bne.n	8009922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <HAL_UART_IRQHandler+0x66>
 800990e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fd87 	bl	800a42e <UART_Receive_IT>
      return;
 8009920:	e256      	b.n	8009dd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80de 	beq.w	8009ae8 <HAL_UART_IRQHandler+0x22c>
 800992c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80d1 	beq.w	8009ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <HAL_UART_IRQHandler+0xae>
 8009952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	f043 0201 	orr.w	r2, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800996a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00b      	beq.n	800998e <HAL_UART_IRQHandler+0xd2>
 8009976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d005      	beq.n	800998e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009986:	f043 0202 	orr.w	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <HAL_UART_IRQHandler+0xf6>
 800999a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099aa:	f043 0204 	orr.w	r2, r3, #4
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b6:	f003 0308 	and.w	r3, r3, #8
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d011      	beq.n	80099e2 <HAL_UART_IRQHandler+0x126>
 80099be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d105      	bne.n	80099d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099da:	f043 0208 	orr.w	r2, r3, #8
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 81ed 	beq.w	8009dc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d008      	beq.n	8009a0a <HAL_UART_IRQHandler+0x14e>
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fc:	f003 0320 	and.w	r3, r3, #32
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fd12 	bl	800a42e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a14:	2b40      	cmp	r3, #64	@ 0x40
 8009a16:	bf0c      	ite	eq
 8009a18:	2301      	moveq	r3, #1
 8009a1a:	2300      	movne	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	f003 0308 	and.w	r3, r3, #8
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d103      	bne.n	8009a36 <HAL_UART_IRQHandler+0x17a>
 8009a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d04f      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fc1a 	bl	800a270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a46:	2b40      	cmp	r3, #64	@ 0x40
 8009a48:	d141      	bne.n	8009ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3314      	adds	r3, #20
 8009a50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3314      	adds	r3, #20
 8009a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1d9      	bne.n	8009a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d013      	beq.n	8009ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa2:	4a7d      	ldr	r2, [pc, #500]	@ (8009c98 <HAL_UART_IRQHandler+0x3dc>)
 8009aa4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fc fc70 	bl	8006390 <HAL_DMA_Abort_IT>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d016      	beq.n	8009ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac4:	e00e      	b.n	8009ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f9ae 	bl	8009e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009acc:	e00a      	b.n	8009ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9aa 	bl	8009e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	e006      	b.n	8009ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9a6 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009ae2:	e170      	b.n	8009dc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	bf00      	nop
    return;
 8009ae6:	e16e      	b.n	8009dc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	f040 814a 	bne.w	8009d86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af6:	f003 0310 	and.w	r3, r3, #16
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 8143 	beq.w	8009d86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 813c 	beq.w	8009d86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60bb      	str	r3, [r7, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60bb      	str	r3, [r7, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	f040 80b4 	bne.w	8009c9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8140 	beq.w	8009dca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b52:	429a      	cmp	r2, r3
 8009b54:	f080 8139 	bcs.w	8009dca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b6a:	f000 8088 	beq.w	8009c7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	330c      	adds	r3, #12
 8009b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1d9      	bne.n	8009b6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3314      	adds	r3, #20
 8009bc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3314      	adds	r3, #20
 8009bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e1      	bne.n	8009bba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3314      	adds	r3, #20
 8009bfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3314      	adds	r3, #20
 8009c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e3      	bne.n	8009bf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	330c      	adds	r3, #12
 8009c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c4e:	f023 0310 	bic.w	r3, r3, #16
 8009c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e3      	bne.n	8009c3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fc fb19 	bl	80062b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7f8 faac 	bl	80021ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c94:	e099      	b.n	8009dca <HAL_UART_IRQHandler+0x50e>
 8009c96:	bf00      	nop
 8009c98:	0800a337 	.word	0x0800a337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 808b 	beq.w	8009dce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8086 	beq.w	8009dce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	330c      	adds	r3, #12
 8009cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009ce6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e3      	bne.n	8009cc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	623b      	str	r3, [r7, #32]
   return(result);
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	f023 0301 	bic.w	r3, r3, #1
 8009d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3314      	adds	r3, #20
 8009d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	330c      	adds	r3, #12
 8009d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0310 	bic.w	r3, r3, #16
 8009d56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d64:	61fa      	str	r2, [r7, #28]
 8009d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	69b9      	ldr	r1, [r7, #24]
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	617b      	str	r3, [r7, #20]
   return(result);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f8 fa34 	bl	80021ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d84:	e023      	b.n	8009dce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <HAL_UART_IRQHandler+0x4ea>
 8009d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fadd 	bl	800a35e <UART_Transmit_IT>
    return;
 8009da4:	e014      	b.n	8009dd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00e      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x514>
 8009db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d008      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fb1d 	bl	800a3fe <UART_EndTransmit_IT>
    return;
 8009dc4:	e004      	b.n	8009dd0 <HAL_UART_IRQHandler+0x514>
    return;
 8009dc6:	bf00      	nop
 8009dc8:	e002      	b.n	8009dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dca:	bf00      	nop
 8009dcc:	e000      	b.n	8009dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dce:	bf00      	nop
  }
}
 8009dd0:	37e8      	adds	r7, #232	@ 0xe8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop

08009dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b090      	sub	sp, #64	@ 0x40
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d137      	bne.n	8009ec8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3314      	adds	r3, #20
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3314      	adds	r3, #20
 8009e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e5      	bne.n	8009e5e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	330c      	adds	r3, #12
 8009e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	330c      	adds	r3, #12
 8009eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eb2:	61fa      	str	r2, [r7, #28]
 8009eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	69b9      	ldr	r1, [r7, #24]
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e5      	bne.n	8009e92 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ec6:	e002      	b.n	8009ece <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ec8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009eca:	f7ff ff85 	bl	8009dd8 <HAL_UART_TxCpltCallback>
}
 8009ece:	bf00      	nop
 8009ed0:	3740      	adds	r7, #64	@ 0x40
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff ff81 	bl	8009dec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b09c      	sub	sp, #112	@ 0x70
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d172      	bne.n	8009ff4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f10:	2200      	movs	r2, #0
 8009f12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	330c      	adds	r3, #12
 8009f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	330c      	adds	r3, #12
 8009f32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e5      	bne.n	8009f14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3314      	adds	r3, #20
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5a:	f023 0301 	bic.w	r3, r3, #1
 8009f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3314      	adds	r3, #20
 8009f66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f68:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e5      	bne.n	8009f48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3314      	adds	r3, #20
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3314      	adds	r3, #20
 8009f9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e5      	bne.n	8009f7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d119      	bne.n	8009ff4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	330c      	adds	r3, #12
 8009fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0310 	bic.w	r3, r3, #16
 8009fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	330c      	adds	r3, #12
 8009fde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fe0:	61fa      	str	r2, [r7, #28]
 8009fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	69b9      	ldr	r1, [r7, #24]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	617b      	str	r3, [r7, #20]
   return(result);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d106      	bne.n	800a00a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ffe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a000:	4619      	mov	r1, r3
 800a002:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a004:	f7f8 f8f2 	bl	80021ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a008:	e002      	b.n	800a010 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a00a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a00c:	f7ff fef8 	bl	8009e00 <HAL_UART_RxCpltCallback>
}
 800a010:	bf00      	nop
 800a012:	3770      	adds	r7, #112	@ 0x70
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a024:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d108      	bne.n	800a040 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a032:	085b      	lsrs	r3, r3, #1
 800a034:	b29b      	uxth	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7f8 f8d7 	bl	80021ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a03e:	e002      	b.n	800a046 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fee7 	bl	8009e14 <HAL_UART_RxHalfCpltCallback>
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a06a:	2b80      	cmp	r3, #128	@ 0x80
 800a06c:	bf0c      	ite	eq
 800a06e:	2301      	moveq	r3, #1
 800a070:	2300      	movne	r3, #0
 800a072:	b2db      	uxtb	r3, r3
 800a074:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b21      	cmp	r3, #33	@ 0x21
 800a080:	d108      	bne.n	800a094 <UART_DMAError+0x46>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2200      	movs	r2, #0
 800a08c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a08e:	68b8      	ldr	r0, [r7, #8]
 800a090:	f000 f8c6 	bl	800a220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b40      	cmp	r3, #64	@ 0x40
 800a0a0:	bf0c      	ite	eq
 800a0a2:	2301      	moveq	r3, #1
 800a0a4:	2300      	movne	r3, #0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b22      	cmp	r3, #34	@ 0x22
 800a0b4:	d108      	bne.n	800a0c8 <UART_DMAError+0x7a>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f000 f8d4 	bl	800a270 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0cc:	f043 0210 	orr.w	r2, r3, #16
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0d4:	68b8      	ldr	r0, [r7, #8]
 800a0d6:	f7ff fea7 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b098      	sub	sp, #96	@ 0x60
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2222      	movs	r2, #34	@ 0x22
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a110:	4a40      	ldr	r2, [pc, #256]	@ (800a214 <UART_Start_Receive_DMA+0x130>)
 800a112:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a118:	4a3f      	ldr	r2, [pc, #252]	@ (800a218 <UART_Start_Receive_DMA+0x134>)
 800a11a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a120:	4a3e      	ldr	r2, [pc, #248]	@ (800a21c <UART_Start_Receive_DMA+0x138>)
 800a122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a128:	2200      	movs	r2, #0
 800a12a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	f7fc f85c 	bl	8006200 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d019      	beq.n	800a1a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	330c      	adds	r3, #12
 800a174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a184:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	330c      	adds	r3, #12
 800a18c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a18e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a190:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e5      	bne.n	800a16e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3314      	adds	r3, #20
 800a1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3314      	adds	r3, #20
 800a1c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a1c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e5      	bne.n	800a1a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3314      	adds	r3, #20
 800a1dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	e853 3f00 	ldrex	r3, [r3]
 800a1e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a1f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fa:	6a39      	ldr	r1, [r7, #32]
 800a1fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1fe:	e841 2300 	strex	r3, r2, [r1]
 800a202:	61fb      	str	r3, [r7, #28]
   return(result);
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1e5      	bne.n	800a1d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3760      	adds	r7, #96	@ 0x60
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	08009ef3 	.word	0x08009ef3
 800a218:	0800a019 	.word	0x0800a019
 800a21c:	0800a04f 	.word	0x0800a04f

0800a220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b089      	sub	sp, #36	@ 0x24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	330c      	adds	r3, #12
 800a22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	60bb      	str	r3, [r7, #8]
   return(result);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a23e:	61fb      	str	r3, [r7, #28]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	330c      	adds	r3, #12
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	61ba      	str	r2, [r7, #24]
 800a24a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	613b      	str	r3, [r7, #16]
   return(result);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e5      	bne.n	800a228 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800a264:	bf00      	nop
 800a266:	3724      	adds	r7, #36	@ 0x24
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b095      	sub	sp, #84	@ 0x54
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	330c      	adds	r3, #12
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	330c      	adds	r3, #12
 800a296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a298:	643a      	str	r2, [r7, #64]	@ 0x40
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a29e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3314      	adds	r3, #20
 800a2b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3314      	adds	r3, #20
 800a2ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e5      	bne.n	800a2ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d119      	bne.n	800a31c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f023 0310 	bic.w	r3, r3, #16
 800a2fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a308:	61ba      	str	r2, [r7, #24]
 800a30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6979      	ldr	r1, [r7, #20]
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	613b      	str	r3, [r7, #16]
   return(result);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a32a:	bf00      	nop
 800a32c:	3754      	adds	r7, #84	@ 0x54
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fd69 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b21      	cmp	r3, #33	@ 0x21
 800a370:	d13e      	bne.n	800a3f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a37a:	d114      	bne.n	800a3a6 <UART_Transmit_IT+0x48>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	1c9a      	adds	r2, r3, #2
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	621a      	str	r2, [r3, #32]
 800a3a4:	e008      	b.n	800a3b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	1c59      	adds	r1, r3, #1
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6211      	str	r1, [r2, #32]
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10f      	bne.n	800a3ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68da      	ldr	r2, [r3, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e000      	b.n	800a3f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
  }
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68da      	ldr	r2, [r3, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff fcda 	bl	8009dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b08c      	sub	sp, #48	@ 0x30
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b22      	cmp	r3, #34	@ 0x22
 800a440:	f040 80ab 	bne.w	800a59a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a44c:	d117      	bne.n	800a47e <UART_Receive_IT+0x50>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d113      	bne.n	800a47e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	b29b      	uxth	r3, r3
 800a468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a476:	1c9a      	adds	r2, r3, #2
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a47c:	e026      	b.n	800a4cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a490:	d007      	beq.n	800a4a2 <UART_Receive_IT+0x74>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <UART_Receive_IT+0x82>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ac:	701a      	strb	r2, [r3, #0]
 800a4ae:	e008      	b.n	800a4c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d15a      	bne.n	800a596 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0220 	bic.w	r2, r2, #32
 800a4ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695a      	ldr	r2, [r3, #20]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0201 	bic.w	r2, r2, #1
 800a50e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d135      	bne.n	800a58c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	613b      	str	r3, [r7, #16]
   return(result);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f023 0310 	bic.w	r3, r3, #16
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a546:	623a      	str	r2, [r7, #32]
 800a548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	69f9      	ldr	r1, [r7, #28]
 800a54c:	6a3a      	ldr	r2, [r7, #32]
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	61bb      	str	r3, [r7, #24]
   return(result);
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e5      	bne.n	800a526 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b10      	cmp	r3, #16
 800a566:	d10a      	bne.n	800a57e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7f7 fe31 	bl	80021ec <HAL_UARTEx_RxEventCallback>
 800a58a:	e002      	b.n	800a592 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fc37 	bl	8009e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e002      	b.n	800a59c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3730      	adds	r7, #48	@ 0x30
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5a8:	b0c0      	sub	sp, #256	@ 0x100
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c0:	68d9      	ldr	r1, [r3, #12]
 800a5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	ea40 0301 	orr.w	r3, r0, r1
 800a5cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a5fc:	f021 010c 	bic.w	r1, r1, #12
 800a600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a60a:	430b      	orrs	r3, r1
 800a60c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61e:	6999      	ldr	r1, [r3, #24]
 800a620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	ea40 0301 	orr.w	r3, r0, r1
 800a62a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b8f      	ldr	r3, [pc, #572]	@ (800a870 <UART_SetConfig+0x2cc>)
 800a634:	429a      	cmp	r2, r3
 800a636:	d005      	beq.n	800a644 <UART_SetConfig+0xa0>
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b8d      	ldr	r3, [pc, #564]	@ (800a874 <UART_SetConfig+0x2d0>)
 800a640:	429a      	cmp	r2, r3
 800a642:	d104      	bne.n	800a64e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a644:	f7fd fd3c 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 800a648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a64c:	e003      	b.n	800a656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a64e:	f7fd fd23 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 800a652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a660:	f040 810c 	bne.w	800a87c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a66e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a676:	4622      	mov	r2, r4
 800a678:	462b      	mov	r3, r5
 800a67a:	1891      	adds	r1, r2, r2
 800a67c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a67e:	415b      	adcs	r3, r3
 800a680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a686:	4621      	mov	r1, r4
 800a688:	eb12 0801 	adds.w	r8, r2, r1
 800a68c:	4629      	mov	r1, r5
 800a68e:	eb43 0901 	adc.w	r9, r3, r1
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a69e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6a6:	4690      	mov	r8, r2
 800a6a8:	4699      	mov	r9, r3
 800a6aa:	4623      	mov	r3, r4
 800a6ac:	eb18 0303 	adds.w	r3, r8, r3
 800a6b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	eb49 0303 	adc.w	r3, r9, r3
 800a6ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a6ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	18db      	adds	r3, r3, r3
 800a6d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6d8:	4613      	mov	r3, r2
 800a6da:	eb42 0303 	adc.w	r3, r2, r3
 800a6de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6e8:	f7f6 f9e0 	bl	8000aac <__aeabi_uldivmod>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4b61      	ldr	r3, [pc, #388]	@ (800a878 <UART_SetConfig+0x2d4>)
 800a6f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	011c      	lsls	r4, r3, #4
 800a6fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	1891      	adds	r1, r2, r2
 800a712:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a714:	415b      	adcs	r3, r3
 800a716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a71c:	4641      	mov	r1, r8
 800a71e:	eb12 0a01 	adds.w	sl, r2, r1
 800a722:	4649      	mov	r1, r9
 800a724:	eb43 0b01 	adc.w	fp, r3, r1
 800a728:	f04f 0200 	mov.w	r2, #0
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a73c:	4692      	mov	sl, r2
 800a73e:	469b      	mov	fp, r3
 800a740:	4643      	mov	r3, r8
 800a742:	eb1a 0303 	adds.w	r3, sl, r3
 800a746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a74a:	464b      	mov	r3, r9
 800a74c:	eb4b 0303 	adc.w	r3, fp, r3
 800a750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a768:	460b      	mov	r3, r1
 800a76a:	18db      	adds	r3, r3, r3
 800a76c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a76e:	4613      	mov	r3, r2
 800a770:	eb42 0303 	adc.w	r3, r2, r3
 800a774:	647b      	str	r3, [r7, #68]	@ 0x44
 800a776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a77a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a77e:	f7f6 f995 	bl	8000aac <__aeabi_uldivmod>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4611      	mov	r1, r2
 800a788:	4b3b      	ldr	r3, [pc, #236]	@ (800a878 <UART_SetConfig+0x2d4>)
 800a78a:	fba3 2301 	umull	r2, r3, r3, r1
 800a78e:	095b      	lsrs	r3, r3, #5
 800a790:	2264      	movs	r2, #100	@ 0x64
 800a792:	fb02 f303 	mul.w	r3, r2, r3
 800a796:	1acb      	subs	r3, r1, r3
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a79e:	4b36      	ldr	r3, [pc, #216]	@ (800a878 <UART_SetConfig+0x2d4>)
 800a7a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a7a4:	095b      	lsrs	r3, r3, #5
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7ac:	441c      	add	r4, r3
 800a7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	1891      	adds	r1, r2, r2
 800a7c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7c8:	415b      	adcs	r3, r3
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	1851      	adds	r1, r2, r1
 800a7d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	414b      	adcs	r3, r1
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	00cb      	lsls	r3, r1, #3
 800a7ec:	4651      	mov	r1, sl
 800a7ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	00ca      	lsls	r2, r1, #3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a804:	464b      	mov	r3, r9
 800a806:	460a      	mov	r2, r1
 800a808:	eb42 0303 	adc.w	r3, r2, r3
 800a80c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a81c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a824:	460b      	mov	r3, r1
 800a826:	18db      	adds	r3, r3, r3
 800a828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a82a:	4613      	mov	r3, r2
 800a82c:	eb42 0303 	adc.w	r3, r2, r3
 800a830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a83a:	f7f6 f937 	bl	8000aac <__aeabi_uldivmod>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4b0d      	ldr	r3, [pc, #52]	@ (800a878 <UART_SetConfig+0x2d4>)
 800a844:	fba3 1302 	umull	r1, r3, r3, r2
 800a848:	095b      	lsrs	r3, r3, #5
 800a84a:	2164      	movs	r1, #100	@ 0x64
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	3332      	adds	r3, #50	@ 0x32
 800a856:	4a08      	ldr	r2, [pc, #32]	@ (800a878 <UART_SetConfig+0x2d4>)
 800a858:	fba2 2303 	umull	r2, r3, r2, r3
 800a85c:	095b      	lsrs	r3, r3, #5
 800a85e:	f003 0207 	and.w	r2, r3, #7
 800a862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4422      	add	r2, r4
 800a86a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a86c:	e106      	b.n	800aa7c <UART_SetConfig+0x4d8>
 800a86e:	bf00      	nop
 800a870:	40011000 	.word	0x40011000
 800a874:	40011400 	.word	0x40011400
 800a878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a87c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a880:	2200      	movs	r2, #0
 800a882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a88a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a88e:	4642      	mov	r2, r8
 800a890:	464b      	mov	r3, r9
 800a892:	1891      	adds	r1, r2, r2
 800a894:	6239      	str	r1, [r7, #32]
 800a896:	415b      	adcs	r3, r3
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
 800a89a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a89e:	4641      	mov	r1, r8
 800a8a0:	1854      	adds	r4, r2, r1
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	eb43 0501 	adc.w	r5, r3, r1
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	00eb      	lsls	r3, r5, #3
 800a8b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8b6:	00e2      	lsls	r2, r4, #3
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	4643      	mov	r3, r8
 800a8be:	18e3      	adds	r3, r4, r3
 800a8c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8c4:	464b      	mov	r3, r9
 800a8c6:	eb45 0303 	adc.w	r3, r5, r3
 800a8ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8de:	f04f 0200 	mov.w	r2, #0
 800a8e2:	f04f 0300 	mov.w	r3, #0
 800a8e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	008b      	lsls	r3, r1, #2
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	008a      	lsls	r2, r1, #2
 800a8f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a8fc:	f7f6 f8d6 	bl	8000aac <__aeabi_uldivmod>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4b60      	ldr	r3, [pc, #384]	@ (800aa88 <UART_SetConfig+0x4e4>)
 800a906:	fba3 2302 	umull	r2, r3, r3, r2
 800a90a:	095b      	lsrs	r3, r3, #5
 800a90c:	011c      	lsls	r4, r3, #4
 800a90e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a912:	2200      	movs	r2, #0
 800a914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a91c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	1891      	adds	r1, r2, r2
 800a926:	61b9      	str	r1, [r7, #24]
 800a928:	415b      	adcs	r3, r3
 800a92a:	61fb      	str	r3, [r7, #28]
 800a92c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a930:	4641      	mov	r1, r8
 800a932:	1851      	adds	r1, r2, r1
 800a934:	6139      	str	r1, [r7, #16]
 800a936:	4649      	mov	r1, r9
 800a938:	414b      	adcs	r3, r1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	f04f 0200 	mov.w	r2, #0
 800a940:	f04f 0300 	mov.w	r3, #0
 800a944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a948:	4659      	mov	r1, fp
 800a94a:	00cb      	lsls	r3, r1, #3
 800a94c:	4651      	mov	r1, sl
 800a94e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a952:	4651      	mov	r1, sl
 800a954:	00ca      	lsls	r2, r1, #3
 800a956:	4610      	mov	r0, r2
 800a958:	4619      	mov	r1, r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	4642      	mov	r2, r8
 800a95e:	189b      	adds	r3, r3, r2
 800a960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a964:	464b      	mov	r3, r9
 800a966:	460a      	mov	r2, r1
 800a968:	eb42 0303 	adc.w	r3, r2, r3
 800a96c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a97a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a988:	4649      	mov	r1, r9
 800a98a:	008b      	lsls	r3, r1, #2
 800a98c:	4641      	mov	r1, r8
 800a98e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a992:	4641      	mov	r1, r8
 800a994:	008a      	lsls	r2, r1, #2
 800a996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a99a:	f7f6 f887 	bl	8000aac <__aeabi_uldivmod>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4b38      	ldr	r3, [pc, #224]	@ (800aa88 <UART_SetConfig+0x4e4>)
 800a9a6:	fba3 2301 	umull	r2, r3, r3, r1
 800a9aa:	095b      	lsrs	r3, r3, #5
 800a9ac:	2264      	movs	r2, #100	@ 0x64
 800a9ae:	fb02 f303 	mul.w	r3, r2, r3
 800a9b2:	1acb      	subs	r3, r1, r3
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	3332      	adds	r3, #50	@ 0x32
 800a9b8:	4a33      	ldr	r2, [pc, #204]	@ (800aa88 <UART_SetConfig+0x4e4>)
 800a9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9c4:	441c      	add	r4, r3
 800a9c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	1891      	adds	r1, r2, r2
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	415b      	adcs	r3, r3
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9e4:	4641      	mov	r1, r8
 800a9e6:	1851      	adds	r1, r2, r1
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	414b      	adcs	r3, r1
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	f04f 0200 	mov.w	r2, #0
 800a9f4:	f04f 0300 	mov.w	r3, #0
 800a9f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	00cb      	lsls	r3, r1, #3
 800aa00:	4651      	mov	r1, sl
 800aa02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa06:	4651      	mov	r1, sl
 800aa08:	00ca      	lsls	r2, r1, #3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4642      	mov	r2, r8
 800aa12:	189b      	adds	r3, r3, r2
 800aa14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa16:	464b      	mov	r3, r9
 800aa18:	460a      	mov	r2, r1
 800aa1a:	eb42 0303 	adc.w	r3, r2, r3
 800aa1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa2a:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa2c:	f04f 0200 	mov.w	r2, #0
 800aa30:	f04f 0300 	mov.w	r3, #0
 800aa34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa38:	4649      	mov	r1, r9
 800aa3a:	008b      	lsls	r3, r1, #2
 800aa3c:	4641      	mov	r1, r8
 800aa3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa42:	4641      	mov	r1, r8
 800aa44:	008a      	lsls	r2, r1, #2
 800aa46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa4a:	f7f6 f82f 	bl	8000aac <__aeabi_uldivmod>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4b0d      	ldr	r3, [pc, #52]	@ (800aa88 <UART_SetConfig+0x4e4>)
 800aa54:	fba3 1302 	umull	r1, r3, r3, r2
 800aa58:	095b      	lsrs	r3, r3, #5
 800aa5a:	2164      	movs	r1, #100	@ 0x64
 800aa5c:	fb01 f303 	mul.w	r3, r1, r3
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	3332      	adds	r3, #50	@ 0x32
 800aa66:	4a08      	ldr	r2, [pc, #32]	@ (800aa88 <UART_SetConfig+0x4e4>)
 800aa68:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6c:	095b      	lsrs	r3, r3, #5
 800aa6e:	f003 020f 	and.w	r2, r3, #15
 800aa72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4422      	add	r2, r4
 800aa7a:	609a      	str	r2, [r3, #8]
}
 800aa7c:	bf00      	nop
 800aa7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa82:	46bd      	mov	sp, r7
 800aa84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa88:	51eb851f 	.word	0x51eb851f

0800aa8c <__NVIC_SetPriority>:
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	db0a      	blt.n	800aab6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	490c      	ldr	r1, [pc, #48]	@ (800aad8 <__NVIC_SetPriority+0x4c>)
 800aaa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaaa:	0112      	lsls	r2, r2, #4
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	440b      	add	r3, r1
 800aab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aab4:	e00a      	b.n	800aacc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	4908      	ldr	r1, [pc, #32]	@ (800aadc <__NVIC_SetPriority+0x50>)
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	3b04      	subs	r3, #4
 800aac4:	0112      	lsls	r2, r2, #4
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	440b      	add	r3, r1
 800aaca:	761a      	strb	r2, [r3, #24]
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	e000e100 	.word	0xe000e100
 800aadc:	e000ed00 	.word	0xe000ed00

0800aae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aae4:	2100      	movs	r1, #0
 800aae6:	f06f 0004 	mvn.w	r0, #4
 800aaea:	f7ff ffcf 	bl	800aa8c <__NVIC_SetPriority>
#endif
}
 800aaee:	bf00      	nop
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aafa:	f3ef 8305 	mrs	r3, IPSR
 800aafe:	603b      	str	r3, [r7, #0]
  return(result);
 800ab00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab06:	f06f 0305 	mvn.w	r3, #5
 800ab0a:	607b      	str	r3, [r7, #4]
 800ab0c:	e00c      	b.n	800ab28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab38 <osKernelInitialize+0x44>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d105      	bne.n	800ab22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab16:	4b08      	ldr	r3, [pc, #32]	@ (800ab38 <osKernelInitialize+0x44>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e002      	b.n	800ab28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab28:	687b      	ldr	r3, [r7, #4]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	20000c80 	.word	0x20000c80

0800ab3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab42:	f3ef 8305 	mrs	r3, IPSR
 800ab46:	603b      	str	r3, [r7, #0]
  return(result);
 800ab48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab4e:	f06f 0305 	mvn.w	r3, #5
 800ab52:	607b      	str	r3, [r7, #4]
 800ab54:	e010      	b.n	800ab78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab56:	4b0b      	ldr	r3, [pc, #44]	@ (800ab84 <osKernelStart+0x48>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d109      	bne.n	800ab72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab5e:	f7ff ffbf 	bl	800aae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab62:	4b08      	ldr	r3, [pc, #32]	@ (800ab84 <osKernelStart+0x48>)
 800ab64:	2202      	movs	r2, #2
 800ab66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab68:	f001 f892 	bl	800bc90 <vTaskStartScheduler>
      stat = osOK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	607b      	str	r3, [r7, #4]
 800ab70:	e002      	b.n	800ab78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab78:	687b      	ldr	r3, [r7, #4]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000c80 	.word	0x20000c80

0800ab88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	@ 0x38
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab98:	f3ef 8305 	mrs	r3, IPSR
 800ab9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d17e      	bne.n	800aca2 <osThreadNew+0x11a>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d07b      	beq.n	800aca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800abaa:	2380      	movs	r3, #128	@ 0x80
 800abac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800abae:	2318      	movs	r3, #24
 800abb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d045      	beq.n	800ac4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <osThreadNew+0x48>
        name = attr->name;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d008      	beq.n	800abf6 <osThreadNew+0x6e>
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2b38      	cmp	r3, #56	@ 0x38
 800abe8:	d805      	bhi.n	800abf6 <osThreadNew+0x6e>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <osThreadNew+0x72>
        return (NULL);
 800abf6:	2300      	movs	r3, #0
 800abf8:	e054      	b.n	800aca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	089b      	lsrs	r3, r3, #2
 800ac08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00e      	beq.n	800ac30 <osThreadNew+0xa8>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	2ba7      	cmp	r3, #167	@ 0xa7
 800ac18:	d90a      	bls.n	800ac30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d006      	beq.n	800ac30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <osThreadNew+0xa8>
        mem = 1;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	61bb      	str	r3, [r7, #24]
 800ac2e:	e010      	b.n	800ac52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10c      	bne.n	800ac52 <osThreadNew+0xca>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d108      	bne.n	800ac52 <osThreadNew+0xca>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d104      	bne.n	800ac52 <osThreadNew+0xca>
          mem = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61bb      	str	r3, [r7, #24]
 800ac4c:	e001      	b.n	800ac52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d110      	bne.n	800ac7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac60:	9202      	str	r2, [sp, #8]
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6a3a      	ldr	r2, [r7, #32]
 800ac6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 fe1a 	bl	800b8a8 <xTaskCreateStatic>
 800ac74:	4603      	mov	r3, r0
 800ac76:	613b      	str	r3, [r7, #16]
 800ac78:	e013      	b.n	800aca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d110      	bne.n	800aca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	f107 0310 	add.w	r3, r7, #16
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fe68 	bl	800b968 <xTaskCreate>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d001      	beq.n	800aca2 <osThreadNew+0x11a>
            hTask = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aca2:	693b      	ldr	r3, [r7, #16]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3728      	adds	r7, #40	@ 0x28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb4:	f3ef 8305 	mrs	r3, IPSR
 800acb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800acba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <osDelay+0x1c>
    stat = osErrorISR;
 800acc0:	f06f 0305 	mvn.w	r3, #5
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	e007      	b.n	800acd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800acc8:	2300      	movs	r3, #0
 800acca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 ffa6 	bl	800bc24 <vTaskDelay>
    }
  }

  return (stat);
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4a07      	ldr	r2, [pc, #28]	@ (800ad10 <vApplicationGetIdleTaskMemory+0x2c>)
 800acf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4a06      	ldr	r2, [pc, #24]	@ (800ad14 <vApplicationGetIdleTaskMemory+0x30>)
 800acfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2280      	movs	r2, #128	@ 0x80
 800ad00:	601a      	str	r2, [r3, #0]
}
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20000c84 	.word	0x20000c84
 800ad14:	20000d2c 	.word	0x20000d2c

0800ad18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4a07      	ldr	r2, [pc, #28]	@ (800ad44 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	4a06      	ldr	r2, [pc, #24]	@ (800ad48 <vApplicationGetTimerTaskMemory+0x30>)
 800ad2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad36:	601a      	str	r2, [r3, #0]
}
 800ad38:	bf00      	nop
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20000f2c 	.word	0x20000f2c
 800ad48:	20000fd4 	.word	0x20000fd4

0800ad4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f103 0208 	add.w	r2, r3, #8
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f103 0208 	add.w	r2, r3, #8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f103 0208 	add.w	r2, r3, #8
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
}
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae04:	d103      	bne.n	800ae0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e00c      	b.n	800ae28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	3308      	adds	r3, #8
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	e002      	b.n	800ae1c <vListInsert+0x2e>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d2f6      	bcs.n	800ae16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	601a      	str	r2, [r3, #0]
}
 800ae54:	bf00      	nop
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6892      	ldr	r2, [r2, #8]
 800ae76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6852      	ldr	r2, [r2, #4]
 800ae80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d103      	bne.n	800ae94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	1e5a      	subs	r2, r3, #1
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10b      	bne.n	800aee0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aee0:	f002 fa82 	bl	800d3e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af10:	3b01      	subs	r3, #1
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800af16:	fb01 f303 	mul.w	r3, r1, r3
 800af1a:	441a      	add	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	22ff      	movs	r2, #255	@ 0xff
 800af24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	22ff      	movs	r2, #255	@ 0xff
 800af2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d114      	bne.n	800af60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d01a      	beq.n	800af74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3310      	adds	r3, #16
 800af42:	4618      	mov	r0, r3
 800af44:	f001 fa3c 	bl	800c3c0 <xTaskRemoveFromEventList>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d012      	beq.n	800af74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af4e:	4b0d      	ldr	r3, [pc, #52]	@ (800af84 <xQueueGenericReset+0xd0>)
 800af50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	e009      	b.n	800af74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3310      	adds	r3, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fef1 	bl	800ad4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3324      	adds	r3, #36	@ 0x24
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff feec 	bl	800ad4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af74:	f002 fa6a 	bl	800d44c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af78:	2301      	movs	r3, #1
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08e      	sub	sp, #56	@ 0x38
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10b      	bne.n	800afb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	e7fd      	b.n	800afb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afcc:	bf00      	nop
 800afce:	bf00      	nop
 800afd0:	e7fd      	b.n	800afce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <xQueueGenericCreateStatic+0x56>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <xQueueGenericCreateStatic+0x5a>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueGenericCreateStatic+0x5c>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10b      	bne.n	800b000 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	623b      	str	r3, [r7, #32]
}
 800affa:	bf00      	nop
 800affc:	bf00      	nop
 800affe:	e7fd      	b.n	800affc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d102      	bne.n	800b00c <xQueueGenericCreateStatic+0x84>
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <xQueueGenericCreateStatic+0x88>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e000      	b.n	800b012 <xQueueGenericCreateStatic+0x8a>
 800b010:	2300      	movs	r3, #0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10b      	bne.n	800b02e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	61fb      	str	r3, [r7, #28]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b02e:	2350      	movs	r3, #80	@ 0x50
 800b030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b50      	cmp	r3, #80	@ 0x50
 800b036:	d00b      	beq.n	800b050 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	61bb      	str	r3, [r7, #24]
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	e7fd      	b.n	800b04c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b050:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00d      	beq.n	800b078 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b064:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	4613      	mov	r3, r2
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 f805 	bl	800b082 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3730      	adds	r7, #48	@ 0x30
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e002      	b.n	800b0a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	69b8      	ldr	r0, [r7, #24]
 800b0b4:	f7ff fefe 	bl	800aeb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	78fa      	ldrb	r2, [r7, #3]
 800b0bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08e      	sub	sp, #56	@ 0x38
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10b      	bne.n	800b0fc <xQueueGenericSend+0x34>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <xQueueGenericSend+0x42>
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <xQueueGenericSend+0x46>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <xQueueGenericSend+0x48>
 800b10e:	2300      	movs	r3, #0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10b      	bne.n	800b12c <xQueueGenericSend+0x64>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d103      	bne.n	800b13a <xQueueGenericSend+0x72>
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b136:	2b01      	cmp	r3, #1
 800b138:	d101      	bne.n	800b13e <xQueueGenericSend+0x76>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <xQueueGenericSend+0x78>
 800b13e:	2300      	movs	r3, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10b      	bne.n	800b15c <xQueueGenericSend+0x94>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	623b      	str	r3, [r7, #32]
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b15c:	f001 faf6 	bl	800c74c <xTaskGetSchedulerState>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d102      	bne.n	800b16c <xQueueGenericSend+0xa4>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <xQueueGenericSend+0xa8>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <xQueueGenericSend+0xaa>
 800b170:	2300      	movs	r3, #0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <xQueueGenericSend+0xc6>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	61fb      	str	r3, [r7, #28]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b18e:	f002 f92b 	bl	800d3e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d302      	bcc.n	800b1a4 <xQueueGenericSend+0xdc>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d129      	bne.n	800b1f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1aa:	f000 fa0f 	bl	800b5cc <prvCopyDataToQueue>
 800b1ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ba:	3324      	adds	r3, #36	@ 0x24
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 f8ff 	bl	800c3c0 <xTaskRemoveFromEventList>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1c8:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c8 <xQueueGenericSend+0x200>)
 800b1ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	e00a      	b.n	800b1f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1e0:	4b39      	ldr	r3, [pc, #228]	@ (800b2c8 <xQueueGenericSend+0x200>)
 800b1e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1f0:	f002 f92c 	bl	800d44c <vPortExitCritical>
				return pdPASS;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e063      	b.n	800b2c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d103      	bne.n	800b206 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1fe:	f002 f925 	bl	800d44c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b202:	2300      	movs	r3, #0
 800b204:	e05c      	b.n	800b2c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d106      	bne.n	800b21a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b20c:	f107 0314 	add.w	r3, r7, #20
 800b210:	4618      	mov	r0, r3
 800b212:	f001 f939 	bl	800c488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b216:	2301      	movs	r3, #1
 800b218:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b21a:	f002 f917 	bl	800d44c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b21e:	f000 fda7 	bl	800bd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b222:	f002 f8e1 	bl	800d3e8 <vPortEnterCritical>
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b22c:	b25b      	sxtb	r3, r3
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b232:	d103      	bne.n	800b23c <xQueueGenericSend+0x174>
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b242:	b25b      	sxtb	r3, r3
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b248:	d103      	bne.n	800b252 <xQueueGenericSend+0x18a>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b252:	f002 f8fb 	bl	800d44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b256:	1d3a      	adds	r2, r7, #4
 800b258:	f107 0314 	add.w	r3, r7, #20
 800b25c:	4611      	mov	r1, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 f928 	bl	800c4b4 <xTaskCheckForTimeOut>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d124      	bne.n	800b2b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b26a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b26c:	f000 faa6 	bl	800b7bc <prvIsQueueFull>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d018      	beq.n	800b2a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	3310      	adds	r3, #16
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f84c 	bl	800c31c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b286:	f000 fa31 	bl	800b6ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b28a:	f000 fd7f 	bl	800bd8c <xTaskResumeAll>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	f47f af7c 	bne.w	800b18e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <xQueueGenericSend+0x200>)
 800b298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	e772      	b.n	800b18e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2aa:	f000 fa1f 	bl	800b6ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ae:	f000 fd6d 	bl	800bd8c <xTaskResumeAll>
 800b2b2:	e76c      	b.n	800b18e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2b6:	f000 fa19 	bl	800b6ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ba:	f000 fd67 	bl	800bd8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3738      	adds	r7, #56	@ 0x38
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	e000ed04 	.word	0xe000ed04

0800b2cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b090      	sub	sp, #64	@ 0x40
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10b      	bne.n	800b2fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
 800b2fa:	e7fd      	b.n	800b2f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d103      	bne.n	800b30a <xQueueGenericSendFromISR+0x3e>
 800b302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <xQueueGenericSendFromISR+0x42>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueGenericSendFromISR+0x44>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10b      	bne.n	800b32c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d103      	bne.n	800b33a <xQueueGenericSendFromISR+0x6e>
 800b332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b336:	2b01      	cmp	r3, #1
 800b338:	d101      	bne.n	800b33e <xQueueGenericSendFromISR+0x72>
 800b33a:	2301      	movs	r3, #1
 800b33c:	e000      	b.n	800b340 <xQueueGenericSendFromISR+0x74>
 800b33e:	2300      	movs	r3, #0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10b      	bne.n	800b35c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	623b      	str	r3, [r7, #32]
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	e7fd      	b.n	800b358 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b35c:	f002 f924 	bl	800d5a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b360:	f3ef 8211 	mrs	r2, BASEPRI
 800b364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	61fa      	str	r2, [r7, #28]
 800b376:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b378:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b37a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b384:	429a      	cmp	r2, r3
 800b386:	d302      	bcc.n	800b38e <xQueueGenericSendFromISR+0xc2>
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d12f      	bne.n	800b3ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b394:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	68b9      	ldr	r1, [r7, #8]
 800b3a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3a4:	f000 f912 	bl	800b5cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3b0:	d112      	bne.n	800b3d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d016      	beq.n	800b3e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	3324      	adds	r3, #36	@ 0x24
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fffe 	bl	800c3c0 <xTaskRemoveFromEventList>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00e      	beq.n	800b3e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e007      	b.n	800b3e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	b25a      	sxtb	r2, r3
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b3ec:	e001      	b.n	800b3f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b400:	4618      	mov	r0, r3
 800b402:	3740      	adds	r7, #64	@ 0x40
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08c      	sub	sp, #48	@ 0x30
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b414:	2300      	movs	r3, #0
 800b416:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10b      	bne.n	800b43a <xQueueReceive+0x32>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	623b      	str	r3, [r7, #32]
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d103      	bne.n	800b448 <xQueueReceive+0x40>
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <xQueueReceive+0x44>
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <xQueueReceive+0x46>
 800b44c:	2300      	movs	r3, #0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10b      	bne.n	800b46a <xQueueReceive+0x62>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	61fb      	str	r3, [r7, #28]
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	e7fd      	b.n	800b466 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b46a:	f001 f96f 	bl	800c74c <xTaskGetSchedulerState>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <xQueueReceive+0x72>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <xQueueReceive+0x76>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <xQueueReceive+0x78>
 800b47e:	2300      	movs	r3, #0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <xQueueReceive+0x94>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	61bb      	str	r3, [r7, #24]
}
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	e7fd      	b.n	800b498 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b49c:	f001 ffa4 	bl	800d3e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01f      	beq.n	800b4ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b0:	f000 f8f6 	bl	800b6a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b6:	1e5a      	subs	r2, r3, #1
 800b4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00f      	beq.n	800b4e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	3310      	adds	r3, #16
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 ff79 	bl	800c3c0 <xTaskRemoveFromEventList>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d007      	beq.n	800b4e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c8 <xQueueReceive+0x1c0>)
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4e4:	f001 ffb2 	bl	800d44c <vPortExitCritical>
				return pdPASS;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e069      	b.n	800b5c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d103      	bne.n	800b4fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4f2:	f001 ffab 	bl	800d44c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	e062      	b.n	800b5c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b500:	f107 0310 	add.w	r3, r7, #16
 800b504:	4618      	mov	r0, r3
 800b506:	f000 ffbf 	bl	800c488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b50a:	2301      	movs	r3, #1
 800b50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b50e:	f001 ff9d 	bl	800d44c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b512:	f000 fc2d 	bl	800bd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b516:	f001 ff67 	bl	800d3e8 <vPortEnterCritical>
 800b51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b520:	b25b      	sxtb	r3, r3
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b526:	d103      	bne.n	800b530 <xQueueReceive+0x128>
 800b528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b532:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b536:	b25b      	sxtb	r3, r3
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b53c:	d103      	bne.n	800b546 <xQueueReceive+0x13e>
 800b53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b546:	f001 ff81 	bl	800d44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b54a:	1d3a      	adds	r2, r7, #4
 800b54c:	f107 0310 	add.w	r3, r7, #16
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f000 ffae 	bl	800c4b4 <xTaskCheckForTimeOut>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d123      	bne.n	800b5a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b55e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b560:	f000 f916 	bl	800b790 <prvIsQueueEmpty>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d017      	beq.n	800b59a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	3324      	adds	r3, #36	@ 0x24
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	4611      	mov	r1, r2
 800b572:	4618      	mov	r0, r3
 800b574:	f000 fed2 	bl	800c31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b57a:	f000 f8b7 	bl	800b6ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b57e:	f000 fc05 	bl	800bd8c <xTaskResumeAll>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d189      	bne.n	800b49c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b588:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c8 <xQueueReceive+0x1c0>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	e780      	b.n	800b49c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b59c:	f000 f8a6 	bl	800b6ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5a0:	f000 fbf4 	bl	800bd8c <xTaskResumeAll>
 800b5a4:	e77a      	b.n	800b49c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a8:	f000 f8a0 	bl	800b6ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5ac:	f000 fbee 	bl	800bd8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5b2:	f000 f8ed 	bl	800b790 <prvIsQueueEmpty>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f43f af6f 	beq.w	800b49c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3730      	adds	r7, #48	@ 0x30
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	e000ed04 	.word	0xe000ed04

0800b5cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10d      	bne.n	800b606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d14d      	bne.n	800b68e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 f8c6 	bl	800c788 <xTaskPriorityDisinherit>
 800b5fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	609a      	str	r2, [r3, #8]
 800b604:	e043      	b.n	800b68e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d119      	bne.n	800b640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6858      	ldr	r0, [r3, #4]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b614:	461a      	mov	r2, r3
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	f002 faa8 	bl	800db6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b624:	441a      	add	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	429a      	cmp	r2, r3
 800b634:	d32b      	bcc.n	800b68e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	605a      	str	r2, [r3, #4]
 800b63e:	e026      	b.n	800b68e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68d8      	ldr	r0, [r3, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b648:	461a      	mov	r2, r3
 800b64a:	68b9      	ldr	r1, [r7, #8]
 800b64c:	f002 fa8e 	bl	800db6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b658:	425b      	negs	r3, r3
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68da      	ldr	r2, [r3, #12]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d207      	bcs.n	800b67c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b674:	425b      	negs	r3, r3
 800b676:	441a      	add	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d105      	bne.n	800b68e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b696:	697b      	ldr	r3, [r7, #20]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d018      	beq.n	800b6e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ba:	441a      	add	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68da      	ldr	r2, [r3, #12]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d303      	bcc.n	800b6d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68d9      	ldr	r1, [r3, #12]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6838      	ldr	r0, [r7, #0]
 800b6e0:	f002 fa44 	bl	800db6c <memcpy>
	}
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6f4:	f001 fe78 	bl	800d3e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b700:	e011      	b.n	800b726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b706:	2b00      	cmp	r3, #0
 800b708:	d012      	beq.n	800b730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3324      	adds	r3, #36	@ 0x24
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fe56 	bl	800c3c0 <xTaskRemoveFromEventList>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b71a:	f000 ff2f 	bl	800c57c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	3b01      	subs	r3, #1
 800b722:	b2db      	uxtb	r3, r3
 800b724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dce9      	bgt.n	800b702 <prvUnlockQueue+0x16>
 800b72e:	e000      	b.n	800b732 <prvUnlockQueue+0x46>
					break;
 800b730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	22ff      	movs	r2, #255	@ 0xff
 800b736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b73a:	f001 fe87 	bl	800d44c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b73e:	f001 fe53 	bl	800d3e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b74a:	e011      	b.n	800b770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d012      	beq.n	800b77a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3310      	adds	r3, #16
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 fe31 	bl	800c3c0 <xTaskRemoveFromEventList>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b764:	f000 ff0a 	bl	800c57c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b774:	2b00      	cmp	r3, #0
 800b776:	dce9      	bgt.n	800b74c <prvUnlockQueue+0x60>
 800b778:	e000      	b.n	800b77c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b77a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	22ff      	movs	r2, #255	@ 0xff
 800b780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b784:	f001 fe62 	bl	800d44c <vPortExitCritical>
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b798:	f001 fe26 	bl	800d3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	e001      	b.n	800b7ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7ae:	f001 fe4d 	bl	800d44c <vPortExitCritical>

	return xReturn;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7c4:	f001 fe10 	bl	800d3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d102      	bne.n	800b7da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e001      	b.n	800b7de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7de:	f001 fe35 	bl	800d44c <vPortExitCritical>

	return xReturn;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e014      	b.n	800b826 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7fc:	4a0f      	ldr	r2, [pc, #60]	@ (800b83c <vQueueAddToRegistry+0x50>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10b      	bne.n	800b820 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b808:	490c      	ldr	r1, [pc, #48]	@ (800b83c <vQueueAddToRegistry+0x50>)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b812:	4a0a      	ldr	r2, [pc, #40]	@ (800b83c <vQueueAddToRegistry+0x50>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b81e:	e006      	b.n	800b82e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3301      	adds	r3, #1
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b07      	cmp	r3, #7
 800b82a:	d9e7      	bls.n	800b7fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	200013d4 	.word	0x200013d4

0800b840 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b850:	f001 fdca 	bl	800d3e8 <vPortEnterCritical>
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b85a:	b25b      	sxtb	r3, r3
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b860:	d103      	bne.n	800b86a <vQueueWaitForMessageRestricted+0x2a>
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b870:	b25b      	sxtb	r3, r3
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b876:	d103      	bne.n	800b880 <vQueueWaitForMessageRestricted+0x40>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b880:	f001 fde4 	bl	800d44c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	3324      	adds	r3, #36	@ 0x24
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fd67 	bl	800c368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b89a:	6978      	ldr	r0, [r7, #20]
 800b89c:	f7ff ff26 	bl	800b6ec <prvUnlockQueue>
	}
 800b8a0:	bf00      	nop
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08e      	sub	sp, #56	@ 0x38
 800b8ac:	af04      	add	r7, sp, #16
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10b      	bne.n	800b8d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	623b      	str	r3, [r7, #32]
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	e7fd      	b.n	800b8d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	61fb      	str	r3, [r7, #28]
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	e7fd      	b.n	800b8ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8f2:	23a8      	movs	r3, #168	@ 0xa8
 800b8f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2ba8      	cmp	r3, #168	@ 0xa8
 800b8fa:	d00b      	beq.n	800b914 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	61bb      	str	r3, [r7, #24]
}
 800b90e:	bf00      	nop
 800b910:	bf00      	nop
 800b912:	e7fd      	b.n	800b910 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b914:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01e      	beq.n	800b95a <xTaskCreateStatic+0xb2>
 800b91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d01b      	beq.n	800b95a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b924:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b92a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b934:	2300      	movs	r3, #0
 800b936:	9303      	str	r3, [sp, #12]
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	9302      	str	r3, [sp, #8]
 800b93c:	f107 0314 	add.w	r3, r7, #20
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	68b9      	ldr	r1, [r7, #8]
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f851 	bl	800b9f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b954:	f000 f8f6 	bl	800bb44 <prvAddNewTaskToReadyList>
 800b958:	e001      	b.n	800b95e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b95e:	697b      	ldr	r3, [r7, #20]
	}
 800b960:	4618      	mov	r0, r3
 800b962:	3728      	adds	r7, #40	@ 0x28
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08c      	sub	sp, #48	@ 0x30
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fe55 	bl	800d62c <pvPortMalloc>
 800b982:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00e      	beq.n	800b9a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b98a:	20a8      	movs	r0, #168	@ 0xa8
 800b98c:	f001 fe4e 	bl	800d62c <pvPortMalloc>
 800b990:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b99e:	e005      	b.n	800b9ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9a0:	6978      	ldr	r0, [r7, #20]
 800b9a2:	f001 ff11 	bl	800d7c8 <vPortFree>
 800b9a6:	e001      	b.n	800b9ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d017      	beq.n	800b9e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9ba:	88fa      	ldrh	r2, [r7, #6]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	9302      	str	r3, [sp, #8]
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 f80f 	bl	800b9f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9d6:	69f8      	ldr	r0, [r7, #28]
 800b9d8:	f000 f8b4 	bl	800bb44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	61bb      	str	r3, [r7, #24]
 800b9e0:	e002      	b.n	800b9e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9e8:	69bb      	ldr	r3, [r7, #24]
	}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	21a5      	movs	r1, #165	@ 0xa5
 800ba0e:	f002 f81b 	bl	800da48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	617b      	str	r3, [r7, #20]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d01f      	beq.n	800ba94 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba54:	2300      	movs	r3, #0
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	e012      	b.n	800ba80 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	4413      	add	r3, r2
 800ba60:	7819      	ldrb	r1, [r3, #0]
 800ba62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	4413      	add	r3, r2
 800ba68:	3334      	adds	r3, #52	@ 0x34
 800ba6a:	460a      	mov	r2, r1
 800ba6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	4413      	add	r3, r2
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d006      	beq.n	800ba88 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	2b0f      	cmp	r3, #15
 800ba84:	d9e9      	bls.n	800ba5a <prvInitialiseNewTask+0x66>
 800ba86:	e000      	b.n	800ba8a <prvInitialiseNewTask+0x96>
			{
				break;
 800ba88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba92:	e003      	b.n	800ba9c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9e:	2b37      	cmp	r3, #55	@ 0x37
 800baa0:	d901      	bls.n	800baa6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800baa2:	2337      	movs	r3, #55	@ 0x37
 800baa4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baaa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800baac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bab0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab4:	2200      	movs	r2, #0
 800bab6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baba:	3304      	adds	r3, #4
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff f965 	bl	800ad8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	3318      	adds	r3, #24
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff f960 	bl	800ad8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bada:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800badc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	2200      	movs	r2, #0
 800baee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	3354      	adds	r3, #84	@ 0x54
 800baf6:	224c      	movs	r2, #76	@ 0x4c
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 ffa4 	bl	800da48 <memset>
 800bb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb02:	4a0d      	ldr	r2, [pc, #52]	@ (800bb38 <prvInitialiseNewTask+0x144>)
 800bb04:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb08:	4a0c      	ldr	r2, [pc, #48]	@ (800bb3c <prvInitialiseNewTask+0x148>)
 800bb0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb40 <prvInitialiseNewTask+0x14c>)
 800bb10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	69b8      	ldr	r0, [r7, #24]
 800bb18:	f001 fb36 	bl	800d188 <pxPortInitialiseStack>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb2e:	bf00      	nop
 800bb30:	3720      	adds	r7, #32
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20005668 	.word	0x20005668
 800bb3c:	200056d0 	.word	0x200056d0
 800bb40:	20005738 	.word	0x20005738

0800bb44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb4c:	f001 fc4c 	bl	800d3e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb50:	4b2d      	ldr	r3, [pc, #180]	@ (800bc08 <prvAddNewTaskToReadyList+0xc4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3301      	adds	r3, #1
 800bb56:	4a2c      	ldr	r2, [pc, #176]	@ (800bc08 <prvAddNewTaskToReadyList+0xc4>)
 800bb58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb5a:	4b2c      	ldr	r3, [pc, #176]	@ (800bc0c <prvAddNewTaskToReadyList+0xc8>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d109      	bne.n	800bb76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb62:	4a2a      	ldr	r2, [pc, #168]	@ (800bc0c <prvAddNewTaskToReadyList+0xc8>)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb68:	4b27      	ldr	r3, [pc, #156]	@ (800bc08 <prvAddNewTaskToReadyList+0xc4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d110      	bne.n	800bb92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb70:	f000 fd28 	bl	800c5c4 <prvInitialiseTaskLists>
 800bb74:	e00d      	b.n	800bb92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb76:	4b26      	ldr	r3, [pc, #152]	@ (800bc10 <prvAddNewTaskToReadyList+0xcc>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d109      	bne.n	800bb92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb7e:	4b23      	ldr	r3, [pc, #140]	@ (800bc0c <prvAddNewTaskToReadyList+0xc8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d802      	bhi.n	800bb92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb8c:	4a1f      	ldr	r2, [pc, #124]	@ (800bc0c <prvAddNewTaskToReadyList+0xc8>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb92:	4b20      	ldr	r3, [pc, #128]	@ (800bc14 <prvAddNewTaskToReadyList+0xd0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3301      	adds	r3, #1
 800bb98:	4a1e      	ldr	r2, [pc, #120]	@ (800bc14 <prvAddNewTaskToReadyList+0xd0>)
 800bb9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb9c:	4b1d      	ldr	r3, [pc, #116]	@ (800bc14 <prvAddNewTaskToReadyList+0xd0>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba8:	4b1b      	ldr	r3, [pc, #108]	@ (800bc18 <prvAddNewTaskToReadyList+0xd4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d903      	bls.n	800bbb8 <prvAddNewTaskToReadyList+0x74>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb4:	4a18      	ldr	r2, [pc, #96]	@ (800bc18 <prvAddNewTaskToReadyList+0xd4>)
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4a15      	ldr	r2, [pc, #84]	@ (800bc1c <prvAddNewTaskToReadyList+0xd8>)
 800bbc6:	441a      	add	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f7ff f8e9 	bl	800ada6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd4:	f001 fc3a 	bl	800d44c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbd8:	4b0d      	ldr	r3, [pc, #52]	@ (800bc10 <prvAddNewTaskToReadyList+0xcc>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00e      	beq.n	800bbfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	@ (800bc0c <prvAddNewTaskToReadyList+0xc8>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d207      	bcs.n	800bbfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbee:	4b0c      	ldr	r3, [pc, #48]	@ (800bc20 <prvAddNewTaskToReadyList+0xdc>)
 800bbf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	200018e8 	.word	0x200018e8
 800bc0c:	20001414 	.word	0x20001414
 800bc10:	200018f4 	.word	0x200018f4
 800bc14:	20001904 	.word	0x20001904
 800bc18:	200018f0 	.word	0x200018f0
 800bc1c:	20001418 	.word	0x20001418
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d018      	beq.n	800bc68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc36:	4b14      	ldr	r3, [pc, #80]	@ (800bc88 <vTaskDelay+0x64>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00b      	beq.n	800bc56 <vTaskDelay+0x32>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60bb      	str	r3, [r7, #8]
}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	e7fd      	b.n	800bc52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc56:	f000 f88b 	bl	800bd70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fee5 	bl	800ca2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc62:	f000 f893 	bl	800bd8c <xTaskResumeAll>
 800bc66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d107      	bne.n	800bc7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bc6e:	4b07      	ldr	r3, [pc, #28]	@ (800bc8c <vTaskDelay+0x68>)
 800bc70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc7e:	bf00      	nop
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20001910 	.word	0x20001910
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08a      	sub	sp, #40	@ 0x28
 800bc94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc9e:	463a      	mov	r2, r7
 800bca0:	1d39      	adds	r1, r7, #4
 800bca2:	f107 0308 	add.w	r3, r7, #8
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff f81c 	bl	800ace4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	9202      	str	r2, [sp, #8]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	460a      	mov	r2, r1
 800bcbe:	4924      	ldr	r1, [pc, #144]	@ (800bd50 <vTaskStartScheduler+0xc0>)
 800bcc0:	4824      	ldr	r0, [pc, #144]	@ (800bd54 <vTaskStartScheduler+0xc4>)
 800bcc2:	f7ff fdf1 	bl	800b8a8 <xTaskCreateStatic>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	4a23      	ldr	r2, [pc, #140]	@ (800bd58 <vTaskStartScheduler+0xc8>)
 800bcca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bccc:	4b22      	ldr	r3, [pc, #136]	@ (800bd58 <vTaskStartScheduler+0xc8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e001      	b.n	800bcde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d102      	bne.n	800bcea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bce4:	f000 fef6 	bl	800cad4 <xTimerCreateTimerTask>
 800bce8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d11b      	bne.n	800bd28 <vTaskStartScheduler+0x98>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	613b      	str	r3, [r7, #16]
}
 800bd02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd04:	4b15      	ldr	r3, [pc, #84]	@ (800bd5c <vTaskStartScheduler+0xcc>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3354      	adds	r3, #84	@ 0x54
 800bd0a:	4a15      	ldr	r2, [pc, #84]	@ (800bd60 <vTaskStartScheduler+0xd0>)
 800bd0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd0e:	4b15      	ldr	r3, [pc, #84]	@ (800bd64 <vTaskStartScheduler+0xd4>)
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd16:	4b14      	ldr	r3, [pc, #80]	@ (800bd68 <vTaskStartScheduler+0xd8>)
 800bd18:	2201      	movs	r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd1c:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <vTaskStartScheduler+0xdc>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd22:	f001 fabd 	bl	800d2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd26:	e00f      	b.n	800bd48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd2e:	d10b      	bne.n	800bd48 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60fb      	str	r3, [r7, #12]
}
 800bd42:	bf00      	nop
 800bd44:	bf00      	nop
 800bd46:	e7fd      	b.n	800bd44 <vTaskStartScheduler+0xb4>
}
 800bd48:	bf00      	nop
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	0800e47c 	.word	0x0800e47c
 800bd54:	0800c595 	.word	0x0800c595
 800bd58:	2000190c 	.word	0x2000190c
 800bd5c:	20001414 	.word	0x20001414
 800bd60:	2000002c 	.word	0x2000002c
 800bd64:	20001908 	.word	0x20001908
 800bd68:	200018f4 	.word	0x200018f4
 800bd6c:	200018ec 	.word	0x200018ec

0800bd70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd74:	4b04      	ldr	r3, [pc, #16]	@ (800bd88 <vTaskSuspendAll+0x18>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	4a03      	ldr	r2, [pc, #12]	@ (800bd88 <vTaskSuspendAll+0x18>)
 800bd7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd7e:	bf00      	nop
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	20001910 	.word	0x20001910

0800bd8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd9a:	4b42      	ldr	r3, [pc, #264]	@ (800bea4 <xTaskResumeAll+0x118>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10b      	bne.n	800bdba <xTaskResumeAll+0x2e>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	603b      	str	r3, [r7, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	e7fd      	b.n	800bdb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdba:	f001 fb15 	bl	800d3e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdbe:	4b39      	ldr	r3, [pc, #228]	@ (800bea4 <xTaskResumeAll+0x118>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	4a37      	ldr	r2, [pc, #220]	@ (800bea4 <xTaskResumeAll+0x118>)
 800bdc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc8:	4b36      	ldr	r3, [pc, #216]	@ (800bea4 <xTaskResumeAll+0x118>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d162      	bne.n	800be96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdd0:	4b35      	ldr	r3, [pc, #212]	@ (800bea8 <xTaskResumeAll+0x11c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d05e      	beq.n	800be96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdd8:	e02f      	b.n	800be3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdda:	4b34      	ldr	r3, [pc, #208]	@ (800beac <xTaskResumeAll+0x120>)
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3318      	adds	r3, #24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff f83a 	bl	800ae60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff f835 	bl	800ae60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfa:	4b2d      	ldr	r3, [pc, #180]	@ (800beb0 <xTaskResumeAll+0x124>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d903      	bls.n	800be0a <xTaskResumeAll+0x7e>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be06:	4a2a      	ldr	r2, [pc, #168]	@ (800beb0 <xTaskResumeAll+0x124>)
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4a27      	ldr	r2, [pc, #156]	@ (800beb4 <xTaskResumeAll+0x128>)
 800be18:	441a      	add	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7fe ffc0 	bl	800ada6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be2a:	4b23      	ldr	r3, [pc, #140]	@ (800beb8 <xTaskResumeAll+0x12c>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	429a      	cmp	r2, r3
 800be32:	d302      	bcc.n	800be3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800be34:	4b21      	ldr	r3, [pc, #132]	@ (800bebc <xTaskResumeAll+0x130>)
 800be36:	2201      	movs	r2, #1
 800be38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be3a:	4b1c      	ldr	r3, [pc, #112]	@ (800beac <xTaskResumeAll+0x120>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1cb      	bne.n	800bdda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be48:	f000 fc60 	bl	800c70c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be4c:	4b1c      	ldr	r3, [pc, #112]	@ (800bec0 <xTaskResumeAll+0x134>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d010      	beq.n	800be7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be58:	f000 f940 	bl	800c0dc <xTaskIncrementTick>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800be62:	4b16      	ldr	r3, [pc, #88]	@ (800bebc <xTaskResumeAll+0x130>)
 800be64:	2201      	movs	r2, #1
 800be66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1f1      	bne.n	800be58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800be74:	4b12      	ldr	r3, [pc, #72]	@ (800bec0 <xTaskResumeAll+0x134>)
 800be76:	2200      	movs	r2, #0
 800be78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be7a:	4b10      	ldr	r3, [pc, #64]	@ (800bebc <xTaskResumeAll+0x130>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d009      	beq.n	800be96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be86:	4b0f      	ldr	r3, [pc, #60]	@ (800bec4 <xTaskResumeAll+0x138>)
 800be88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be96:	f001 fad9 	bl	800d44c <vPortExitCritical>

	return xAlreadyYielded;
 800be9a:	68bb      	ldr	r3, [r7, #8]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20001910 	.word	0x20001910
 800bea8:	200018e8 	.word	0x200018e8
 800beac:	200018a8 	.word	0x200018a8
 800beb0:	200018f0 	.word	0x200018f0
 800beb4:	20001418 	.word	0x20001418
 800beb8:	20001414 	.word	0x20001414
 800bebc:	200018fc 	.word	0x200018fc
 800bec0:	200018f8 	.word	0x200018f8
 800bec4:	e000ed04 	.word	0xe000ed04

0800bec8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bece:	4b05      	ldr	r3, [pc, #20]	@ (800bee4 <xTaskGetTickCount+0x1c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bed4:	687b      	ldr	r3, [r7, #4]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	200018ec 	.word	0x200018ec

0800bee8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d102      	bne.n	800befc <pcTaskGetName+0x14>
 800bef6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf30 <pcTaskGetName+0x48>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	e000      	b.n	800befe <pcTaskGetName+0x16>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10b      	bne.n	800bf1e <pcTaskGetName+0x36>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	60bb      	str	r3, [r7, #8]
}
 800bf18:	bf00      	nop
 800bf1a:	bf00      	nop
 800bf1c:	e7fd      	b.n	800bf1a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3334      	adds	r3, #52	@ 0x34
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	20001414 	.word	0x20001414

0800bf34 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800bf34:	b480      	push	{r7}
 800bf36:	b08b      	sub	sp, #44	@ 0x2c
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d05b      	beq.n	800c002 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	61bb      	str	r3, [r7, #24]
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	605a      	str	r2, [r3, #4]
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	3308      	adds	r3, #8
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d104      	bne.n	800bf6e <prvSearchForNameWithinSingleList+0x3a>
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	605a      	str	r2, [r3, #4]
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	613b      	str	r3, [r7, #16]
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	605a      	str	r2, [r3, #4]
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d104      	bne.n	800bf9a <prvSearchForNameWithinSingleList+0x66>
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	605a      	str	r2, [r3, #4]
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	623b      	str	r3, [r7, #32]
 800bfaa:	e01c      	b.n	800bfe6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	3334      	adds	r3, #52	@ 0x34
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	7afa      	ldrb	r2, [r7, #11]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d002      	beq.n	800bfcc <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	61fb      	str	r3, [r7, #28]
 800bfca:	e006      	b.n	800bfda <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800bfcc:	7afb      	ldrb	r3, [r7, #11]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d103      	bne.n	800bfda <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	623b      	str	r3, [r7, #32]
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	2b0f      	cmp	r3, #15
 800bfea:	d9df      	bls.n	800bfac <prvSearchForNameWithinSingleList+0x78>
 800bfec:	e000      	b.n	800bff0 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800bfee:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d104      	bne.n	800c000 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1bb      	bne.n	800bf76 <prvSearchForNameWithinSingleList+0x42>
 800bffe:	e000      	b.n	800c002 <prvSearchForNameWithinSingleList+0xce>
					break;
 800c000:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c004:	4618      	mov	r0, r3
 800c006:	372c      	adds	r7, #44	@ 0x2c
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800c018:	2338      	movs	r3, #56	@ 0x38
 800c01a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7f4 f8d7 	bl	80001d0 <strlen>
 800c022:	4603      	mov	r3, r0
 800c024:	2b0f      	cmp	r3, #15
 800c026:	d90b      	bls.n	800c040 <xTaskGetHandle+0x30>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	60fb      	str	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	bf00      	nop
 800c03e:	e7fd      	b.n	800c03c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800c040:	f7ff fe96 	bl	800bd70 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	3b01      	subs	r3, #1
 800c048:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4a1c      	ldr	r2, [pc, #112]	@ (800c0c8 <xTaskGetHandle+0xb8>)
 800c056:	4413      	add	r3, r2
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff ff6a 	bl	800bf34 <prvSearchForNameWithinSingleList>
 800c060:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1ea      	bne.n	800c044 <xTaskGetHandle+0x34>
 800c06e:	e000      	b.n	800c072 <xTaskGetHandle+0x62>
					break;
 800c070:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800c078:	4b14      	ldr	r3, [pc, #80]	@ (800c0cc <xTaskGetHandle+0xbc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff ff58 	bl	800bf34 <prvSearchForNameWithinSingleList>
 800c084:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800c08c:	4b10      	ldr	r3, [pc, #64]	@ (800c0d0 <xTaskGetHandle+0xc0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6879      	ldr	r1, [r7, #4]
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff ff4e 	bl	800bf34 <prvSearchForNameWithinSingleList>
 800c098:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d104      	bne.n	800c0aa <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	480c      	ldr	r0, [pc, #48]	@ (800c0d4 <xTaskGetHandle+0xc4>)
 800c0a4:	f7ff ff46 	bl	800bf34 <prvSearchForNameWithinSingleList>
 800c0a8:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4809      	ldr	r0, [pc, #36]	@ (800c0d8 <xTaskGetHandle+0xc8>)
 800c0b4:	f7ff ff3e 	bl	800bf34 <prvSearchForNameWithinSingleList>
 800c0b8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800c0ba:	f7ff fe67 	bl	800bd8c <xTaskResumeAll>

		return pxTCB;
 800c0be:	693b      	ldr	r3, [r7, #16]
	}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	20001418 	.word	0x20001418
 800c0cc:	200018a0 	.word	0x200018a0
 800c0d0:	200018a4 	.word	0x200018a4
 800c0d4:	200018d4 	.word	0x200018d4
 800c0d8:	200018bc 	.word	0x200018bc

0800c0dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e6:	4b4f      	ldr	r3, [pc, #316]	@ (800c224 <xTaskIncrementTick+0x148>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f040 8090 	bne.w	800c210 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0f0:	4b4d      	ldr	r3, [pc, #308]	@ (800c228 <xTaskIncrementTick+0x14c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0f8:	4a4b      	ldr	r2, [pc, #300]	@ (800c228 <xTaskIncrementTick+0x14c>)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d121      	bne.n	800c148 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c104:	4b49      	ldr	r3, [pc, #292]	@ (800c22c <xTaskIncrementTick+0x150>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00b      	beq.n	800c126 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	603b      	str	r3, [r7, #0]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <xTaskIncrementTick+0x46>
 800c126:	4b41      	ldr	r3, [pc, #260]	@ (800c22c <xTaskIncrementTick+0x150>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	4b40      	ldr	r3, [pc, #256]	@ (800c230 <xTaskIncrementTick+0x154>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a3e      	ldr	r2, [pc, #248]	@ (800c22c <xTaskIncrementTick+0x150>)
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	4a3e      	ldr	r2, [pc, #248]	@ (800c230 <xTaskIncrementTick+0x154>)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	4b3e      	ldr	r3, [pc, #248]	@ (800c234 <xTaskIncrementTick+0x158>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3301      	adds	r3, #1
 800c140:	4a3c      	ldr	r2, [pc, #240]	@ (800c234 <xTaskIncrementTick+0x158>)
 800c142:	6013      	str	r3, [r2, #0]
 800c144:	f000 fae2 	bl	800c70c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c148:	4b3b      	ldr	r3, [pc, #236]	@ (800c238 <xTaskIncrementTick+0x15c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d349      	bcc.n	800c1e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c152:	4b36      	ldr	r3, [pc, #216]	@ (800c22c <xTaskIncrementTick+0x150>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d104      	bne.n	800c166 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15c:	4b36      	ldr	r3, [pc, #216]	@ (800c238 <xTaskIncrementTick+0x15c>)
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c162:	601a      	str	r2, [r3, #0]
					break;
 800c164:	e03f      	b.n	800c1e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c166:	4b31      	ldr	r3, [pc, #196]	@ (800c22c <xTaskIncrementTick+0x150>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d203      	bcs.n	800c186 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c17e:	4a2e      	ldr	r2, [pc, #184]	@ (800c238 <xTaskIncrementTick+0x15c>)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c184:	e02f      	b.n	800c1e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	3304      	adds	r3, #4
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fe68 	bl	800ae60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	3318      	adds	r3, #24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fe fe5f 	bl	800ae60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1a6:	4b25      	ldr	r3, [pc, #148]	@ (800c23c <xTaskIncrementTick+0x160>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d903      	bls.n	800c1b6 <xTaskIncrementTick+0xda>
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b2:	4a22      	ldr	r2, [pc, #136]	@ (800c23c <xTaskIncrementTick+0x160>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c240 <xTaskIncrementTick+0x164>)
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fe fdea 	bl	800ada6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c244 <xTaskIncrementTick+0x168>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d3b8      	bcc.n	800c152 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1e4:	e7b5      	b.n	800c152 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1e6:	4b17      	ldr	r3, [pc, #92]	@ (800c244 <xTaskIncrementTick+0x168>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ec:	4914      	ldr	r1, [pc, #80]	@ (800c240 <xTaskIncrementTick+0x164>)
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d901      	bls.n	800c202 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c1fe:	2301      	movs	r3, #1
 800c200:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c202:	4b11      	ldr	r3, [pc, #68]	@ (800c248 <xTaskIncrementTick+0x16c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c20a:	2301      	movs	r3, #1
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e004      	b.n	800c21a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c210:	4b0e      	ldr	r3, [pc, #56]	@ (800c24c <xTaskIncrementTick+0x170>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3301      	adds	r3, #1
 800c216:	4a0d      	ldr	r2, [pc, #52]	@ (800c24c <xTaskIncrementTick+0x170>)
 800c218:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c21a:	697b      	ldr	r3, [r7, #20]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	20001910 	.word	0x20001910
 800c228:	200018ec 	.word	0x200018ec
 800c22c:	200018a0 	.word	0x200018a0
 800c230:	200018a4 	.word	0x200018a4
 800c234:	20001900 	.word	0x20001900
 800c238:	20001908 	.word	0x20001908
 800c23c:	200018f0 	.word	0x200018f0
 800c240:	20001418 	.word	0x20001418
 800c244:	20001414 	.word	0x20001414
 800c248:	200018fc 	.word	0x200018fc
 800c24c:	200018f8 	.word	0x200018f8

0800c250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c256:	4b2b      	ldr	r3, [pc, #172]	@ (800c304 <vTaskSwitchContext+0xb4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c25e:	4b2a      	ldr	r3, [pc, #168]	@ (800c308 <vTaskSwitchContext+0xb8>)
 800c260:	2201      	movs	r2, #1
 800c262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c264:	e047      	b.n	800c2f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c266:	4b28      	ldr	r3, [pc, #160]	@ (800c308 <vTaskSwitchContext+0xb8>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26c:	4b27      	ldr	r3, [pc, #156]	@ (800c30c <vTaskSwitchContext+0xbc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e011      	b.n	800c298 <vTaskSwitchContext+0x48>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10b      	bne.n	800c292 <vTaskSwitchContext+0x42>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	607b      	str	r3, [r7, #4]
}
 800c28c:	bf00      	nop
 800c28e:	bf00      	nop
 800c290:	e7fd      	b.n	800c28e <vTaskSwitchContext+0x3e>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3b01      	subs	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	491d      	ldr	r1, [pc, #116]	@ (800c310 <vTaskSwitchContext+0xc0>)
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	440b      	add	r3, r1
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d0e3      	beq.n	800c274 <vTaskSwitchContext+0x24>
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4a16      	ldr	r2, [pc, #88]	@ (800c310 <vTaskSwitchContext+0xc0>)
 800c2b8:	4413      	add	r3, r2
 800c2ba:	60bb      	str	r3, [r7, #8]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	605a      	str	r2, [r3, #4]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d104      	bne.n	800c2dc <vTaskSwitchContext+0x8c>
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	605a      	str	r2, [r3, #4]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	4a0c      	ldr	r2, [pc, #48]	@ (800c314 <vTaskSwitchContext+0xc4>)
 800c2e4:	6013      	str	r3, [r2, #0]
 800c2e6:	4a09      	ldr	r2, [pc, #36]	@ (800c30c <vTaskSwitchContext+0xbc>)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2ec:	4b09      	ldr	r3, [pc, #36]	@ (800c314 <vTaskSwitchContext+0xc4>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3354      	adds	r3, #84	@ 0x54
 800c2f2:	4a09      	ldr	r2, [pc, #36]	@ (800c318 <vTaskSwitchContext+0xc8>)
 800c2f4:	6013      	str	r3, [r2, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20001910 	.word	0x20001910
 800c308:	200018fc 	.word	0x200018fc
 800c30c:	200018f0 	.word	0x200018f0
 800c310:	20001418 	.word	0x20001418
 800c314:	20001414 	.word	0x20001414
 800c318:	2000002c 	.word	0x2000002c

0800c31c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10b      	bne.n	800c344 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	60fb      	str	r3, [r7, #12]
}
 800c33e:	bf00      	nop
 800c340:	bf00      	nop
 800c342:	e7fd      	b.n	800c340 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c344:	4b07      	ldr	r3, [pc, #28]	@ (800c364 <vTaskPlaceOnEventList+0x48>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3318      	adds	r3, #24
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7fe fd4e 	bl	800adee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c352:	2101      	movs	r1, #1
 800c354:	6838      	ldr	r0, [r7, #0]
 800c356:	f000 fb69 	bl	800ca2c <prvAddCurrentTaskToDelayedList>
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20001414 	.word	0x20001414

0800c368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	617b      	str	r3, [r7, #20]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c392:	4b0a      	ldr	r3, [pc, #40]	@ (800c3bc <vTaskPlaceOnEventListRestricted+0x54>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3318      	adds	r3, #24
 800c398:	4619      	mov	r1, r3
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7fe fd03 	bl	800ada6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c3a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	68b8      	ldr	r0, [r7, #8]
 800c3b0:	f000 fb3c 	bl	800ca2c <prvAddCurrentTaskToDelayedList>
	}
 800c3b4:	bf00      	nop
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20001414 	.word	0x20001414

0800c3c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	60fb      	str	r3, [r7, #12]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	3318      	adds	r3, #24
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fd34 	bl	800ae60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800c470 <xTaskRemoveFromEventList+0xb0>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11d      	bne.n	800c43c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	3304      	adds	r3, #4
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fd2b 	bl	800ae60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c40e:	4b19      	ldr	r3, [pc, #100]	@ (800c474 <xTaskRemoveFromEventList+0xb4>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	d903      	bls.n	800c41e <xTaskRemoveFromEventList+0x5e>
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41a:	4a16      	ldr	r2, [pc, #88]	@ (800c474 <xTaskRemoveFromEventList+0xb4>)
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c422:	4613      	mov	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4a13      	ldr	r2, [pc, #76]	@ (800c478 <xTaskRemoveFromEventList+0xb8>)
 800c42c:	441a      	add	r2, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	3304      	adds	r3, #4
 800c432:	4619      	mov	r1, r3
 800c434:	4610      	mov	r0, r2
 800c436:	f7fe fcb6 	bl	800ada6 <vListInsertEnd>
 800c43a:	e005      	b.n	800c448 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	3318      	adds	r3, #24
 800c440:	4619      	mov	r1, r3
 800c442:	480e      	ldr	r0, [pc, #56]	@ (800c47c <xTaskRemoveFromEventList+0xbc>)
 800c444:	f7fe fcaf 	bl	800ada6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c44c:	4b0c      	ldr	r3, [pc, #48]	@ (800c480 <xTaskRemoveFromEventList+0xc0>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c452:	429a      	cmp	r2, r3
 800c454:	d905      	bls.n	800c462 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c456:	2301      	movs	r3, #1
 800c458:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c45a:	4b0a      	ldr	r3, [pc, #40]	@ (800c484 <xTaskRemoveFromEventList+0xc4>)
 800c45c:	2201      	movs	r2, #1
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	e001      	b.n	800c466 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c466:	697b      	ldr	r3, [r7, #20]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3718      	adds	r7, #24
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20001910 	.word	0x20001910
 800c474:	200018f0 	.word	0x200018f0
 800c478:	20001418 	.word	0x20001418
 800c47c:	200018a8 	.word	0x200018a8
 800c480:	20001414 	.word	0x20001414
 800c484:	200018fc 	.word	0x200018fc

0800c488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c490:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <vTaskInternalSetTimeOutState+0x24>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c498:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <vTaskInternalSetTimeOutState+0x28>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	605a      	str	r2, [r3, #4]
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	20001900 	.word	0x20001900
 800c4b0:	200018ec 	.word	0x200018ec

0800c4b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10b      	bne.n	800c4dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	613b      	str	r3, [r7, #16]
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	e7fd      	b.n	800c4d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	60fb      	str	r3, [r7, #12]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c4fa:	f000 ff75 	bl	800d3e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c574 <xTaskCheckForTimeOut+0xc0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	69ba      	ldr	r2, [r7, #24]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c516:	d102      	bne.n	800c51e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c518:	2300      	movs	r3, #0
 800c51a:	61fb      	str	r3, [r7, #28]
 800c51c:	e023      	b.n	800c566 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	4b15      	ldr	r3, [pc, #84]	@ (800c578 <xTaskCheckForTimeOut+0xc4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	429a      	cmp	r2, r3
 800c528:	d007      	beq.n	800c53a <xTaskCheckForTimeOut+0x86>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	429a      	cmp	r2, r3
 800c532:	d302      	bcc.n	800c53a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	61fb      	str	r3, [r7, #28]
 800c538:	e015      	b.n	800c566 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	429a      	cmp	r2, r3
 800c542:	d20b      	bcs.n	800c55c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	1ad2      	subs	r2, r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ff99 	bl	800c488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	61fb      	str	r3, [r7, #28]
 800c55a:	e004      	b.n	800c566 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c562:	2301      	movs	r3, #1
 800c564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c566:	f000 ff71 	bl	800d44c <vPortExitCritical>

	return xReturn;
 800c56a:	69fb      	ldr	r3, [r7, #28]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	200018ec 	.word	0x200018ec
 800c578:	20001900 	.word	0x20001900

0800c57c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c580:	4b03      	ldr	r3, [pc, #12]	@ (800c590 <vTaskMissedYield+0x14>)
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]
}
 800c586:	bf00      	nop
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	200018fc 	.word	0x200018fc

0800c594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c59c:	f000 f852 	bl	800c644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5a0:	4b06      	ldr	r3, [pc, #24]	@ (800c5bc <prvIdleTask+0x28>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d9f9      	bls.n	800c59c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5a8:	4b05      	ldr	r3, [pc, #20]	@ (800c5c0 <prvIdleTask+0x2c>)
 800c5aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5b8:	e7f0      	b.n	800c59c <prvIdleTask+0x8>
 800c5ba:	bf00      	nop
 800c5bc:	20001418 	.word	0x20001418
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	607b      	str	r3, [r7, #4]
 800c5ce:	e00c      	b.n	800c5ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4a12      	ldr	r2, [pc, #72]	@ (800c624 <prvInitialiseTaskLists+0x60>)
 800c5dc:	4413      	add	r3, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fe fbb4 	bl	800ad4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	607b      	str	r3, [r7, #4]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b37      	cmp	r3, #55	@ 0x37
 800c5ee:	d9ef      	bls.n	800c5d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5f0:	480d      	ldr	r0, [pc, #52]	@ (800c628 <prvInitialiseTaskLists+0x64>)
 800c5f2:	f7fe fbab 	bl	800ad4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5f6:	480d      	ldr	r0, [pc, #52]	@ (800c62c <prvInitialiseTaskLists+0x68>)
 800c5f8:	f7fe fba8 	bl	800ad4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5fc:	480c      	ldr	r0, [pc, #48]	@ (800c630 <prvInitialiseTaskLists+0x6c>)
 800c5fe:	f7fe fba5 	bl	800ad4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c602:	480c      	ldr	r0, [pc, #48]	@ (800c634 <prvInitialiseTaskLists+0x70>)
 800c604:	f7fe fba2 	bl	800ad4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c608:	480b      	ldr	r0, [pc, #44]	@ (800c638 <prvInitialiseTaskLists+0x74>)
 800c60a:	f7fe fb9f 	bl	800ad4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c60e:	4b0b      	ldr	r3, [pc, #44]	@ (800c63c <prvInitialiseTaskLists+0x78>)
 800c610:	4a05      	ldr	r2, [pc, #20]	@ (800c628 <prvInitialiseTaskLists+0x64>)
 800c612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c614:	4b0a      	ldr	r3, [pc, #40]	@ (800c640 <prvInitialiseTaskLists+0x7c>)
 800c616:	4a05      	ldr	r2, [pc, #20]	@ (800c62c <prvInitialiseTaskLists+0x68>)
 800c618:	601a      	str	r2, [r3, #0]
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20001418 	.word	0x20001418
 800c628:	20001878 	.word	0x20001878
 800c62c:	2000188c 	.word	0x2000188c
 800c630:	200018a8 	.word	0x200018a8
 800c634:	200018bc 	.word	0x200018bc
 800c638:	200018d4 	.word	0x200018d4
 800c63c:	200018a0 	.word	0x200018a0
 800c640:	200018a4 	.word	0x200018a4

0800c644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c64a:	e019      	b.n	800c680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c64c:	f000 fecc 	bl	800d3e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c650:	4b10      	ldr	r3, [pc, #64]	@ (800c694 <prvCheckTasksWaitingTermination+0x50>)
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fe fbff 	bl	800ae60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c662:	4b0d      	ldr	r3, [pc, #52]	@ (800c698 <prvCheckTasksWaitingTermination+0x54>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3b01      	subs	r3, #1
 800c668:	4a0b      	ldr	r2, [pc, #44]	@ (800c698 <prvCheckTasksWaitingTermination+0x54>)
 800c66a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c66c:	4b0b      	ldr	r3, [pc, #44]	@ (800c69c <prvCheckTasksWaitingTermination+0x58>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3b01      	subs	r3, #1
 800c672:	4a0a      	ldr	r2, [pc, #40]	@ (800c69c <prvCheckTasksWaitingTermination+0x58>)
 800c674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c676:	f000 fee9 	bl	800d44c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f810 	bl	800c6a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c680:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <prvCheckTasksWaitingTermination+0x58>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1e1      	bne.n	800c64c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c688:	bf00      	nop
 800c68a:	bf00      	nop
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	200018bc 	.word	0x200018bc
 800c698:	200018e8 	.word	0x200018e8
 800c69c:	200018d0 	.word	0x200018d0

0800c6a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3354      	adds	r3, #84	@ 0x54
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 f9ff 	bl	800dab0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 f881 	bl	800d7c8 <vPortFree>
				vPortFree( pxTCB );
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f001 f87e 	bl	800d7c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6cc:	e019      	b.n	800c702 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d103      	bne.n	800c6e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f001 f875 	bl	800d7c8 <vPortFree>
	}
 800c6de:	e010      	b.n	800c702 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d00b      	beq.n	800c702 <prvDeleteTCB+0x62>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	60fb      	str	r3, [r7, #12]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <prvDeleteTCB+0x5e>
	}
 800c702:	bf00      	nop
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c712:	4b0c      	ldr	r3, [pc, #48]	@ (800c744 <prvResetNextTaskUnblockTime+0x38>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d104      	bne.n	800c726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c71c:	4b0a      	ldr	r3, [pc, #40]	@ (800c748 <prvResetNextTaskUnblockTime+0x3c>)
 800c71e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c724:	e008      	b.n	800c738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c726:	4b07      	ldr	r3, [pc, #28]	@ (800c744 <prvResetNextTaskUnblockTime+0x38>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4a04      	ldr	r2, [pc, #16]	@ (800c748 <prvResetNextTaskUnblockTime+0x3c>)
 800c736:	6013      	str	r3, [r2, #0]
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	200018a0 	.word	0x200018a0
 800c748:	20001908 	.word	0x20001908

0800c74c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c752:	4b0b      	ldr	r3, [pc, #44]	@ (800c780 <xTaskGetSchedulerState+0x34>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c75a:	2301      	movs	r3, #1
 800c75c:	607b      	str	r3, [r7, #4]
 800c75e:	e008      	b.n	800c772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c760:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <xTaskGetSchedulerState+0x38>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d102      	bne.n	800c76e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c768:	2302      	movs	r3, #2
 800c76a:	607b      	str	r3, [r7, #4]
 800c76c:	e001      	b.n	800c772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c772:	687b      	ldr	r3, [r7, #4]
	}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	200018f4 	.word	0x200018f4
 800c784:	20001910 	.word	0x20001910

0800c788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d058      	beq.n	800c850 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c79e:	4b2f      	ldr	r3, [pc, #188]	@ (800c85c <xTaskPriorityDisinherit+0xd4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d00b      	beq.n	800c7c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	60fb      	str	r3, [r7, #12]
}
 800c7ba:	bf00      	nop
 800c7bc:	bf00      	nop
 800c7be:	e7fd      	b.n	800c7bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	60bb      	str	r3, [r7, #8]
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	e7fd      	b.n	800c7dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e4:	1e5a      	subs	r2, r3, #1
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d02c      	beq.n	800c850 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d128      	bne.n	800c850 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	3304      	adds	r3, #4
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fb2c 	bl	800ae60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c814:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c820:	4b0f      	ldr	r3, [pc, #60]	@ (800c860 <xTaskPriorityDisinherit+0xd8>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	d903      	bls.n	800c830 <xTaskPriorityDisinherit+0xa8>
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c82c:	4a0c      	ldr	r2, [pc, #48]	@ (800c860 <xTaskPriorityDisinherit+0xd8>)
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4a09      	ldr	r2, [pc, #36]	@ (800c864 <xTaskPriorityDisinherit+0xdc>)
 800c83e:	441a      	add	r2, r3
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	3304      	adds	r3, #4
 800c844:	4619      	mov	r1, r3
 800c846:	4610      	mov	r0, r2
 800c848:	f7fe faad 	bl	800ada6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c84c:	2301      	movs	r3, #1
 800c84e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c850:	697b      	ldr	r3, [r7, #20]
	}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001414 	.word	0x20001414
 800c860:	200018f0 	.word	0x200018f0
 800c864:	20001418 	.word	0x20001418

0800c868 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c872:	f000 fdb9 	bl	800d3e8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c876:	4b20      	ldr	r3, [pc, #128]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d113      	bne.n	800c8aa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c882:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c892:	2101      	movs	r1, #1
 800c894:	6838      	ldr	r0, [r7, #0]
 800c896:	f000 f8c9 	bl	800ca2c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c89a:	4b18      	ldr	r3, [pc, #96]	@ (800c8fc <ulTaskNotifyTake+0x94>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c8aa:	f000 fdcf 	bl	800d44c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c8ae:	f000 fd9b 	bl	800d3e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c8b2:	4b11      	ldr	r3, [pc, #68]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c8ba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00e      	beq.n	800c8e0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c8d2:	e005      	b.n	800c8e0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c8d4:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	3a01      	subs	r2, #1
 800c8dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8e0:	4b05      	ldr	r3, [pc, #20]	@ (800c8f8 <ulTaskNotifyTake+0x90>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c8ea:	f000 fdaf 	bl	800d44c <vPortExitCritical>

		return ulReturn;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20001414 	.word	0x20001414
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c900:	b580      	push	{r7, lr}
 800c902:	b08a      	sub	sp, #40	@ 0x28
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10b      	bne.n	800c928 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	61bb      	str	r3, [r7, #24]
}
 800c922:	bf00      	nop
 800c924:	bf00      	nop
 800c926:	e7fd      	b.n	800c924 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c928:	f000 fe3e 	bl	800d5a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c930:	f3ef 8211 	mrs	r2, BASEPRI
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	617a      	str	r2, [r7, #20]
 800c946:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c948:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c94a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c952:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	2202      	movs	r2, #2
 800c958:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c96a:	7ffb      	ldrb	r3, [r7, #31]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d147      	bne.n	800ca00 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60fb      	str	r3, [r7, #12]
}
 800c98a:	bf00      	nop
 800c98c:	bf00      	nop
 800c98e:	e7fd      	b.n	800c98c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c990:	4b20      	ldr	r3, [pc, #128]	@ (800ca14 <vTaskNotifyGiveFromISR+0x114>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11d      	bne.n	800c9d4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe fa5f 	bl	800ae60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca18 <vTaskNotifyGiveFromISR+0x118>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d903      	bls.n	800c9b6 <vTaskNotifyGiveFromISR+0xb6>
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b2:	4a19      	ldr	r2, [pc, #100]	@ (800ca18 <vTaskNotifyGiveFromISR+0x118>)
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4a16      	ldr	r2, [pc, #88]	@ (800ca1c <vTaskNotifyGiveFromISR+0x11c>)
 800c9c4:	441a      	add	r2, r3
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f7fe f9ea 	bl	800ada6 <vListInsertEnd>
 800c9d2:	e005      	b.n	800c9e0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	3318      	adds	r3, #24
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4811      	ldr	r0, [pc, #68]	@ (800ca20 <vTaskNotifyGiveFromISR+0x120>)
 800c9dc:	f7fe f9e3 	bl	800ada6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e4:	4b0f      	ldr	r3, [pc, #60]	@ (800ca24 <vTaskNotifyGiveFromISR+0x124>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d908      	bls.n	800ca00 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ca28 <vTaskNotifyGiveFromISR+0x128>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f383 8811 	msr	BASEPRI, r3
}
 800ca0a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ca0c:	bf00      	nop
 800ca0e:	3728      	adds	r7, #40	@ 0x28
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20001910 	.word	0x20001910
 800ca18:	200018f0 	.word	0x200018f0
 800ca1c:	20001418 	.word	0x20001418
 800ca20:	200018a8 	.word	0x200018a8
 800ca24:	20001414 	.word	0x20001414
 800ca28:	200018fc 	.word	0x200018fc

0800ca2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca36:	4b21      	ldr	r3, [pc, #132]	@ (800cabc <prvAddCurrentTaskToDelayedList+0x90>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca3c:	4b20      	ldr	r3, [pc, #128]	@ (800cac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3304      	adds	r3, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fa0c 	bl	800ae60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca4e:	d10a      	bne.n	800ca66 <prvAddCurrentTaskToDelayedList+0x3a>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca56:	4b1a      	ldr	r3, [pc, #104]	@ (800cac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4819      	ldr	r0, [pc, #100]	@ (800cac4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca60:	f7fe f9a1 	bl	800ada6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca64:	e026      	b.n	800cab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca6e:	4b14      	ldr	r3, [pc, #80]	@ (800cac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d209      	bcs.n	800ca92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca7e:	4b12      	ldr	r3, [pc, #72]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	4b0f      	ldr	r3, [pc, #60]	@ (800cac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f7fe f9af 	bl	800adee <vListInsert>
}
 800ca90:	e010      	b.n	800cab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca92:	4b0e      	ldr	r3, [pc, #56]	@ (800cacc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	4b0a      	ldr	r3, [pc, #40]	@ (800cac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f7fe f9a5 	bl	800adee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800caa4:	4b0a      	ldr	r3, [pc, #40]	@ (800cad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d202      	bcs.n	800cab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800caae:	4a08      	ldr	r2, [pc, #32]	@ (800cad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6013      	str	r3, [r2, #0]
}
 800cab4:	bf00      	nop
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	200018ec 	.word	0x200018ec
 800cac0:	20001414 	.word	0x20001414
 800cac4:	200018d4 	.word	0x200018d4
 800cac8:	200018a4 	.word	0x200018a4
 800cacc:	200018a0 	.word	0x200018a0
 800cad0:	20001908 	.word	0x20001908

0800cad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08a      	sub	sp, #40	@ 0x28
 800cad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cada:	2300      	movs	r3, #0
 800cadc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cade:	f000 fb13 	bl	800d108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cae2:	4b1d      	ldr	r3, [pc, #116]	@ (800cb58 <xTimerCreateTimerTask+0x84>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d021      	beq.n	800cb2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800caf2:	1d3a      	adds	r2, r7, #4
 800caf4:	f107 0108 	add.w	r1, r7, #8
 800caf8:	f107 030c 	add.w	r3, r7, #12
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe f90b 	bl	800ad18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	9202      	str	r2, [sp, #8]
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	2300      	movs	r3, #0
 800cb12:	460a      	mov	r2, r1
 800cb14:	4911      	ldr	r1, [pc, #68]	@ (800cb5c <xTimerCreateTimerTask+0x88>)
 800cb16:	4812      	ldr	r0, [pc, #72]	@ (800cb60 <xTimerCreateTimerTask+0x8c>)
 800cb18:	f7fe fec6 	bl	800b8a8 <xTaskCreateStatic>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	4a11      	ldr	r2, [pc, #68]	@ (800cb64 <xTimerCreateTimerTask+0x90>)
 800cb20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb22:	4b10      	ldr	r3, [pc, #64]	@ (800cb64 <xTimerCreateTimerTask+0x90>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10b      	bne.n	800cb4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	613b      	str	r3, [r7, #16]
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	e7fd      	b.n	800cb48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb4c:	697b      	ldr	r3, [r7, #20]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20001944 	.word	0x20001944
 800cb5c:	0800e484 	.word	0x0800e484
 800cb60:	0800cca1 	.word	0x0800cca1
 800cb64:	20001948 	.word	0x20001948

0800cb68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	@ 0x28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10b      	bne.n	800cb98 <xTimerGenericCommand+0x30>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	623b      	str	r3, [r7, #32]
}
 800cb92:	bf00      	nop
 800cb94:	bf00      	nop
 800cb96:	e7fd      	b.n	800cb94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cb98:	4b19      	ldr	r3, [pc, #100]	@ (800cc00 <xTimerGenericCommand+0x98>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d02a      	beq.n	800cbf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	2b05      	cmp	r3, #5
 800cbb0:	dc18      	bgt.n	800cbe4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbb2:	f7ff fdcb 	bl	800c74c <xTaskGetSchedulerState>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d109      	bne.n	800cbd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbbc:	4b10      	ldr	r3, [pc, #64]	@ (800cc00 <xTimerGenericCommand+0x98>)
 800cbbe:	6818      	ldr	r0, [r3, #0]
 800cbc0:	f107 0110 	add.w	r1, r7, #16
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc8:	f7fe fa7e 	bl	800b0c8 <xQueueGenericSend>
 800cbcc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbce:	e012      	b.n	800cbf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	@ (800cc00 <xTimerGenericCommand+0x98>)
 800cbd2:	6818      	ldr	r0, [r3, #0]
 800cbd4:	f107 0110 	add.w	r1, r7, #16
 800cbd8:	2300      	movs	r3, #0
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f7fe fa74 	bl	800b0c8 <xQueueGenericSend>
 800cbe0:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbe2:	e008      	b.n	800cbf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbe4:	4b06      	ldr	r3, [pc, #24]	@ (800cc00 <xTimerGenericCommand+0x98>)
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	f107 0110 	add.w	r1, r7, #16
 800cbec:	2300      	movs	r3, #0
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	f7fe fb6c 	bl	800b2cc <xQueueGenericSendFromISR>
 800cbf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3728      	adds	r7, #40	@ 0x28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20001944 	.word	0x20001944

0800cc04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc0e:	4b23      	ldr	r3, [pc, #140]	@ (800cc9c <prvProcessExpiredTimer+0x98>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe f91f 	bl	800ae60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc28:	f003 0304 	and.w	r3, r3, #4
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d023      	beq.n	800cc78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	699a      	ldr	r2, [r3, #24]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	18d1      	adds	r1, r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	6978      	ldr	r0, [r7, #20]
 800cc3e:	f000 f8d5 	bl	800cdec <prvInsertTimerInActiveList>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d020      	beq.n	800cc8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	2100      	movs	r1, #0
 800cc52:	6978      	ldr	r0, [r7, #20]
 800cc54:	f7ff ff88 	bl	800cb68 <xTimerGenericCommand>
 800cc58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d114      	bne.n	800cc8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	60fb      	str	r3, [r7, #12]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc7e:	f023 0301 	bic.w	r3, r3, #1
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	6978      	ldr	r0, [r7, #20]
 800cc90:	4798      	blx	r3
}
 800cc92:	bf00      	nop
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	2000193c 	.word	0x2000193c

0800cca0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cca8:	f107 0308 	add.w	r3, r7, #8
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 f859 	bl	800cd64 <prvGetNextExpireTime>
 800ccb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 f805 	bl	800ccc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccbe:	f000 f8d7 	bl	800ce70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccc2:	bf00      	nop
 800ccc4:	e7f0      	b.n	800cca8 <prvTimerTask+0x8>
	...

0800ccc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccd2:	f7ff f84d 	bl	800bd70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccd6:	f107 0308 	add.w	r3, r7, #8
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 f866 	bl	800cdac <prvSampleTimeNow>
 800cce0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d130      	bne.n	800cd4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10a      	bne.n	800cd04 <prvProcessTimerOrBlockTask+0x3c>
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d806      	bhi.n	800cd04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ccf6:	f7ff f849 	bl	800bd8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ccfa:	68f9      	ldr	r1, [r7, #12]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff ff81 	bl	800cc04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd02:	e024      	b.n	800cd4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d008      	beq.n	800cd1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd0a:	4b13      	ldr	r3, [pc, #76]	@ (800cd58 <prvProcessTimerOrBlockTask+0x90>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <prvProcessTimerOrBlockTask+0x50>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e000      	b.n	800cd1a <prvProcessTimerOrBlockTask+0x52>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <prvProcessTimerOrBlockTask+0x94>)
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	f7fe fd89 	bl	800b840 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd2e:	f7ff f82d 	bl	800bd8c <xTaskResumeAll>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd38:	4b09      	ldr	r3, [pc, #36]	@ (800cd60 <prvProcessTimerOrBlockTask+0x98>)
 800cd3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	f3bf 8f6f 	isb	sy
}
 800cd48:	e001      	b.n	800cd4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd4a:	f7ff f81f 	bl	800bd8c <xTaskResumeAll>
}
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	20001940 	.word	0x20001940
 800cd5c:	20001944 	.word	0x20001944
 800cd60:	e000ed04 	.word	0xe000ed04

0800cd64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cda8 <prvGetNextExpireTime+0x44>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <prvGetNextExpireTime+0x16>
 800cd76:	2201      	movs	r2, #1
 800cd78:	e000      	b.n	800cd7c <prvGetNextExpireTime+0x18>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d105      	bne.n	800cd94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd88:	4b07      	ldr	r3, [pc, #28]	@ (800cda8 <prvGetNextExpireTime+0x44>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	60fb      	str	r3, [r7, #12]
 800cd92:	e001      	b.n	800cd98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3714      	adds	r7, #20
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	2000193c 	.word	0x2000193c

0800cdac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cdb4:	f7ff f888 	bl	800bec8 <xTaskGetTickCount>
 800cdb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cdba:	4b0b      	ldr	r3, [pc, #44]	@ (800cde8 <prvSampleTimeNow+0x3c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d205      	bcs.n	800cdd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cdc4:	f000 f93a 	bl	800d03c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	e002      	b.n	800cdd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cdd6:	4a04      	ldr	r2, [pc, #16]	@ (800cde8 <prvSampleTimeNow+0x3c>)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cddc:	68fb      	ldr	r3, [r7, #12]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	2000194c 	.word	0x2000194c

0800cdec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d812      	bhi.n	800ce38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	1ad2      	subs	r2, r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d302      	bcc.n	800ce26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	e01b      	b.n	800ce5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce26:	4b10      	ldr	r3, [pc, #64]	@ (800ce68 <prvInsertTimerInActiveList+0x7c>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4610      	mov	r0, r2
 800ce32:	f7fd ffdc 	bl	800adee <vListInsert>
 800ce36:	e012      	b.n	800ce5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d206      	bcs.n	800ce4e <prvInsertTimerInActiveList+0x62>
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d302      	bcc.n	800ce4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	617b      	str	r3, [r7, #20]
 800ce4c:	e007      	b.n	800ce5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce4e:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <prvInsertTimerInActiveList+0x80>)
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3304      	adds	r3, #4
 800ce56:	4619      	mov	r1, r3
 800ce58:	4610      	mov	r0, r2
 800ce5a:	f7fd ffc8 	bl	800adee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce5e:	697b      	ldr	r3, [r7, #20]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20001940 	.word	0x20001940
 800ce6c:	2000193c 	.word	0x2000193c

0800ce70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08e      	sub	sp, #56	@ 0x38
 800ce74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce76:	e0ce      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	da19      	bge.n	800ceb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce7e:	1d3b      	adds	r3, r7, #4
 800ce80:	3304      	adds	r3, #4
 800ce82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61fb      	str	r3, [r7, #28]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea8:	6850      	ldr	r0, [r2, #4]
 800ceaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceac:	6892      	ldr	r2, [r2, #8]
 800ceae:	4611      	mov	r1, r2
 800ceb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f2c0 80ae 	blt.w	800d016 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d004      	beq.n	800ced0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec8:	3304      	adds	r3, #4
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fd ffc8 	bl	800ae60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ced0:	463b      	mov	r3, r7
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ff6a 	bl	800cdac <prvSampleTimeNow>
 800ced8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b09      	cmp	r3, #9
 800cede:	f200 8097 	bhi.w	800d010 <prvProcessReceivedCommands+0x1a0>
 800cee2:	a201      	add	r2, pc, #4	@ (adr r2, 800cee8 <prvProcessReceivedCommands+0x78>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf11 	.word	0x0800cf11
 800ceec:	0800cf11 	.word	0x0800cf11
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf87 	.word	0x0800cf87
 800cef8:	0800cf9b 	.word	0x0800cf9b
 800cefc:	0800cfe7 	.word	0x0800cfe7
 800cf00:	0800cf11 	.word	0x0800cf11
 800cf04:	0800cf11 	.word	0x0800cf11
 800cf08:	0800cf87 	.word	0x0800cf87
 800cf0c:	0800cf9b 	.word	0x0800cf9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf16:	f043 0301 	orr.w	r3, r3, #1
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	18d1      	adds	r1, r2, r3
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf30:	f7ff ff5c 	bl	800cdec <prvInsertTimerInActiveList>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d06c      	beq.n	800d014 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d061      	beq.n	800d014 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf54:	699b      	ldr	r3, [r3, #24]
 800cf56:	441a      	add	r2, r3
 800cf58:	2300      	movs	r3, #0
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	2100      	movs	r1, #0
 800cf60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf62:	f7ff fe01 	bl	800cb68 <xTimerGenericCommand>
 800cf66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d152      	bne.n	800d014 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	61bb      	str	r3, [r7, #24]
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	e7fd      	b.n	800cf82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf98:	e03d      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfa0:	f043 0301 	orr.w	r3, r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10b      	bne.n	800cfd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	617b      	str	r3, [r7, #20]
}
 800cfcc:	bf00      	nop
 800cfce:	bf00      	nop
 800cfd0:	e7fd      	b.n	800cfce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	18d1      	adds	r1, r2, r3
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe0:	f7ff ff04 	bl	800cdec <prvInsertTimerInActiveList>
					break;
 800cfe4:	e017      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cff6:	f000 fbe7 	bl	800d7c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cffa:	e00c      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	b2da      	uxtb	r2, r3
 800d008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d00e:	e002      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d010:	bf00      	nop
 800d012:	e000      	b.n	800d016 <prvProcessReceivedCommands+0x1a6>
					break;
 800d014:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d016:	4b08      	ldr	r3, [pc, #32]	@ (800d038 <prvProcessReceivedCommands+0x1c8>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	1d39      	adds	r1, r7, #4
 800d01c:	2200      	movs	r2, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe f9f2 	bl	800b408 <xQueueReceive>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	f47f af26 	bne.w	800ce78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	3730      	adds	r7, #48	@ 0x30
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20001944 	.word	0x20001944

0800d03c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d042:	e049      	b.n	800d0d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d044:	4b2e      	ldr	r3, [pc, #184]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04e:	4b2c      	ldr	r3, [pc, #176]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3304      	adds	r3, #4
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fd feff 	bl	800ae60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d070:	f003 0304 	and.w	r3, r3, #4
 800d074:	2b00      	cmp	r3, #0
 800d076:	d02f      	beq.n	800d0d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	4413      	add	r3, r2
 800d080:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	429a      	cmp	r2, r3
 800d088:	d90e      	bls.n	800d0a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d096:	4b1a      	ldr	r3, [pc, #104]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3304      	adds	r3, #4
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	f7fd fea4 	bl	800adee <vListInsert>
 800d0a6:	e017      	b.n	800d0d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff fd58 	bl	800cb68 <xTimerGenericCommand>
 800d0b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10b      	bne.n	800d0d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	603b      	str	r3, [r7, #0]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0d8:	4b09      	ldr	r3, [pc, #36]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1b0      	bne.n	800d044 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d0e2:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d0e8:	4b06      	ldr	r3, [pc, #24]	@ (800d104 <prvSwitchTimerLists+0xc8>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a04      	ldr	r2, [pc, #16]	@ (800d100 <prvSwitchTimerLists+0xc4>)
 800d0ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d0f0:	4a04      	ldr	r2, [pc, #16]	@ (800d104 <prvSwitchTimerLists+0xc8>)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	6013      	str	r3, [r2, #0]
}
 800d0f6:	bf00      	nop
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	2000193c 	.word	0x2000193c
 800d104:	20001940 	.word	0x20001940

0800d108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d10e:	f000 f96b 	bl	800d3e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d112:	4b15      	ldr	r3, [pc, #84]	@ (800d168 <prvCheckForValidListAndQueue+0x60>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d120      	bne.n	800d15c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d11a:	4814      	ldr	r0, [pc, #80]	@ (800d16c <prvCheckForValidListAndQueue+0x64>)
 800d11c:	f7fd fe16 	bl	800ad4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d120:	4813      	ldr	r0, [pc, #76]	@ (800d170 <prvCheckForValidListAndQueue+0x68>)
 800d122:	f7fd fe13 	bl	800ad4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d126:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <prvCheckForValidListAndQueue+0x6c>)
 800d128:	4a10      	ldr	r2, [pc, #64]	@ (800d16c <prvCheckForValidListAndQueue+0x64>)
 800d12a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d12c:	4b12      	ldr	r3, [pc, #72]	@ (800d178 <prvCheckForValidListAndQueue+0x70>)
 800d12e:	4a10      	ldr	r2, [pc, #64]	@ (800d170 <prvCheckForValidListAndQueue+0x68>)
 800d130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d132:	2300      	movs	r3, #0
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	4b11      	ldr	r3, [pc, #68]	@ (800d17c <prvCheckForValidListAndQueue+0x74>)
 800d138:	4a11      	ldr	r2, [pc, #68]	@ (800d180 <prvCheckForValidListAndQueue+0x78>)
 800d13a:	2110      	movs	r1, #16
 800d13c:	200a      	movs	r0, #10
 800d13e:	f7fd ff23 	bl	800af88 <xQueueGenericCreateStatic>
 800d142:	4603      	mov	r3, r0
 800d144:	4a08      	ldr	r2, [pc, #32]	@ (800d168 <prvCheckForValidListAndQueue+0x60>)
 800d146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d148:	4b07      	ldr	r3, [pc, #28]	@ (800d168 <prvCheckForValidListAndQueue+0x60>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d150:	4b05      	ldr	r3, [pc, #20]	@ (800d168 <prvCheckForValidListAndQueue+0x60>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	490b      	ldr	r1, [pc, #44]	@ (800d184 <prvCheckForValidListAndQueue+0x7c>)
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fb48 	bl	800b7ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d15c:	f000 f976 	bl	800d44c <vPortExitCritical>
}
 800d160:	bf00      	nop
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20001944 	.word	0x20001944
 800d16c:	20001914 	.word	0x20001914
 800d170:	20001928 	.word	0x20001928
 800d174:	2000193c 	.word	0x2000193c
 800d178:	20001940 	.word	0x20001940
 800d17c:	200019f0 	.word	0x200019f0
 800d180:	20001950 	.word	0x20001950
 800d184:	0800e48c 	.word	0x0800e48c

0800d188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3b04      	subs	r3, #4
 800d198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f023 0201 	bic.w	r2, r3, #1
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3b04      	subs	r3, #4
 800d1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1b8:	4a0c      	ldr	r2, [pc, #48]	@ (800d1ec <pxPortInitialiseStack+0x64>)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3b14      	subs	r3, #20
 800d1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3b04      	subs	r3, #4
 800d1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f06f 0202 	mvn.w	r2, #2
 800d1d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3b20      	subs	r3, #32
 800d1dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1de:	68fb      	ldr	r3, [r7, #12]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	0800d1f1 	.word	0x0800d1f1

0800d1f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1fa:	4b13      	ldr	r3, [pc, #76]	@ (800d248 <prvTaskExitError+0x58>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d202:	d00b      	beq.n	800d21c <prvTaskExitError+0x2c>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	60fb      	str	r3, [r7, #12]
}
 800d216:	bf00      	nop
 800d218:	bf00      	nop
 800d21a:	e7fd      	b.n	800d218 <prvTaskExitError+0x28>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	60bb      	str	r3, [r7, #8]
}
 800d22e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d230:	bf00      	nop
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0fc      	beq.n	800d232 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	20000028 	.word	0x20000028
 800d24c:	00000000 	.word	0x00000000

0800d250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d250:	4b07      	ldr	r3, [pc, #28]	@ (800d270 <pxCurrentTCBConst2>)
 800d252:	6819      	ldr	r1, [r3, #0]
 800d254:	6808      	ldr	r0, [r1, #0]
 800d256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25a:	f380 8809 	msr	PSP, r0
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f04f 0000 	mov.w	r0, #0
 800d266:	f380 8811 	msr	BASEPRI, r0
 800d26a:	4770      	bx	lr
 800d26c:	f3af 8000 	nop.w

0800d270 <pxCurrentTCBConst2>:
 800d270:	20001414 	.word	0x20001414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop

0800d278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d278:	4808      	ldr	r0, [pc, #32]	@ (800d29c <prvPortStartFirstTask+0x24>)
 800d27a:	6800      	ldr	r0, [r0, #0]
 800d27c:	6800      	ldr	r0, [r0, #0]
 800d27e:	f380 8808 	msr	MSP, r0
 800d282:	f04f 0000 	mov.w	r0, #0
 800d286:	f380 8814 	msr	CONTROL, r0
 800d28a:	b662      	cpsie	i
 800d28c:	b661      	cpsie	f
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	df00      	svc	0
 800d298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d29a:	bf00      	nop
 800d29c:	e000ed08 	.word	0xe000ed08

0800d2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2a6:	4b47      	ldr	r3, [pc, #284]	@ (800d3c4 <xPortStartScheduler+0x124>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a47      	ldr	r2, [pc, #284]	@ (800d3c8 <xPortStartScheduler+0x128>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d10b      	bne.n	800d2c8 <xPortStartScheduler+0x28>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	60fb      	str	r3, [r7, #12]
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	e7fd      	b.n	800d2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d2c8:	4b3e      	ldr	r3, [pc, #248]	@ (800d3c4 <xPortStartScheduler+0x124>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a3f      	ldr	r2, [pc, #252]	@ (800d3cc <xPortStartScheduler+0x12c>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d10b      	bne.n	800d2ea <xPortStartScheduler+0x4a>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	613b      	str	r3, [r7, #16]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2ea:	4b39      	ldr	r3, [pc, #228]	@ (800d3d0 <xPortStartScheduler+0x130>)
 800d2ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	22ff      	movs	r2, #255	@ 0xff
 800d2fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	b2db      	uxtb	r3, r3
 800d302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d304:	78fb      	ldrb	r3, [r7, #3]
 800d306:	b2db      	uxtb	r3, r3
 800d308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	4b31      	ldr	r3, [pc, #196]	@ (800d3d4 <xPortStartScheduler+0x134>)
 800d310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d312:	4b31      	ldr	r3, [pc, #196]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d314:	2207      	movs	r2, #7
 800d316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d318:	e009      	b.n	800d32e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d31a:	4b2f      	ldr	r3, [pc, #188]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3b01      	subs	r3, #1
 800d320:	4a2d      	ldr	r2, [pc, #180]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d324:	78fb      	ldrb	r3, [r7, #3]
 800d326:	b2db      	uxtb	r3, r3
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	b2db      	uxtb	r3, r3
 800d332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d336:	2b80      	cmp	r3, #128	@ 0x80
 800d338:	d0ef      	beq.n	800d31a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d33a:	4b27      	ldr	r3, [pc, #156]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f1c3 0307 	rsb	r3, r3, #7
 800d342:	2b04      	cmp	r3, #4
 800d344:	d00b      	beq.n	800d35e <xPortStartScheduler+0xbe>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	60bb      	str	r3, [r7, #8]
}
 800d358:	bf00      	nop
 800d35a:	bf00      	nop
 800d35c:	e7fd      	b.n	800d35a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d35e:	4b1e      	ldr	r3, [pc, #120]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	4a1c      	ldr	r2, [pc, #112]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d368:	4b1b      	ldr	r3, [pc, #108]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d370:	4a19      	ldr	r2, [pc, #100]	@ (800d3d8 <xPortStartScheduler+0x138>)
 800d372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	b2da      	uxtb	r2, r3
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d37c:	4b17      	ldr	r3, [pc, #92]	@ (800d3dc <xPortStartScheduler+0x13c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a16      	ldr	r2, [pc, #88]	@ (800d3dc <xPortStartScheduler+0x13c>)
 800d382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d388:	4b14      	ldr	r3, [pc, #80]	@ (800d3dc <xPortStartScheduler+0x13c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a13      	ldr	r2, [pc, #76]	@ (800d3dc <xPortStartScheduler+0x13c>)
 800d38e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d394:	f000 f8da 	bl	800d54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d398:	4b11      	ldr	r3, [pc, #68]	@ (800d3e0 <xPortStartScheduler+0x140>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d39e:	f000 f8f9 	bl	800d594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3a2:	4b10      	ldr	r3, [pc, #64]	@ (800d3e4 <xPortStartScheduler+0x144>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a0f      	ldr	r2, [pc, #60]	@ (800d3e4 <xPortStartScheduler+0x144>)
 800d3a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3ae:	f7ff ff63 	bl	800d278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3b2:	f7fe ff4d 	bl	800c250 <vTaskSwitchContext>
	prvTaskExitError();
 800d3b6:	f7ff ff1b 	bl	800d1f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	e000ed00 	.word	0xe000ed00
 800d3c8:	410fc271 	.word	0x410fc271
 800d3cc:	410fc270 	.word	0x410fc270
 800d3d0:	e000e400 	.word	0xe000e400
 800d3d4:	20001a40 	.word	0x20001a40
 800d3d8:	20001a44 	.word	0x20001a44
 800d3dc:	e000ed20 	.word	0xe000ed20
 800d3e0:	20000028 	.word	0x20000028
 800d3e4:	e000ef34 	.word	0xe000ef34

0800d3e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d402:	4b10      	ldr	r3, [pc, #64]	@ (800d444 <vPortEnterCritical+0x5c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3301      	adds	r3, #1
 800d408:	4a0e      	ldr	r2, [pc, #56]	@ (800d444 <vPortEnterCritical+0x5c>)
 800d40a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d40c:	4b0d      	ldr	r3, [pc, #52]	@ (800d444 <vPortEnterCritical+0x5c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d110      	bne.n	800d436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d414:	4b0c      	ldr	r3, [pc, #48]	@ (800d448 <vPortEnterCritical+0x60>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00b      	beq.n	800d436 <vPortEnterCritical+0x4e>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	603b      	str	r3, [r7, #0]
}
 800d430:	bf00      	nop
 800d432:	bf00      	nop
 800d434:	e7fd      	b.n	800d432 <vPortEnterCritical+0x4a>
	}
}
 800d436:	bf00      	nop
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000028 	.word	0x20000028
 800d448:	e000ed04 	.word	0xe000ed04

0800d44c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d452:	4b12      	ldr	r3, [pc, #72]	@ (800d49c <vPortExitCritical+0x50>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10b      	bne.n	800d472 <vPortExitCritical+0x26>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	607b      	str	r3, [r7, #4]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d472:	4b0a      	ldr	r3, [pc, #40]	@ (800d49c <vPortExitCritical+0x50>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3b01      	subs	r3, #1
 800d478:	4a08      	ldr	r2, [pc, #32]	@ (800d49c <vPortExitCritical+0x50>)
 800d47a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d47c:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <vPortExitCritical+0x50>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <vPortExitCritical+0x44>
 800d484:	2300      	movs	r3, #0
 800d486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f383 8811 	msr	BASEPRI, r3
}
 800d48e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000028 	.word	0x20000028

0800d4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4a0:	f3ef 8009 	mrs	r0, PSP
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	4b15      	ldr	r3, [pc, #84]	@ (800d500 <pxCurrentTCBConst>)
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	f01e 0f10 	tst.w	lr, #16
 800d4b0:	bf08      	it	eq
 800d4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ba:	6010      	str	r0, [r2, #0]
 800d4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d4c4:	f380 8811 	msr	BASEPRI, r0
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f7fe febe 	bl	800c250 <vTaskSwitchContext>
 800d4d4:	f04f 0000 	mov.w	r0, #0
 800d4d8:	f380 8811 	msr	BASEPRI, r0
 800d4dc:	bc09      	pop	{r0, r3}
 800d4de:	6819      	ldr	r1, [r3, #0]
 800d4e0:	6808      	ldr	r0, [r1, #0]
 800d4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e6:	f01e 0f10 	tst.w	lr, #16
 800d4ea:	bf08      	it	eq
 800d4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4f0:	f380 8809 	msr	PSP, r0
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	f3af 8000 	nop.w

0800d500 <pxCurrentTCBConst>:
 800d500:	20001414 	.word	0x20001414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop

0800d508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	607b      	str	r3, [r7, #4]
}
 800d520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d522:	f7fe fddb 	bl	800c0dc <xTaskIncrementTick>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d52c:	4b06      	ldr	r3, [pc, #24]	@ (800d548 <xPortSysTickHandler+0x40>)
 800d52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	2300      	movs	r3, #0
 800d536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	f383 8811 	msr	BASEPRI, r3
}
 800d53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d540:	bf00      	nop
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d550:	4b0b      	ldr	r3, [pc, #44]	@ (800d580 <vPortSetupTimerInterrupt+0x34>)
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d556:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <vPortSetupTimerInterrupt+0x38>)
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d55c:	4b0a      	ldr	r3, [pc, #40]	@ (800d588 <vPortSetupTimerInterrupt+0x3c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a0a      	ldr	r2, [pc, #40]	@ (800d58c <vPortSetupTimerInterrupt+0x40>)
 800d562:	fba2 2303 	umull	r2, r3, r2, r3
 800d566:	099b      	lsrs	r3, r3, #6
 800d568:	4a09      	ldr	r2, [pc, #36]	@ (800d590 <vPortSetupTimerInterrupt+0x44>)
 800d56a:	3b01      	subs	r3, #1
 800d56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d56e:	4b04      	ldr	r3, [pc, #16]	@ (800d580 <vPortSetupTimerInterrupt+0x34>)
 800d570:	2207      	movs	r2, #7
 800d572:	601a      	str	r2, [r3, #0]
}
 800d574:	bf00      	nop
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	e000e010 	.word	0xe000e010
 800d584:	e000e018 	.word	0xe000e018
 800d588:	2000001c 	.word	0x2000001c
 800d58c:	10624dd3 	.word	0x10624dd3
 800d590:	e000e014 	.word	0xe000e014

0800d594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5a4 <vPortEnableVFP+0x10>
 800d598:	6801      	ldr	r1, [r0, #0]
 800d59a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d59e:	6001      	str	r1, [r0, #0]
 800d5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5a2:	bf00      	nop
 800d5a4:	e000ed88 	.word	0xe000ed88

0800d5a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5ae:	f3ef 8305 	mrs	r3, IPSR
 800d5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b0f      	cmp	r3, #15
 800d5b8:	d915      	bls.n	800d5e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5ba:	4a18      	ldr	r2, [pc, #96]	@ (800d61c <vPortValidateInterruptPriority+0x74>)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4413      	add	r3, r2
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5c4:	4b16      	ldr	r3, [pc, #88]	@ (800d620 <vPortValidateInterruptPriority+0x78>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	7afa      	ldrb	r2, [r7, #11]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d20b      	bcs.n	800d5e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	607b      	str	r3, [r7, #4]
}
 800d5e0:	bf00      	nop
 800d5e2:	bf00      	nop
 800d5e4:	e7fd      	b.n	800d5e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d624 <vPortValidateInterruptPriority+0x7c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d628 <vPortValidateInterruptPriority+0x80>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d90b      	bls.n	800d60e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fa:	f383 8811 	msr	BASEPRI, r3
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	603b      	str	r3, [r7, #0]
}
 800d608:	bf00      	nop
 800d60a:	bf00      	nop
 800d60c:	e7fd      	b.n	800d60a <vPortValidateInterruptPriority+0x62>
	}
 800d60e:	bf00      	nop
 800d610:	3714      	adds	r7, #20
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	e000e3f0 	.word	0xe000e3f0
 800d620:	20001a40 	.word	0x20001a40
 800d624:	e000ed0c 	.word	0xe000ed0c
 800d628:	20001a44 	.word	0x20001a44

0800d62c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	@ 0x28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d634:	2300      	movs	r3, #0
 800d636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d638:	f7fe fb9a 	bl	800bd70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d63c:	4b5c      	ldr	r3, [pc, #368]	@ (800d7b0 <pvPortMalloc+0x184>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d644:	f000 f924 	bl	800d890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d648:	4b5a      	ldr	r3, [pc, #360]	@ (800d7b4 <pvPortMalloc+0x188>)
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4013      	ands	r3, r2
 800d650:	2b00      	cmp	r3, #0
 800d652:	f040 8095 	bne.w	800d780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01e      	beq.n	800d69a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d65c:	2208      	movs	r2, #8
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4413      	add	r3, r2
 800d662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f003 0307 	and.w	r3, r3, #7
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d015      	beq.n	800d69a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f023 0307 	bic.w	r3, r3, #7
 800d674:	3308      	adds	r3, #8
 800d676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f003 0307 	and.w	r3, r3, #7
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <pvPortMalloc+0x6e>
	__asm volatile
 800d682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	617b      	str	r3, [r7, #20]
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop
 800d698:	e7fd      	b.n	800d696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d06f      	beq.n	800d780 <pvPortMalloc+0x154>
 800d6a0:	4b45      	ldr	r3, [pc, #276]	@ (800d7b8 <pvPortMalloc+0x18c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d86a      	bhi.n	800d780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6aa:	4b44      	ldr	r3, [pc, #272]	@ (800d7bc <pvPortMalloc+0x190>)
 800d6ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6ae:	4b43      	ldr	r3, [pc, #268]	@ (800d7bc <pvPortMalloc+0x190>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6b4:	e004      	b.n	800d6c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d903      	bls.n	800d6d2 <pvPortMalloc+0xa6>
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1f1      	bne.n	800d6b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6d2:	4b37      	ldr	r3, [pc, #220]	@ (800d7b0 <pvPortMalloc+0x184>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d051      	beq.n	800d780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2208      	movs	r2, #8
 800d6e2:	4413      	add	r3, r2
 800d6e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	1ad2      	subs	r2, r2, r3
 800d6f6:	2308      	movs	r3, #8
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d920      	bls.n	800d740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4413      	add	r3, r2
 800d704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00b      	beq.n	800d728 <pvPortMalloc+0xfc>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	613b      	str	r3, [r7, #16]
}
 800d722:	bf00      	nop
 800d724:	bf00      	nop
 800d726:	e7fd      	b.n	800d724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	685a      	ldr	r2, [r3, #4]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	1ad2      	subs	r2, r2, r3
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d73a:	69b8      	ldr	r0, [r7, #24]
 800d73c:	f000 f90a 	bl	800d954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d740:	4b1d      	ldr	r3, [pc, #116]	@ (800d7b8 <pvPortMalloc+0x18c>)
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b8 <pvPortMalloc+0x18c>)
 800d74c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d74e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b8 <pvPortMalloc+0x18c>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4b1b      	ldr	r3, [pc, #108]	@ (800d7c0 <pvPortMalloc+0x194>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d203      	bcs.n	800d762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d75a:	4b17      	ldr	r3, [pc, #92]	@ (800d7b8 <pvPortMalloc+0x18c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a18      	ldr	r2, [pc, #96]	@ (800d7c0 <pvPortMalloc+0x194>)
 800d760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	4b13      	ldr	r3, [pc, #76]	@ (800d7b4 <pvPortMalloc+0x188>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	431a      	orrs	r2, r3
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d776:	4b13      	ldr	r3, [pc, #76]	@ (800d7c4 <pvPortMalloc+0x198>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	4a11      	ldr	r2, [pc, #68]	@ (800d7c4 <pvPortMalloc+0x198>)
 800d77e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d780:	f7fe fb04 	bl	800bd8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00b      	beq.n	800d7a6 <pvPortMalloc+0x17a>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60fb      	str	r3, [r7, #12]
}
 800d7a0:	bf00      	nop
 800d7a2:	bf00      	nop
 800d7a4:	e7fd      	b.n	800d7a2 <pvPortMalloc+0x176>
	return pvReturn;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3728      	adds	r7, #40	@ 0x28
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20005650 	.word	0x20005650
 800d7b4:	20005664 	.word	0x20005664
 800d7b8:	20005654 	.word	0x20005654
 800d7bc:	20005648 	.word	0x20005648
 800d7c0:	20005658 	.word	0x20005658
 800d7c4:	2000565c 	.word	0x2000565c

0800d7c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d04f      	beq.n	800d87a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7da:	2308      	movs	r3, #8
 800d7dc:	425b      	negs	r3, r3
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	4b25      	ldr	r3, [pc, #148]	@ (800d884 <vPortFree+0xbc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10b      	bne.n	800d80e <vPortFree+0x46>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	60fb      	str	r3, [r7, #12]
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00b      	beq.n	800d82e <vPortFree+0x66>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	60bb      	str	r3, [r7, #8]
}
 800d828:	bf00      	nop
 800d82a:	bf00      	nop
 800d82c:	e7fd      	b.n	800d82a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	685a      	ldr	r2, [r3, #4]
 800d832:	4b14      	ldr	r3, [pc, #80]	@ (800d884 <vPortFree+0xbc>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4013      	ands	r3, r2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01e      	beq.n	800d87a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d11a      	bne.n	800d87a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	4b0e      	ldr	r3, [pc, #56]	@ (800d884 <vPortFree+0xbc>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	43db      	mvns	r3, r3
 800d84e:	401a      	ands	r2, r3
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d854:	f7fe fa8c 	bl	800bd70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	685a      	ldr	r2, [r3, #4]
 800d85c:	4b0a      	ldr	r3, [pc, #40]	@ (800d888 <vPortFree+0xc0>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4413      	add	r3, r2
 800d862:	4a09      	ldr	r2, [pc, #36]	@ (800d888 <vPortFree+0xc0>)
 800d864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d866:	6938      	ldr	r0, [r7, #16]
 800d868:	f000 f874 	bl	800d954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d86c:	4b07      	ldr	r3, [pc, #28]	@ (800d88c <vPortFree+0xc4>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3301      	adds	r3, #1
 800d872:	4a06      	ldr	r2, [pc, #24]	@ (800d88c <vPortFree+0xc4>)
 800d874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d876:	f7fe fa89 	bl	800bd8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d87a:	bf00      	nop
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20005664 	.word	0x20005664
 800d888:	20005654 	.word	0x20005654
 800d88c:	20005660 	.word	0x20005660

0800d890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d896:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d89a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d89c:	4b27      	ldr	r3, [pc, #156]	@ (800d93c <prvHeapInit+0xac>)
 800d89e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f003 0307 	and.w	r3, r3, #7
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00c      	beq.n	800d8c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3307      	adds	r3, #7
 800d8ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f023 0307 	bic.w	r3, r3, #7
 800d8b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	4a1f      	ldr	r2, [pc, #124]	@ (800d93c <prvHeapInit+0xac>)
 800d8c0:	4413      	add	r3, r2
 800d8c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d940 <prvHeapInit+0xb0>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d940 <prvHeapInit+0xb0>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	4413      	add	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8dc:	2208      	movs	r2, #8
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	1a9b      	subs	r3, r3, r2
 800d8e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 0307 	bic.w	r3, r3, #7
 800d8ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4a15      	ldr	r2, [pc, #84]	@ (800d944 <prvHeapInit+0xb4>)
 800d8f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8f2:	4b14      	ldr	r3, [pc, #80]	@ (800d944 <prvHeapInit+0xb4>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8fa:	4b12      	ldr	r3, [pc, #72]	@ (800d944 <prvHeapInit+0xb4>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	1ad2      	subs	r2, r2, r3
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d910:	4b0c      	ldr	r3, [pc, #48]	@ (800d944 <prvHeapInit+0xb4>)
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	4a0a      	ldr	r2, [pc, #40]	@ (800d948 <prvHeapInit+0xb8>)
 800d91e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	4a09      	ldr	r2, [pc, #36]	@ (800d94c <prvHeapInit+0xbc>)
 800d926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d928:	4b09      	ldr	r3, [pc, #36]	@ (800d950 <prvHeapInit+0xc0>)
 800d92a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d92e:	601a      	str	r2, [r3, #0]
}
 800d930:	bf00      	nop
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	20001a48 	.word	0x20001a48
 800d940:	20005648 	.word	0x20005648
 800d944:	20005650 	.word	0x20005650
 800d948:	20005658 	.word	0x20005658
 800d94c:	20005654 	.word	0x20005654
 800d950:	20005664 	.word	0x20005664

0800d954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d954:	b480      	push	{r7}
 800d956:	b085      	sub	sp, #20
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d95c:	4b28      	ldr	r3, [pc, #160]	@ (800da00 <prvInsertBlockIntoFreeList+0xac>)
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e002      	b.n	800d968 <prvInsertBlockIntoFreeList+0x14>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d8f7      	bhi.n	800d962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4413      	add	r3, r2
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	429a      	cmp	r2, r3
 800d982:	d108      	bne.n	800d996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	441a      	add	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	441a      	add	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d118      	bne.n	800d9dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	4b15      	ldr	r3, [pc, #84]	@ (800da04 <prvInsertBlockIntoFreeList+0xb0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d00d      	beq.n	800d9d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	441a      	add	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	e008      	b.n	800d9e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <prvInsertBlockIntoFreeList+0xb0>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	e003      	b.n	800d9e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d002      	beq.n	800d9f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9f2:	bf00      	nop
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	20005648 	.word	0x20005648
 800da04:	20005650 	.word	0x20005650

0800da08 <_vsiprintf_r>:
 800da08:	b510      	push	{r4, lr}
 800da0a:	b09a      	sub	sp, #104	@ 0x68
 800da0c:	2400      	movs	r4, #0
 800da0e:	9100      	str	r1, [sp, #0]
 800da10:	9104      	str	r1, [sp, #16]
 800da12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da16:	9105      	str	r1, [sp, #20]
 800da18:	9102      	str	r1, [sp, #8]
 800da1a:	4905      	ldr	r1, [pc, #20]	@ (800da30 <_vsiprintf_r+0x28>)
 800da1c:	9103      	str	r1, [sp, #12]
 800da1e:	4669      	mov	r1, sp
 800da20:	9419      	str	r4, [sp, #100]	@ 0x64
 800da22:	f000 f957 	bl	800dcd4 <_svfiprintf_r>
 800da26:	9b00      	ldr	r3, [sp, #0]
 800da28:	701c      	strb	r4, [r3, #0]
 800da2a:	b01a      	add	sp, #104	@ 0x68
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	bf00      	nop
 800da30:	ffff0208 	.word	0xffff0208

0800da34 <vsiprintf>:
 800da34:	4613      	mov	r3, r2
 800da36:	460a      	mov	r2, r1
 800da38:	4601      	mov	r1, r0
 800da3a:	4802      	ldr	r0, [pc, #8]	@ (800da44 <vsiprintf+0x10>)
 800da3c:	6800      	ldr	r0, [r0, #0]
 800da3e:	f7ff bfe3 	b.w	800da08 <_vsiprintf_r>
 800da42:	bf00      	nop
 800da44:	2000002c 	.word	0x2000002c

0800da48 <memset>:
 800da48:	4402      	add	r2, r0
 800da4a:	4603      	mov	r3, r0
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d100      	bne.n	800da52 <memset+0xa>
 800da50:	4770      	bx	lr
 800da52:	f803 1b01 	strb.w	r1, [r3], #1
 800da56:	e7f9      	b.n	800da4c <memset+0x4>

0800da58 <__errno>:
 800da58:	4b01      	ldr	r3, [pc, #4]	@ (800da60 <__errno+0x8>)
 800da5a:	6818      	ldr	r0, [r3, #0]
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	2000002c 	.word	0x2000002c

0800da64 <__libc_init_array>:
 800da64:	b570      	push	{r4, r5, r6, lr}
 800da66:	4d0d      	ldr	r5, [pc, #52]	@ (800da9c <__libc_init_array+0x38>)
 800da68:	4c0d      	ldr	r4, [pc, #52]	@ (800daa0 <__libc_init_array+0x3c>)
 800da6a:	1b64      	subs	r4, r4, r5
 800da6c:	10a4      	asrs	r4, r4, #2
 800da6e:	2600      	movs	r6, #0
 800da70:	42a6      	cmp	r6, r4
 800da72:	d109      	bne.n	800da88 <__libc_init_array+0x24>
 800da74:	4d0b      	ldr	r5, [pc, #44]	@ (800daa4 <__libc_init_array+0x40>)
 800da76:	4c0c      	ldr	r4, [pc, #48]	@ (800daa8 <__libc_init_array+0x44>)
 800da78:	f000 fcc2 	bl	800e400 <_init>
 800da7c:	1b64      	subs	r4, r4, r5
 800da7e:	10a4      	asrs	r4, r4, #2
 800da80:	2600      	movs	r6, #0
 800da82:	42a6      	cmp	r6, r4
 800da84:	d105      	bne.n	800da92 <__libc_init_array+0x2e>
 800da86:	bd70      	pop	{r4, r5, r6, pc}
 800da88:	f855 3b04 	ldr.w	r3, [r5], #4
 800da8c:	4798      	blx	r3
 800da8e:	3601      	adds	r6, #1
 800da90:	e7ee      	b.n	800da70 <__libc_init_array+0xc>
 800da92:	f855 3b04 	ldr.w	r3, [r5], #4
 800da96:	4798      	blx	r3
 800da98:	3601      	adds	r6, #1
 800da9a:	e7f2      	b.n	800da82 <__libc_init_array+0x1e>
 800da9c:	0800e58c 	.word	0x0800e58c
 800daa0:	0800e58c 	.word	0x0800e58c
 800daa4:	0800e58c 	.word	0x0800e58c
 800daa8:	0800e590 	.word	0x0800e590

0800daac <__retarget_lock_acquire_recursive>:
 800daac:	4770      	bx	lr

0800daae <__retarget_lock_release_recursive>:
 800daae:	4770      	bx	lr

0800dab0 <_reclaim_reent>:
 800dab0:	4b2d      	ldr	r3, [pc, #180]	@ (800db68 <_reclaim_reent+0xb8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4283      	cmp	r3, r0
 800dab6:	b570      	push	{r4, r5, r6, lr}
 800dab8:	4604      	mov	r4, r0
 800daba:	d053      	beq.n	800db64 <_reclaim_reent+0xb4>
 800dabc:	69c3      	ldr	r3, [r0, #28]
 800dabe:	b31b      	cbz	r3, 800db08 <_reclaim_reent+0x58>
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	b163      	cbz	r3, 800dade <_reclaim_reent+0x2e>
 800dac4:	2500      	movs	r5, #0
 800dac6:	69e3      	ldr	r3, [r4, #28]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	5959      	ldr	r1, [r3, r5]
 800dacc:	b9b1      	cbnz	r1, 800dafc <_reclaim_reent+0x4c>
 800dace:	3504      	adds	r5, #4
 800dad0:	2d80      	cmp	r5, #128	@ 0x80
 800dad2:	d1f8      	bne.n	800dac6 <_reclaim_reent+0x16>
 800dad4:	69e3      	ldr	r3, [r4, #28]
 800dad6:	4620      	mov	r0, r4
 800dad8:	68d9      	ldr	r1, [r3, #12]
 800dada:	f000 f855 	bl	800db88 <_free_r>
 800dade:	69e3      	ldr	r3, [r4, #28]
 800dae0:	6819      	ldr	r1, [r3, #0]
 800dae2:	b111      	cbz	r1, 800daea <_reclaim_reent+0x3a>
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 f84f 	bl	800db88 <_free_r>
 800daea:	69e3      	ldr	r3, [r4, #28]
 800daec:	689d      	ldr	r5, [r3, #8]
 800daee:	b15d      	cbz	r5, 800db08 <_reclaim_reent+0x58>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4620      	mov	r0, r4
 800daf4:	682d      	ldr	r5, [r5, #0]
 800daf6:	f000 f847 	bl	800db88 <_free_r>
 800dafa:	e7f8      	b.n	800daee <_reclaim_reent+0x3e>
 800dafc:	680e      	ldr	r6, [r1, #0]
 800dafe:	4620      	mov	r0, r4
 800db00:	f000 f842 	bl	800db88 <_free_r>
 800db04:	4631      	mov	r1, r6
 800db06:	e7e1      	b.n	800dacc <_reclaim_reent+0x1c>
 800db08:	6961      	ldr	r1, [r4, #20]
 800db0a:	b111      	cbz	r1, 800db12 <_reclaim_reent+0x62>
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 f83b 	bl	800db88 <_free_r>
 800db12:	69e1      	ldr	r1, [r4, #28]
 800db14:	b111      	cbz	r1, 800db1c <_reclaim_reent+0x6c>
 800db16:	4620      	mov	r0, r4
 800db18:	f000 f836 	bl	800db88 <_free_r>
 800db1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db1e:	b111      	cbz	r1, 800db26 <_reclaim_reent+0x76>
 800db20:	4620      	mov	r0, r4
 800db22:	f000 f831 	bl	800db88 <_free_r>
 800db26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db28:	b111      	cbz	r1, 800db30 <_reclaim_reent+0x80>
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 f82c 	bl	800db88 <_free_r>
 800db30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800db32:	b111      	cbz	r1, 800db3a <_reclaim_reent+0x8a>
 800db34:	4620      	mov	r0, r4
 800db36:	f000 f827 	bl	800db88 <_free_r>
 800db3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db3c:	b111      	cbz	r1, 800db44 <_reclaim_reent+0x94>
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 f822 	bl	800db88 <_free_r>
 800db44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db46:	b111      	cbz	r1, 800db4e <_reclaim_reent+0x9e>
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f81d 	bl	800db88 <_free_r>
 800db4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db50:	b111      	cbz	r1, 800db58 <_reclaim_reent+0xa8>
 800db52:	4620      	mov	r0, r4
 800db54:	f000 f818 	bl	800db88 <_free_r>
 800db58:	6a23      	ldr	r3, [r4, #32]
 800db5a:	b11b      	cbz	r3, 800db64 <_reclaim_reent+0xb4>
 800db5c:	4620      	mov	r0, r4
 800db5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db62:	4718      	bx	r3
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	bf00      	nop
 800db68:	2000002c 	.word	0x2000002c

0800db6c <memcpy>:
 800db6c:	440a      	add	r2, r1
 800db6e:	4291      	cmp	r1, r2
 800db70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800db74:	d100      	bne.n	800db78 <memcpy+0xc>
 800db76:	4770      	bx	lr
 800db78:	b510      	push	{r4, lr}
 800db7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db82:	4291      	cmp	r1, r2
 800db84:	d1f9      	bne.n	800db7a <memcpy+0xe>
 800db86:	bd10      	pop	{r4, pc}

0800db88 <_free_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	4605      	mov	r5, r0
 800db8c:	2900      	cmp	r1, #0
 800db8e:	d041      	beq.n	800dc14 <_free_r+0x8c>
 800db90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db94:	1f0c      	subs	r4, r1, #4
 800db96:	2b00      	cmp	r3, #0
 800db98:	bfb8      	it	lt
 800db9a:	18e4      	addlt	r4, r4, r3
 800db9c:	f000 fbc4 	bl	800e328 <__malloc_lock>
 800dba0:	4a1d      	ldr	r2, [pc, #116]	@ (800dc18 <_free_r+0x90>)
 800dba2:	6813      	ldr	r3, [r2, #0]
 800dba4:	b933      	cbnz	r3, 800dbb4 <_free_r+0x2c>
 800dba6:	6063      	str	r3, [r4, #4]
 800dba8:	6014      	str	r4, [r2, #0]
 800dbaa:	4628      	mov	r0, r5
 800dbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbb0:	f000 bbc0 	b.w	800e334 <__malloc_unlock>
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	d908      	bls.n	800dbca <_free_r+0x42>
 800dbb8:	6820      	ldr	r0, [r4, #0]
 800dbba:	1821      	adds	r1, r4, r0
 800dbbc:	428b      	cmp	r3, r1
 800dbbe:	bf01      	itttt	eq
 800dbc0:	6819      	ldreq	r1, [r3, #0]
 800dbc2:	685b      	ldreq	r3, [r3, #4]
 800dbc4:	1809      	addeq	r1, r1, r0
 800dbc6:	6021      	streq	r1, [r4, #0]
 800dbc8:	e7ed      	b.n	800dba6 <_free_r+0x1e>
 800dbca:	461a      	mov	r2, r3
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	b10b      	cbz	r3, 800dbd4 <_free_r+0x4c>
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	d9fa      	bls.n	800dbca <_free_r+0x42>
 800dbd4:	6811      	ldr	r1, [r2, #0]
 800dbd6:	1850      	adds	r0, r2, r1
 800dbd8:	42a0      	cmp	r0, r4
 800dbda:	d10b      	bne.n	800dbf4 <_free_r+0x6c>
 800dbdc:	6820      	ldr	r0, [r4, #0]
 800dbde:	4401      	add	r1, r0
 800dbe0:	1850      	adds	r0, r2, r1
 800dbe2:	4283      	cmp	r3, r0
 800dbe4:	6011      	str	r1, [r2, #0]
 800dbe6:	d1e0      	bne.n	800dbaa <_free_r+0x22>
 800dbe8:	6818      	ldr	r0, [r3, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	6053      	str	r3, [r2, #4]
 800dbee:	4408      	add	r0, r1
 800dbf0:	6010      	str	r0, [r2, #0]
 800dbf2:	e7da      	b.n	800dbaa <_free_r+0x22>
 800dbf4:	d902      	bls.n	800dbfc <_free_r+0x74>
 800dbf6:	230c      	movs	r3, #12
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	e7d6      	b.n	800dbaa <_free_r+0x22>
 800dbfc:	6820      	ldr	r0, [r4, #0]
 800dbfe:	1821      	adds	r1, r4, r0
 800dc00:	428b      	cmp	r3, r1
 800dc02:	bf04      	itt	eq
 800dc04:	6819      	ldreq	r1, [r3, #0]
 800dc06:	685b      	ldreq	r3, [r3, #4]
 800dc08:	6063      	str	r3, [r4, #4]
 800dc0a:	bf04      	itt	eq
 800dc0c:	1809      	addeq	r1, r1, r0
 800dc0e:	6021      	streq	r1, [r4, #0]
 800dc10:	6054      	str	r4, [r2, #4]
 800dc12:	e7ca      	b.n	800dbaa <_free_r+0x22>
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
 800dc16:	bf00      	nop
 800dc18:	200057ac 	.word	0x200057ac

0800dc1c <__ssputs_r>:
 800dc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc20:	688e      	ldr	r6, [r1, #8]
 800dc22:	461f      	mov	r7, r3
 800dc24:	42be      	cmp	r6, r7
 800dc26:	680b      	ldr	r3, [r1, #0]
 800dc28:	4682      	mov	sl, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	4690      	mov	r8, r2
 800dc2e:	d82d      	bhi.n	800dc8c <__ssputs_r+0x70>
 800dc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc38:	d026      	beq.n	800dc88 <__ssputs_r+0x6c>
 800dc3a:	6965      	ldr	r5, [r4, #20]
 800dc3c:	6909      	ldr	r1, [r1, #16]
 800dc3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc42:	eba3 0901 	sub.w	r9, r3, r1
 800dc46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc4a:	1c7b      	adds	r3, r7, #1
 800dc4c:	444b      	add	r3, r9
 800dc4e:	106d      	asrs	r5, r5, #1
 800dc50:	429d      	cmp	r5, r3
 800dc52:	bf38      	it	cc
 800dc54:	461d      	movcc	r5, r3
 800dc56:	0553      	lsls	r3, r2, #21
 800dc58:	d527      	bpl.n	800dcaa <__ssputs_r+0x8e>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f000 f958 	bl	800df10 <_malloc_r>
 800dc60:	4606      	mov	r6, r0
 800dc62:	b360      	cbz	r0, 800dcbe <__ssputs_r+0xa2>
 800dc64:	6921      	ldr	r1, [r4, #16]
 800dc66:	464a      	mov	r2, r9
 800dc68:	f7ff ff80 	bl	800db6c <memcpy>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc76:	81a3      	strh	r3, [r4, #12]
 800dc78:	6126      	str	r6, [r4, #16]
 800dc7a:	6165      	str	r5, [r4, #20]
 800dc7c:	444e      	add	r6, r9
 800dc7e:	eba5 0509 	sub.w	r5, r5, r9
 800dc82:	6026      	str	r6, [r4, #0]
 800dc84:	60a5      	str	r5, [r4, #8]
 800dc86:	463e      	mov	r6, r7
 800dc88:	42be      	cmp	r6, r7
 800dc8a:	d900      	bls.n	800dc8e <__ssputs_r+0x72>
 800dc8c:	463e      	mov	r6, r7
 800dc8e:	6820      	ldr	r0, [r4, #0]
 800dc90:	4632      	mov	r2, r6
 800dc92:	4641      	mov	r1, r8
 800dc94:	f000 fb82 	bl	800e39c <memmove>
 800dc98:	68a3      	ldr	r3, [r4, #8]
 800dc9a:	1b9b      	subs	r3, r3, r6
 800dc9c:	60a3      	str	r3, [r4, #8]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	4433      	add	r3, r6
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	2000      	movs	r0, #0
 800dca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcaa:	462a      	mov	r2, r5
 800dcac:	f000 fb48 	bl	800e340 <_realloc_r>
 800dcb0:	4606      	mov	r6, r0
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d1e0      	bne.n	800dc78 <__ssputs_r+0x5c>
 800dcb6:	6921      	ldr	r1, [r4, #16]
 800dcb8:	4650      	mov	r0, sl
 800dcba:	f7ff ff65 	bl	800db88 <_free_r>
 800dcbe:	230c      	movs	r3, #12
 800dcc0:	f8ca 3000 	str.w	r3, [sl]
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcd0:	e7e9      	b.n	800dca6 <__ssputs_r+0x8a>
	...

0800dcd4 <_svfiprintf_r>:
 800dcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd8:	4698      	mov	r8, r3
 800dcda:	898b      	ldrh	r3, [r1, #12]
 800dcdc:	061b      	lsls	r3, r3, #24
 800dcde:	b09d      	sub	sp, #116	@ 0x74
 800dce0:	4607      	mov	r7, r0
 800dce2:	460d      	mov	r5, r1
 800dce4:	4614      	mov	r4, r2
 800dce6:	d510      	bpl.n	800dd0a <_svfiprintf_r+0x36>
 800dce8:	690b      	ldr	r3, [r1, #16]
 800dcea:	b973      	cbnz	r3, 800dd0a <_svfiprintf_r+0x36>
 800dcec:	2140      	movs	r1, #64	@ 0x40
 800dcee:	f000 f90f 	bl	800df10 <_malloc_r>
 800dcf2:	6028      	str	r0, [r5, #0]
 800dcf4:	6128      	str	r0, [r5, #16]
 800dcf6:	b930      	cbnz	r0, 800dd06 <_svfiprintf_r+0x32>
 800dcf8:	230c      	movs	r3, #12
 800dcfa:	603b      	str	r3, [r7, #0]
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd00:	b01d      	add	sp, #116	@ 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	2340      	movs	r3, #64	@ 0x40
 800dd08:	616b      	str	r3, [r5, #20]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	2320      	movs	r3, #32
 800dd10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd14:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd18:	2330      	movs	r3, #48	@ 0x30
 800dd1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800deb8 <_svfiprintf_r+0x1e4>
 800dd1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd22:	f04f 0901 	mov.w	r9, #1
 800dd26:	4623      	mov	r3, r4
 800dd28:	469a      	mov	sl, r3
 800dd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd2e:	b10a      	cbz	r2, 800dd34 <_svfiprintf_r+0x60>
 800dd30:	2a25      	cmp	r2, #37	@ 0x25
 800dd32:	d1f9      	bne.n	800dd28 <_svfiprintf_r+0x54>
 800dd34:	ebba 0b04 	subs.w	fp, sl, r4
 800dd38:	d00b      	beq.n	800dd52 <_svfiprintf_r+0x7e>
 800dd3a:	465b      	mov	r3, fp
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7ff ff6b 	bl	800dc1c <__ssputs_r>
 800dd46:	3001      	adds	r0, #1
 800dd48:	f000 80a7 	beq.w	800de9a <_svfiprintf_r+0x1c6>
 800dd4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd4e:	445a      	add	r2, fp
 800dd50:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd52:	f89a 3000 	ldrb.w	r3, [sl]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 809f 	beq.w	800de9a <_svfiprintf_r+0x1c6>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd66:	f10a 0a01 	add.w	sl, sl, #1
 800dd6a:	9304      	str	r3, [sp, #16]
 800dd6c:	9307      	str	r3, [sp, #28]
 800dd6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd72:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd74:	4654      	mov	r4, sl
 800dd76:	2205      	movs	r2, #5
 800dd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7c:	484e      	ldr	r0, [pc, #312]	@ (800deb8 <_svfiprintf_r+0x1e4>)
 800dd7e:	f7f2 fa2f 	bl	80001e0 <memchr>
 800dd82:	9a04      	ldr	r2, [sp, #16]
 800dd84:	b9d8      	cbnz	r0, 800ddbe <_svfiprintf_r+0xea>
 800dd86:	06d0      	lsls	r0, r2, #27
 800dd88:	bf44      	itt	mi
 800dd8a:	2320      	movmi	r3, #32
 800dd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd90:	0711      	lsls	r1, r2, #28
 800dd92:	bf44      	itt	mi
 800dd94:	232b      	movmi	r3, #43	@ 0x2b
 800dd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dda0:	d015      	beq.n	800ddce <_svfiprintf_r+0xfa>
 800dda2:	9a07      	ldr	r2, [sp, #28]
 800dda4:	4654      	mov	r4, sl
 800dda6:	2000      	movs	r0, #0
 800dda8:	f04f 0c0a 	mov.w	ip, #10
 800ddac:	4621      	mov	r1, r4
 800ddae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb2:	3b30      	subs	r3, #48	@ 0x30
 800ddb4:	2b09      	cmp	r3, #9
 800ddb6:	d94b      	bls.n	800de50 <_svfiprintf_r+0x17c>
 800ddb8:	b1b0      	cbz	r0, 800dde8 <_svfiprintf_r+0x114>
 800ddba:	9207      	str	r2, [sp, #28]
 800ddbc:	e014      	b.n	800dde8 <_svfiprintf_r+0x114>
 800ddbe:	eba0 0308 	sub.w	r3, r0, r8
 800ddc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	9304      	str	r3, [sp, #16]
 800ddca:	46a2      	mov	sl, r4
 800ddcc:	e7d2      	b.n	800dd74 <_svfiprintf_r+0xa0>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	1d19      	adds	r1, r3, #4
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	9103      	str	r1, [sp, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	bfbb      	ittet	lt
 800ddda:	425b      	neglt	r3, r3
 800dddc:	f042 0202 	orrlt.w	r2, r2, #2
 800dde0:	9307      	strge	r3, [sp, #28]
 800dde2:	9307      	strlt	r3, [sp, #28]
 800dde4:	bfb8      	it	lt
 800dde6:	9204      	strlt	r2, [sp, #16]
 800dde8:	7823      	ldrb	r3, [r4, #0]
 800ddea:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddec:	d10a      	bne.n	800de04 <_svfiprintf_r+0x130>
 800ddee:	7863      	ldrb	r3, [r4, #1]
 800ddf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddf2:	d132      	bne.n	800de5a <_svfiprintf_r+0x186>
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	1d1a      	adds	r2, r3, #4
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	9203      	str	r2, [sp, #12]
 800ddfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de00:	3402      	adds	r4, #2
 800de02:	9305      	str	r3, [sp, #20]
 800de04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dec8 <_svfiprintf_r+0x1f4>
 800de08:	7821      	ldrb	r1, [r4, #0]
 800de0a:	2203      	movs	r2, #3
 800de0c:	4650      	mov	r0, sl
 800de0e:	f7f2 f9e7 	bl	80001e0 <memchr>
 800de12:	b138      	cbz	r0, 800de24 <_svfiprintf_r+0x150>
 800de14:	9b04      	ldr	r3, [sp, #16]
 800de16:	eba0 000a 	sub.w	r0, r0, sl
 800de1a:	2240      	movs	r2, #64	@ 0x40
 800de1c:	4082      	lsls	r2, r0
 800de1e:	4313      	orrs	r3, r2
 800de20:	3401      	adds	r4, #1
 800de22:	9304      	str	r3, [sp, #16]
 800de24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de28:	4824      	ldr	r0, [pc, #144]	@ (800debc <_svfiprintf_r+0x1e8>)
 800de2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de2e:	2206      	movs	r2, #6
 800de30:	f7f2 f9d6 	bl	80001e0 <memchr>
 800de34:	2800      	cmp	r0, #0
 800de36:	d036      	beq.n	800dea6 <_svfiprintf_r+0x1d2>
 800de38:	4b21      	ldr	r3, [pc, #132]	@ (800dec0 <_svfiprintf_r+0x1ec>)
 800de3a:	bb1b      	cbnz	r3, 800de84 <_svfiprintf_r+0x1b0>
 800de3c:	9b03      	ldr	r3, [sp, #12]
 800de3e:	3307      	adds	r3, #7
 800de40:	f023 0307 	bic.w	r3, r3, #7
 800de44:	3308      	adds	r3, #8
 800de46:	9303      	str	r3, [sp, #12]
 800de48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de4a:	4433      	add	r3, r6
 800de4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4e:	e76a      	b.n	800dd26 <_svfiprintf_r+0x52>
 800de50:	fb0c 3202 	mla	r2, ip, r2, r3
 800de54:	460c      	mov	r4, r1
 800de56:	2001      	movs	r0, #1
 800de58:	e7a8      	b.n	800ddac <_svfiprintf_r+0xd8>
 800de5a:	2300      	movs	r3, #0
 800de5c:	3401      	adds	r4, #1
 800de5e:	9305      	str	r3, [sp, #20]
 800de60:	4619      	mov	r1, r3
 800de62:	f04f 0c0a 	mov.w	ip, #10
 800de66:	4620      	mov	r0, r4
 800de68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de6c:	3a30      	subs	r2, #48	@ 0x30
 800de6e:	2a09      	cmp	r2, #9
 800de70:	d903      	bls.n	800de7a <_svfiprintf_r+0x1a6>
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0c6      	beq.n	800de04 <_svfiprintf_r+0x130>
 800de76:	9105      	str	r1, [sp, #20]
 800de78:	e7c4      	b.n	800de04 <_svfiprintf_r+0x130>
 800de7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de7e:	4604      	mov	r4, r0
 800de80:	2301      	movs	r3, #1
 800de82:	e7f0      	b.n	800de66 <_svfiprintf_r+0x192>
 800de84:	ab03      	add	r3, sp, #12
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	462a      	mov	r2, r5
 800de8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dec4 <_svfiprintf_r+0x1f0>)
 800de8c:	a904      	add	r1, sp, #16
 800de8e:	4638      	mov	r0, r7
 800de90:	f3af 8000 	nop.w
 800de94:	1c42      	adds	r2, r0, #1
 800de96:	4606      	mov	r6, r0
 800de98:	d1d6      	bne.n	800de48 <_svfiprintf_r+0x174>
 800de9a:	89ab      	ldrh	r3, [r5, #12]
 800de9c:	065b      	lsls	r3, r3, #25
 800de9e:	f53f af2d 	bmi.w	800dcfc <_svfiprintf_r+0x28>
 800dea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dea4:	e72c      	b.n	800dd00 <_svfiprintf_r+0x2c>
 800dea6:	ab03      	add	r3, sp, #12
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	462a      	mov	r2, r5
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <_svfiprintf_r+0x1f0>)
 800deae:	a904      	add	r1, sp, #16
 800deb0:	4638      	mov	r0, r7
 800deb2:	f000 f91b 	bl	800e0ec <_printf_i>
 800deb6:	e7ed      	b.n	800de94 <_svfiprintf_r+0x1c0>
 800deb8:	0800e550 	.word	0x0800e550
 800debc:	0800e55a 	.word	0x0800e55a
 800dec0:	00000000 	.word	0x00000000
 800dec4:	0800dc1d 	.word	0x0800dc1d
 800dec8:	0800e556 	.word	0x0800e556

0800decc <sbrk_aligned>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4e0f      	ldr	r6, [pc, #60]	@ (800df0c <sbrk_aligned+0x40>)
 800ded0:	460c      	mov	r4, r1
 800ded2:	6831      	ldr	r1, [r6, #0]
 800ded4:	4605      	mov	r5, r0
 800ded6:	b911      	cbnz	r1, 800dede <sbrk_aligned+0x12>
 800ded8:	f000 fa7a 	bl	800e3d0 <_sbrk_r>
 800dedc:	6030      	str	r0, [r6, #0]
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 fa75 	bl	800e3d0 <_sbrk_r>
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d103      	bne.n	800def2 <sbrk_aligned+0x26>
 800deea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800deee:	4620      	mov	r0, r4
 800def0:	bd70      	pop	{r4, r5, r6, pc}
 800def2:	1cc4      	adds	r4, r0, #3
 800def4:	f024 0403 	bic.w	r4, r4, #3
 800def8:	42a0      	cmp	r0, r4
 800defa:	d0f8      	beq.n	800deee <sbrk_aligned+0x22>
 800defc:	1a21      	subs	r1, r4, r0
 800defe:	4628      	mov	r0, r5
 800df00:	f000 fa66 	bl	800e3d0 <_sbrk_r>
 800df04:	3001      	adds	r0, #1
 800df06:	d1f2      	bne.n	800deee <sbrk_aligned+0x22>
 800df08:	e7ef      	b.n	800deea <sbrk_aligned+0x1e>
 800df0a:	bf00      	nop
 800df0c:	200057a8 	.word	0x200057a8

0800df10 <_malloc_r>:
 800df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df14:	1ccd      	adds	r5, r1, #3
 800df16:	f025 0503 	bic.w	r5, r5, #3
 800df1a:	3508      	adds	r5, #8
 800df1c:	2d0c      	cmp	r5, #12
 800df1e:	bf38      	it	cc
 800df20:	250c      	movcc	r5, #12
 800df22:	2d00      	cmp	r5, #0
 800df24:	4606      	mov	r6, r0
 800df26:	db01      	blt.n	800df2c <_malloc_r+0x1c>
 800df28:	42a9      	cmp	r1, r5
 800df2a:	d904      	bls.n	800df36 <_malloc_r+0x26>
 800df2c:	230c      	movs	r3, #12
 800df2e:	6033      	str	r3, [r6, #0]
 800df30:	2000      	movs	r0, #0
 800df32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e00c <_malloc_r+0xfc>
 800df3a:	f000 f9f5 	bl	800e328 <__malloc_lock>
 800df3e:	f8d8 3000 	ldr.w	r3, [r8]
 800df42:	461c      	mov	r4, r3
 800df44:	bb44      	cbnz	r4, 800df98 <_malloc_r+0x88>
 800df46:	4629      	mov	r1, r5
 800df48:	4630      	mov	r0, r6
 800df4a:	f7ff ffbf 	bl	800decc <sbrk_aligned>
 800df4e:	1c43      	adds	r3, r0, #1
 800df50:	4604      	mov	r4, r0
 800df52:	d158      	bne.n	800e006 <_malloc_r+0xf6>
 800df54:	f8d8 4000 	ldr.w	r4, [r8]
 800df58:	4627      	mov	r7, r4
 800df5a:	2f00      	cmp	r7, #0
 800df5c:	d143      	bne.n	800dfe6 <_malloc_r+0xd6>
 800df5e:	2c00      	cmp	r4, #0
 800df60:	d04b      	beq.n	800dffa <_malloc_r+0xea>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	4639      	mov	r1, r7
 800df66:	4630      	mov	r0, r6
 800df68:	eb04 0903 	add.w	r9, r4, r3
 800df6c:	f000 fa30 	bl	800e3d0 <_sbrk_r>
 800df70:	4581      	cmp	r9, r0
 800df72:	d142      	bne.n	800dffa <_malloc_r+0xea>
 800df74:	6821      	ldr	r1, [r4, #0]
 800df76:	1a6d      	subs	r5, r5, r1
 800df78:	4629      	mov	r1, r5
 800df7a:	4630      	mov	r0, r6
 800df7c:	f7ff ffa6 	bl	800decc <sbrk_aligned>
 800df80:	3001      	adds	r0, #1
 800df82:	d03a      	beq.n	800dffa <_malloc_r+0xea>
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	442b      	add	r3, r5
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	f8d8 3000 	ldr.w	r3, [r8]
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	bb62      	cbnz	r2, 800dfec <_malloc_r+0xdc>
 800df92:	f8c8 7000 	str.w	r7, [r8]
 800df96:	e00f      	b.n	800dfb8 <_malloc_r+0xa8>
 800df98:	6822      	ldr	r2, [r4, #0]
 800df9a:	1b52      	subs	r2, r2, r5
 800df9c:	d420      	bmi.n	800dfe0 <_malloc_r+0xd0>
 800df9e:	2a0b      	cmp	r2, #11
 800dfa0:	d917      	bls.n	800dfd2 <_malloc_r+0xc2>
 800dfa2:	1961      	adds	r1, r4, r5
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	6025      	str	r5, [r4, #0]
 800dfa8:	bf18      	it	ne
 800dfaa:	6059      	strne	r1, [r3, #4]
 800dfac:	6863      	ldr	r3, [r4, #4]
 800dfae:	bf08      	it	eq
 800dfb0:	f8c8 1000 	streq.w	r1, [r8]
 800dfb4:	5162      	str	r2, [r4, r5]
 800dfb6:	604b      	str	r3, [r1, #4]
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f000 f9bb 	bl	800e334 <__malloc_unlock>
 800dfbe:	f104 000b 	add.w	r0, r4, #11
 800dfc2:	1d23      	adds	r3, r4, #4
 800dfc4:	f020 0007 	bic.w	r0, r0, #7
 800dfc8:	1ac2      	subs	r2, r0, r3
 800dfca:	bf1c      	itt	ne
 800dfcc:	1a1b      	subne	r3, r3, r0
 800dfce:	50a3      	strne	r3, [r4, r2]
 800dfd0:	e7af      	b.n	800df32 <_malloc_r+0x22>
 800dfd2:	6862      	ldr	r2, [r4, #4]
 800dfd4:	42a3      	cmp	r3, r4
 800dfd6:	bf0c      	ite	eq
 800dfd8:	f8c8 2000 	streq.w	r2, [r8]
 800dfdc:	605a      	strne	r2, [r3, #4]
 800dfde:	e7eb      	b.n	800dfb8 <_malloc_r+0xa8>
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	6864      	ldr	r4, [r4, #4]
 800dfe4:	e7ae      	b.n	800df44 <_malloc_r+0x34>
 800dfe6:	463c      	mov	r4, r7
 800dfe8:	687f      	ldr	r7, [r7, #4]
 800dfea:	e7b6      	b.n	800df5a <_malloc_r+0x4a>
 800dfec:	461a      	mov	r2, r3
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d1fb      	bne.n	800dfec <_malloc_r+0xdc>
 800dff4:	2300      	movs	r3, #0
 800dff6:	6053      	str	r3, [r2, #4]
 800dff8:	e7de      	b.n	800dfb8 <_malloc_r+0xa8>
 800dffa:	230c      	movs	r3, #12
 800dffc:	6033      	str	r3, [r6, #0]
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 f998 	bl	800e334 <__malloc_unlock>
 800e004:	e794      	b.n	800df30 <_malloc_r+0x20>
 800e006:	6005      	str	r5, [r0, #0]
 800e008:	e7d6      	b.n	800dfb8 <_malloc_r+0xa8>
 800e00a:	bf00      	nop
 800e00c:	200057ac 	.word	0x200057ac

0800e010 <_printf_common>:
 800e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	4616      	mov	r6, r2
 800e016:	4698      	mov	r8, r3
 800e018:	688a      	ldr	r2, [r1, #8]
 800e01a:	690b      	ldr	r3, [r1, #16]
 800e01c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e020:	4293      	cmp	r3, r2
 800e022:	bfb8      	it	lt
 800e024:	4613      	movlt	r3, r2
 800e026:	6033      	str	r3, [r6, #0]
 800e028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e02c:	4607      	mov	r7, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	b10a      	cbz	r2, 800e036 <_printf_common+0x26>
 800e032:	3301      	adds	r3, #1
 800e034:	6033      	str	r3, [r6, #0]
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	0699      	lsls	r1, r3, #26
 800e03a:	bf42      	ittt	mi
 800e03c:	6833      	ldrmi	r3, [r6, #0]
 800e03e:	3302      	addmi	r3, #2
 800e040:	6033      	strmi	r3, [r6, #0]
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	f015 0506 	ands.w	r5, r5, #6
 800e048:	d106      	bne.n	800e058 <_printf_common+0x48>
 800e04a:	f104 0a19 	add.w	sl, r4, #25
 800e04e:	68e3      	ldr	r3, [r4, #12]
 800e050:	6832      	ldr	r2, [r6, #0]
 800e052:	1a9b      	subs	r3, r3, r2
 800e054:	42ab      	cmp	r3, r5
 800e056:	dc26      	bgt.n	800e0a6 <_printf_common+0x96>
 800e058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e05c:	6822      	ldr	r2, [r4, #0]
 800e05e:	3b00      	subs	r3, #0
 800e060:	bf18      	it	ne
 800e062:	2301      	movne	r3, #1
 800e064:	0692      	lsls	r2, r2, #26
 800e066:	d42b      	bmi.n	800e0c0 <_printf_common+0xb0>
 800e068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e06c:	4641      	mov	r1, r8
 800e06e:	4638      	mov	r0, r7
 800e070:	47c8      	blx	r9
 800e072:	3001      	adds	r0, #1
 800e074:	d01e      	beq.n	800e0b4 <_printf_common+0xa4>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	6922      	ldr	r2, [r4, #16]
 800e07a:	f003 0306 	and.w	r3, r3, #6
 800e07e:	2b04      	cmp	r3, #4
 800e080:	bf02      	ittt	eq
 800e082:	68e5      	ldreq	r5, [r4, #12]
 800e084:	6833      	ldreq	r3, [r6, #0]
 800e086:	1aed      	subeq	r5, r5, r3
 800e088:	68a3      	ldr	r3, [r4, #8]
 800e08a:	bf0c      	ite	eq
 800e08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e090:	2500      	movne	r5, #0
 800e092:	4293      	cmp	r3, r2
 800e094:	bfc4      	itt	gt
 800e096:	1a9b      	subgt	r3, r3, r2
 800e098:	18ed      	addgt	r5, r5, r3
 800e09a:	2600      	movs	r6, #0
 800e09c:	341a      	adds	r4, #26
 800e09e:	42b5      	cmp	r5, r6
 800e0a0:	d11a      	bne.n	800e0d8 <_printf_common+0xc8>
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e008      	b.n	800e0b8 <_printf_common+0xa8>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	4652      	mov	r2, sl
 800e0aa:	4641      	mov	r1, r8
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	47c8      	blx	r9
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	d103      	bne.n	800e0bc <_printf_common+0xac>
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0bc:	3501      	adds	r5, #1
 800e0be:	e7c6      	b.n	800e04e <_printf_common+0x3e>
 800e0c0:	18e1      	adds	r1, r4, r3
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	2030      	movs	r0, #48	@ 0x30
 800e0c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e0ca:	4422      	add	r2, r4
 800e0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e0d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e0d4:	3302      	adds	r3, #2
 800e0d6:	e7c7      	b.n	800e068 <_printf_common+0x58>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	4622      	mov	r2, r4
 800e0dc:	4641      	mov	r1, r8
 800e0de:	4638      	mov	r0, r7
 800e0e0:	47c8      	blx	r9
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	d0e6      	beq.n	800e0b4 <_printf_common+0xa4>
 800e0e6:	3601      	adds	r6, #1
 800e0e8:	e7d9      	b.n	800e09e <_printf_common+0x8e>
	...

0800e0ec <_printf_i>:
 800e0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f0:	7e0f      	ldrb	r7, [r1, #24]
 800e0f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0f4:	2f78      	cmp	r7, #120	@ 0x78
 800e0f6:	4691      	mov	r9, r2
 800e0f8:	4680      	mov	r8, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	469a      	mov	sl, r3
 800e0fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e102:	d807      	bhi.n	800e114 <_printf_i+0x28>
 800e104:	2f62      	cmp	r7, #98	@ 0x62
 800e106:	d80a      	bhi.n	800e11e <_printf_i+0x32>
 800e108:	2f00      	cmp	r7, #0
 800e10a:	f000 80d1 	beq.w	800e2b0 <_printf_i+0x1c4>
 800e10e:	2f58      	cmp	r7, #88	@ 0x58
 800e110:	f000 80b8 	beq.w	800e284 <_printf_i+0x198>
 800e114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e11c:	e03a      	b.n	800e194 <_printf_i+0xa8>
 800e11e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e122:	2b15      	cmp	r3, #21
 800e124:	d8f6      	bhi.n	800e114 <_printf_i+0x28>
 800e126:	a101      	add	r1, pc, #4	@ (adr r1, 800e12c <_printf_i+0x40>)
 800e128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e12c:	0800e185 	.word	0x0800e185
 800e130:	0800e199 	.word	0x0800e199
 800e134:	0800e115 	.word	0x0800e115
 800e138:	0800e115 	.word	0x0800e115
 800e13c:	0800e115 	.word	0x0800e115
 800e140:	0800e115 	.word	0x0800e115
 800e144:	0800e199 	.word	0x0800e199
 800e148:	0800e115 	.word	0x0800e115
 800e14c:	0800e115 	.word	0x0800e115
 800e150:	0800e115 	.word	0x0800e115
 800e154:	0800e115 	.word	0x0800e115
 800e158:	0800e297 	.word	0x0800e297
 800e15c:	0800e1c3 	.word	0x0800e1c3
 800e160:	0800e251 	.word	0x0800e251
 800e164:	0800e115 	.word	0x0800e115
 800e168:	0800e115 	.word	0x0800e115
 800e16c:	0800e2b9 	.word	0x0800e2b9
 800e170:	0800e115 	.word	0x0800e115
 800e174:	0800e1c3 	.word	0x0800e1c3
 800e178:	0800e115 	.word	0x0800e115
 800e17c:	0800e115 	.word	0x0800e115
 800e180:	0800e259 	.word	0x0800e259
 800e184:	6833      	ldr	r3, [r6, #0]
 800e186:	1d1a      	adds	r2, r3, #4
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6032      	str	r2, [r6, #0]
 800e18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e194:	2301      	movs	r3, #1
 800e196:	e09c      	b.n	800e2d2 <_printf_i+0x1e6>
 800e198:	6833      	ldr	r3, [r6, #0]
 800e19a:	6820      	ldr	r0, [r4, #0]
 800e19c:	1d19      	adds	r1, r3, #4
 800e19e:	6031      	str	r1, [r6, #0]
 800e1a0:	0606      	lsls	r6, r0, #24
 800e1a2:	d501      	bpl.n	800e1a8 <_printf_i+0xbc>
 800e1a4:	681d      	ldr	r5, [r3, #0]
 800e1a6:	e003      	b.n	800e1b0 <_printf_i+0xc4>
 800e1a8:	0645      	lsls	r5, r0, #25
 800e1aa:	d5fb      	bpl.n	800e1a4 <_printf_i+0xb8>
 800e1ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e1b0:	2d00      	cmp	r5, #0
 800e1b2:	da03      	bge.n	800e1bc <_printf_i+0xd0>
 800e1b4:	232d      	movs	r3, #45	@ 0x2d
 800e1b6:	426d      	negs	r5, r5
 800e1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1bc:	4858      	ldr	r0, [pc, #352]	@ (800e320 <_printf_i+0x234>)
 800e1be:	230a      	movs	r3, #10
 800e1c0:	e011      	b.n	800e1e6 <_printf_i+0xfa>
 800e1c2:	6821      	ldr	r1, [r4, #0]
 800e1c4:	6833      	ldr	r3, [r6, #0]
 800e1c6:	0608      	lsls	r0, r1, #24
 800e1c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e1cc:	d402      	bmi.n	800e1d4 <_printf_i+0xe8>
 800e1ce:	0649      	lsls	r1, r1, #25
 800e1d0:	bf48      	it	mi
 800e1d2:	b2ad      	uxthmi	r5, r5
 800e1d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e1d6:	4852      	ldr	r0, [pc, #328]	@ (800e320 <_printf_i+0x234>)
 800e1d8:	6033      	str	r3, [r6, #0]
 800e1da:	bf14      	ite	ne
 800e1dc:	230a      	movne	r3, #10
 800e1de:	2308      	moveq	r3, #8
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e1e6:	6866      	ldr	r6, [r4, #4]
 800e1e8:	60a6      	str	r6, [r4, #8]
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	db05      	blt.n	800e1fa <_printf_i+0x10e>
 800e1ee:	6821      	ldr	r1, [r4, #0]
 800e1f0:	432e      	orrs	r6, r5
 800e1f2:	f021 0104 	bic.w	r1, r1, #4
 800e1f6:	6021      	str	r1, [r4, #0]
 800e1f8:	d04b      	beq.n	800e292 <_printf_i+0x1a6>
 800e1fa:	4616      	mov	r6, r2
 800e1fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e200:	fb03 5711 	mls	r7, r3, r1, r5
 800e204:	5dc7      	ldrb	r7, [r0, r7]
 800e206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e20a:	462f      	mov	r7, r5
 800e20c:	42bb      	cmp	r3, r7
 800e20e:	460d      	mov	r5, r1
 800e210:	d9f4      	bls.n	800e1fc <_printf_i+0x110>
 800e212:	2b08      	cmp	r3, #8
 800e214:	d10b      	bne.n	800e22e <_printf_i+0x142>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	07df      	lsls	r7, r3, #31
 800e21a:	d508      	bpl.n	800e22e <_printf_i+0x142>
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	6861      	ldr	r1, [r4, #4]
 800e220:	4299      	cmp	r1, r3
 800e222:	bfde      	ittt	le
 800e224:	2330      	movle	r3, #48	@ 0x30
 800e226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e22a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e22e:	1b92      	subs	r2, r2, r6
 800e230:	6122      	str	r2, [r4, #16]
 800e232:	f8cd a000 	str.w	sl, [sp]
 800e236:	464b      	mov	r3, r9
 800e238:	aa03      	add	r2, sp, #12
 800e23a:	4621      	mov	r1, r4
 800e23c:	4640      	mov	r0, r8
 800e23e:	f7ff fee7 	bl	800e010 <_printf_common>
 800e242:	3001      	adds	r0, #1
 800e244:	d14a      	bne.n	800e2dc <_printf_i+0x1f0>
 800e246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e24a:	b004      	add	sp, #16
 800e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	f043 0320 	orr.w	r3, r3, #32
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	4832      	ldr	r0, [pc, #200]	@ (800e324 <_printf_i+0x238>)
 800e25a:	2778      	movs	r7, #120	@ 0x78
 800e25c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	6831      	ldr	r1, [r6, #0]
 800e264:	061f      	lsls	r7, r3, #24
 800e266:	f851 5b04 	ldr.w	r5, [r1], #4
 800e26a:	d402      	bmi.n	800e272 <_printf_i+0x186>
 800e26c:	065f      	lsls	r7, r3, #25
 800e26e:	bf48      	it	mi
 800e270:	b2ad      	uxthmi	r5, r5
 800e272:	6031      	str	r1, [r6, #0]
 800e274:	07d9      	lsls	r1, r3, #31
 800e276:	bf44      	itt	mi
 800e278:	f043 0320 	orrmi.w	r3, r3, #32
 800e27c:	6023      	strmi	r3, [r4, #0]
 800e27e:	b11d      	cbz	r5, 800e288 <_printf_i+0x19c>
 800e280:	2310      	movs	r3, #16
 800e282:	e7ad      	b.n	800e1e0 <_printf_i+0xf4>
 800e284:	4826      	ldr	r0, [pc, #152]	@ (800e320 <_printf_i+0x234>)
 800e286:	e7e9      	b.n	800e25c <_printf_i+0x170>
 800e288:	6823      	ldr	r3, [r4, #0]
 800e28a:	f023 0320 	bic.w	r3, r3, #32
 800e28e:	6023      	str	r3, [r4, #0]
 800e290:	e7f6      	b.n	800e280 <_printf_i+0x194>
 800e292:	4616      	mov	r6, r2
 800e294:	e7bd      	b.n	800e212 <_printf_i+0x126>
 800e296:	6833      	ldr	r3, [r6, #0]
 800e298:	6825      	ldr	r5, [r4, #0]
 800e29a:	6961      	ldr	r1, [r4, #20]
 800e29c:	1d18      	adds	r0, r3, #4
 800e29e:	6030      	str	r0, [r6, #0]
 800e2a0:	062e      	lsls	r6, r5, #24
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	d501      	bpl.n	800e2aa <_printf_i+0x1be>
 800e2a6:	6019      	str	r1, [r3, #0]
 800e2a8:	e002      	b.n	800e2b0 <_printf_i+0x1c4>
 800e2aa:	0668      	lsls	r0, r5, #25
 800e2ac:	d5fb      	bpl.n	800e2a6 <_printf_i+0x1ba>
 800e2ae:	8019      	strh	r1, [r3, #0]
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	4616      	mov	r6, r2
 800e2b6:	e7bc      	b.n	800e232 <_printf_i+0x146>
 800e2b8:	6833      	ldr	r3, [r6, #0]
 800e2ba:	1d1a      	adds	r2, r3, #4
 800e2bc:	6032      	str	r2, [r6, #0]
 800e2be:	681e      	ldr	r6, [r3, #0]
 800e2c0:	6862      	ldr	r2, [r4, #4]
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7f1 ff8b 	bl	80001e0 <memchr>
 800e2ca:	b108      	cbz	r0, 800e2d0 <_printf_i+0x1e4>
 800e2cc:	1b80      	subs	r0, r0, r6
 800e2ce:	6060      	str	r0, [r4, #4]
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2da:	e7aa      	b.n	800e232 <_printf_i+0x146>
 800e2dc:	6923      	ldr	r3, [r4, #16]
 800e2de:	4632      	mov	r2, r6
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	47d0      	blx	sl
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	d0ad      	beq.n	800e246 <_printf_i+0x15a>
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	079b      	lsls	r3, r3, #30
 800e2ee:	d413      	bmi.n	800e318 <_printf_i+0x22c>
 800e2f0:	68e0      	ldr	r0, [r4, #12]
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	4298      	cmp	r0, r3
 800e2f6:	bfb8      	it	lt
 800e2f8:	4618      	movlt	r0, r3
 800e2fa:	e7a6      	b.n	800e24a <_printf_i+0x15e>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4632      	mov	r2, r6
 800e300:	4649      	mov	r1, r9
 800e302:	4640      	mov	r0, r8
 800e304:	47d0      	blx	sl
 800e306:	3001      	adds	r0, #1
 800e308:	d09d      	beq.n	800e246 <_printf_i+0x15a>
 800e30a:	3501      	adds	r5, #1
 800e30c:	68e3      	ldr	r3, [r4, #12]
 800e30e:	9903      	ldr	r1, [sp, #12]
 800e310:	1a5b      	subs	r3, r3, r1
 800e312:	42ab      	cmp	r3, r5
 800e314:	dcf2      	bgt.n	800e2fc <_printf_i+0x210>
 800e316:	e7eb      	b.n	800e2f0 <_printf_i+0x204>
 800e318:	2500      	movs	r5, #0
 800e31a:	f104 0619 	add.w	r6, r4, #25
 800e31e:	e7f5      	b.n	800e30c <_printf_i+0x220>
 800e320:	0800e561 	.word	0x0800e561
 800e324:	0800e572 	.word	0x0800e572

0800e328 <__malloc_lock>:
 800e328:	4801      	ldr	r0, [pc, #4]	@ (800e330 <__malloc_lock+0x8>)
 800e32a:	f7ff bbbf 	b.w	800daac <__retarget_lock_acquire_recursive>
 800e32e:	bf00      	nop
 800e330:	200057a0 	.word	0x200057a0

0800e334 <__malloc_unlock>:
 800e334:	4801      	ldr	r0, [pc, #4]	@ (800e33c <__malloc_unlock+0x8>)
 800e336:	f7ff bbba 	b.w	800daae <__retarget_lock_release_recursive>
 800e33a:	bf00      	nop
 800e33c:	200057a0 	.word	0x200057a0

0800e340 <_realloc_r>:
 800e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e344:	4607      	mov	r7, r0
 800e346:	4614      	mov	r4, r2
 800e348:	460d      	mov	r5, r1
 800e34a:	b921      	cbnz	r1, 800e356 <_realloc_r+0x16>
 800e34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	4611      	mov	r1, r2
 800e352:	f7ff bddd 	b.w	800df10 <_malloc_r>
 800e356:	b92a      	cbnz	r2, 800e364 <_realloc_r+0x24>
 800e358:	f7ff fc16 	bl	800db88 <_free_r>
 800e35c:	4625      	mov	r5, r4
 800e35e:	4628      	mov	r0, r5
 800e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e364:	f000 f844 	bl	800e3f0 <_malloc_usable_size_r>
 800e368:	4284      	cmp	r4, r0
 800e36a:	4606      	mov	r6, r0
 800e36c:	d802      	bhi.n	800e374 <_realloc_r+0x34>
 800e36e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e372:	d8f4      	bhi.n	800e35e <_realloc_r+0x1e>
 800e374:	4621      	mov	r1, r4
 800e376:	4638      	mov	r0, r7
 800e378:	f7ff fdca 	bl	800df10 <_malloc_r>
 800e37c:	4680      	mov	r8, r0
 800e37e:	b908      	cbnz	r0, 800e384 <_realloc_r+0x44>
 800e380:	4645      	mov	r5, r8
 800e382:	e7ec      	b.n	800e35e <_realloc_r+0x1e>
 800e384:	42b4      	cmp	r4, r6
 800e386:	4622      	mov	r2, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	bf28      	it	cs
 800e38c:	4632      	movcs	r2, r6
 800e38e:	f7ff fbed 	bl	800db6c <memcpy>
 800e392:	4629      	mov	r1, r5
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff fbf7 	bl	800db88 <_free_r>
 800e39a:	e7f1      	b.n	800e380 <_realloc_r+0x40>

0800e39c <memmove>:
 800e39c:	4288      	cmp	r0, r1
 800e39e:	b510      	push	{r4, lr}
 800e3a0:	eb01 0402 	add.w	r4, r1, r2
 800e3a4:	d902      	bls.n	800e3ac <memmove+0x10>
 800e3a6:	4284      	cmp	r4, r0
 800e3a8:	4623      	mov	r3, r4
 800e3aa:	d807      	bhi.n	800e3bc <memmove+0x20>
 800e3ac:	1e43      	subs	r3, r0, #1
 800e3ae:	42a1      	cmp	r1, r4
 800e3b0:	d008      	beq.n	800e3c4 <memmove+0x28>
 800e3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3ba:	e7f8      	b.n	800e3ae <memmove+0x12>
 800e3bc:	4402      	add	r2, r0
 800e3be:	4601      	mov	r1, r0
 800e3c0:	428a      	cmp	r2, r1
 800e3c2:	d100      	bne.n	800e3c6 <memmove+0x2a>
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3ce:	e7f7      	b.n	800e3c0 <memmove+0x24>

0800e3d0 <_sbrk_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d06      	ldr	r5, [pc, #24]	@ (800e3ec <_sbrk_r+0x1c>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	602b      	str	r3, [r5, #0]
 800e3dc:	f7f6 fe0a 	bl	8004ff4 <_sbrk>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_sbrk_r+0x1a>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_sbrk_r+0x1a>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	200057a4 	.word	0x200057a4

0800e3f0 <_malloc_usable_size_r>:
 800e3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f4:	1f18      	subs	r0, r3, #4
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	bfbc      	itt	lt
 800e3fa:	580b      	ldrlt	r3, [r1, r0]
 800e3fc:	18c0      	addlt	r0, r0, r3
 800e3fe:	4770      	bx	lr

0800e400 <_init>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	bf00      	nop
 800e404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e406:	bc08      	pop	{r3}
 800e408:	469e      	mov	lr, r3
 800e40a:	4770      	bx	lr

0800e40c <_fini>:
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	bf00      	nop
 800e410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e412:	bc08      	pop	{r3}
 800e414:	469e      	mov	lr, r3
 800e416:	4770      	bx	lr
