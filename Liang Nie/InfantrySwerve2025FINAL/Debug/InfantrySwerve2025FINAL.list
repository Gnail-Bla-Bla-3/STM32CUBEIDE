
InfantrySwerve2025FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012154  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  080122e8  080122e8  000132e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d6c  08012d6c  00014234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012d6c  08012d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d74  08012d74  00014234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d74  08012d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d78  08012d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08012d7c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014234  2**0
                  CONTENTS
 10 .bss          000058fc  20000238  20000238  00014238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005b34  20005b34  00014238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026b2c  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054a0  00000000  00000000  0003ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002230  00000000  00000000  00040230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a97  00000000  00000000  00042460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c21  00000000  00000000  00043ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000264ad  00000000  00000000  0006ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3ccb  00000000  00000000  00090fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00174c90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a374  00000000  00000000  00174cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0017f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080122cc 	.word	0x080122cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	080122cc 	.word	0x080122cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000f7e:	e003      	b.n	8000f88 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f84:	f000 f80a 	bl	8000f9c <BMI088_delay_us>
    while(ms--)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	80fa      	strh	r2, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f6      	bne.n	8000f80 <BMI088_delay_ms+0xc>
    }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	22a8      	movs	r2, #168	@ 0xa8
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d0f8      	beq.n	8000fd0 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d206      	bcs.n	8000ff4 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e007      	b.n	8001004 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4413      	add	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	d200      	bcs.n	8001012 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8001010:	e7de      	b.n	8000fd0 <BMI088_delay_us+0x34>
            {
                break;
 8001012:	bf00      	nop
            }
        }
    }


}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e010 	.word	0xe000e010

08001024 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <BMI088_ACCEL_NS_L+0x18>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <BMI088_ACCEL_NS_L+0x1c>)
 800102e:	8811      	ldrh	r1, [r2, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fb32 	bl	800869c <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <BMI088_ACCEL_NS_H+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <BMI088_ACCEL_NS_H+0x1c>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f007 fb22 	bl	800869c <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <BMI088_GYRO_NS_L+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <BMI088_GYRO_NS_L+0x1c>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fb12 	bl	800869c <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	2000000c 	.word	0x2000000c

08001084 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <BMI088_GYRO_NS_H+0x18>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <BMI088_GYRO_NS_H+0x1c>)
 800108e:	8811      	ldrh	r1, [r2, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fb02 	bl	800869c <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80010ae:	f107 020f 	add.w	r2, r7, #15
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <BMI088_read_write_byte+0x28>)
 80010be:	f008 f96b 	bl	8009398 <HAL_SPI_TransmitReceive>
    return rx_data;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000c2c 	.word	0x20000c2c

080010d0 <BMI088_gyro_init>:
    }
    return BMI088_NO_ERROR;
}

uint8_t BMI088_gyro_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010de:	f7ff ffc1 	bl	8001064 <BMI088_GYRO_NS_L>
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	4619      	mov	r1, r3
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f99c 	bl	8001424 <BMI088_read_single_reg>
 80010ec:	f7ff ffca 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010f0:	2096      	movs	r0, #150	@ 0x96
 80010f2:	f7ff ff53 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010f6:	f7ff ffb5 	bl	8001064 <BMI088_GYRO_NS_L>
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	4619      	mov	r1, r3
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f990 	bl	8001424 <BMI088_read_single_reg>
 8001104:	f7ff ffbe 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001108:	2096      	movs	r0, #150	@ 0x96
 800110a:	f7ff ff47 	bl	8000f9c <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800110e:	f7ff ffa9 	bl	8001064 <BMI088_GYRO_NS_L>
 8001112:	21b6      	movs	r1, #182	@ 0xb6
 8001114:	2014      	movs	r0, #20
 8001116:	f000 f971 	bl	80013fc <BMI088_write_single_reg>
 800111a:	f7ff ffb3 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800111e:	2050      	movs	r0, #80	@ 0x50
 8001120:	f7ff ff28 	bl	8000f74 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001124:	f7ff ff9e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	4619      	mov	r1, r3
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f979 	bl	8001424 <BMI088_read_single_reg>
 8001132:	f7ff ffa7 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001136:	2096      	movs	r0, #150	@ 0x96
 8001138:	f7ff ff30 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800113c:	f7ff ff92 	bl	8001064 <BMI088_GYRO_NS_L>
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f96d 	bl	8001424 <BMI088_read_single_reg>
 800114a:	f7ff ff9b 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800114e:	2096      	movs	r0, #150	@ 0x96
 8001150:	f7ff ff24 	bl	8000f9c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d001      	beq.n	800115e <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	e049      	b.n	80011f2 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e042      	b.n	80011ea <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001164:	f7ff ff7e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4924      	ldr	r1, [pc, #144]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	440b      	add	r3, r1
 8001174:	7818      	ldrb	r0, [r3, #0]
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4920      	ldr	r1, [pc, #128]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f000 f938 	bl	80013fc <BMI088_write_single_reg>
 800118c:	f7ff ff7a 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001190:	2096      	movs	r0, #150	@ 0x96
 8001192:	f7ff ff03 	bl	8000f9c <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8001196:	f7ff ff65 	bl	8001064 <BMI088_GYRO_NS_L>
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4917      	ldr	r1, [pc, #92]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	1dba      	adds	r2, r7, #6
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f939 	bl	8001424 <BMI088_read_single_reg>
 80011b2:	f7ff ff67 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011b6:	2096      	movs	r0, #150	@ 0x96
 80011b8:	f7ff fef0 	bl	8000f9c <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	490f      	ldr	r1, [pc, #60]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	3301      	adds	r3, #1
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d008      	beq.n	80011e4 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4909      	ldr	r1, [pc, #36]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	440b      	add	r3, r1
 80011de:	3302      	adds	r3, #2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	e006      	b.n	80011f2 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d9b9      	bls.n	8001164 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <IMU_get_temp>:
        return accel[2];
    } else {
        return 0;
    }
}
float IMU_get_temp(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <IMU_get_temp+0x1c>)
 8001206:	4906      	ldr	r1, [pc, #24]	@ (8001220 <IMU_get_temp+0x20>)
 8001208:	4806      	ldr	r0, [pc, #24]	@ (8001224 <IMU_get_temp+0x24>)
 800120a:	f000 f80d 	bl	8001228 <BMI088_read>
	return temp;
 800120e:	4b03      	ldr	r3, [pc, #12]	@ (800121c <IMU_get_temp+0x1c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	ee07 3a90 	vmov	s15, r3
}
 8001216:	eeb0 0a67 	vmov.f32	s0, s15
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000026c 	.word	0x2000026c
 8001220:	20000260 	.word	0x20000260
 8001224:	20000254 	.word	0x20000254

08001228 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800123e:	f7ff fef1 	bl	8001024 <BMI088_ACCEL_NS_L>
 8001242:	2092      	movs	r0, #146	@ 0x92
 8001244:	f7ff ff2e 	bl	80010a4 <BMI088_read_write_byte>
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2206      	movs	r2, #6
 800124e:	4619      	mov	r1, r3
 8001250:	2012      	movs	r0, #18
 8001252:	f000 f8ff 	bl	8001454 <BMI088_read_muli_reg>
 8001256:	f7ff fef5 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 800125a:	7d7b      	ldrb	r3, [r7, #21]
 800125c:	b21b      	sxth	r3, r3
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7d3b      	ldrb	r3, [r7, #20]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800126a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001276:	4b5f      	ldr	r3, [pc, #380]	@ (80013f4 <BMI088_read+0x1cc>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	b21b      	sxth	r3, r3
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <BMI088_read+0x1cc>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3304      	adds	r3, #4
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80012b4:	7e7b      	ldrb	r3, [r7, #25]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80012c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d0:	4b48      	ldr	r3, [pc, #288]	@ (80013f4 <BMI088_read+0x1cc>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3308      	adds	r3, #8
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80012e2:	f7ff febf 	bl	8001064 <BMI088_GYRO_NS_L>
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2208      	movs	r2, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f8b0 	bl	8001454 <BMI088_read_muli_reg>
 80012f4:	f7ff fec6 	bl	8001084 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80012f8:	7d3b      	ldrb	r3, [r7, #20]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d143      	bne.n	8001386 <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	b21b      	sxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	7dbb      	ldrb	r3, [r7, #22]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800130e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <BMI088_read+0x1d0>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800132a:	7e7b      	ldrb	r3, [r7, #25]
 800132c:	b21b      	sxth	r3, r3
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	7e3b      	ldrb	r3, [r7, #24]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800133a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMI088_read+0x1d0>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3304      	adds	r3, #4
 8001350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001354:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8001358:	7efb      	ldrb	r3, [r7, #27]
 800135a:	b21b      	sxth	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7ebb      	ldrb	r3, [r7, #26]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001368:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001374:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <BMI088_read+0x1d0>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3308      	adds	r3, #8
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001386:	f7ff fe4d 	bl	8001024 <BMI088_ACCEL_NS_L>
 800138a:	20a2      	movs	r0, #162	@ 0xa2
 800138c:	f7ff fe8a 	bl	80010a4 <BMI088_read_write_byte>
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2202      	movs	r2, #2
 8001396:	4619      	mov	r1, r3
 8001398:	2022      	movs	r0, #34	@ 0x22
 800139a:	f000 f85b 	bl	8001454 <BMI088_read_muli_reg>
 800139e:	f7ff fe51 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80013a2:	7d3b      	ldrb	r3, [r7, #20]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	095b      	lsrs	r3, r3, #5
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80013b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013be:	db04      	blt.n	80013ca <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 80013c0:	8bfb      	ldrh	r3, [r7, #30]
 80013c2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80013ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d6:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80013e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edc3 7a00 	vstr	s15, [r3]
}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000010 	.word	0x20000010
 80013f8:	20000014 	.word	0x20000014

080013fc <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe48 	bl	80010a4 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe44 	bl	80010a4 <BMI088_read_write_byte>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe33 	bl	80010a4 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 800143e:	2055      	movs	r0, #85	@ 0x55
 8001440:	f7ff fe30 	bl	80010a4 <BMI088_read_write_byte>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe19 	bl	80010a4 <BMI088_read_write_byte>

    while (len != 0)
 8001472:	e00c      	b.n	800148e <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001474:	2055      	movs	r0, #85	@ 0x55
 8001476:	f7ff fe15 	bl	80010a4 <BMI088_read_write_byte>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	701a      	strb	r2, [r3, #0]
        buf++;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	603b      	str	r3, [r7, #0]
        len--;
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	3b01      	subs	r3, #1
 800148c:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ef      	bne.n	8001474 <BMI088_read_muli_reg+0x20>
    }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 80014a4:	f001 fbaa 	bl	8002bfc <getDR16_S2>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d13b      	bne.n	8001526 <CAL_Update+0x86>
		isWPressed = getDR16_W();
 80014ae:	f001 fbb3 	bl	8002c18 <getDR16_W>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b90      	ldr	r3, [pc, #576]	@ (80016f8 <CAL_Update+0x258>)
 80014b8:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 80014ba:	f001 fbc9 	bl	8002c50 <getDR16_A>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b8e      	ldr	r3, [pc, #568]	@ (80016fc <CAL_Update+0x25c>)
 80014c4:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 80014c6:	f001 fbb5 	bl	8002c34 <getDR16_S>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001700 <CAL_Update+0x260>)
 80014d0:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 80014d2:	f001 fbcb 	bl	8002c6c <getDR16_D>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b8a      	ldr	r3, [pc, #552]	@ (8001704 <CAL_Update+0x264>)
 80014dc:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 80014de:	f001 fbd3 	bl	8002c88 <getDR16_MouseX>
 80014e2:	4603      	mov	r3, r0
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	ee17 3a90 	vmov	r3, s15
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b82      	ldr	r3, [pc, #520]	@ (8001708 <CAL_Update+0x268>)
 8001500:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 8001502:	f001 fbcd 	bl	8002ca0 <getDR16_MouseY>
 8001506:	4603      	mov	r3, r0
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151c:	ee17 3a90 	vmov	r3, s15
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <CAL_Update+0x26c>)
 8001524:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 8001526:	4b74      	ldr	r3, [pc, #464]	@ (80016f8 <CAL_Update+0x258>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d115      	bne.n	800155a <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 800152e:	4b78      	ldr	r3, [pc, #480]	@ (8001710 <CAL_Update+0x270>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	b29a      	uxth	r2, r3
 8001536:	2305      	movs	r3, #5
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b73      	ldr	r3, [pc, #460]	@ (8001710 <CAL_Update+0x270>)
 8001542:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 8001544:	4b72      	ldr	r3, [pc, #456]	@ (8001710 <CAL_Update+0x270>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800154e:	dd1c      	ble.n	800158a <CAL_Update+0xea>
			wCounter = 660;
 8001550:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <CAL_Update+0x270>)
 8001552:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001556:	801a      	strh	r2, [r3, #0]
 8001558:	e017      	b.n	800158a <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 800155a:	4b6d      	ldr	r3, [pc, #436]	@ (8001710 <CAL_Update+0x270>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	2b00      	cmp	r3, #0
 8001562:	dd0a      	ble.n	800157a <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 8001564:	4b6a      	ldr	r3, [pc, #424]	@ (8001710 <CAL_Update+0x270>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	b29a      	uxth	r2, r3
 800156c:	230a      	movs	r3, #10
 800156e:	b29b      	uxth	r3, r3
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b66      	ldr	r3, [pc, #408]	@ (8001710 <CAL_Update+0x270>)
 8001578:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 800157a:	4b65      	ldr	r3, [pc, #404]	@ (8001710 <CAL_Update+0x270>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <CAL_Update+0xea>
			wCounter = 0;
 8001584:	4b62      	ldr	r3, [pc, #392]	@ (8001710 <CAL_Update+0x270>)
 8001586:	2200      	movs	r2, #0
 8001588:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 800158a:	4b5e      	ldr	r3, [pc, #376]	@ (8001704 <CAL_Update+0x264>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d115      	bne.n	80015be <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 8001592:	4b60      	ldr	r3, [pc, #384]	@ (8001714 <CAL_Update+0x274>)
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	b29a      	uxth	r2, r3
 800159a:	2305      	movs	r3, #5
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <CAL_Update+0x274>)
 80015a6:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 80015a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001714 <CAL_Update+0x274>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80015b2:	dd1c      	ble.n	80015ee <CAL_Update+0x14e>
			dCounter = 660;
 80015b4:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <CAL_Update+0x274>)
 80015b6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	e017      	b.n	80015ee <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 80015be:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <CAL_Update+0x274>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd0a      	ble.n	80015de <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 80015c8:	4b52      	ldr	r3, [pc, #328]	@ (8001714 <CAL_Update+0x274>)
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	230a      	movs	r3, #10
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <CAL_Update+0x274>)
 80015dc:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 80015de:	4b4d      	ldr	r3, [pc, #308]	@ (8001714 <CAL_Update+0x274>)
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da02      	bge.n	80015ee <CAL_Update+0x14e>
			dCounter = 0;
 80015e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <CAL_Update+0x274>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 80015ee:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <CAL_Update+0x260>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d115      	bne.n	8001622 <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 80015f6:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <CAL_Update+0x278>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	2305      	movs	r3, #5
 8001600:	b29b      	uxth	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <CAL_Update+0x278>)
 800160a:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 800160c:	4b42      	ldr	r3, [pc, #264]	@ (8001718 <CAL_Update+0x278>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001616:	dd1c      	ble.n	8001652 <CAL_Update+0x1b2>
			sCounter = 660;
 8001618:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <CAL_Update+0x278>)
 800161a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	e017      	b.n	8001652 <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <CAL_Update+0x278>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	dd0a      	ble.n	8001642 <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 800162c:	4b3a      	ldr	r3, [pc, #232]	@ (8001718 <CAL_Update+0x278>)
 800162e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001632:	b29a      	uxth	r2, r3
 8001634:	230a      	movs	r3, #10
 8001636:	b29b      	uxth	r3, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <CAL_Update+0x278>)
 8001640:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <CAL_Update+0x278>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	2b00      	cmp	r3, #0
 800164a:	da02      	bge.n	8001652 <CAL_Update+0x1b2>
			sCounter = 0;
 800164c:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <CAL_Update+0x278>)
 800164e:	2200      	movs	r2, #0
 8001650:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <CAL_Update+0x25c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d115      	bne.n	8001686 <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 800165a:	4b30      	ldr	r3, [pc, #192]	@ (800171c <CAL_Update+0x27c>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	b29a      	uxth	r2, r3
 8001662:	2305      	movs	r3, #5
 8001664:	b29b      	uxth	r3, r3
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <CAL_Update+0x27c>)
 800166e:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 8001670:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <CAL_Update+0x27c>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800167a:	dd1c      	ble.n	80016b6 <CAL_Update+0x216>
			aCounter = 660;
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <CAL_Update+0x27c>)
 800167e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e017      	b.n	80016b6 <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <CAL_Update+0x27c>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd0a      	ble.n	80016a6 <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <CAL_Update+0x27c>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	b29a      	uxth	r2, r3
 8001698:	230a      	movs	r3, #10
 800169a:	b29b      	uxth	r3, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <CAL_Update+0x27c>)
 80016a4:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <CAL_Update+0x27c>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da02      	bge.n	80016b6 <CAL_Update+0x216>
			aCounter = 0;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <CAL_Update+0x27c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <CAL_Update+0x268>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016c0:	dd04      	ble.n	80016cc <CAL_Update+0x22c>
		mouseX = 660;
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <CAL_Update+0x268>)
 80016c4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	e009      	b.n	80016e0 <CAL_Update+0x240>
	}else if(mouseX<-660){
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <CAL_Update+0x268>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80016d6:	da03      	bge.n	80016e0 <CAL_Update+0x240>
		mouseX = -660;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <CAL_Update+0x268>)
 80016da:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80016de:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <CAL_Update+0x26c>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016ea:	dd19      	ble.n	8001720 <CAL_Update+0x280>
		mouseY = 660;
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <CAL_Update+0x26c>)
 80016ee:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	e01e      	b.n	8001734 <CAL_Update+0x294>
 80016f6:	bf00      	nop
 80016f8:	200002ac 	.word	0x200002ac
 80016fc:	200002ad 	.word	0x200002ad
 8001700:	200002ae 	.word	0x200002ae
 8001704:	200002af 	.word	0x200002af
 8001708:	200002b8 	.word	0x200002b8
 800170c:	200002ba 	.word	0x200002ba
 8001710:	200002b0 	.word	0x200002b0
 8001714:	200002b6 	.word	0x200002b6
 8001718:	200002b4 	.word	0x200002b4
 800171c:	200002b2 	.word	0x200002b2
	}else if(mouseY<-660){
 8001720:	4b4f      	ldr	r3, [pc, #316]	@ (8001860 <CAL_Update+0x3c0>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800172a:	da03      	bge.n	8001734 <CAL_Update+0x294>
		mouseY = -660;
 800172c:	4b4c      	ldr	r3, [pc, #304]	@ (8001860 <CAL_Update+0x3c0>)
 800172e:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001732:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 8001734:	f001 f9f2 	bl	8002b1c <getDR16_CH0>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <CAL_Update+0x3c4>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <CAL_Update+0x3c8>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	b29b      	uxth	r3, r3
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	b29b      	uxth	r3, r3
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b45      	ldr	r3, [pc, #276]	@ (800186c <CAL_Update+0x3cc>)
 8001758:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 800175a:	f001 f9fb 	bl	8002b54 <getDR16_CH1>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <CAL_Update+0x3d0>)
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <CAL_Update+0x3d4>)
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	b29b      	uxth	r3, r3
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b3e      	ldr	r3, [pc, #248]	@ (8001878 <CAL_Update+0x3d8>)
 800177e:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 8001780:	f001 fa04 	bl	8002b8c <getDR16_CH2>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <CAL_Update+0x3dc>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <CAL_Update+0x3e0>)
 8001798:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 800179a:	f001 fa13 	bl	8002bc4 <getDR16_CH3>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <CAL_Update+0x3c0>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <CAL_Update+0x3e4>)
 80017b2:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 80017b4:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <CAL_Update+0x3cc>)
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80017be:	dd04      	ble.n	80017ca <CAL_Update+0x32a>
		CAL_CH0 = 660;
 80017c0:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <CAL_Update+0x3cc>)
 80017c2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80017c6:	801a      	strh	r2, [r3, #0]
 80017c8:	e009      	b.n	80017de <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 80017ca:	4b28      	ldr	r3, [pc, #160]	@ (800186c <CAL_Update+0x3cc>)
 80017cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d0:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80017d4:	da03      	bge.n	80017de <CAL_Update+0x33e>
		CAL_CH0 = -660;
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <CAL_Update+0x3cc>)
 80017d8:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80017dc:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <CAL_Update+0x3d8>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80017e8:	dd04      	ble.n	80017f4 <CAL_Update+0x354>
		CAL_CH1 = 660;
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <CAL_Update+0x3d8>)
 80017ec:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80017f0:	801a      	strh	r2, [r3, #0]
 80017f2:	e009      	b.n	8001808 <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <CAL_Update+0x3d8>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80017fe:	da03      	bge.n	8001808 <CAL_Update+0x368>
		CAL_CH1 = -660;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <CAL_Update+0x3d8>)
 8001802:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001806:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <CAL_Update+0x3e0>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001812:	dd04      	ble.n	800181e <CAL_Update+0x37e>
		CAL_CH2 = 660;
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <CAL_Update+0x3e0>)
 8001816:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e009      	b.n	8001832 <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <CAL_Update+0x3e0>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001828:	da03      	bge.n	8001832 <CAL_Update+0x392>
		CAL_CH2 = -660;
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <CAL_Update+0x3e0>)
 800182c:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001830:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <CAL_Update+0x3e4>)
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800183c:	dd04      	ble.n	8001848 <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <CAL_Update+0x3e4>)
 8001840:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001844:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 8001846:	e009      	b.n	800185c <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <CAL_Update+0x3e4>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001852:	da03      	bge.n	800185c <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <CAL_Update+0x3e4>)
 8001856:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800185a:	801a      	strh	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200002ba 	.word	0x200002ba
 8001864:	200002b6 	.word	0x200002b6
 8001868:	200002b2 	.word	0x200002b2
 800186c:	20000270 	.word	0x20000270
 8001870:	200002b0 	.word	0x200002b0
 8001874:	200002b4 	.word	0x200002b4
 8001878:	20000272 	.word	0x20000272
 800187c:	200002b8 	.word	0x200002b8
 8001880:	20000274 	.word	0x20000274
 8001884:	20000276 	.word	0x20000276

08001888 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 80018ba:	f001 f99f 	bl	8002bfc <getDR16_S2>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d004      	beq.n	80018ce <PC_CONTROL_RxEventCallback+0x32>
 80018c4:	f001 f99a 	bl	8002bfc <getDR16_S2>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d16a      	bne.n	80019a4 <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e6:	ee17 3a90 	vmov	r3, s15
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <PC_CONTROL_RxEventCallback+0x110>)
 80018ee:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001908:	ee17 3a90 	vmov	r3, s15
 800190c:	b21a      	sxth	r2, r3
 800190e:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <PC_CONTROL_RxEventCallback+0x114>)
 8001910:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <PC_CONTROL_RxEventCallback+0x118>)
 8001918:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 800191a:	4a27      	ldr	r2, [pc, #156]	@ (80019b8 <PC_CONTROL_RxEventCallback+0x11c>)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 8001920:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <PC_CONTROL_RxEventCallback+0x120>)
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <PC_CONTROL_RxEventCallback+0x124>)
 8001928:	7f3b      	ldrb	r3, [r7, #28]
 800192a:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 800192c:	4a25      	ldr	r2, [pc, #148]	@ (80019c4 <PC_CONTROL_RxEventCallback+0x128>)
 800192e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001932:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 8001934:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <PC_CONTROL_RxEventCallback+0x12c>)
 8001936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800193a:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 800193c:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <PC_CONTROL_RxEventCallback+0x130>)
 800193e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001942:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 8001944:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <PC_CONTROL_RxEventCallback+0x134>)
 8001946:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800194a:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <PC_CONTROL_RxEventCallback+0x138>)
 800194e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001952:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <PC_CONTROL_RxEventCallback+0x13c>)
 8001956:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800195a:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 800195c:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <PC_CONTROL_RxEventCallback+0x140>)
 800195e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001962:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <PC_CONTROL_RxEventCallback+0x144>)
 8001966:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800196a:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <PC_CONTROL_RxEventCallback+0x148>)
 800196e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001972:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 8001974:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <PC_CONTROL_RxEventCallback+0x14c>)
 8001976:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800197a:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <PC_CONTROL_RxEventCallback+0x150>)
 800197e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001982:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 8001984:	4a1a      	ldr	r2, [pc, #104]	@ (80019f0 <PC_CONTROL_RxEventCallback+0x154>)
 8001986:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800198a:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <PC_CONTROL_RxEventCallback+0x158>)
 800198e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001992:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 8001994:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <PC_CONTROL_RxEventCallback+0x15c>)
 8001996:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800199a:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <PC_CONTROL_RxEventCallback+0x160>)
 800199e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80019a2:	7013      	strb	r3, [r2, #0]
	}
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	200002ba 	.word	0x200002ba
 80019b0:	200002b8 	.word	0x200002b8
 80019b4:	20000286 	.word	0x20000286
 80019b8:	20000284 	.word	0x20000284
 80019bc:	20000285 	.word	0x20000285
 80019c0:	200002ac 	.word	0x200002ac
 80019c4:	200002ad 	.word	0x200002ad
 80019c8:	200002ae 	.word	0x200002ae
 80019cc:	200002af 	.word	0x200002af
 80019d0:	20000278 	.word	0x20000278
 80019d4:	20000279 	.word	0x20000279
 80019d8:	2000027a 	.word	0x2000027a
 80019dc:	2000027b 	.word	0x2000027b
 80019e0:	2000027c 	.word	0x2000027c
 80019e4:	2000027d 	.word	0x2000027d
 80019e8:	2000027e 	.word	0x2000027e
 80019ec:	2000027f 	.word	0x2000027f
 80019f0:	20000280 	.word	0x20000280
 80019f4:	20000281 	.word	0x20000281
 80019f8:	20000282 	.word	0x20000282
 80019fc:	20000283 	.word	0x20000283

08001a00 <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	4603      	mov	r3, r0
 8001a14:	71bb      	strb	r3, [r7, #6]
 8001a16:	460b      	mov	r3, r1
 8001a18:	717b      	strb	r3, [r7, #5]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <GAME_STATUS_RxEventCallback+0x54>)
 8001a22:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 8001a24:	79ba      	ldrb	r2, [r7, #6]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <GAME_STATUS_RxEventCallback+0x58>)
 8001a28:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
	memcpy(&txData[1],&game_type,1);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[0],&current_stage,1);
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	723b      	strb	r3, [r7, #8]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	461a      	mov	r2, r3
 8001a44:	f240 2111 	movw	r1, #529	@ 0x211
 8001a48:	f000 faf6 	bl	8002038 <CAN_transmit>
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	20000287 	.word	0x20000287
 8001a58:	20000288 	.word	0x20000288

08001a5c <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	460b      	mov	r3, r1
 8001a74:	80bb      	strh	r3, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <ROBOT_STATUS_RxEventCallback+0x74>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 8001a80:	79ba      	ldrb	r2, [r7, #6]
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <ROBOT_STATUS_RxEventCallback+0x78>)
 8001a84:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 8001a86:	8c3a      	ldrh	r2, [r7, #32]
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <ROBOT_STATUS_RxEventCallback+0x7c>)
 8001a8a:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 8001a8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <ROBOT_STATUS_RxEventCallback+0x80>)
 8001a90:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 8001a92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <ROBOT_STATUS_RxEventCallback+0x84>)
 8001a96:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 8001aaa:	8c3b      	ldrh	r3, [r7, #32]
 8001aac:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 8001aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ab0:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 8001ab2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ab4:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	461a      	mov	r2, r3
 8001abe:	f240 2112 	movw	r1, #530	@ 0x212
 8001ac2:	f000 fab9 	bl	8002038 <CAN_transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000292 	.word	0x20000292
 8001ad4:	20000293 	.word	0x20000293
 8001ad8:	20000294 	.word	0x20000294
 8001adc:	20000298 	.word	0x20000298
 8001ae0:	20000296 	.word	0x20000296

08001ae4 <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <POWER_HEAT_DATA_RxEventCallback+0x68>)
 8001b06:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 8001b08:	88ba      	ldrh	r2, [r7, #4]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 8001b0c:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <POWER_HEAT_DATA_RxEventCallback+0x70>)
 8001b12:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <POWER_HEAT_DATA_RxEventCallback+0x74>)
 8001b18:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 8001b30:	883b      	ldrh	r3, [r7, #0]
 8001b32:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 8001b34:	2002      	movs	r0, #2
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f240 2113 	movw	r1, #531	@ 0x213
 8001b40:	f000 fa7a 	bl	8002038 <CAN_transmit>
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	2000028a 	.word	0x2000028a
 8001b50:	2000028c 	.word	0x2000028c
 8001b54:	2000028e 	.word	0x2000028e
 8001b58:	20000290 	.word	0x20000290

08001b5c <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	switch(StdId){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	f200 8117 	bhi.w	8001da0 <CAN_RxEventCallbackPT+0x244>
 8001b72:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <CAN_RxEventCallbackPT+0x1c>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001b89 	.word	0x08001b89
 8001b7c:	08001b9d 	.word	0x08001b9d
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001c05 	.word	0x08001c05
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b87      	ldr	r3, [pc, #540]	@ (8001dac <CAN_RxEventCallbackPT+0x250>)
 8001b8e:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b86      	ldr	r3, [pc, #536]	@ (8001db0 <CAN_RxEventCallbackPT+0x254>)
 8001b98:	701a      	strb	r2, [r3, #0]
			break;
 8001b9a:	e102      	b.n	8001da2 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b84      	ldr	r3, [pc, #528]	@ (8001db4 <CAN_RxEventCallbackPT+0x258>)
 8001ba2:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b83      	ldr	r3, [pc, #524]	@ (8001db8 <CAN_RxEventCallbackPT+0x25c>)
 8001bac:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b81      	ldr	r3, [pc, #516]	@ (8001dbc <CAN_RxEventCallbackPT+0x260>)
 8001bb8:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc0 <CAN_RxEventCallbackPT+0x264>)
 8001bc4:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3306      	adds	r3, #6
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc4 <CAN_RxEventCallbackPT+0x268>)
 8001bd0:	801a      	strh	r2, [r3, #0]
			break;
 8001bd2:	e0e6      	b.n	8001da2 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <CAN_RxEventCallbackPT+0x26c>)
 8001bdc:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3302      	adds	r3, #2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b79      	ldr	r3, [pc, #484]	@ (8001dcc <CAN_RxEventCallbackPT+0x270>)
 8001be8:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b77      	ldr	r3, [pc, #476]	@ (8001dd0 <CAN_RxEventCallbackPT+0x274>)
 8001bf4:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3306      	adds	r3, #6
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b75      	ldr	r3, [pc, #468]	@ (8001dd4 <CAN_RxEventCallbackPT+0x278>)
 8001c00:	801a      	strh	r2, [r3, #0]
			break;
 8001c02:	e0ce      	b.n	8001da2 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
 8001c04:	2300      	movs	r3, #0
 8001c06:	83bb      	strh	r3, [r7, #28]
			frontBackBuff[0] = rxData[0];
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	773b      	strb	r3, [r7, #28]
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2204      	movs	r2, #4
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f8eb 	bl	8001df4 <CAL_getBits>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 8001c22:	8bba      	ldrh	r2, [r7, #28]
 8001c24:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd8 <CAN_RxEventCallbackPT+0x27c>)
 8001c26:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <CAN_RxEventCallbackPT+0x27c>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b67      	ldr	r3, [pc, #412]	@ (8001dd8 <CAN_RxEventCallbackPT+0x27c>)
 8001c3a:	801a      	strh	r2, [r3, #0]

			uint8_t rightLeftBuff[2] = {0};
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	833b      	strh	r3, [r7, #24]
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2204      	movs	r2, #4
 8001c48:	2104      	movs	r1, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8d2 	bl	8001df4 <CAL_getBits>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b25c      	sxtb	r4, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	3302      	adds	r3, #2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f8c8 	bl	8001df4 <CAL_getBits>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	4323      	orrs	r3, r4
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	763b      	strb	r3, [r7, #24]
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3302      	adds	r3, #2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f8b8 	bl	8001df4 <CAL_getBits>
 8001c84:	4603      	mov	r3, r0
 8001c86:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 8001c88:	8b3a      	ldrh	r2, [r7, #24]
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <CAN_RxEventCallbackPT+0x280>)
 8001c8c:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 8001c8e:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <CAN_RxEventCallbackPT+0x280>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <CAN_RxEventCallbackPT+0x280>)
 8001ca0:	801a      	strh	r2, [r3, #0]

			uint8_t chassisSpinBuff[2] = {0};
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	82bb      	strh	r3, [r7, #20]
			chassisSpinBuff[0] = rxData[3];
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	753b      	strb	r3, [r7, #20]
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f89c 	bl	8001df4 <CAL_getBits>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 8001cc0:	8aba      	ldrh	r2, [r7, #20]
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <CAN_RxEventCallbackPT+0x284>)
 8001cc4:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <CAN_RxEventCallbackPT+0x284>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4b42      	ldr	r3, [pc, #264]	@ (8001de0 <CAN_RxEventCallbackPT+0x284>)
 8001cd8:	801a      	strh	r2, [r3, #0]

			uint8_t turretSpinBuff[2] = {0};
 8001cda:	2300      	movs	r3, #0
 8001cdc:	823b      	strh	r3, [r7, #16]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f883 	bl	8001df4 <CAL_getBits>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b25c      	sxtb	r4, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3305      	adds	r3, #5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f879 	bl	8001df4 <CAL_getBits>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	4323      	orrs	r3, r4
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	743b      	strb	r3, [r7, #16]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3305      	adds	r3, #5
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f869 	bl	8001df4 <CAL_getBits>
 8001d22:	4603      	mov	r3, r0
 8001d24:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 8001d26:	8a3a      	ldrh	r2, [r7, #16]
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <CAN_RxEventCallbackPT+0x288>)
 8001d2a:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001de4 <CAN_RxEventCallbackPT+0x288>)
 8001d2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d32:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <CAN_RxEventCallbackPT+0x288>)
 8001d34:	801a      	strh	r2, [r3, #0]

			uint8_t currentGyroBuff[2] = {0};
 8001d36:	2300      	movs	r3, #0
 8001d38:	81bb      	strh	r3, [r7, #12]
			currentGyroBuff[0] = rxData[6];
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	799b      	ldrb	r3, [r3, #6]
 8001d3e:	733b      	strb	r3, [r7, #12]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3307      	adds	r3, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f852 	bl	8001df4 <CAL_getBits>
 8001d50:	4603      	mov	r3, r0
 8001d52:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 8001d54:	89ba      	ldrh	r2, [r7, #12]
 8001d56:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <CAN_RxEventCallbackPT+0x28c>)
 8001d58:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <CAN_RxEventCallbackPT+0x28c>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <CAN_RxEventCallbackPT+0x28c>)
 8001d6c:	801a      	strh	r2, [r3, #0]

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3307      	adds	r3, #7
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	2104      	movs	r1, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f83b 	bl	8001df4 <CAL_getBits>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <CAN_RxEventCallbackPT+0x290>)
 8001d84:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	2105      	movs	r1, #5
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f82f 	bl	8001df4 <CAL_getBits>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <CAN_RxEventCallbackPT+0x294>)
 8001d9c:	701a      	strb	r2, [r3, #0]
			break;
 8001d9e:	e000      	b.n	8001da2 <CAN_RxEventCallbackPT+0x246>
		}
		default:{

			break;
 8001da0:	bf00      	nop
		}
	}
}
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000287 	.word	0x20000287
 8001db0:	20000288 	.word	0x20000288
 8001db4:	20000292 	.word	0x20000292
 8001db8:	20000293 	.word	0x20000293
 8001dbc:	20000294 	.word	0x20000294
 8001dc0:	20000298 	.word	0x20000298
 8001dc4:	20000296 	.word	0x20000296
 8001dc8:	2000028a 	.word	0x2000028a
 8001dcc:	2000028c 	.word	0x2000028c
 8001dd0:	2000028e 	.word	0x2000028e
 8001dd4:	20000290 	.word	0x20000290
 8001dd8:	200002a0 	.word	0x200002a0
 8001ddc:	200002a2 	.word	0x200002a2
 8001de0:	200002a4 	.word	0x200002a4
 8001de4:	200002a6 	.word	0x200002a6
 8001de8:	200002a8 	.word	0x200002a8
 8001dec:	200002aa 	.word	0x200002aa
 8001df0:	200002ab 	.word	0x200002ab

08001df4 <CAL_getBits>:

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	71bb      	strb	r3, [r7, #6]
 8001e02:	4613      	mov	r3, r2
 8001e04:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]
 8001e0e:	e013      	b.n	8001e38 <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	79b9      	ldrb	r1, [r7, #6]
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	440b      	add	r3, r1
 8001e18:	fa42 f303 	asr.w	r3, r2, r3
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	b25a      	sxtb	r2, r3
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	3301      	adds	r3, #1
 8001e36:	73bb      	strb	r3, [r7, #14]
 8001e38:	7bba      	ldrb	r2, [r7, #14]
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3e7      	bcc.n	8001e10 <CAL_getBits+0x1c>
	}
	return result;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <PROJECTILE_INFO_RxEventCallback>:

void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	ed87 0a00 	vstr	s0, [r7]
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	4613      	mov	r3, r2
 8001e64:	717b      	strb	r3, [r7, #5]
	CAL_initialSpeed = initial_speed;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <PROJECTILE_INFO_RxEventCallback+0x28>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	2000029c 	.word	0x2000029c

08001e7c <CAL_getBufferEnergy>:

uint8_t CAL_getCurrentStage(){
	return CAL_current_stage;
}

uint16_t CAL_getBufferEnergy(){
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	return CAL_buffer_energy;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <CAL_getBufferEnergy+0x14>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000028a 	.word	0x2000028a

08001e94 <CAL_getFrontBack>:

uint16_t CAL_getHeatLimit(){
	return CAL_shooter_barrel_heat_limit;
}

int16_t CAL_getFrontBack(){
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	return CAL_FrontBack;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <CAL_getFrontBack+0x14>)
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	200002a0 	.word	0x200002a0

08001eac <CAL_getRightLeft>:

int16_t CAL_getRightLeft(){
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	return CAL_RightLeft;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <CAL_getRightLeft+0x14>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	200002a2 	.word	0x200002a2

08001ec4 <CAL_getChassisSpin>:

int16_t CAL_getChassisSpin(){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	return CAL_ChassisSpin;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <CAL_getChassisSpin+0x14>)
 8001eca:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	200002a4 	.word	0x200002a4

08001edc <CAL_getInitialSpeed>:

uint8_t CAL_getFireMode(){
	return CAL_FireMode;
}

float CAL_getInitialSpeed(){
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return CAL_initialSpeed;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <CAL_getInitialSpeed+0x18>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	ee07 3a90 	vmov	s15, r3
}
 8001ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	2000029c 	.word	0x2000029c

08001ef8 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	@ 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	f107 0210 	add.w	r2, r7, #16
 8001f08:	2100      	movs	r1, #0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f005 f99e 	bl	800724c <HAL_CAN_GetRxMessage>
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);


    // UART_Printf(&huart1, "%X\r\n", rx_header.StdId);

    switch (rx_header.StdId) {
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001f16:	2b0a      	cmp	r3, #10
 8001f18:	d87a      	bhi.n	8002010 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a41      	ldr	r2, [pc, #260]	@ (800202c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d134      	bne.n	8001f96 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001f2c:	7a3b      	ldrb	r3, [r7, #8]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	7a7b      	ldrb	r3, [r7, #9]
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f40:	b291      	uxth	r1, r2
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001f44:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001f48:	7abb      	ldrb	r3, [r7, #10]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b219      	sxth	r1, r3
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	b211      	sxth	r1, r2
 8001f5c:	4a34      	ldr	r2, [pc, #208]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	460a      	mov	r2, r1
 8001f64:	805a      	strh	r2, [r3, #2]
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b219      	sxth	r1, r3
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f76:	430a      	orrs	r2, r1
 8001f78:	b211      	sxth	r1, r2
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	460a      	mov	r2, r1
 8001f82:	809a      	strh	r2, [r3, #4]
 8001f84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f88:	7bb9      	ldrb	r1, [r7, #14]
 8001f8a:	4a29      	ldr	r2, [pc, #164]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	460a      	mov	r2, r1
 8001f92:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001f94:	e044      	b.n	8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d140      	bne.n	8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001f9e:	7a3b      	ldrb	r3, [r7, #8]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	7a7b      	ldrb	r3, [r7, #9]
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fb2:	b291      	uxth	r1, r2
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001fb6:	330b      	adds	r3, #11
 8001fb8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b219      	sxth	r1, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	b211      	sxth	r1, r2
 8001fd0:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001fd2:	330b      	adds	r3, #11
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	460a      	mov	r2, r1
 8001fda:	805a      	strh	r2, [r3, #2]
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b219      	sxth	r1, r3
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fec:	430a      	orrs	r2, r1
 8001fee:	b211      	sxth	r1, r2
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001ff2:	330b      	adds	r3, #11
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	809a      	strh	r2, [r3, #4]
 8001ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002000:	7bb9      	ldrb	r1, [r7, #14]
 8002002:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002004:	330b      	adds	r3, #11
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	460a      	mov	r2, r1
 800200c:	719a      	strb	r2, [r3, #6]
            break;
 800200e:	e007      	b.n	8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fd9f 	bl	8001b5c <CAN_RxEventCallbackPT>
            break;
 800201e:	e000      	b.n	8002022 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 8002020:	bf00      	nop
        }
    }
}
 8002022:	bf00      	nop
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000b88 	.word	0x20000b88
 8002030:	20000324 	.word	0x20000324
 8002034:	20000bb0 	.word	0x20000bb0

08002038 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	603a      	str	r2, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	460b      	mov	r3, r1
 8002046:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <CAN_transmit+0x58>)
 800204c:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <CAN_transmit+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8002054:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <CAN_transmit+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <CAN_transmit+0x58>)
 800205c:	2208      	movs	r2, #8
 800205e:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4908      	ldr	r1, [pc, #32]	@ (8002090 <CAN_transmit+0x58>)
 800206e:	4809      	ldr	r0, [pc, #36]	@ (8002094 <CAN_transmit+0x5c>)
 8002070:	f005 f81c 	bl	80070ac <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d106      	bne.n	8002088 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4903      	ldr	r1, [pc, #12]	@ (8002090 <CAN_transmit+0x58>)
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <CAN_transmit+0x60>)
 8002084:	f005 f812 	bl	80070ac <HAL_CAN_AddTxMessage>
	}
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200002bc 	.word	0x200002bc
 8002094:	20000b88 	.word	0x20000b88
 8002098:	20000bb0 	.word	0x20000bb0

0800209c <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	4603      	mov	r3, r0
 80020b0:	80bb      	strh	r3, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]
 80020b6:	4613      	mov	r3, r2
 80020b8:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	@ (800215c <CAN_DriveMotor+0xc0>)
 80020be:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80020c0:	4b26      	ldr	r3, [pc, #152]	@ (800215c <CAN_DriveMotor+0xc0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <CAN_DriveMotor+0xc0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 80020cc:	4b23      	ldr	r3, [pc, #140]	@ (800215c <CAN_DriveMotor+0xc0>)
 80020ce:	2208      	movs	r2, #8
 80020d0:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 80020d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020d6:	121b      	asrs	r3, r3, #8
 80020d8:	b21b      	sxth	r3, r3
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <CAN_DriveMotor+0xc4>)
 80020de:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <CAN_DriveMotor+0xc4>)
 80020e6:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80020e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80020ec:	121b      	asrs	r3, r3, #8
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <CAN_DriveMotor+0xc4>)
 80020f4:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80020f6:	883b      	ldrh	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <CAN_DriveMotor+0xc4>)
 80020fc:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80020fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002102:	121b      	asrs	r3, r3, #8
 8002104:	b21b      	sxth	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <CAN_DriveMotor+0xc4>)
 800210a:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 800210c:	8c3b      	ldrh	r3, [r7, #32]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <CAN_DriveMotor+0xc4>)
 8002112:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8002114:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002118:	121b      	asrs	r3, r3, #8
 800211a:	b21b      	sxth	r3, r3
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <CAN_DriveMotor+0xc4>)
 8002120:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8002122:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <CAN_DriveMotor+0xc4>)
 8002128:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <CAN_DriveMotor+0xc4>)
 8002136:	4909      	ldr	r1, [pc, #36]	@ (800215c <CAN_DriveMotor+0xc0>)
 8002138:	480a      	ldr	r0, [pc, #40]	@ (8002164 <CAN_DriveMotor+0xc8>)
 800213a:	f004 ffb7 	bl	80070ac <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 800213e:	e009      	b.n	8002154 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d106      	bne.n	8002154 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <CAN_DriveMotor+0xc4>)
 800214c:	4903      	ldr	r1, [pc, #12]	@ (800215c <CAN_DriveMotor+0xc0>)
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <CAN_DriveMotor+0xcc>)
 8002150:	f004 ffac 	bl	80070ac <HAL_CAN_AddTxMessage>
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}
 800215c:	200002d4 	.word	0x200002d4
 8002160:	200002ec 	.word	0x200002ec
 8002164:	20000b88 	.word	0x20000b88
 8002168:	20000bb0 	.word	0x20000bb0

0800216c <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af02      	add	r7, sp, #8
 8002172:	4604      	mov	r4, r0
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4623      	mov	r3, r4
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	4603      	mov	r3, r0
 8002180:	71bb      	strb	r3, [r7, #6]
 8002182:	460b      	mov	r3, r1
 8002184:	717b      	strb	r3, [r7, #5]
 8002186:	4613      	mov	r3, r2
 8002188:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2b04      	cmp	r3, #4
 800218e:	f000 8142 	beq.w	8002416 <CAN_setMotorCtrlVal+0x2aa>
 8002192:	2b04      	cmp	r3, #4
 8002194:	f300 81e1 	bgt.w	800255a <CAN_setMotorCtrlVal+0x3ee>
 8002198:	2b02      	cmp	r3, #2
 800219a:	dc02      	bgt.n	80021a2 <CAN_setMotorCtrlVal+0x36>
 800219c:	2b00      	cmp	r3, #0
 800219e:	dc04      	bgt.n	80021aa <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80021a0:	e1db      	b.n	800255a <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	f000 8097 	beq.w	80022d6 <CAN_setMotorCtrlVal+0x16a>
}
 80021a8:	e1d7      	b.n	800255a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80021aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	dc02      	bgt.n	80021b8 <CAN_setMotorCtrlVal+0x4c>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dc05      	bgt.n	80021c2 <CAN_setMotorCtrlVal+0x56>
					break;
 80021b6:	e08c      	b.n	80022d2 <CAN_setMotorCtrlVal+0x166>
 80021b8:	3b05      	subs	r3, #5
			switch(motorID) {
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	f200 8089 	bhi.w	80022d2 <CAN_setMotorCtrlVal+0x166>
 80021c0:	e042      	b.n	8002248 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021ca:	1e59      	subs	r1, r3, #1
 80021cc:	48bd      	ldr	r0, [pc, #756]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	49b8      	ldr	r1, [pc, #736]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	49b3      	ldr	r1, [pc, #716]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	3302      	adds	r3, #2
 8002204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	49ad      	ldr	r1, [pc, #692]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3304      	adds	r3, #4
 800221a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	48a8      	ldr	r0, [pc, #672]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4403      	add	r3, r0
 800222e:	3306      	adds	r3, #6
 8002230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002234:	79f8      	ldrb	r0, [r7, #7]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	9100      	str	r1, [sp, #0]
 800223a:	462b      	mov	r3, r5
 800223c:	4622      	mov	r2, r4
 800223e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002242:	f7ff ff2b 	bl	800209c <CAN_DriveMotor>
					break;
 8002246:	e045      	b.n	80022d4 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002250:	1f59      	subs	r1, r3, #5
 8002252:	489c      	ldr	r0, [pc, #624]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3304      	adds	r3, #4
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	4996      	ldr	r1, [pc, #600]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3308      	adds	r3, #8
 8002278:	f9b3 4000 	ldrsh.w	r4, [r3]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	4990      	ldr	r1, [pc, #576]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	330a      	adds	r3, #10
 800228e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	498b      	ldr	r1, [pc, #556]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	330c      	adds	r3, #12
 80022a4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	4885      	ldr	r0, [pc, #532]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4403      	add	r3, r0
 80022b8:	330e      	adds	r3, #14
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	79f8      	ldrb	r0, [r7, #7]
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	9100      	str	r1, [sp, #0]
 80022c4:	462b      	mov	r3, r5
 80022c6:	4622      	mov	r2, r4
 80022c8:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80022cc:	f7ff fee6 	bl	800209c <CAN_DriveMotor>
					break;
 80022d0:	e000      	b.n	80022d4 <CAN_setMotorCtrlVal+0x168>
					break;
 80022d2:	bf00      	nop
			break;
 80022d4:	e141      	b.n	800255a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80022d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	f000 8097 	beq.w	800240e <CAN_setMotorCtrlVal+0x2a2>
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f300 8096 	bgt.w	8002412 <CAN_setMotorCtrlVal+0x2a6>
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	dc02      	bgt.n	80022f0 <CAN_setMotorCtrlVal+0x184>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dc05      	bgt.n	80022fa <CAN_setMotorCtrlVal+0x18e>
					break;
 80022ee:	e090      	b.n	8002412 <CAN_setMotorCtrlVal+0x2a6>
 80022f0:	3b05      	subs	r3, #5
			switch(motorID) {
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f200 808d 	bhi.w	8002412 <CAN_setMotorCtrlVal+0x2a6>
 80022f8:	e044      	b.n	8002384 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002302:	1e59      	subs	r1, r3, #1
 8002304:	486f      	ldr	r0, [pc, #444]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3304      	adds	r3, #4
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	4969      	ldr	r1, [pc, #420]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3308      	adds	r3, #8
 800232a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	4964      	ldr	r1, [pc, #400]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	330a      	adds	r3, #10
 8002340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	495e      	ldr	r1, [pc, #376]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	330c      	adds	r3, #12
 8002356:	f9b3 1000 	ldrsh.w	r1, [r3]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	4859      	ldr	r0, [pc, #356]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4403      	add	r3, r0
 800236a:	330e      	adds	r3, #14
 800236c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002370:	79f8      	ldrb	r0, [r7, #7]
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	9100      	str	r1, [sp, #0]
 8002376:	462b      	mov	r3, r5
 8002378:	4622      	mov	r2, r4
 800237a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800237e:	f7ff fe8d 	bl	800209c <CAN_DriveMotor>
					break;
 8002382:	e047      	b.n	8002414 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800238c:	1f59      	subs	r1, r3, #5
 800238e:	484d      	ldr	r0, [pc, #308]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3308      	adds	r3, #8
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	4947      	ldr	r1, [pc, #284]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3310      	adds	r3, #16
 80023b4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	4941      	ldr	r1, [pc, #260]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3312      	adds	r3, #18
 80023ca:	f9b3 5000 	ldrsh.w	r5, [r3]
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	493c      	ldr	r1, [pc, #240]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3314      	adds	r3, #20
 80023e0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	4836      	ldr	r0, [pc, #216]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4403      	add	r3, r0
 80023f4:	3316      	adds	r3, #22
 80023f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fa:	79f8      	ldrb	r0, [r7, #7]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9100      	str	r1, [sp, #0]
 8002400:	462b      	mov	r3, r5
 8002402:	4622      	mov	r2, r4
 8002404:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8002408:	f7ff fe48 	bl	800209c <CAN_DriveMotor>
					break;
 800240c:	e002      	b.n	8002414 <CAN_setMotorCtrlVal+0x2a8>
					break;
 800240e:	bf00      	nop
 8002410:	e0a3      	b.n	800255a <CAN_setMotorCtrlVal+0x3ee>
					break;
 8002412:	bf00      	nop
			break;
 8002414:	e0a1      	b.n	800255a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002416:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800241a:	2b08      	cmp	r3, #8
 800241c:	f000 8099 	beq.w	8002552 <CAN_setMotorCtrlVal+0x3e6>
 8002420:	2b08      	cmp	r3, #8
 8002422:	f300 8098 	bgt.w	8002556 <CAN_setMotorCtrlVal+0x3ea>
 8002426:	2b04      	cmp	r3, #4
 8002428:	dc02      	bgt.n	8002430 <CAN_setMotorCtrlVal+0x2c4>
 800242a:	2b00      	cmp	r3, #0
 800242c:	dc05      	bgt.n	800243a <CAN_setMotorCtrlVal+0x2ce>
					break;
 800242e:	e092      	b.n	8002556 <CAN_setMotorCtrlVal+0x3ea>
 8002430:	3b05      	subs	r3, #5
			switch(motorID) {
 8002432:	2b02      	cmp	r3, #2
 8002434:	f200 808f 	bhi.w	8002556 <CAN_setMotorCtrlVal+0x3ea>
 8002438:	e046      	b.n	80024c8 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	481f      	ldr	r0, [pc, #124]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3304      	adds	r3, #4
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	4919      	ldr	r1, [pc, #100]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	3308      	adds	r3, #8
 800246a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	4914      	ldr	r1, [pc, #80]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	330a      	adds	r3, #10
 8002480:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	490e      	ldr	r1, [pc, #56]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	330c      	adds	r3, #12
 8002496:	f9b3 1000 	ldrsh.w	r1, [r3]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <CAN_setMotorCtrlVal+0x358>)
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4403      	add	r3, r0
 80024aa:	330e      	adds	r3, #14
 80024ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b0:	79f8      	ldrb	r0, [r7, #7]
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	9100      	str	r1, [sp, #0]
 80024b6:	462b      	mov	r3, r5
 80024b8:	4622      	mov	r2, r4
 80024ba:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80024be:	f7ff fded 	bl	800209c <CAN_DriveMotor>
					break;
 80024c2:	e049      	b.n	8002558 <CAN_setMotorCtrlVal+0x3ec>
 80024c4:	200002f4 	.word	0x200002f4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024d0:	1f59      	subs	r1, r3, #5
 80024d2:	4824      	ldr	r0, [pc, #144]	@ (8002564 <CAN_setMotorCtrlVal+0x3f8>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3308      	adds	r3, #8
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	491e      	ldr	r1, [pc, #120]	@ (8002564 <CAN_setMotorCtrlVal+0x3f8>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3310      	adds	r3, #16
 80024f8:	f9b3 4000 	ldrsh.w	r4, [r3]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	4918      	ldr	r1, [pc, #96]	@ (8002564 <CAN_setMotorCtrlVal+0x3f8>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3312      	adds	r3, #18
 800250e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	4913      	ldr	r1, [pc, #76]	@ (8002564 <CAN_setMotorCtrlVal+0x3f8>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3314      	adds	r3, #20
 8002524:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	480d      	ldr	r0, [pc, #52]	@ (8002564 <CAN_setMotorCtrlVal+0x3f8>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4403      	add	r3, r0
 8002538:	3316      	adds	r3, #22
 800253a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253e:	79f8      	ldrb	r0, [r7, #7]
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9100      	str	r1, [sp, #0]
 8002544:	462b      	mov	r3, r5
 8002546:	4622      	mov	r2, r4
 8002548:	f240 21fe 	movw	r1, #766	@ 0x2fe
 800254c:	f7ff fda6 	bl	800209c <CAN_DriveMotor>
					break;
 8002550:	e002      	b.n	8002558 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002556:	bf00      	nop
			break;
 8002558:	bf00      	nop
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bdb0      	pop	{r4, r5, r7, pc}
 8002562:	bf00      	nop
 8002564:	200002f4 	.word	0x200002f4

08002568 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08b      	sub	sp, #44	@ 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	eef0 6a40 	vmov.f32	s13, s0
 800257a:	eeb0 7a60 	vmov.f32	s14, s1
 800257e:	eef0 7a41 	vmov.f32	s15, s2
 8002582:	4623      	mov	r3, r4
 8002584:	75fb      	strb	r3, [r7, #23]
 8002586:	4603      	mov	r3, r0
 8002588:	75bb      	strb	r3, [r7, #22]
 800258a:	460b      	mov	r3, r1
 800258c:	757b      	strb	r3, [r7, #21]
 800258e:	4613      	mov	r3, r2
 8002590:	827b      	strh	r3, [r7, #18]
 8002592:	edc7 6a01 	vstr	s13, [r7, #4]
 8002596:	ed87 7a02 	vstr	s14, [r7, #8]
 800259a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80025a8:	7dbb      	ldrb	r3, [r7, #22]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	dc02      	bgt.n	80025b4 <calcRPM_PID+0x4c>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dc04      	bgt.n	80025bc <calcRPM_PID+0x54>
 80025b2:	e00d      	b.n	80025d0 <calcRPM_PID+0x68>
 80025b4:	3b03      	subs	r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d80a      	bhi.n	80025d0 <calcRPM_PID+0x68>
 80025ba:	e004      	b.n	80025c6 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80025c4:	e009      	b.n	80025da <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80025c6:	7d7b      	ldrb	r3, [r7, #21]
 80025c8:	3303      	adds	r3, #3
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80025ce:	e004      	b.n	80025da <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80025d0:	7d7b      	ldrb	r3, [r7, #21]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80025d8:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80025da:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80025de:	7ffa      	ldrb	r2, [r7, #31]
 80025e0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80025e4:	4c70      	ldr	r4, [pc, #448]	@ (80027a8 <calcRPM_PID+0x240>)
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	4403      	add	r3, r0
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4423      	add	r3, r4
 80025f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fa:	7ffa      	ldrb	r2, [r7, #31]
 80025fc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002600:	1ac9      	subs	r1, r1, r3
 8002602:	4c6a      	ldr	r4, [pc, #424]	@ (80027ac <calcRPM_PID+0x244>)
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	4403      	add	r3, r0
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4423      	add	r3, r4
 8002614:	3304      	adds	r3, #4
 8002616:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002618:	7ffa      	ldrb	r2, [r7, #31]
 800261a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800261e:	4863      	ldr	r0, [pc, #396]	@ (80027ac <calcRPM_PID+0x244>)
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	440b      	add	r3, r1
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4403      	add	r3, r0
 8002630:	3308      	adds	r3, #8
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	7ffa      	ldrb	r2, [r7, #31]
 8002636:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800263a:	4c5c      	ldr	r4, [pc, #368]	@ (80027ac <calcRPM_PID+0x244>)
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	4403      	add	r3, r0
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	4423      	add	r3, r4
 800264c:	3304      	adds	r3, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	7ffa      	ldrb	r2, [r7, #31]
 8002652:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002656:	4419      	add	r1, r3
 8002658:	4c54      	ldr	r4, [pc, #336]	@ (80027ac <calcRPM_PID+0x244>)
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	4403      	add	r3, r0
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4423      	add	r3, r4
 800266a:	3308      	adds	r3, #8
 800266c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800266e:	7ffa      	ldrb	r2, [r7, #31]
 8002670:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002674:	484d      	ldr	r0, [pc, #308]	@ (80027ac <calcRPM_PID+0x244>)
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	440b      	add	r3, r1
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4403      	add	r3, r0
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	7ffa      	ldrb	r2, [r7, #31]
 800268a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800268e:	4c46      	ldr	r4, [pc, #280]	@ (80027a8 <calcRPM_PID+0x240>)
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	4403      	add	r3, r0
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4423      	add	r3, r4
 80026a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026a4:	7ffa      	ldrb	r2, [r7, #31]
 80026a6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80026aa:	1ac9      	subs	r1, r1, r3
 80026ac:	4c3f      	ldr	r4, [pc, #252]	@ (80027ac <calcRPM_PID+0x244>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	4403      	add	r3, r0
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4423      	add	r3, r4
 80026be:	330c      	adds	r3, #12
 80026c0:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80026c2:	7ffa      	ldrb	r2, [r7, #31]
 80026c4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80026c8:	4837      	ldr	r0, [pc, #220]	@ (80027a8 <calcRPM_PID+0x240>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4403      	add	r3, r0
 80026da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026de:	7ffa      	ldrb	r2, [r7, #31]
 80026e0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80026e4:	461c      	mov	r4, r3
 80026e6:	4831      	ldr	r0, [pc, #196]	@ (80027ac <calcRPM_PID+0x244>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4403      	add	r3, r0
 80026f8:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80026fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80026fe:	7ffa      	ldrb	r2, [r7, #31]
 8002700:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002704:	4829      	ldr	r0, [pc, #164]	@ (80027ac <calcRPM_PID+0x244>)
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	440b      	add	r3, r1
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4403      	add	r3, r0
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002726:	edd7 6a02 	vldr	s13, [r7, #8]
 800272a:	7ffa      	ldrb	r2, [r7, #31]
 800272c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002730:	481e      	ldr	r0, [pc, #120]	@ (80027ac <calcRPM_PID+0x244>)
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	440b      	add	r3, r1
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4403      	add	r3, r0
 8002742:	3308      	adds	r3, #8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002756:	edd7 6a03 	vldr	s13, [r7, #12]
 800275a:	7ffa      	ldrb	r2, [r7, #31]
 800275c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002760:	4812      	ldr	r0, [pc, #72]	@ (80027ac <calcRPM_PID+0x244>)
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	440b      	add	r3, r1
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4403      	add	r3, r0
 8002772:	330c      	adds	r3, #12
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278a:	ee17 3a90 	vmov	r3, s15
 800278e:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002790:	7dbb      	ldrb	r3, [r7, #22]
 8002792:	6a39      	ldr	r1, [r7, #32]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f80b 	bl	80027b0 <applyCtrlLimit>
 800279a:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 800279c:	6a3b      	ldr	r3, [r7, #32]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	372c      	adds	r7, #44	@ 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000324 	.word	0x20000324
 80027ac:	200003d4 	.word	0x200003d4

080027b0 <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d009      	beq.n	80027d6 <applyCtrlLimit+0x26>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	dc29      	bgt.n	800281a <applyCtrlLimit+0x6a>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	dc02      	bgt.n	80027d0 <applyCtrlLimit+0x20>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	dc03      	bgt.n	80027d6 <applyCtrlLimit+0x26>
 80027ce:	e024      	b.n	800281a <applyCtrlLimit+0x6a>
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d00f      	beq.n	80027f4 <applyCtrlLimit+0x44>
 80027d4:	e021      	b.n	800281a <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027dc:	dd03      	ble.n	80027e6 <applyCtrlLimit+0x36>
				val = 16384;
 80027de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027e2:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80027e4:	e016      	b.n	8002814 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80027ec:	da12      	bge.n	8002814 <applyCtrlLimit+0x64>
				val = -16384;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <applyCtrlLimit+0x78>)
 80027f0:	603b      	str	r3, [r7, #0]
			break;
 80027f2:	e00f      	b.n	8002814 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80027fa:	4293      	cmp	r3, r2
 80027fc:	dd03      	ble.n	8002806 <applyCtrlLimit+0x56>
				val = 25000;
 80027fe:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8002802:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8002804:	e008      	b.n	8002818 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4a08      	ldr	r2, [pc, #32]	@ (800282c <applyCtrlLimit+0x7c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	da04      	bge.n	8002818 <applyCtrlLimit+0x68>
				val = -25000;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <applyCtrlLimit+0x7c>)
 8002810:	603b      	str	r3, [r7, #0]
			break;
 8002812:	e001      	b.n	8002818 <applyCtrlLimit+0x68>
			break;
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <applyCtrlLimit+0x6a>
			break;
 8002818:	bf00      	nop
		}
	}
	return val;
 800281a:	683b      	ldr	r3, [r7, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	ffffc000 	.word	0xffffc000
 800282c:	ffff9e58 	.word	0xffff9e58

08002830 <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
 800283a:	460b      	mov	r3, r1
 800283c:	71bb      	strb	r3, [r7, #6]
 800283e:	4613      	mov	r3, r2
 8002840:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	2b02      	cmp	r3, #2
 8002846:	dc02      	bgt.n	800284e <getRotorPosition+0x1e>
 8002848:	2b00      	cmp	r3, #0
 800284a:	dc04      	bgt.n	8002856 <getRotorPosition+0x26>
 800284c:	e034      	b.n	80028b8 <getRotorPosition+0x88>
 800284e:	3b03      	subs	r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d831      	bhi.n	80028b8 <getRotorPosition+0x88>
 8002854:	e016      	b.n	8002884 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002856:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800285a:	2b00      	cmp	r3, #0
 800285c:	dd29      	ble.n	80028b2 <getRotorPosition+0x82>
 800285e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002862:	2b08      	cmp	r3, #8
 8002864:	dc25      	bgt.n	80028b2 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	1e5a      	subs	r2, r3, #1
 800286a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	4815      	ldr	r0, [pc, #84]	@ (80028c8 <getRotorPosition+0x98>)
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	440b      	add	r3, r1
 800287e:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002882:	e01b      	b.n	80028bc <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002884:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002888:	2b00      	cmp	r3, #0
 800288a:	dd14      	ble.n	80028b6 <getRotorPosition+0x86>
 800288c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002890:	2b07      	cmp	r3, #7
 8002892:	dc10      	bgt.n	80028b6 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800289c:	1cd9      	adds	r1, r3, #3
 800289e:	480a      	ldr	r0, [pc, #40]	@ (80028c8 <getRotorPosition+0x98>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80028b0:	e004      	b.n	80028bc <getRotorPosition+0x8c>
			break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <getRotorPosition+0x88>
			}
			break;
 80028b6:	bf00      	nop
		}
	}
	return -1;
 80028b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000324 	.word	0x20000324

080028cc <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80028fa:	463b      	mov	r3, r7
 80028fc:	4619      	mov	r1, r3
 80028fe:	480f      	ldr	r0, [pc, #60]	@ (800293c <CAN_Init+0x70>)
 8002900:	f004 fab2 	bl	8006e68 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002904:	480d      	ldr	r0, [pc, #52]	@ (800293c <CAN_Init+0x70>)
 8002906:	f004 fb8d 	bl	8007024 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800290a:	2102      	movs	r1, #2
 800290c:	480b      	ldr	r0, [pc, #44]	@ (800293c <CAN_Init+0x70>)
 800290e:	f004 fdbf 	bl	8007490 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 8002912:	230d      	movs	r3, #13
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 8002916:	230d      	movs	r3, #13
 8002918:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800291a:	463b      	mov	r3, r7
 800291c:	4619      	mov	r1, r3
 800291e:	4808      	ldr	r0, [pc, #32]	@ (8002940 <CAN_Init+0x74>)
 8002920:	f004 faa2 	bl	8006e68 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8002924:	4806      	ldr	r0, [pc, #24]	@ (8002940 <CAN_Init+0x74>)
 8002926:	f004 fb7d 	bl	8007024 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800292a:	2102      	movs	r1, #2
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <CAN_Init+0x74>)
 800292e:	f004 fdaf 	bl	8007490 <HAL_CAN_ActivateNotification>
}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	@ 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000b88 	.word	0x20000b88
 8002940:	20000bb0 	.word	0x20000bb0

08002944 <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 800294c:	2212      	movs	r2, #18
 800294e:	4914      	ldr	r1, [pc, #80]	@ (80029a0 <DBUS_Rx_Init+0x5c>)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f007 fe68 	bl	800a626 <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 8002956:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <DBUS_Rx_Init+0x60>)
 8002958:	8813      	ldrh	r3, [r2, #0]
 800295a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800295e:	f361 030a 	bfi	r3, r1, #0, #11
 8002962:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <DBUS_Rx_Init+0x60>)
 8002966:	8853      	ldrh	r3, [r2, #2]
 8002968:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800296c:	f361 030a 	bfi	r3, r1, #0, #11
 8002970:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 8002972:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <DBUS_Rx_Init+0x60>)
 8002974:	8893      	ldrh	r3, [r2, #4]
 8002976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800297a:	f361 030a 	bfi	r3, r1, #0, #11
 800297e:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 8002980:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <DBUS_Rx_Init+0x60>)
 8002982:	88d3      	ldrh	r3, [r2, #6]
 8002984:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002988:	f361 030a 	bfi	r3, r1, #0, #11
 800298c:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <DBUS_Rx_Init+0x60>)
 8002990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002994:	825a      	strh	r2, [r3, #18]
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000548 	.word	0x20000548
 80029a4:	20000534 	.word	0x20000534

080029a8 <DBUS_Update>:


void DBUS_Update(){
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <DBUS_Update+0x16c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	4b58      	ldr	r3, [pc, #352]	@ (8002b14 <DBUS_Update+0x16c>)
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21b      	sxth	r3, r3
 80029c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c4:	b299      	uxth	r1, r3
 80029c6:	4a54      	ldr	r2, [pc, #336]	@ (8002b18 <DBUS_Update+0x170>)
 80029c8:	8813      	ldrh	r3, [r2, #0]
 80029ca:	f361 030a 	bfi	r3, r1, #0, #11
 80029ce:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <DBUS_Update+0x16c>)
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	b21a      	sxth	r2, r3
 80029da:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <DBUS_Update+0x16c>)
 80029dc:	789b      	ldrb	r3, [r3, #2]
 80029de:	b21b      	sxth	r3, r3
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ec:	b299      	uxth	r1, r3
 80029ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002b18 <DBUS_Update+0x170>)
 80029f0:	8853      	ldrh	r3, [r2, #2]
 80029f2:	f361 030a 	bfi	r3, r1, #0, #11
 80029f6:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 80029f8:	4b46      	ldr	r3, [pc, #280]	@ (8002b14 <DBUS_Update+0x16c>)
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	4b44      	ldr	r3, [pc, #272]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a04:	78db      	ldrb	r3, [r3, #3]
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	4b40      	ldr	r3, [pc, #256]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a12:	791b      	ldrb	r3, [r3, #4]
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a22:	b299      	uxth	r1, r3
 8002a24:	4a3c      	ldr	r2, [pc, #240]	@ (8002b18 <DBUS_Update+0x170>)
 8002a26:	8893      	ldrh	r3, [r2, #4]
 8002a28:	f361 030a 	bfi	r3, r1, #0, #11
 8002a2c:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 8002a2e:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a30:	791b      	ldrb	r3, [r3, #4]
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a3a:	795b      	ldrb	r3, [r3, #5]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	01db      	lsls	r3, r3, #7
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	4a32      	ldr	r2, [pc, #200]	@ (8002b18 <DBUS_Update+0x170>)
 8002a4e:	88d3      	ldrh	r3, [r2, #6]
 8002a50:	f361 030a 	bfi	r3, r1, #0, #11
 8002a54:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 8002a56:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a58:	795b      	ldrb	r3, [r3, #5]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	b2d9      	uxtb	r1, r3
 8002a64:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <DBUS_Update+0x170>)
 8002a66:	79d3      	ldrb	r3, [r2, #7]
 8002a68:	f361 03c4 	bfi	r3, r1, #3, #2
 8002a6c:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8002a6e:	4b29      	ldr	r3, [pc, #164]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a70:	795b      	ldrb	r3, [r3, #5]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	109b      	asrs	r3, r3, #2
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	b2d9      	uxtb	r1, r3
 8002a7e:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <DBUS_Update+0x170>)
 8002a80:	79d3      	ldrb	r3, [r2, #7]
 8002a82:	f361 1346 	bfi	r3, r1, #5, #2
 8002a86:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 8002a88:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a8a:	799b      	ldrb	r3, [r3, #6]
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <DBUS_Update+0x16c>)
 8002a90:	79db      	ldrb	r3, [r3, #7]
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <DBUS_Update+0x170>)
 8002a9e:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b14 <DBUS_Update+0x16c>)
 8002aa2:	7a1b      	ldrb	r3, [r3, #8]
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <DBUS_Update+0x16c>)
 8002aa8:	7a5b      	ldrb	r3, [r3, #9]
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <DBUS_Update+0x170>)
 8002ab6:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 8002ab8:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <DBUS_Update+0x16c>)
 8002aba:	7a9b      	ldrb	r3, [r3, #10]
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <DBUS_Update+0x16c>)
 8002ac0:	7adb      	ldrb	r3, [r3, #11]
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <DBUS_Update+0x170>)
 8002ace:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <DBUS_Update+0x16c>)
 8002ad2:	7b1a      	ldrb	r2, [r3, #12]
 8002ad4:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <DBUS_Update+0x170>)
 8002ad6:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <DBUS_Update+0x16c>)
 8002ada:	7b5a      	ldrb	r2, [r3, #13]
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <DBUS_Update+0x170>)
 8002ade:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <DBUS_Update+0x16c>)
 8002ae2:	7b9a      	ldrb	r2, [r3, #14]
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <DBUS_Update+0x170>)
 8002ae6:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <DBUS_Update+0x16c>)
 8002aea:	7bda      	ldrb	r2, [r3, #15]
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <DBUS_Update+0x170>)
 8002aee:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <DBUS_Update+0x16c>)
 8002af2:	7c1b      	ldrb	r3, [r3, #16]
 8002af4:	b21a      	sxth	r2, r3
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <DBUS_Update+0x16c>)
 8002af8:	7c5b      	ldrb	r3, [r3, #17]
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <DBUS_Update+0x170>)
 8002b08:	825a      	strh	r2, [r3, #18]
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	20000548 	.word	0x20000548
 8002b18:	20000534 	.word	0x20000534

08002b1c <getDR16_CH0>:

int16_t getDR16_CH0(){
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <getDR16_CH0+0x34>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <getDR16_CH0+0x34>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	e000      	b.n	8002b44 <getDR16_CH0+0x28>
	}
	else{
		return 0;
 8002b42:	2300      	movs	r3, #0
	}
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000534 	.word	0x20000534

08002b54 <getDR16_CH1>:

int16_t getDR16_CH1(){
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <getDR16_CH1+0x34>)
 8002b5a:	885b      	ldrh	r3, [r3, #2]
 8002b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <getDR16_CH1+0x34>)
 8002b68:	885b      	ldrh	r3, [r3, #2]
 8002b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	e000      	b.n	8002b7c <getDR16_CH1+0x28>
	}
	else{
		return 0;
 8002b7a:	2300      	movs	r3, #0
	}
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000534 	.word	0x20000534

08002b8c <getDR16_CH2>:

int16_t getDR16_CH2(){
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <getDR16_CH2+0x34>)
 8002b92:	889b      	ldrh	r3, [r3, #4]
 8002b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <getDR16_CH2+0x34>)
 8002ba0:	889b      	ldrh	r3, [r3, #4]
 8002ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	e000      	b.n	8002bb4 <getDR16_CH2+0x28>
	}
	else{
		return 0;
 8002bb2:	2300      	movs	r3, #0
	}
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000534 	.word	0x20000534

08002bc4 <getDR16_CH3>:

int16_t getDR16_CH3(){
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <getDR16_CH3+0x34>)
 8002bca:	88db      	ldrh	r3, [r3, #6]
 8002bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <getDR16_CH3+0x34>)
 8002bd8:	88db      	ldrh	r3, [r3, #6]
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	e000      	b.n	8002bec <getDR16_CH3+0x28>
	}
	else{
		return 0;
 8002bea:	2300      	movs	r3, #0
	}
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000534 	.word	0x20000534

08002bfc <getDR16_S2>:

uint8_t getDR16_S1(){
	return DR16_DBUS.S1;
}

uint8_t getDR16_S2(){
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <getDR16_S2+0x18>)
 8002c02:	79db      	ldrb	r3, [r3, #7]
 8002c04:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002c08:	b2db      	uxtb	r3, r3
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	20000534 	.word	0x20000534

08002c18 <getDR16_W>:
	else{
		return 0;
	}
}

uint8_t getDR16_W(){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 8002c1c:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <getDR16_W+0x18>)
 8002c1e:	7c1b      	ldrb	r3, [r3, #16]
 8002c20:	2201      	movs	r2, #1
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f847 	bl	8002cb8 <DBUS_getBits>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000534 	.word	0x20000534

08002c34 <getDR16_S>:

uint8_t getDR16_S(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <getDR16_S+0x18>)
 8002c3a:	7c1b      	ldrb	r3, [r3, #16]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f839 	bl	8002cb8 <DBUS_getBits>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000534 	.word	0x20000534

08002c50 <getDR16_A>:

uint8_t getDR16_A(){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <getDR16_A+0x18>)
 8002c56:	7c1b      	ldrb	r3, [r3, #16]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f82b 	bl	8002cb8 <DBUS_getBits>
 8002c62:	4603      	mov	r3, r0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000534 	.word	0x20000534

08002c6c <getDR16_D>:

uint8_t getDR16_D(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <getDR16_D+0x18>)
 8002c72:	7c1b      	ldrb	r3, [r3, #16]
 8002c74:	2201      	movs	r2, #1
 8002c76:	2103      	movs	r1, #3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f81d 	bl	8002cb8 <DBUS_getBits>
 8002c7e:	4603      	mov	r3, r0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000534 	.word	0x20000534

08002c88 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <getDR16_MouseX+0x14>)
 8002c8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	20000534 	.word	0x20000534

08002ca0 <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <getDR16_MouseY+0x14>)
 8002ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20000534 	.word	0x20000534

08002cb8 <DBUS_getBits>:
uint8_t getDR16_MouseR(){
	return DR16_DBUS.MouseR;
}


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	71bb      	strb	r3, [r7, #6]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73bb      	strb	r3, [r7, #14]
 8002cd2:	e013      	b.n	8002cfc <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	79b9      	ldrb	r1, [r7, #6]
 8002cd8:	7bbb      	ldrb	r3, [r7, #14]
 8002cda:	440b      	add	r3, r1
 8002cdc:	fa42 f303 	asr.w	r3, r2, r3
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	b25a      	sxtb	r2, r3
 8002cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	73bb      	strb	r3, [r7, #14]
 8002cfc:	7bba      	ldrb	r2, [r7, #14]
 8002cfe:	797b      	ldrb	r3, [r7, #5]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3e7      	bcc.n	8002cd4 <DBUS_getBits+0x1c>
	}
	return result;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	0000      	movs	r0, r0
 8002d14:	0000      	movs	r0, r0
	...

08002d18 <determiningTrigAngle>:
int8_t noVelocity = 0;
PID_preset_t test = {5.0, 0.0, 0.0};
PID_preset_t test2 = {800.0, 60.0, 80.0};


float determiningTrigAngle (int16_t motorAngle[5]) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da2c      	bge.n	8002d84 <determiningTrigAngle+0x6c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	da26      	bge.n	8002d84 <determiningTrigAngle+0x6c>
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3302      	adds	r3, #2
 8002d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d58:	eeb0 0a66 	vmov.f32	s0, s13
 8002d5c:	f00e fc6a 	bl	8011634 <atanf>
 8002d60:	ee10 3a10 	vmov	r3, s0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fbef 	bl	8000548 <__aeabi_f2d>
 8002d6a:	a335      	add	r3, pc, #212	@ (adr r3, 8002e40 <determiningTrigAngle+0x128>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fa8a 	bl	8000288 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd ff14 	bl	8000ba8 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	e056      	b.n	8002e32 <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db2c      	blt.n	8002de8 <determiningTrigAngle+0xd0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3302      	adds	r3, #2
 8002d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da26      	bge.n	8002de8 <determiningTrigAngle+0xd0>
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3302      	adds	r3, #2
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dbc:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc0:	f00e fc38 	bl	8011634 <atanf>
 8002dc4:	ee10 3a10 	vmov	r3, s0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbbd 	bl	8000548 <__aeabi_f2d>
 8002dce:	a31c      	add	r3, pc, #112	@ (adr r3, 8002e40 <determiningTrigAngle+0x128>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa5a 	bl	800028c <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fee2 	bl	8000ba8 <__aeabi_d2f>
 8002de4:	4603      	mov	r3, r0
 8002de6:	e024      	b.n	8002e32 <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <determiningTrigAngle+0xec>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <determiningTrigAngle+0xec>
		return 0;
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e016      	b.n	8002e32 <determiningTrigAngle+0x11a>
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3302      	adds	r3, #2
 8002e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e26:	eeb0 0a66 	vmov.f32	s0, s13
 8002e2a:	f00e fc03 	bl	8011634 <atanf>
 8002e2e:	ee10 3a10 	vmov	r3, s0
	}
}
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	54442d18 	.word	0x54442d18
 8002e44:	400921fb 	.word	0x400921fb

08002e48 <wheelRotation>:

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	460a      	mov	r2, r1
 8002e52:	80fb      	strh	r3, [r7, #6]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80bb      	strh	r3, [r7, #4]
	int8_t newTargetRotationCounter = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
	int16_t ACD = abs(destinationRotation - currentRotation);
 8002e5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfb8      	it	lt
 8002e6a:	425b      	neglt	r3, r3
 8002e6c:	81bb      	strh	r3, [r7, #12]
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
 8002e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e72:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8002e76:	3b1f      	subs	r3, #31
 8002e78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bfb8      	it	lt
 8002e82:	425b      	neglt	r3, r3
 8002e84:	817b      	strh	r3, [r7, #10]
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
 8002e86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e8a:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8002e8e:	331f      	adds	r3, #31
 8002e90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfb8      	it	lt
 8002e9a:	425b      	neglt	r3, r3
 8002e9c:	813b      	strh	r3, [r7, #8]
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
 8002e9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	da08      	bge.n	8002ebc <wheelRotation+0x74>
 8002eaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002eae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	da02      	bge.n	8002ebc <wheelRotation+0x74>
		newTargetRotationCounter = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e010      	b.n	8002ede <wheelRotation+0x96>
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
 8002ebc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ec0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	da08      	bge.n	8002eda <wheelRotation+0x92>
 8002ec8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ecc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	da02      	bge.n	8002eda <wheelRotation+0x92>
		newTargetRotationCounter = -1;
 8002ed4:	23ff      	movs	r3, #255	@ 0xff
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e001      	b.n	8002ede <wheelRotation+0x96>
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	0352      	lsls	r2, r2, #13
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	88bb      	ldrh	r3, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b21b      	sxth	r3, r3
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <swerveScaler>:

float swerveScaler (int16_t motorInfo[4][5]) {
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	int16_t largestVal = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002f14:	2300      	movs	r3, #0
 8002f16:	737b      	strb	r3, [r7, #13]
 8002f18:	e01f      	b.n	8002f5a <swerveScaler+0x52>
		if (motorInfo[i][2] > largestVal) {
 8002f1a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	da0a      	bge.n	8002f4e <swerveScaler+0x46>
			largestVal = motorInfo[i][2];
 8002f38:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002f4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	737b      	strb	r3, [r7, #13]
 8002f5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	dddb      	ble.n	8002f1a <swerveScaler+0x12>
	if (largestVal == 0) {
		usart_printf("ERROR_WITH_SCALER\r\n");
	}
	*/
	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAlloweds) {
 8002f62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	dc02      	bgt.n	8002f74 <swerveScaler+0x6c>
		return 1;
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f72:	e00b      	b.n	8002f8c <swerveScaler+0x84>
	} else {
		return ((float)(maxValAlloweds)/(float)(largestVal));
 8002f74:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002fa0 <swerveScaler+0x98>
 8002f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f88:	eec7 6a27 	vdiv.f32	s13, s14, s15
	}
}
 8002f8c:	eef0 7a66 	vmov.f32	s15, s13
 8002f90:	eeb0 0a67 	vmov.f32	s0, s15
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	00000320 	.word	0x00000320

08002fa4 <PD>:

int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fb2:	edc7 0a00 	vstr	s1, [r7]
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	81bb      	strh	r3, [r7, #12]
	int32_t solvedVal = (int32_t)(((float)currentDelta*kP + ((float)(*previousDelta) - currentDelta)*kD));
 8002fbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fee:	edd7 7a00 	vldr	s15, [r7]
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffe:	ee17 3a90 	vmov	r3, s15
 8003002:	617b      	str	r3, [r7, #20]
	// UART_Printf(&huart1, "Inputs: %d, %d || Output: %d\r\n", currentDelta, *previousDelta, solvedVal);
	// int32_t solvedVal = (int32_t)(((float)currentDelta*kP + ((float)(*previousDelta) - currentDelta)*kD));
	int32_t finalboi = applyCtrlLimit(motorType, solvedVal);
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fbd1 	bl	80027b0 <applyCtrlLimit>
 800300e:	6138      	str	r0, [r7, #16]
	*previousDelta = currentDelta;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	89ba      	ldrh	r2, [r7, #12]
 8003014:	801a      	strh	r2, [r3, #0]
	return finalboi;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	b21b      	sxth	r3, r3
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	0000      	movs	r0, r0
 8003024:	0000      	movs	r0, r0
	...

08003028 <Loop>:


void Loop(int16_t Axies[3], int16_t GM6020TurretAngle) {
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	ed2d 8b02 	vpush	{d8}
 800302e:	b08c      	sub	sp, #48	@ 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]

	// usart_printf("%d, %d, %d, %d\r\n", getRotorPosition(Bus1, GM6020, 1), getRotorPosition(Bus1, GM6020, 2), getRotorPosition(Bus1, GM6020, 3), getRotorPosition(Bus1, GM6020, 4));

	float CAngle = (2.0f*M_PI*(float)((GM6020TurretAngle)-1551))/8192;
 8003038:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800303c:	f2a3 630f 	subw	r3, r3, #1551	@ 0x60f
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003048:	ee17 0a90 	vmov	r0, s15
 800304c:	f7fd fa7c 	bl	8000548 <__aeabi_f2d>
 8003050:	a3a6      	add	r3, pc, #664	@ (adr r3, 80032ec <Loop+0x2c4>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f7fd facf 	bl	80005f8 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	4b9a      	ldr	r3, [pc, #616]	@ (80032d0 <Loop+0x2a8>)
 8003068:	f7fd fbf0 	bl	800084c <__aeabi_ddiv>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fd98 	bl	8000ba8 <__aeabi_d2f>
 8003078:	4603      	mov	r3, r0
 800307a:	623b      	str	r3, [r7, #32]
	int16_t FB = Axies[0];
	int16_t LR = -1*Axies[1];
	int16_t Rotate = Axies[2];
	*/

	UART_Printf(&huart1, "%d\r\n", GM6020TurretAngle);
 800307c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003080:	461a      	mov	r2, r3
 8003082:	4994      	ldr	r1, [pc, #592]	@ (80032d4 <Loop+0x2ac>)
 8003084:	4894      	ldr	r0, [pc, #592]	@ (80032d8 <Loop+0x2b0>)
 8003086:	f000 fc97 	bl	80039b8 <UART_Printf>
	int16_t FB = Axies[0]*cosf(CAngle) + Axies[1]*sinf(CAngle);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003098:	ed97 0a08 	vldr	s0, [r7, #32]
 800309c:	f00e fb9e 	bl	80117dc <cosf>
 80030a0:	eef0 7a40 	vmov.f32	s15, s0
 80030a4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3302      	adds	r3, #2
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80030b8:	ed97 0a08 	vldr	s0, [r7, #32]
 80030bc:	f00e fbda 	bl	8011874 <sinf>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80030c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80030cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d0:	ee17 3a90 	vmov	r3, s15
 80030d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t LR = Axies[0]*sinf(CAngle) - Axies[1]*cosf(CAngle);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80030e4:	ed97 0a08 	vldr	s0, [r7, #32]
 80030e8:	f00e fbc4 	bl	8011874 <sinf>
 80030ec:	eef0 7a40 	vmov.f32	s15, s0
 80030f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3302      	adds	r3, #2
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003104:	ed97 0a08 	vldr	s0, [r7, #32]
 8003108:	f00e fb68 	bl	80117dc <cosf>
 800310c:	eef0 7a40 	vmov.f32	s15, s0
 8003110:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003114:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t Rotate = -1*Axies[2];
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	b29b      	uxth	r3, r3
 800312c:	425b      	negs	r3, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	857b      	strh	r3, [r7, #42]	@ 0x2a

	/*
	 * Checks if All joystick Values are 0 to make the wheels maintain last orientation
	 */
	if (FB == 0 && LR == 0 && Rotate == 0) {
 8003132:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003136:	2b00      	cmp	r3, #0
 8003138:	d114      	bne.n	8003164 <Loop+0x13c>
 800313a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d110      	bne.n	8003164 <Loop+0x13c>
 8003142:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <Loop+0x13c>
		FB = DP[0];
 800314a:	4b64      	ldr	r3, [pc, #400]	@ (80032dc <Loop+0x2b4>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		LR = DP[1];
 8003150:	4b62      	ldr	r3, [pc, #392]	@ (80032dc <Loop+0x2b4>)
 8003152:	885b      	ldrh	r3, [r3, #2]
 8003154:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		Rotate = DP[2];
 8003156:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <Loop+0x2b4>)
 8003158:	889b      	ldrh	r3, [r3, #4]
 800315a:	857b      	strh	r3, [r7, #42]	@ 0x2a
		noVelocity = 1;
 800315c:	4b60      	ldr	r3, [pc, #384]	@ (80032e0 <Loop+0x2b8>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e002      	b.n	800316a <Loop+0x142>
	} else {
		noVelocity = 0;
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <Loop+0x2b8>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
	}
	DP[0] = FB;
 800316a:	4a5c      	ldr	r2, [pc, #368]	@ (80032dc <Loop+0x2b4>)
 800316c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800316e:	8013      	strh	r3, [r2, #0]
	DP[1] = LR;
 8003170:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <Loop+0x2b4>)
 8003172:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003174:	8053      	strh	r3, [r2, #2]
	DP[2] = Rotate;
 8003176:	4a59      	ldr	r2, [pc, #356]	@ (80032dc <Loop+0x2b4>)
 8003178:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800317a:	8093      	strh	r3, [r2, #4]
	/*
	 * Starts by Calculating the motors X and Y Values.
	 * Then it Calculates the ABS value of the motors.
	 * Unless Velocity is 0 in which it'll then just not rotate the Motors and set the ABS value to 0
	 */
	for (int8_t i = 0; i < 4; i++ ) {
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003182:	e095      	b.n	80032b0 <Loop+0x288>
		motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
 8003184:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8003188:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <Loop+0x2bc>)
 800318a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800318e:	b29a      	uxth	r2, r3
 8003190:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003192:	fb12 f303 	smulbb	r3, r2, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800319a:	4413      	add	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80031a2:	b218      	sxth	r0, r3
 80031a4:	4950      	ldr	r1, [pc, #320]	@ (80032e8 <Loop+0x2c0>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	440b      	add	r3, r1
 80031b0:	4602      	mov	r2, r0
 80031b2:	801a      	strh	r2, [r3, #0]
		motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
 80031b4:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80031b8:	4a4a      	ldr	r2, [pc, #296]	@ (80032e4 <Loop+0x2bc>)
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80031c6:	fb12 f303 	smulbb	r3, r2, r3
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80031ce:	4413      	add	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80031d6:	b218      	sxth	r0, r3
 80031d8:	4943      	ldr	r1, [pc, #268]	@ (80032e8 <Loop+0x2c0>)
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	440b      	add	r3, r1
 80031e4:	3302      	adds	r3, #2
 80031e6:	4602      	mov	r2, r0
 80031e8:	801a      	strh	r2, [r3, #0]
		if (noVelocity == 0) {
 80031ea:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <Loop+0x2b8>)
 80031ec:	f993 3000 	ldrsb.w	r3, [r3]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14b      	bne.n	800328c <Loop+0x264>
			motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
 80031f4:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80031f8:	493b      	ldr	r1, [pc, #236]	@ (80032e8 <Loop+0x2c0>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003208:	4618      	mov	r0, r3
 800320a:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800320e:	4936      	ldr	r1, [pc, #216]	@ (80032e8 <Loop+0x2c0>)
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	440b      	add	r3, r1
 800321a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321e:	fb03 f100 	mul.w	r1, r3, r0
 8003222:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8003226:	4830      	ldr	r0, [pc, #192]	@ (80032e8 <Loop+0x2c0>)
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4403      	add	r3, r0
 8003232:	3302      	adds	r3, #2
 8003234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003238:	461c      	mov	r4, r3
 800323a:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800323e:	482a      	ldr	r0, [pc, #168]	@ (80032e8 <Loop+0x2c0>)
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	3302      	adds	r3, #2
 800324c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003250:	fb04 f303 	mul.w	r3, r4, r3
 8003254:	440b      	add	r3, r1
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	f00e f9c9 	bl	80115f8 <sqrtf>
 8003266:	eef0 7a40 	vmov.f32	s15, s0
 800326a:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800326e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003272:	ee17 3a90 	vmov	r3, s15
 8003276:	b218      	sxth	r0, r3
 8003278:	491b      	ldr	r1, [pc, #108]	@ (80032e8 <Loop+0x2c0>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	440b      	add	r3, r1
 8003284:	3304      	adds	r3, #4
 8003286:	4602      	mov	r2, r0
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e00a      	b.n	80032a2 <Loop+0x27a>
		} else {
			motorInfo[i][2] = 0;
 800328c:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8003290:	4915      	ldr	r1, [pc, #84]	@ (80032e8 <Loop+0x2c0>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	440b      	add	r3, r1
 800329c:	3304      	adds	r3, #4
 800329e:	2200      	movs	r2, #0
 80032a0:	801a      	strh	r2, [r3, #0]
	for (int8_t i = 0; i < 4; i++ ) {
 80032a2:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80032b0:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	f77f af65 	ble.w	8003184 <Loop+0x15c>
	}

	/*
	 * Scales ABS values of the Motor Speeds
	 */
	float SScalerVal = swerveScaler(motorInfo);
 80032ba:	480b      	ldr	r0, [pc, #44]	@ (80032e8 <Loop+0x2c0>)
 80032bc:	f7ff fe24 	bl	8002f08 <swerveScaler>
 80032c0:	ed87 0a07 	vstr	s0, [r7, #28]
	 * Secondly it converts it into encoder increments
	 * Next it adds the offsets.
	 *
	 * Finally it makes sure that all values are within the min and max of the encoder
	 */
	for (int8_t j = 0; j < 4; j++) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80032ca:	e09a      	b.n	8003402 <Loop+0x3da>
 80032cc:	f3af 8000 	nop.w
 80032d0:	40c00000 	.word	0x40c00000
 80032d4:	080122e8 	.word	0x080122e8
 80032d8:	20000dec 	.word	0x20000dec
 80032dc:	20000600 	.word	0x20000600
 80032e0:	20000606 	.word	0x20000606
 80032e4:	2000003c 	.word	0x2000003c
 80032e8:	200005d8 	.word	0x200005d8
 80032ec:	54442d18 	.word	0x54442d18
 80032f0:	401921fb 	.word	0x401921fb
		// Scales Motor Speed Output
		// 800*11.25 = 9000
		motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;
 80032f4:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 80032f8:	498d      	ldr	r1, [pc, #564]	@ (8003530 <Loop+0x508>)
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	440b      	add	r3, r1
 8003304:	3304      	adds	r3, #4
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003312:	edd7 7a07 	vldr	s15, [r7, #28]
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	ee17 0a90 	vmov	r0, s15
 800331e:	f7fd f913 	bl	8000548 <__aeabi_f2d>
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	4b83      	ldr	r3, [pc, #524]	@ (8003534 <Loop+0x50c>)
 8003328:	f7fd f966 	bl	80005f8 <__aeabi_dmul>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	f997 4028 	ldrsb.w	r4, [r7, #40]	@ 0x28
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fc0e 	bl	8000b58 <__aeabi_d2iz>
 800333c:	4603      	mov	r3, r0
 800333e:	b219      	sxth	r1, r3
 8003340:	4a7b      	ldr	r2, [pc, #492]	@ (8003530 <Loop+0x508>)
 8003342:	4623      	mov	r3, r4
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4423      	add	r3, r4
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3304      	adds	r3, #4
 800334e:	460a      	mov	r2, r1
 8003350:	801a      	strh	r2, [r3, #0]

		int16_t trigAng = (int16_t)(4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI));
 8003352:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4a74      	ldr	r2, [pc, #464]	@ (8003530 <Loop+0x508>)
 8003360:	4413      	add	r3, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fcd8 	bl	8002d18 <determiningTrigAngle>
 8003368:	ee10 3a10 	vmov	r3, s0
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f8eb 	bl	8000548 <__aeabi_f2d>
 8003372:	a36b      	add	r3, pc, #428	@ (adr r3, 8003520 <Loop+0x4f8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fd fa68 	bl	800084c <__aeabi_ddiv>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	a368      	add	r3, pc, #416	@ (adr r3, 8003528 <Loop+0x500>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f7fd f935 	bl	80005f8 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fbdf 	bl	8000b58 <__aeabi_d2iz>
 800339a:	4603      	mov	r3, r0
 800339c:	837b      	strh	r3, [r7, #26]

		int16_t tempAngle = trigAng+forwardsID[j];
 800339e:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80033a2:	4a65      	ldr	r2, [pc, #404]	@ (8003538 <Loop+0x510>)
 80033a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	8b7b      	ldrh	r3, [r7, #26]
 80033ac:	4413      	add	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		if (tempAngle > 8191) {
 80033b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ba:	db06      	blt.n	80033ca <Loop+0x3a2>
			tempAngle = tempAngle-8191;
 80033bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80033be:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 80033c2:	3b1f      	subs	r3, #31
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80033c8:	e009      	b.n	80033de <Loop+0x3b6>
		} else if (tempAngle < 0) {
 80033ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da05      	bge.n	80033de <Loop+0x3b6>
			tempAngle = tempAngle+8191;
 80033d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80033d4:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 80033d8:	331f      	adds	r3, #31
 80033da:	b29b      	uxth	r3, r3
 80033dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
		motorInfo[j][3] = tempAngle;
 80033de:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 80033e2:	4953      	ldr	r1, [pc, #332]	@ (8003530 <Loop+0x508>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	3306      	adds	r3, #6
 80033f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80033f2:	801a      	strh	r2, [r3, #0]
	for (int8_t j = 0; j < 4; j++) {
 80033f4:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003402:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8003406:	2b03      	cmp	r3, #3
 8003408:	f77f af74 	ble.w	80032f4 <Loop+0x2cc>
	/*
	 * This function outputs the power to the wheels.
	 * wheelRotation fines the optimal direction to rotate to
	 */

	int16_t allMotors[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]

	for (int8_t l = 0; l < 4; l++) {
 800341a:	2300      	movs	r3, #0
 800341c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003420:	e06d      	b.n	80034fe <Loop+0x4d6>
		allMotors[l] = PD(GM6020, &wheelPrev[l], wheelRotation (getRotorPosition(Bus1, GM6020, l+1), motorInfo[l][3]), GM6020Kp[l], 0.0f);
 8003422:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4a44      	ldr	r2, [pc, #272]	@ (800353c <Loop+0x514>)
 800342a:	189d      	adds	r5, r3, r2
 800342c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003430:	3301      	adds	r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	b25b      	sxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	2103      	movs	r1, #3
 800343a:	2001      	movs	r0, #1
 800343c:	f7ff f9f8 	bl	8002830 <getRotorPosition>
 8003440:	4603      	mov	r3, r0
 8003442:	b218      	sxth	r0, r3
 8003444:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8003448:	4939      	ldr	r1, [pc, #228]	@ (8003530 <Loop+0x508>)
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	3306      	adds	r3, #6
 8003456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345a:	4619      	mov	r1, r3
 800345c:	f7ff fcf4 	bl	8002e48 <wheelRotation>
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003468:	4a35      	ldr	r2, [pc, #212]	@ (8003540 <Loop+0x518>)
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	f997 4025 	ldrsb.w	r4, [r7, #37]	@ 0x25
 8003476:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8003544 <Loop+0x51c>
 800347a:	eeb0 0a67 	vmov.f32	s0, s15
 800347e:	460a      	mov	r2, r1
 8003480:	4629      	mov	r1, r5
 8003482:	2003      	movs	r0, #3
 8003484:	f7ff fd8e 	bl	8002fa4 <PD>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	0063      	lsls	r3, r4, #1
 800348e:	3330      	adds	r3, #48	@ 0x30
 8003490:	443b      	add	r3, r7
 8003492:	f823 2c28 	strh.w	r2, [r3, #-40]
		allMotors[l+4] = calcRPM_PID(Bus1, M3508, l+1, motorInfo[l][2], test);
 8003496:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b259      	sxtb	r1, r3
 80034a0:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80034a4:	4822      	ldr	r0, [pc, #136]	@ (8003530 <Loop+0x508>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4403      	add	r3, r0
 80034b0:	3304      	adds	r3, #4
 80034b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034b6:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <Loop+0x520>)
 80034b8:	edd3 6a00 	vldr	s13, [r3]
 80034bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80034c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80034c4:	eeb0 0a66 	vmov.f32	s0, s13
 80034c8:	eef0 0a47 	vmov.f32	s1, s14
 80034cc:	eeb0 1a67 	vmov.f32	s2, s15
 80034d0:	4613      	mov	r3, r2
 80034d2:	460a      	mov	r2, r1
 80034d4:	2101      	movs	r1, #1
 80034d6:	2001      	movs	r0, #1
 80034d8:	f7ff f846 	bl	8002568 <calcRPM_PID>
 80034dc:	4602      	mov	r2, r0
 80034de:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80034e2:	3304      	adds	r3, #4
 80034e4:	b212      	sxth	r2, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	3330      	adds	r3, #48	@ 0x30
 80034ea:	443b      	add	r3, r7
 80034ec:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int8_t l = 0; l < 4; l++) {
 80034f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80034fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003502:	2b03      	cmp	r3, #3
 8003504:	dd8d      	ble.n	8003422 <Loop+0x3fa>

	}
	// UART_Printf(&huart1, "%d, %d, %d, %d\r\n", getRotorPosition(Bus1, GM6020, 1), getRotorPosition(Bus1, GM6020,2), getRotorPosition(Bus1, GM6020, 3), getRotorPosition(Bus1, GM6020, 4));
	// UART_Printf(&huart1, "%d %d %d %d %d %d %d %d\r\n",allMotors[0],allMotors[1],allMotors[2],allMotors[3],allMotors[4],allMotors[5],allMotors[6],allMotors[7]);
	AllCheShit2(allMotors);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fa10 	bl	8003930 <AllCheShit2>
		} else {
			setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
		}
	}
	*/
}
 8003510:	bf00      	nop
 8003512:	3730      	adds	r7, #48	@ 0x30
 8003514:	46bd      	mov	sp, r7
 8003516:	ecbd 8b02 	vpop	{d8}
 800351a:	bdb0      	pop	{r4, r5, r7, pc}
 800351c:	f3af 8000 	nop.w
 8003520:	54442d18 	.word	0x54442d18
 8003524:	400921fb 	.word	0x400921fb
 8003528:	00000000 	.word	0x00000000
 800352c:	40afff00 	.word	0x40afff00
 8003530:	200005d8 	.word	0x200005d8
 8003534:	40268000 	.word	0x40268000
 8003538:	20000044 	.word	0x20000044
 800353c:	200005c8 	.word	0x200005c8
 8003540:	2000002c 	.word	0x2000002c
 8003544:	00000000 	.word	0x00000000
 8003548:	2000004c 	.word	0x2000004c
 800354c:	00000000 	.word	0x00000000

08003550 <AllBufferCalculations>:
		checkingValue = 1;
	}
	return (1-checkingValue);
}

void AllBufferCalculations(uint16_t bufferValFromPMM, uint8_t shift, int16_t WASDQE[3]) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	603a      	str	r2, [r7, #0]
 800355a:	80fb      	strh	r3, [r7, #6]
 800355c:	460b      	mov	r3, r1
 800355e:	717b      	strb	r3, [r7, #5]
	 * This is for the 3508s, and it's from the Mechanum Buffer
	 * The old library had a shift keybind for a boost mode? i decided to ignore it for now but ive kept a uint8_t var for the shift key
	 * This shift key will only apply to the M3508s for now, i may decide to apply it to the GM6020s later
	 */

	uint8_t shiftBoost = (shift+1)*2;
 8003560:	797b      	ldrb	r3, [r7, #5]
 8003562:	3301      	adds	r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
			maxPowerLimitM3508 = 0.00001;
		}
	}
	*/

	if (bufferValFromPMM > 50) {
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b32      	cmp	r3, #50	@ 0x32
 800356e:	d903      	bls.n	8003578 <AllBufferCalculations+0x28>
		maxPowerLimitM3508 = 8192;
 8003570:	4b45      	ldr	r3, [pc, #276]	@ (8003688 <AllBufferCalculations+0x138>)
 8003572:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003576:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d91d      	bls.n	80035ba <AllBufferCalculations+0x6a>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b32      	cmp	r3, #50	@ 0x32
 8003582:	d81a      	bhi.n	80035ba <AllBufferCalculations+0x6a>
		maxPowerLimitM3508 = (179.8*bufferValFromPMM) - 798.0f;
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc ffcc 	bl	8000524 <__aeabi_i2d>
 800358c:	a338      	add	r3, pc, #224	@ (adr r3, 8003670 <AllBufferCalculations+0x120>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fd f831 	bl	80005f8 <__aeabi_dmul>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	4b3a      	ldr	r3, [pc, #232]	@ (800368c <AllBufferCalculations+0x13c>)
 80035a4:	f7fc fe70 	bl	8000288 <__aeabi_dsub>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fafa 	bl	8000ba8 <__aeabi_d2f>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4a34      	ldr	r2, [pc, #208]	@ (8003688 <AllBufferCalculations+0x138>)
 80035b8:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d802      	bhi.n	80035c6 <AllBufferCalculations+0x76>
		maxPowerLimitM3508 = 0.00001;
 80035c0:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <AllBufferCalculations+0x138>)
 80035c2:	4a33      	ldr	r2, [pc, #204]	@ (8003690 <AllBufferCalculations+0x140>)
 80035c4:	601a      	str	r2, [r3, #0]
	}

	if (bufferValFromPMM > 30) {
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	2b1e      	cmp	r3, #30
 80035ca:	d903      	bls.n	80035d4 <AllBufferCalculations+0x84>
		maxPowerLimitGM6020 = 8192;
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <AllBufferCalculations+0x144>)
 80035ce:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80035d2:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 30) {
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d91d      	bls.n	8003616 <AllBufferCalculations+0xc6>
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b1e      	cmp	r3, #30
 80035de:	d81a      	bhi.n	8003616 <AllBufferCalculations+0xc6>
		maxPowerLimitGM6020 = (327.6*bufferValFromPMM) - 1638.4f;
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff9e 	bl	8000524 <__aeabi_i2d>
 80035e8:	a323      	add	r3, pc, #140	@ (adr r3, 8003678 <AllBufferCalculations+0x128>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fd f803 	bl	80005f8 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	a321      	add	r3, pc, #132	@ (adr r3, 8003680 <AllBufferCalculations+0x130>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fc fe42 	bl	8000288 <__aeabi_dsub>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7fd facc 	bl	8000ba8 <__aeabi_d2f>
 8003610:	4603      	mov	r3, r0
 8003612:	4a20      	ldr	r2, [pc, #128]	@ (8003694 <AllBufferCalculations+0x144>)
 8003614:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d802      	bhi.n	8003622 <AllBufferCalculations+0xd2>
		maxPowerLimitGM6020 = 0.00001;
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <AllBufferCalculations+0x144>)
 800361e:	4a1c      	ldr	r2, [pc, #112]	@ (8003690 <AllBufferCalculations+0x140>)
 8003620:	601a      	str	r2, [r3, #0]
	}


	maxPowerLimitM3508 = maxPowerLimitM3508 * shiftBoost * M3508SCALER;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800362c:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <AllBufferCalculations+0x138>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003636:	2301      	movs	r3, #1
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003644:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <AllBufferCalculations+0x138>)
 8003646:	edc3 7a00 	vstr	s15, [r3]
	maxPowerLimitGM6020 = maxPowerLimitGM6020 * 2 * GM6020SCALER;
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <AllBufferCalculations+0x144>)
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003654:	2308      	movs	r3, #8
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <AllBufferCalculations+0x144>)
 8003664:	edc3 7a00 	vstr	s15, [r3]

}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	9999999a 	.word	0x9999999a
 8003674:	40667999 	.word	0x40667999
 8003678:	9999999a 	.word	0x9999999a
 800367c:	40747999 	.word	0x40747999
 8003680:	a0000000 	.word	0xa0000000
 8003684:	40999999 	.word	0x40999999
 8003688:	20000618 	.word	0x20000618
 800368c:	4088f000 	.word	0x4088f000
 8003690:	3727c5ac 	.word	0x3727c5ac
 8003694:	2000061c 	.word	0x2000061c

08003698 <M3508MaxBufferCurve>:

void M3508MaxBufferCurve (int16_t allMotors[8]) {
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	uint32_t sum2 = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 4; i < 8; i++) {
 80036a4:	2304      	movs	r3, #4
 80036a6:	72fb      	strb	r3, [r7, #11]
 80036a8:	e01f      	b.n	80036ea <M3508MaxBufferCurve+0x52>
		if (allMotors[i] > 0) {
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dd0a      	ble.n	80036d0 <M3508MaxBufferCurve+0x38>
			sum2 += allMotors[i];
 80036ba:	7afb      	ldrb	r3, [r7, #11]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e009      	b.n	80036e4 <M3508MaxBufferCurve+0x4c>
		} else {
			sum2 -= allMotors[i];
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036dc:	461a      	mov	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 4; i < 8; i++) {
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	3301      	adds	r3, #1
 80036e8:	72fb      	strb	r3, [r7, #11]
 80036ea:	7afb      	ldrb	r3, [r7, #11]
 80036ec:	2b07      	cmp	r3, #7
 80036ee:	d9dc      	bls.n	80036aa <M3508MaxBufferCurve+0x12>
		}
	}
	M3508PowerScaler = maxPowerLimitM3508/sum2;
 80036f0:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <M3508MaxBufferCurve+0xb8>)
 80036f2:	edd3 6a00 	vldr	s13, [r3]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003704:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <M3508MaxBufferCurve+0xbc>)
 8003706:	edc3 7a00 	vstr	s15, [r3]

	if (M3508PowerScaler > 1) {
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <M3508MaxBufferCurve+0xbc>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	dd04      	ble.n	8003728 <M3508MaxBufferCurve+0x90>
		M3508PowerScaler = 1;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <M3508MaxBufferCurve+0xbc>)
 8003720:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003724:	601a      	str	r2, [r3, #0]
	} else if (M3508PowerScaler < 0) {
		M3508PowerScaler = 0;
	}
}
 8003726:	e00c      	b.n	8003742 <M3508MaxBufferCurve+0xaa>
	} else if (M3508PowerScaler < 0) {
 8003728:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <M3508MaxBufferCurve+0xbc>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d400      	bmi.n	800373a <M3508MaxBufferCurve+0xa2>
}
 8003738:	e003      	b.n	8003742 <M3508MaxBufferCurve+0xaa>
		M3508PowerScaler = 0;
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <M3508MaxBufferCurve+0xbc>)
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000618 	.word	0x20000618
 8003754:	20000620 	.word	0x20000620

08003758 <GM6020MaxBufferCurve>:

void GM6020MaxBufferCurve (int16_t allMotors[8]) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	uint32_t sum1 = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 4; i++) {
 8003764:	2300      	movs	r3, #0
 8003766:	72fb      	strb	r3, [r7, #11]
 8003768:	e01f      	b.n	80037aa <GM6020MaxBufferCurve+0x52>
		if (allMotors[i] > 0) {
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	dd0a      	ble.n	8003790 <GM6020MaxBufferCurve+0x38>
			sum1 += allMotors[i];
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e009      	b.n	80037a4 <GM6020MaxBufferCurve+0x4c>
		} else {
			sum1 -= allMotors[i];
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379c:	461a      	mov	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 4; i++) {
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	3301      	adds	r3, #1
 80037a8:	72fb      	strb	r3, [r7, #11]
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d9dc      	bls.n	800376a <GM6020MaxBufferCurve+0x12>
		}
	}
	GM6020PowerScaler = maxPowerLimitGM6020/sum1;
 80037b0:	4b17      	ldr	r3, [pc, #92]	@ (8003810 <GM6020MaxBufferCurve+0xb8>)
 80037b2:	edd3 6a00 	vldr	s13, [r3]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c4:	4b13      	ldr	r3, [pc, #76]	@ (8003814 <GM6020MaxBufferCurve+0xbc>)
 80037c6:	edc3 7a00 	vstr	s15, [r3]

	if (GM6020PowerScaler > 1) {
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <GM6020MaxBufferCurve+0xbc>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	dd04      	ble.n	80037e8 <GM6020MaxBufferCurve+0x90>
		GM6020PowerScaler = 1;
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <GM6020MaxBufferCurve+0xbc>)
 80037e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80037e4:	601a      	str	r2, [r3, #0]
	} else if (GM6020PowerScaler < 0) {
		GM6020PowerScaler = 0;
	}
}
 80037e6:	e00c      	b.n	8003802 <GM6020MaxBufferCurve+0xaa>
	} else if (GM6020PowerScaler < 0) {
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <GM6020MaxBufferCurve+0xbc>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d400      	bmi.n	80037fa <GM6020MaxBufferCurve+0xa2>
}
 80037f8:	e003      	b.n	8003802 <GM6020MaxBufferCurve+0xaa>
		GM6020PowerScaler = 0;
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <GM6020MaxBufferCurve+0xbc>)
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000061c 	.word	0x2000061c
 8003814:	20000624 	.word	0x20000624

08003818 <DriveAllMotors>:

void DriveAllMotors() {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 800381e:	2300      	movs	r3, #0
 8003820:	71fb      	strb	r3, [r7, #7]
 8003822:	e01b      	b.n	800385c <DriveAllMotors+0x44>
		CAN_setMotorCtrlVal(Bus1, GM6020, i+1, M3508AndGM6020Scaled[i]);
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	3301      	adds	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	b25a      	sxtb	r2, r3
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	490f      	ldr	r1, [pc, #60]	@ (800386c <DriveAllMotors+0x54>)
 8003830:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003834:	2103      	movs	r1, #3
 8003836:	2001      	movs	r0, #1
 8003838:	f7fe fc98 	bl	800216c <CAN_setMotorCtrlVal>
		CAN_setMotorCtrlVal(Bus1, M3508, i+1, M3508AndGM6020Scaled[i+4]);
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	3301      	adds	r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	b25a      	sxtb	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	3304      	adds	r3, #4
 8003848:	4908      	ldr	r1, [pc, #32]	@ (800386c <DriveAllMotors+0x54>)
 800384a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800384e:	2101      	movs	r1, #1
 8003850:	2001      	movs	r0, #1
 8003852:	f7fe fc8b 	bl	800216c <CAN_setMotorCtrlVal>
	for (uint8_t i = 0; i < 4; i++) {
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	3301      	adds	r3, #1
 800385a:	71fb      	strb	r3, [r7, #7]
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d9e0      	bls.n	8003824 <DriveAllMotors+0xc>
	}
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000608 	.word	0x20000608

08003870 <M3508Scaling>:

void M3508Scaling (int16_t allMotors[8]) {
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 4; i < 8; i++) {
 8003878:	2304      	movs	r3, #4
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e01a      	b.n	80038b4 <M3508Scaling+0x44>
		M3508AndGM6020Scaled[i] = allMotors[i]*M3508PowerScaler;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003892:	4b0d      	ldr	r3, [pc, #52]	@ (80038c8 <M3508Scaling+0x58>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038a2:	ee17 2a90 	vmov	r2, s15
 80038a6:	b211      	sxth	r1, r2
 80038a8:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <M3508Scaling+0x5c>)
 80038aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 4; i < 8; i++) {
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	d9e1      	bls.n	800387e <M3508Scaling+0xe>
	}
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	20000620 	.word	0x20000620
 80038cc:	20000608 	.word	0x20000608

080038d0 <GM6020Scaling>:

void GM6020Scaling (int16_t allMotors[8]) {
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e01a      	b.n	8003914 <GM6020Scaling+0x44>
		M3508AndGM6020Scaled[i] = allMotors[i]*GM6020PowerScaler;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <GM6020Scaling+0x58>)
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003902:	ee17 2a90 	vmov	r2, s15
 8003906:	b211      	sxth	r1, r2
 8003908:	4a08      	ldr	r2, [pc, #32]	@ (800392c <GM6020Scaling+0x5c>)
 800390a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 4; i++) {
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	3301      	adds	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d9e1      	bls.n	80038de <GM6020Scaling+0xe>
	}
}
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000624 	.word	0x20000624
 800392c:	20000608 	.word	0x20000608

08003930 <AllCheShit2>:

void AllCheShit2 (int16_t allMotors[8]) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	M3508MaxBufferCurve(allMotors);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fead 	bl	8003698 <M3508MaxBufferCurve>
	GM6020MaxBufferCurve(allMotors);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff0a 	bl	8003758 <GM6020MaxBufferCurve>
	M3508Scaling(allMotors);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff93 	bl	8003870 <M3508Scaling>
	GM6020Scaling(allMotors);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ffc0 	bl	80038d0 <GM6020Scaling>
	DriveAllMotors();
 8003950:	f7ff ff62 	bl	8003818 <DriveAllMotors>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d116      	bne.n	800399e <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 8003970:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003974:	e017      	b.n	80039a6 <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	60fa      	str	r2, [r7, #12]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29a      	uxth	r2, r3
 8003986:	88f9      	ldrh	r1, [r7, #6]
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	404b      	eors	r3, r1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4909      	ldr	r1, [pc, #36]	@ (80039b4 <Get_CRC16_Check_Sum+0x58>)
 8003990:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003994:	4053      	eors	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3b01      	subs	r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e8      	bne.n	8003976 <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 80039a4:	88fb      	ldrh	r3, [r7, #6]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	08012348 	.word	0x08012348

080039b8 <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 80039b8:	b40e      	push	{r1, r2, r3}
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80039c2:	f107 0318 	add.w	r3, r7, #24
 80039c6:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <UART_Printf+0x44>)
 80039c8:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <UART_Printf+0x44>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	480b      	ldr	r0, [pc, #44]	@ (8003a00 <UART_Printf+0x48>)
 80039d2:	f00b fc79 	bl	800f2c8 <vsiprintf>
 80039d6:	4603      	mov	r3, r0
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <UART_Printf+0x4c>)
 80039dc:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <UART_Printf+0x4c>)
 80039e0:	881a      	ldrh	r2, [r3, #0]
 80039e2:	2364      	movs	r3, #100	@ 0x64
 80039e4:	4906      	ldr	r1, [pc, #24]	@ (8003a00 <UART_Printf+0x48>)
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f006 fd92 	bl	800a510 <HAL_UART_Transmit>
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039f6:	b003      	add	sp, #12
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000a2c 	.word	0x20000a2c
 8003a00:	20000a30 	.word	0x20000a30
 8003a04:	20000b30 	.word	0x20000b30

08003a08 <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8003a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a14:	4903      	ldr	r1, [pc, #12]	@ (8003a24 <UART_Ex_Init+0x1c>)
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f006 fe2a 	bl	800a670 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000628 	.word	0x20000628

08003a28 <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8003a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2c:	b0af      	sub	sp, #188	@ 0xbc
 8003a2e:	af12      	add	r7, sp, #72	@ 0x48
 8003a30:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003a32:	460b      	mov	r3, r1
 8003a34:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003a36:	466b      	mov	r3, sp
 8003a38:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 8003a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a3e:	49b7      	ldr	r1, [pc, #732]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a42:	f006 fe15 	bl	800a670 <HAL_UARTEx_ReceiveToIdle_DMA>
	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 8003a46:	49b5      	ldr	r1, [pc, #724]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a4a:	f001 f9a3 	bl	8004d94 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 8003a4e:	4bb3      	ldr	r3, [pc, #716]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a50:	799b      	ldrb	r3, [r3, #6]
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	b21a      	sxth	r2, r3
 8003a58:	4bb0      	ldr	r3, [pc, #704]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a5a:	795b      	ldrb	r3, [r3, #5]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 8003a66:	4bad      	ldr	r3, [pc, #692]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a68:	789b      	ldrb	r3, [r3, #2]
 8003a6a:	b21b      	sxth	r3, r3
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	b21a      	sxth	r2, r3
 8003a70:	4baa      	ldr	r3, [pc, #680]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	4313      	orrs	r3, r2
 8003a78:	b21b      	sxth	r3, r3
 8003a7a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8003a7e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003a82:	3308      	adds	r3, #8
 8003a84:	4aa5      	ldr	r2, [pc, #660]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003a92:	3307      	adds	r3, #7
 8003a94:	49a1      	ldr	r1, [pc, #644]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8003aa2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003aa6:	1dd9      	adds	r1, r3, #7
 8003aa8:	1e4b      	subs	r3, r1, #1
 8003aaa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aac:	460a      	mov	r2, r1
 8003aae:	2300      	movs	r3, #0
 8003ab0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003abe:	00c3      	lsls	r3, r0, #3
 8003ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ac6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac8:	00c2      	lsls	r2, r0, #3
 8003aca:	460a      	mov	r2, r1
 8003acc:	2300      	movs	r3, #0
 8003ace:	4692      	mov	sl, r2
 8003ad0:	469b      	mov	fp, r3
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ade:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	3307      	adds	r3, #7
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	ebad 0d03 	sub.w	sp, sp, r3
 8003af2:	ab12      	add	r3, sp, #72	@ 0x48
 8003af4:	3300      	adds	r3, #0
 8003af6:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003afe:	e00c      	b.n	8003b1a <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 8003b00:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003b04:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b08:	4984      	ldr	r1, [pc, #528]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003b0a:	5c89      	ldrb	r1, [r1, r2]
 8003b0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b0e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8003b10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b14:	3301      	adds	r3, #1
 8003b16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003b1a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003b1e:	1d9a      	adds	r2, r3, #6
 8003b20:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b24:	429a      	cmp	r2, r3
 8003b26:	daeb      	bge.n	8003b00 <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 8003b28:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4b7b      	ldr	r3, [pc, #492]	@ (8003d20 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003b38:	f7ff ff10 	bl	800395c <Get_CRC16_Check_Sum>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 8003b42:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8003b46:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	f040 87b7 	bne.w	8004abe <HAL_UARTEx_RxEventCallback+0x1096>
 8003b50:	466b      	mov	r3, sp
 8003b52:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8003b54:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8003b58:	460b      	mov	r3, r1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b5e:	b28b      	uxth	r3, r1
 8003b60:	2200      	movs	r2, #0
 8003b62:	4698      	mov	r8, r3
 8003b64:	4691      	mov	r9, r2
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b7a:	b28b      	uxth	r3, r1
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	461c      	mov	r4, r3
 8003b80:	4615      	mov	r5, r2
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	00eb      	lsls	r3, r5, #3
 8003b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b90:	00e2      	lsls	r2, r4, #3
 8003b92:	460b      	mov	r3, r1
 8003b94:	3307      	adds	r3, #7
 8003b96:	08db      	lsrs	r3, r3, #3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	ebad 0d03 	sub.w	sp, sp, r3
 8003b9e:	ab12      	add	r3, sp, #72	@ 0x48
 8003ba0:	3300      	adds	r3, #0
 8003ba2:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8003ba4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003ba8:	461a      	mov	r2, r3
 8003baa:	495e      	ldr	r1, [pc, #376]	@ (8003d24 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003bac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003bae:	f00b fc4b 	bl	800f448 <memcpy>

		switch (cmd_id) {
 8003bb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003bb6:	f240 4201 	movw	r2, #1025	@ 0x401
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f000 8772 	beq.w	8004aa4 <HAL_UARTEx_RxEventCallback+0x107c>
 8003bc0:	f240 4201 	movw	r2, #1025	@ 0x401
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	f300 8779 	bgt.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003bca:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8003bce:	f280 8775 	bge.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd6:	dc1c      	bgt.n	8003c12 <HAL_UARTEx_RxEventCallback+0x1ea>
 8003bd8:	f240 220e 	movw	r2, #526	@ 0x20e
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f300 876d 	bgt.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be6:	dc2b      	bgt.n	8003c40 <HAL_UARTEx_RxEventCallback+0x218>
 8003be8:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8003bec:	f280 8766 	bge.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf4:	dc48      	bgt.n	8003c88 <HAL_UARTEx_RxEventCallback+0x260>
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	f000 80db 	beq.w	8003db2 <HAL_UARTEx_RxEventCallback+0x38a>
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	f300 875d 	bgt.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f000 8090 	beq.w	8003d28 <HAL_UARTEx_RxEventCallback+0x300>
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f000 80c7 	beq.w	8003d9c <HAL_UARTEx_RxEventCallback+0x374>
 8003c0e:	f000 bf55 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003c12:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	f200 8750 	bhi.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08004abd 	.word	0x08004abd
 8003c28:	08004701 	.word	0x08004701
 8003c2c:	08004727 	.word	0x08004727
 8003c30:	08004795 	.word	0x08004795
 8003c34:	08004abd 	.word	0x08004abd
 8003c38:	08004abd 	.word	0x08004abd
 8003c3c:	080049f1 	.word	0x080049f1
 8003c40:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003c44:	2b0d      	cmp	r3, #13
 8003c46:	f200 8739 	bhi.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_UARTEx_RxEventCallback+0x228>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	080040d1 	.word	0x080040d1
 8003c54:	080041df 	.word	0x080041df
 8003c58:	08004227 	.word	0x08004227
 8003c5c:	0800426b 	.word	0x0800426b
 8003c60:	08004abd 	.word	0x08004abd
 8003c64:	080042cd 	.word	0x080042cd
 8003c68:	0800430b 	.word	0x0800430b
 8003c6c:	08004369 	.word	0x08004369
 8003c70:	0800439f 	.word	0x0800439f
 8003c74:	080043b5 	.word	0x080043b5
 8003c78:	080043e9 	.word	0x080043e9
 8003c7c:	080044a1 	.word	0x080044a1
 8003c80:	08004541 	.word	0x08004541
 8003c84:	080046c3 	.word	0x080046c3
 8003c88:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f200 8715 	bhi.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003c92:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <HAL_UARTEx_RxEventCallback+0x270>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ed5 	.word	0x08003ed5
 8003c9c:	08004abd 	.word	0x08004abd
 8003ca0:	08004abd 	.word	0x08004abd
 8003ca4:	08004031 	.word	0x08004031
 8003ca8:	08004063 	.word	0x08004063
 8003cac:	08004abd 	.word	0x08004abd
 8003cb0:	08004abd 	.word	0x08004abd
 8003cb4:	08004abd 	.word	0x08004abd
 8003cb8:	08004abd 	.word	0x08004abd
 8003cbc:	08004abd 	.word	0x08004abd
 8003cc0:	08004abd 	.word	0x08004abd
 8003cc4:	08004abd 	.word	0x08004abd
 8003cc8:	08004abd 	.word	0x08004abd
 8003ccc:	08004abd 	.word	0x08004abd
 8003cd0:	08004abd 	.word	0x08004abd
 8003cd4:	08004abd 	.word	0x08004abd
 8003cd8:	08004abd 	.word	0x08004abd
 8003cdc:	08004abd 	.word	0x08004abd
 8003ce0:	08004abd 	.word	0x08004abd
 8003ce4:	08004abd 	.word	0x08004abd
 8003ce8:	08004abd 	.word	0x08004abd
 8003cec:	08004abd 	.word	0x08004abd
 8003cf0:	08004abd 	.word	0x08004abd
 8003cf4:	08004abd 	.word	0x08004abd
 8003cf8:	08004abd 	.word	0x08004abd
 8003cfc:	08004abd 	.word	0x08004abd
 8003d00:	08004abd 	.word	0x08004abd
 8003d04:	08004abd 	.word	0x08004abd
 8003d08:	08004abd 	.word	0x08004abd
 8003d0c:	08004abd 	.word	0x08004abd
 8003d10:	08004abd 	.word	0x08004abd
 8003d14:	08004abd 	.word	0x08004abd
 8003d18:	08004abd 	.word	0x08004abd
 8003d1c:	20000728 	.word	0x20000728
 8003d20:	20000058 	.word	0x20000058
 8003d24:	2000072f 	.word	0x2000072f
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fed3 	bl	8004adc <UART_RM25_getBits>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b63      	ldr	r3, [pc, #396]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d3c:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	2104      	movs	r1, #4
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fec8 	bl	8004adc <UART_RM25_getBits>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b5d      	ldr	r3, [pc, #372]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d52:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	3301      	adds	r3, #1
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d5e:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8003d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d62:	3303      	adds	r3, #3
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d70:	4955      	ldr	r1, [pc, #340]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d72:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 8003d76:	4b54      	ldr	r3, [pc, #336]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d78:	7818      	ldrb	r0, [r3, #0]
 8003d7a:	4b53      	ldr	r3, [pc, #332]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d7c:	7859      	ldrb	r1, [r3, #1]
 8003d7e:	4b52      	ldr	r3, [pc, #328]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d80:	789c      	ldrb	r4, [r3, #2]
 8003d82:	4b51      	ldr	r3, [pc, #324]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d84:	889d      	ldrh	r5, [r3, #4]
 8003d86:	4b50      	ldr	r3, [pc, #320]	@ (8003ec8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d90:	462b      	mov	r3, r5
 8003d92:	4622      	mov	r2, r4
 8003d94:	f7fd fe34 	bl	8001a00 <GAME_STATUS_RxEventCallback>
				break;
 8003d98:	f000 be90 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ecc <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003da2:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 8003da4:	4b49      	ldr	r3, [pc, #292]	@ (8003ecc <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fec4 	bl	8004b36 <GAME_RESULT_RxEventCallback>
				break;
 8003dae:	f000 be85 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 8003db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003dba:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003dc6:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dca:	3304      	adds	r3, #4
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003dd2:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd6:	3306      	adds	r3, #6
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003dde:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 8003de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de2:	330a      	adds	r3, #10
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	4b39      	ldr	r3, [pc, #228]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003dea:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	330c      	adds	r3, #12
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003df6:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8003df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfa:	330e      	adds	r3, #14
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e02:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8003e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e06:	3310      	adds	r3, #16
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e0e:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	3312      	adds	r3, #18
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e1a:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8003e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1e:	3314      	adds	r3, #20
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e26:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8003e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2a:	3316      	adds	r3, #22
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e32:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8003e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e36:	331a      	adds	r3, #26
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e3e:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	331c      	adds	r3, #28
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e4a:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	331e      	adds	r3, #30
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e56:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e5a:	f8b3 c000 	ldrh.w	ip, [r3]
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e60:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e66:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003e6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e6c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003e70:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e72:	8918      	ldrh	r0, [r3, #8]
 8003e74:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e76:	895c      	ldrh	r4, [r3, #10]
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e7a:	899d      	ldrh	r5, [r3, #12]
 8003e7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e7e:	89de      	ldrh	r6, [r3, #14]
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e82:	8a1b      	ldrh	r3, [r3, #16]
 8003e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e86:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e88:	8a5a      	ldrh	r2, [r3, #18]
 8003e8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e8e:	8a99      	ldrh	r1, [r3, #20]
 8003e90:	6279      	str	r1, [r7, #36]	@ 0x24
 8003e92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e94:	8ad9      	ldrh	r1, [r3, #22]
 8003e96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e98:	8b1a      	ldrh	r2, [r3, #24]
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003e9c:	8b5b      	ldrh	r3, [r3, #26]
 8003e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea0:	9208      	str	r2, [sp, #32]
 8003ea2:	9107      	str	r1, [sp, #28]
 8003ea4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ea6:	9106      	str	r1, [sp, #24]
 8003ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eaa:	9205      	str	r2, [sp, #20]
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	9603      	str	r6, [sp, #12]
 8003eb2:	9502      	str	r5, [sp, #8]
 8003eb4:	9401      	str	r4, [sp, #4]
 8003eb6:	9000      	str	r0, [sp, #0]
 8003eb8:	464b      	mov	r3, r9
 8003eba:	4642      	mov	r2, r8
 8003ebc:	4671      	mov	r1, lr
 8003ebe:	4660      	mov	r0, ip
 8003ec0:	f000 fe44 	bl	8004b4c <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8003ec4:	f000 bdfa 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8003ec8:	20000828 	.word	0x20000828
 8003ecc:	20000838 	.word	0x20000838
 8003ed0:	2000083c 	.word	0x2000083c
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fdfd 	bl	8004adc <UART_RM25_getBits>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b77      	ldr	r3, [pc, #476]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ee8:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fdf2 	bl	8004adc <UART_RM25_getBits>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b71      	ldr	r3, [pc, #452]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003efe:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	2102      	movs	r1, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fde7 	bl	8004adc <UART_RM25_getBits>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003f14:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	2103      	movs	r1, #3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fddc 	bl	8004adc <UART_RM25_getBits>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003f2a:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	2104      	movs	r1, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fdd1 	bl	8004adc <UART_RM25_getBits>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003f40:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8003f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2202      	movs	r2, #2
 8003f48:	2105      	movs	r1, #5
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fdc6 	bl	8004adc <UART_RM25_getBits>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b5b      	ldr	r3, [pc, #364]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003f56:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 8003f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2107      	movs	r1, #7
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fdbb 	bl	8004adc <UART_RM25_getBits>
 8003f66:	4603      	mov	r3, r0
 8003f68:	b25c      	sxtb	r4, r3
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fdb2 	bl	8004adc <UART_RM25_getBits>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	4323      	orrs	r3, r4
 8003f82:	b25b      	sxtb	r3, r3
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003f88:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	2208      	movs	r2, #8
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fda2 	bl	8004adc <UART_RM25_getBits>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fd98 	bl	8004adc <UART_RM25_getBits>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 8003fb2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003fb6:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003fb8:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	789b      	ldrb	r3, [r3, #2]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fd8a 	bl	8004adc <UART_RM25_getBits>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003fce:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	789b      	ldrb	r3, [r3, #2]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	2105      	movs	r1, #5
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fd7f 	bl	8004adc <UART_RM25_getBits>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b38      	ldr	r3, [pc, #224]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003fe4:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8003fe6:	4b37      	ldr	r3, [pc, #220]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003fe8:	781e      	ldrb	r6, [r3, #0]
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003fec:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003ff0:	4b34      	ldr	r3, [pc, #208]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ff2:	f893 e002 	ldrb.w	lr, [r3, #2]
 8003ff6:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ff8:	f893 8003 	ldrb.w	r8, [r3, #3]
 8003ffc:	4b31      	ldr	r3, [pc, #196]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ffe:	791b      	ldrb	r3, [r3, #4]
 8004000:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8004002:	7952      	ldrb	r2, [r2, #5]
 8004004:	492f      	ldr	r1, [pc, #188]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8004006:	7989      	ldrb	r1, [r1, #6]
 8004008:	482e      	ldr	r0, [pc, #184]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 800400a:	8900      	ldrh	r0, [r0, #8]
 800400c:	4c2d      	ldr	r4, [pc, #180]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 800400e:	7aa4      	ldrb	r4, [r4, #10]
 8004010:	4d2c      	ldr	r5, [pc, #176]	@ (80040c4 <HAL_UARTEx_RxEventCallback+0x69c>)
 8004012:	7aed      	ldrb	r5, [r5, #11]
 8004014:	9505      	str	r5, [sp, #20]
 8004016:	9404      	str	r4, [sp, #16]
 8004018:	9003      	str	r0, [sp, #12]
 800401a:	9102      	str	r1, [sp, #8]
 800401c:	9201      	str	r2, [sp, #4]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4643      	mov	r3, r8
 8004022:	4672      	mov	r2, lr
 8004024:	4661      	mov	r1, ip
 8004026:	4630      	mov	r0, r6
 8004028:	f000 fda4 	bl	8004b74 <EVENT_DATA_RxEventCallback>
				break;
 800402c:	f000 bd46 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8004030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8004036:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8004038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403a:	3301      	adds	r3, #1
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	4b22      	ldr	r3, [pc, #136]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8004040:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8004042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004044:	3302      	adds	r3, #2
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 800404a:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 800404c:	4b1e      	ldr	r3, [pc, #120]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8004052:	7851      	ldrb	r1, [r2, #1]
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8004056:	7892      	ldrb	r2, [r2, #2]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fd9f 	bl	8004b9c <REFEREE_WARNING_RxEventCallback>
				break;
 800405e:	f000 bd2d 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 8004068:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2203      	movs	r2, #3
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fd32 	bl	8004adc <UART_RM25_getBits>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 800407e:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8004080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2203      	movs	r2, #3
 8004086:	2103      	movs	r1, #3
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fd27 	bl	8004adc <UART_RM25_getBits>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 8004094:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2202      	movs	r2, #2
 800409c:	2106      	movs	r1, #6
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd1c 	bl	8004adc <UART_RM25_getBits>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b08      	ldr	r3, [pc, #32]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 80040aa:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 80040ae:	7818      	ldrb	r0, [r3, #0]
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 80040b2:	7859      	ldrb	r1, [r3, #1]
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 80040b6:	789a      	ldrb	r2, [r3, #2]
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <HAL_UARTEx_RxEventCallback+0x6a4>)
 80040ba:	78db      	ldrb	r3, [r3, #3]
 80040bc:	f000 fd7d 	bl	8004bba <DART_INFO_RxEventCallback>
				break;
 80040c0:	f000 bcfc 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 80040c4:	20000858 	.word	0x20000858
 80040c8:	20000864 	.word	0x20000864
 80040cc:	20000868 	.word	0x20000868
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 80040d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80040d6:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	3301      	adds	r3, #1
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	4b9c      	ldr	r3, [pc, #624]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80040e0:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	3302      	adds	r3, #2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	4b99      	ldr	r3, [pc, #612]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80040ec:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	3304      	adds	r3, #4
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	4b96      	ldr	r3, [pc, #600]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80040f8:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	3306      	adds	r3, #6
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	4b93      	ldr	r3, [pc, #588]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004104:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	3308      	adds	r3, #8
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29a      	uxth	r2, r3
 800410e:	4b90      	ldr	r3, [pc, #576]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004110:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8004112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004114:	330a      	adds	r3, #10
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b8d      	ldr	r3, [pc, #564]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 800411c:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fcd8 	bl	8004adc <UART_RM25_getBits>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	b2d9      	uxtb	r1, r3
 8004134:	4a86      	ldr	r2, [pc, #536]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004136:	7b13      	ldrb	r3, [r2, #12]
 8004138:	f361 0300 	bfi	r3, r1, #0, #1
 800413c:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 800413e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004140:	7b1b      	ldrb	r3, [r3, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fcc8 	bl	8004adc <UART_RM25_getBits>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	4a7e      	ldr	r2, [pc, #504]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004156:	7b13      	ldrb	r3, [r2, #12]
 8004158:	f361 0341 	bfi	r3, r1, #1, #1
 800415c:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	7b1b      	ldrb	r3, [r3, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fcb8 	bl	8004adc <UART_RM25_getBits>
 800416c:	4603      	mov	r3, r0
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	b2d9      	uxtb	r1, r3
 8004174:	4a76      	ldr	r2, [pc, #472]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004176:	7b13      	ldrb	r3, [r2, #12]
 8004178:	f361 0382 	bfi	r3, r1, #2, #1
 800417c:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 800417e:	4b74      	ldr	r3, [pc, #464]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004180:	781c      	ldrb	r4, [r3, #0]
 8004182:	4b73      	ldr	r3, [pc, #460]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004184:	785d      	ldrb	r5, [r3, #1]
 8004186:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004188:	885e      	ldrh	r6, [r3, #2]
 800418a:	4b71      	ldr	r3, [pc, #452]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 800418c:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8004190:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004192:	88db      	ldrh	r3, [r3, #6]
 8004194:	4a6e      	ldr	r2, [pc, #440]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 8004196:	8912      	ldrh	r2, [r2, #8]
 8004198:	496d      	ldr	r1, [pc, #436]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 800419a:	8949      	ldrh	r1, [r1, #10]
 800419c:	486c      	ldr	r0, [pc, #432]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 800419e:	7b00      	ldrb	r0, [r0, #12]
 80041a0:	f3c0 0000 	ubfx	r0, r0, #0, #1
 80041a4:	b2c0      	uxtb	r0, r0
 80041a6:	6338      	str	r0, [r7, #48]	@ 0x30
 80041a8:	4869      	ldr	r0, [pc, #420]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80041aa:	7b00      	ldrb	r0, [r0, #12]
 80041ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80041b0:	b2c0      	uxtb	r0, r0
 80041b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80041b4:	4866      	ldr	r0, [pc, #408]	@ (8004350 <HAL_UARTEx_RxEventCallback+0x928>)
 80041b6:	7b00      	ldrb	r0, [r0, #12]
 80041b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80041bc:	b2c0      	uxtb	r0, r0
 80041be:	9005      	str	r0, [sp, #20]
 80041c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041c2:	9004      	str	r0, [sp, #16]
 80041c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041c6:	9003      	str	r0, [sp, #12]
 80041c8:	9102      	str	r1, [sp, #8]
 80041ca:	9201      	str	r2, [sp, #4]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4663      	mov	r3, ip
 80041d0:	4632      	mov	r2, r6
 80041d2:	4629      	mov	r1, r5
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fd fc41 	bl	8001a5c <ROBOT_STATUS_RxEventCallback>
				break;
 80041da:	f000 bc6f 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	3308      	adds	r3, #8
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 80041e8:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 80041ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ec:	330a      	adds	r3, #10
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	4b58      	ldr	r3, [pc, #352]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 80041f4:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 80041f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f8:	330c      	adds	r3, #12
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	4b55      	ldr	r3, [pc, #340]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004200:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	330e      	adds	r3, #14
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b52      	ldr	r3, [pc, #328]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 800420c:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 800420e:	4b51      	ldr	r3, [pc, #324]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004210:	8818      	ldrh	r0, [r3, #0]
 8004212:	4b50      	ldr	r3, [pc, #320]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004214:	8859      	ldrh	r1, [r3, #2]
 8004216:	4b4f      	ldr	r3, [pc, #316]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004218:	889a      	ldrh	r2, [r3, #4]
 800421a:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <HAL_UARTEx_RxEventCallback+0x92c>)
 800421c:	88db      	ldrh	r3, [r3, #6]
 800421e:	f7fd fc61 	bl	8001ae4 <POWER_HEAT_DATA_RxEventCallback>
				break;
 8004222:	f000 bc4b 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 800422e:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8004230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b48      	ldr	r3, [pc, #288]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 8004238:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	4b45      	ldr	r3, [pc, #276]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 8004242:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 8004244:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 8004246:	edd3 7a00 	vldr	s15, [r3]
 800424a:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 800424c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004250:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_UARTEx_RxEventCallback+0x930>)
 8004252:	edd3 6a02 	vldr	s13, [r3, #8]
 8004256:	eeb0 1a66 	vmov.f32	s2, s13
 800425a:	eef0 0a47 	vmov.f32	s1, s14
 800425e:	eeb0 0a67 	vmov.f32	s0, s15
 8004262:	f000 fcbe 	bl	8004be2 <ROBOT_POSITION_RxEventCallback>
				break;
 8004266:	f000 bc29 	b.w	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 8004270:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 8004272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004274:	3301      	adds	r3, #1
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	4b38      	ldr	r3, [pc, #224]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 800427a:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 800427c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427e:	3302      	adds	r3, #2
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	4b36      	ldr	r3, [pc, #216]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 8004284:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	3303      	adds	r3, #3
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 800428e:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	3304      	adds	r3, #4
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b30      	ldr	r3, [pc, #192]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 800429a:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 800429c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429e:	3305      	adds	r3, #5
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	4b2e      	ldr	r3, [pc, #184]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042a4:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 80042a6:	4b2d      	ldr	r3, [pc, #180]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042a8:	7818      	ldrb	r0, [r3, #0]
 80042aa:	4b2c      	ldr	r3, [pc, #176]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042ac:	7859      	ldrb	r1, [r3, #1]
 80042ae:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042b0:	789c      	ldrb	r4, [r3, #2]
 80042b2:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042b4:	78dd      	ldrb	r5, [r3, #3]
 80042b6:	4b29      	ldr	r3, [pc, #164]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042b8:	889b      	ldrh	r3, [r3, #4]
 80042ba:	4a28      	ldr	r2, [pc, #160]	@ (800435c <HAL_UARTEx_RxEventCallback+0x934>)
 80042bc:	7992      	ldrb	r2, [r2, #6]
 80042be:	9201      	str	r2, [sp, #4]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	462b      	mov	r3, r5
 80042c4:	4622      	mov	r2, r4
 80042c6:	f000 fc9b 	bl	8004c00 <BUFF_RxEventCallback>
				break;
 80042ca:	e3f7      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2204      	movs	r2, #4
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fc01 	bl	8004adc <UART_RM25_getBits>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_UARTEx_RxEventCallback+0x938>)
 80042e0:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2204      	movs	r2, #4
 80042e8:	2104      	movs	r1, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fbf6 	bl	8004adc <UART_RM25_getBits>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004360 <HAL_UARTEx_RxEventCallback+0x938>)
 80042f6:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 80042f8:	4b19      	ldr	r3, [pc, #100]	@ (8004360 <HAL_UARTEx_RxEventCallback+0x938>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_UARTEx_RxEventCallback+0x938>)
 80042fe:	7852      	ldrb	r2, [r2, #1]
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fc90 	bl	8004c28 <DAMAGE_SOURCE_RxEventCallback>
				break;
 8004308:	e3d8      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004310:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 8004312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004314:	3301      	adds	r3, #1
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 800431a:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	3302      	adds	r3, #2
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004324:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	3303      	adds	r3, #3
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004330:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 8004332:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	4a0b      	ldr	r2, [pc, #44]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004338:	7851      	ldrb	r1, [r2, #1]
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 800433c:	7892      	ldrb	r2, [r2, #2]
 800433e:	4809      	ldr	r0, [pc, #36]	@ (8004364 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004340:	edd0 7a01 	vldr	s15, [r0, #4]
 8004344:	eeb0 0a67 	vmov.f32	s0, s15
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fd81 	bl	8001e50 <PROJECTILE_INFO_RxEventCallback>
				break;
 800434e:	e3b5      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8004350:	2000086c 	.word	0x2000086c
 8004354:	2000087c 	.word	0x2000087c
 8004358:	20000884 	.word	0x20000884
 800435c:	20000890 	.word	0x20000890
 8004360:	20000898 	.word	0x20000898
 8004364:	2000089c 	.word	0x2000089c
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29a      	uxth	r2, r3
 800436e:	4b6f      	ldr	r3, [pc, #444]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 8004370:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	3302      	adds	r3, #2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29a      	uxth	r2, r3
 800437a:	4b6c      	ldr	r3, [pc, #432]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 800437c:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 800437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004380:	3304      	adds	r3, #4
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29a      	uxth	r2, r3
 8004386:	4b69      	ldr	r3, [pc, #420]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 8004388:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 800438a:	4b68      	ldr	r3, [pc, #416]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	4a67      	ldr	r2, [pc, #412]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 8004390:	8851      	ldrh	r1, [r2, #2]
 8004392:	4a66      	ldr	r2, [pc, #408]	@ (800452c <HAL_UARTEx_RxEventCallback+0xb04>)
 8004394:	8892      	ldrh	r2, [r2, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fc54 	bl	8004c44 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 800439c:	e38e      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 800439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b62      	ldr	r3, [pc, #392]	@ (8004530 <HAL_UARTEx_RxEventCallback+0xb08>)
 80043a6:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 80043a8:	4b61      	ldr	r3, [pc, #388]	@ (8004530 <HAL_UARTEx_RxEventCallback+0xb08>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fc58 	bl	8004c62 <RFID_RxEventCallback>
				break;
 80043b2:	e383      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 80043b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043ba:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 80043bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043be:	3302      	adds	r3, #2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043c6:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 80043c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ca:	3304      	adds	r3, #4
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	4b58      	ldr	r3, [pc, #352]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043d2:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 80043d4:	4b57      	ldr	r3, [pc, #348]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4a56      	ldr	r2, [pc, #344]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043da:	8851      	ldrh	r1, [r2, #2]
 80043dc:	4a55      	ldr	r2, [pc, #340]	@ (8004534 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80043de:	8892      	ldrh	r2, [r2, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fc48 	bl	8004c76 <DART_COMMAND_RxEventCallback>
				break;
 80043e6:	e369      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 80043e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b52      	ldr	r3, [pc, #328]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 80043f0:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 80043f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f4:	3304      	adds	r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 80043fc:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	3308      	adds	r3, #8
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	4b4c      	ldr	r3, [pc, #304]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004408:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	330c      	adds	r3, #12
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004414:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	3310      	adds	r3, #16
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004420:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	3314      	adds	r3, #20
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 800442c:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	3318      	adds	r3, #24
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b40      	ldr	r3, [pc, #256]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004438:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	331c      	adds	r3, #28
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004444:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 8004446:	4b3c      	ldr	r3, [pc, #240]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004448:	edd3 7a00 	vldr	s15, [r3]
 800444c:	4b3a      	ldr	r3, [pc, #232]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 800444e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004452:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004454:	edd3 6a02 	vldr	s13, [r3, #8]
 8004458:	4b37      	ldr	r3, [pc, #220]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 800445a:	ed93 6a03 	vldr	s12, [r3, #12]
 800445e:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004460:	edd3 5a04 	vldr	s11, [r3, #16]
 8004464:	4b34      	ldr	r3, [pc, #208]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004466:	ed93 5a05 	vldr	s10, [r3, #20]
 800446a:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 800446c:	ed93 3a06 	vldr	s6, [r3, #24]
 8004470:	4b31      	ldr	r3, [pc, #196]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004472:	edd3 3a07 	vldr	s7, [r3, #28]
 8004476:	4b30      	ldr	r3, [pc, #192]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004478:	ed93 4a08 	vldr	s8, [r3, #32]
 800447c:	4b2e      	ldr	r3, [pc, #184]	@ (8004538 <HAL_UARTEx_RxEventCallback+0xb10>)
 800447e:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 8004482:	eef0 2a45 	vmov.f32	s5, s10
 8004486:	eeb0 2a65 	vmov.f32	s4, s11
 800448a:	eef0 1a46 	vmov.f32	s3, s12
 800448e:	eeb0 1a66 	vmov.f32	s2, s13
 8004492:	eef0 0a47 	vmov.f32	s1, s14
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	f000 fbfb 	bl	8004c94 <TEAM_POSITION_RxEventCallback>
				break;
 800449e:	e30d      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 80044a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fb17 	bl	8004adc <UART_RM25_getBits>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 80044b4:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 80044b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb0c 	bl	8004adc <UART_RM25_getBits>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 80044ca:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 80044cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fb01 	bl	8004adc <UART_RM25_getBits>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 80044e0:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 80044e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	2103      	movs	r1, #3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 faf6 	bl	8004adc <UART_RM25_getBits>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 80044f6:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	2104      	movs	r1, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f000 faeb 	bl	8004adc <UART_RM25_getBits>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 800450c:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004510:	7818      	ldrb	r0, [r3, #0]
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004514:	7859      	ldrb	r1, [r3, #1]
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004518:	789a      	ldrb	r2, [r3, #2]
 800451a:	4b08      	ldr	r3, [pc, #32]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 800451c:	78dc      	ldrb	r4, [r3, #3]
 800451e:	4b07      	ldr	r3, [pc, #28]	@ (800453c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004520:	791b      	ldrb	r3, [r3, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	4623      	mov	r3, r4
 8004526:	f000 fbd2 	bl	8004cce <RADAR_MARKING_RxEventCallback>
				break;
 800452a:	e2c7      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 800452c:	200008a4 	.word	0x200008a4
 8004530:	200008ac 	.word	0x200008ac
 8004534:	200008b0 	.word	0x200008b0
 8004538:	200008b8 	.word	0x200008b8
 800453c:	200008e0 	.word	0x200008e0
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 8004540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2203      	movs	r2, #3
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fac3 	bl	8004adc <UART_RM25_getBits>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 800455c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004560:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004562:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 8004564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2204      	movs	r2, #4
 800456a:	2103      	movs	r1, #3
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fab5 	bl	8004adc <UART_RM25_getBits>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	4b83      	ldr	r3, [pc, #524]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004578:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 800457a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2201      	movs	r2, #1
 8004580:	2107      	movs	r1, #7
 8004582:	4618      	mov	r0, r3
 8004584:	f000 faaa 	bl	8004adc <UART_RM25_getBits>
 8004588:	4603      	mov	r3, r0
 800458a:	b25c      	sxtb	r4, r3
 800458c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458e:	789b      	ldrb	r3, [r3, #2]
 8004590:	2203      	movs	r2, #3
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 faa1 	bl	8004adc <UART_RM25_getBits>
 800459a:	4603      	mov	r3, r0
 800459c:	b25b      	sxtb	r3, r3
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	4323      	orrs	r3, r4
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	4b76      	ldr	r3, [pc, #472]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80045aa:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 80045ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	2201      	movs	r2, #1
 80045b2:	2103      	movs	r1, #3
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa91 	bl	8004adc <UART_RM25_getBits>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4b71      	ldr	r3, [pc, #452]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80045c0:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 80045c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c4:	789b      	ldrb	r3, [r3, #2]
 80045c6:	2201      	movs	r2, #1
 80045c8:	2104      	movs	r1, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa86 	bl	8004adc <UART_RM25_getBits>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80045d6:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 80045d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045da:	789b      	ldrb	r3, [r3, #2]
 80045dc:	2203      	movs	r2, #3
 80045de:	2105      	movs	r1, #5
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fa7b 	bl	8004adc <UART_RM25_getBits>
 80045e6:	4603      	mov	r3, r0
 80045e8:	b25c      	sxtb	r4, r3
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	78db      	ldrb	r3, [r3, #3]
 80045ee:	2205      	movs	r2, #5
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa72 	bl	8004adc <UART_RM25_getBits>
 80045f8:	4603      	mov	r3, r0
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	b25b      	sxtb	r3, r3
 8004600:	4323      	orrs	r3, r4
 8004602:	b25b      	sxtb	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800460a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460c:	78db      	ldrb	r3, [r3, #3]
 800460e:	2202      	movs	r2, #2
 8004610:	2105      	movs	r1, #5
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa62 	bl	8004adc <UART_RM25_getBits>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 800461e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004622:	4b58      	ldr	r3, [pc, #352]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004624:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 8004626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004628:	791b      	ldrb	r3, [r3, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa54 	bl	8004adc <UART_RM25_getBits>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	4b52      	ldr	r3, [pc, #328]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800463a:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	791b      	ldrb	r3, [r3, #4]
 8004640:	2207      	movs	r2, #7
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa49 	bl	8004adc <UART_RM25_getBits>
 800464a:	4603      	mov	r3, r0
 800464c:	b25c      	sxtb	r4, r3
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	795b      	ldrb	r3, [r3, #5]
 8004652:	2201      	movs	r2, #1
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fa40 	bl	8004adc <UART_RM25_getBits>
 800465c:	4603      	mov	r3, r0
 800465e:	b25b      	sxtb	r3, r3
 8004660:	01db      	lsls	r3, r3, #7
 8004662:	b25b      	sxtb	r3, r3
 8004664:	4323      	orrs	r3, r4
 8004666:	b25b      	sxtb	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	795b      	ldrb	r3, [r3, #5]
 8004672:	2203      	movs	r2, #3
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fa30 	bl	8004adc <UART_RM25_getBits>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 8004682:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004686:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004688:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 800468a:	4b3e      	ldr	r3, [pc, #248]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800468c:	881c      	ldrh	r4, [r3, #0]
 800468e:	4b3d      	ldr	r3, [pc, #244]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004690:	789d      	ldrb	r5, [r3, #2]
 8004692:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004694:	78de      	ldrb	r6, [r3, #3]
 8004696:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004698:	f893 c004 	ldrb.w	ip, [r3, #4]
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800469e:	795b      	ldrb	r3, [r3, #5]
 80046a0:	4a38      	ldr	r2, [pc, #224]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80046a2:	88d2      	ldrh	r2, [r2, #6]
 80046a4:	4937      	ldr	r1, [pc, #220]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80046a6:	7a09      	ldrb	r1, [r1, #8]
 80046a8:	4836      	ldr	r0, [pc, #216]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80046aa:	8940      	ldrh	r0, [r0, #10]
 80046ac:	9003      	str	r0, [sp, #12]
 80046ae:	9102      	str	r1, [sp, #8]
 80046b0:	9201      	str	r2, [sp, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4663      	mov	r3, ip
 80046b6:	4632      	mov	r2, r6
 80046b8:	4629      	mov	r1, r5
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 fb1b 	bl	8004cf6 <SENTRY_RxEventCallback>
				break;
 80046c0:	e1fc      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 80046c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fa06 	bl	8004adc <UART_RM25_getBits>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <HAL_UARTEx_RxEventCallback+0xd60>)
 80046d6:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 80046d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f9fb 	bl	8004adc <UART_RM25_getBits>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b27      	ldr	r3, [pc, #156]	@ (8004788 <HAL_UARTEx_RxEventCallback+0xd60>)
 80046ec:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 80046ee:	4b26      	ldr	r3, [pc, #152]	@ (8004788 <HAL_UARTEx_RxEventCallback+0xd60>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	4a25      	ldr	r2, [pc, #148]	@ (8004788 <HAL_UARTEx_RxEventCallback+0xd60>)
 80046f4:	7852      	ldrb	r2, [r2, #1]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fb10 	bl	8004d1e <RADAR_BUFF_RxEventCallback>
				break;
 80046fe:	e1dd      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 8004700:	4a22      	ldr	r2, [pc, #136]	@ (800478c <HAL_UARTEx_RxEventCallback+0xd64>)
 8004702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	6828      	ldr	r0, [r5, #0]
 800470a:	6869      	ldr	r1, [r5, #4]
 800470c:	68aa      	ldr	r2, [r5, #8]
 800470e:	68eb      	ldr	r3, [r5, #12]
 8004710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004712:	6928      	ldr	r0, [r5, #16]
 8004714:	6969      	ldr	r1, [r5, #20]
 8004716:	69aa      	ldr	r2, [r5, #24]
 8004718:	c407      	stmia	r4!, {r0, r1, r2}
 800471a:	8bab      	ldrh	r3, [r5, #28]
 800471c:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 800471e:	481b      	ldr	r0, [pc, #108]	@ (800478c <HAL_UARTEx_RxEventCallback+0xd64>)
 8004720:	f7fd f8b2 	bl	8001888 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8004724:	e1ca      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 8004726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800472e:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 8004730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004732:	3304      	adds	r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800473a:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 800473c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473e:	3308      	adds	r3, #8
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004744:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	3309      	adds	r3, #9
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800474e:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	330a      	adds	r3, #10
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29a      	uxth	r2, r3
 8004758:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800475a:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 800475c:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004764:	ed93 7a01 	vldr	s14, [r3, #4]
 8004768:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800476a:	7a1b      	ldrb	r3, [r3, #8]
 800476c:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 800476e:	7a51      	ldrb	r1, [r2, #9]
 8004770:	4a07      	ldr	r2, [pc, #28]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004772:	8952      	ldrh	r2, [r2, #10]
 8004774:	4618      	mov	r0, r3
 8004776:	eef0 0a47 	vmov.f32	s1, s14
 800477a:	eeb0 0a67 	vmov.f32	s0, s15
 800477e:	f000 fadc 	bl	8004d3a <MINIMAP_COMMAND_RxEventCallback>
				break;
 8004782:	e19b      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 8004784:	200008e8 	.word	0x200008e8
 8004788:	200008f4 	.word	0x200008f4
 800478c:	2000098c 	.word	0x2000098c
 8004790:	200008f8 	.word	0x200008f8
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 8004794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29a      	uxth	r2, r3
 800479a:	4b94      	ldr	r3, [pc, #592]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800479c:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 800479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a0:	3302      	adds	r3, #2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	4b91      	ldr	r3, [pc, #580]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047a8:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 80047aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ac:	3304      	adds	r3, #4
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	4b8e      	ldr	r3, [pc, #568]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047b4:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	3306      	adds	r3, #6
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	4b8b      	ldr	r3, [pc, #556]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047be:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 80047c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c2:	3307      	adds	r3, #7
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	4b89      	ldr	r3, [pc, #548]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047c8:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 80047ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047cc:	7a1b      	ldrb	r3, [r3, #8]
 80047ce:	2201      	movs	r2, #1
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f982 	bl	8004adc <UART_RM25_getBits>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	4b83      	ldr	r3, [pc, #524]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047de:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 80047e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e2:	7a1b      	ldrb	r3, [r3, #8]
 80047e4:	2201      	movs	r2, #1
 80047e6:	2101      	movs	r1, #1
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f977 	bl	8004adc <UART_RM25_getBits>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b7e      	ldr	r3, [pc, #504]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f4:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	7a1b      	ldrb	r3, [r3, #8]
 80047fa:	2201      	movs	r2, #1
 80047fc:	2102      	movs	r1, #2
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f96c 	bl	8004adc <UART_RM25_getBits>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	4b78      	ldr	r3, [pc, #480]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800480a:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 800480c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480e:	7a1b      	ldrb	r3, [r3, #8]
 8004810:	2201      	movs	r2, #1
 8004812:	2103      	movs	r1, #3
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f961 	bl	8004adc <UART_RM25_getBits>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	4b73      	ldr	r3, [pc, #460]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004820:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 8004822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004824:	7a1b      	ldrb	r3, [r3, #8]
 8004826:	2201      	movs	r2, #1
 8004828:	2104      	movs	r1, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f956 	bl	8004adc <UART_RM25_getBits>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	4b6d      	ldr	r3, [pc, #436]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004836:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 8004838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483a:	7a1b      	ldrb	r3, [r3, #8]
 800483c:	2201      	movs	r2, #1
 800483e:	2105      	movs	r1, #5
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f94b 	bl	8004adc <UART_RM25_getBits>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	4b68      	ldr	r3, [pc, #416]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800484c:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 800484e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004850:	7a1b      	ldrb	r3, [r3, #8]
 8004852:	2201      	movs	r2, #1
 8004854:	2106      	movs	r1, #6
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f940 	bl	8004adc <UART_RM25_getBits>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	4b62      	ldr	r3, [pc, #392]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004862:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 8004864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004866:	7a1b      	ldrb	r3, [r3, #8]
 8004868:	2201      	movs	r2, #1
 800486a:	2107      	movs	r1, #7
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f935 	bl	8004adc <UART_RM25_getBits>
 8004872:	4603      	mov	r3, r0
 8004874:	461a      	mov	r2, r3
 8004876:	4b5d      	ldr	r3, [pc, #372]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004878:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	7a5b      	ldrb	r3, [r3, #9]
 800487e:	2201      	movs	r2, #1
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f92a 	bl	8004adc <UART_RM25_getBits>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4b57      	ldr	r3, [pc, #348]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800488e:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 8004890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004892:	7a5b      	ldrb	r3, [r3, #9]
 8004894:	2201      	movs	r2, #1
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f91f 	bl	8004adc <UART_RM25_getBits>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80048a4:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 80048a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a8:	7a5b      	ldrb	r3, [r3, #9]
 80048aa:	2201      	movs	r2, #1
 80048ac:	2102      	movs	r1, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f914 	bl	8004adc <UART_RM25_getBits>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b4c      	ldr	r3, [pc, #304]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80048ba:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 80048bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048be:	7a5b      	ldrb	r3, [r3, #9]
 80048c0:	2201      	movs	r2, #1
 80048c2:	2103      	movs	r1, #3
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f909 	bl	8004adc <UART_RM25_getBits>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b47      	ldr	r3, [pc, #284]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80048d0:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 80048d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d4:	7a5b      	ldrb	r3, [r3, #9]
 80048d6:	2201      	movs	r2, #1
 80048d8:	2104      	movs	r1, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f8fe 	bl	8004adc <UART_RM25_getBits>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b41      	ldr	r3, [pc, #260]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80048e6:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 80048e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ea:	7a5b      	ldrb	r3, [r3, #9]
 80048ec:	2201      	movs	r2, #1
 80048ee:	2105      	movs	r1, #5
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f8f3 	bl	8004adc <UART_RM25_getBits>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b3c      	ldr	r3, [pc, #240]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80048fc:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	7a5b      	ldrb	r3, [r3, #9]
 8004902:	2201      	movs	r2, #1
 8004904:	2106      	movs	r1, #6
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f8e8 	bl	8004adc <UART_RM25_getBits>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004912:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 8004914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004916:	7a5b      	ldrb	r3, [r3, #9]
 8004918:	2201      	movs	r2, #1
 800491a:	2107      	movs	r1, #7
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f8dd 	bl	8004adc <UART_RM25_getBits>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004928:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800492c:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004930:	4b2e      	ldr	r3, [pc, #184]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004932:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004936:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004938:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 800493c:	4b2b      	ldr	r3, [pc, #172]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800493e:	f893 9006 	ldrb.w	r9, [r3, #6]
 8004942:	4b2a      	ldr	r3, [pc, #168]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004944:	79db      	ldrb	r3, [r3, #7]
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
 8004948:	4b28      	ldr	r3, [pc, #160]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800494a:	7b1a      	ldrb	r2, [r3, #12]
 800494c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800494e:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004950:	7b59      	ldrb	r1, [r3, #13]
 8004952:	6279      	str	r1, [r7, #36]	@ 0x24
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004956:	7b98      	ldrb	r0, [r3, #14]
 8004958:	6238      	str	r0, [r7, #32]
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800495c:	7bdc      	ldrb	r4, [r3, #15]
 800495e:	61fc      	str	r4, [r7, #28]
 8004960:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004962:	7c1d      	ldrb	r5, [r3, #16]
 8004964:	61bd      	str	r5, [r7, #24]
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004968:	7c5e      	ldrb	r6, [r3, #17]
 800496a:	617e      	str	r6, [r7, #20]
 800496c:	4b1f      	ldr	r3, [pc, #124]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800496e:	f893 b012 	ldrb.w	fp, [r3, #18]
 8004972:	465b      	mov	r3, fp
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004978:	f893 b013 	ldrb.w	fp, [r3, #19]
 800497c:	465a      	mov	r2, fp
 800497e:	60fa      	str	r2, [r7, #12]
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004982:	f893 b014 	ldrb.w	fp, [r3, #20]
 8004986:	4659      	mov	r1, fp
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800498c:	7d5e      	ldrb	r6, [r3, #21]
 800498e:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004990:	7d9d      	ldrb	r5, [r3, #22]
 8004992:	4b16      	ldr	r3, [pc, #88]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004994:	7ddc      	ldrb	r4, [r3, #23]
 8004996:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004998:	7e18      	ldrb	r0, [r3, #24]
 800499a:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 800499c:	7e59      	ldrb	r1, [r3, #25]
 800499e:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80049a0:	7e9a      	ldrb	r2, [r3, #26]
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_UARTEx_RxEventCallback+0xfc4>)
 80049a4:	7edb      	ldrb	r3, [r3, #27]
 80049a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80049a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80049aa:	910e      	str	r1, [sp, #56]	@ 0x38
 80049ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80049ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80049b0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80049b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	9208      	str	r2, [sp, #32]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	9307      	str	r3, [sp, #28]
 80049c0:	697e      	ldr	r6, [r7, #20]
 80049c2:	9606      	str	r6, [sp, #24]
 80049c4:	69bd      	ldr	r5, [r7, #24]
 80049c6:	9505      	str	r5, [sp, #20]
 80049c8:	69fc      	ldr	r4, [r7, #28]
 80049ca:	9404      	str	r4, [sp, #16]
 80049cc:	6a38      	ldr	r0, [r7, #32]
 80049ce:	9003      	str	r0, [sp, #12]
 80049d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049d2:	9102      	str	r1, [sp, #8]
 80049d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049d6:	9201      	str	r2, [sp, #4]
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	464b      	mov	r3, r9
 80049de:	4642      	mov	r2, r8
 80049e0:	4671      	mov	r1, lr
 80049e2:	4660      	mov	r0, ip
 80049e4:	f7fc ff5a 	bl	800189c <PC_CONTROL_RxEventCallback>
				break;
 80049e8:	e068      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
 80049ea:	bf00      	nop
 80049ec:	20000970 	.word	0x20000970
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 80049f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 80049f6:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 80049f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fa:	3301      	adds	r3, #1
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	4b32      	ldr	r3, [pc, #200]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a02:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8004a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a06:	3303      	adds	r3, #3
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a0e:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8004a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a12:	3305      	adds	r3, #5
 8004a14:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a16:	1d90      	adds	r0, r2, #6
 8004a18:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f8d1 c000 	ldr.w	ip, [r1]
 8004a24:	684e      	ldr	r6, [r1, #4]
 8004a26:	688d      	ldr	r5, [r1, #8]
 8004a28:	68c9      	ldr	r1, [r1, #12]
 8004a2a:	f8c2 c000 	str.w	ip, [r2]
 8004a2e:	6056      	str	r6, [r2, #4]
 8004a30:	6095      	str	r5, [r2, #8]
 8004a32:	60d1      	str	r1, [r2, #12]
 8004a34:	3310      	adds	r3, #16
 8004a36:	3010      	adds	r0, #16
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d1ef      	bne.n	8004a1c <HAL_UARTEx_RxEventCallback+0xff4>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 8004a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a44:	3336      	adds	r3, #54	@ 0x36
 8004a46:	4a21      	ldr	r2, [pc, #132]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a48:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8004a4c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8004a50:	4602      	mov	r2, r0
 8004a52:	4619      	mov	r1, r3
 8004a54:	f8d1 c000 	ldr.w	ip, [r1]
 8004a58:	684e      	ldr	r6, [r1, #4]
 8004a5a:	688d      	ldr	r5, [r1, #8]
 8004a5c:	68c9      	ldr	r1, [r1, #12]
 8004a5e:	f8c2 c000 	str.w	ip, [r2]
 8004a62:	6056      	str	r6, [r2, #4]
 8004a64:	6095      	str	r5, [r2, #8]
 8004a66:	60d1      	str	r1, [r2, #12]
 8004a68:	3310      	adds	r3, #16
 8004a6a:	3010      	adds	r0, #16
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	d1ef      	bne.n	8004a50 <HAL_UARTEx_RxEventCallback+0x1028>
 8004a70:	4602      	mov	r2, r0
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	3367      	adds	r3, #103	@ 0x67
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 8004a84:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a86:	7818      	ldrb	r0, [r3, #0]
 8004a88:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a8a:	8859      	ldrh	r1, [r3, #2]
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a8e:	889a      	ldrh	r2, [r3, #4]
 8004a90:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004a92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <HAL_UARTEx_RxEventCallback+0x10a8>)
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <HAL_UARTEx_RxEventCallback+0x10ac>)
 8004a9e:	f000 f95f 	bl	8004d60 <MINIMAP_DATA_RxEventCallback>
				break;
 8004aa2:	e00b      	b.n	8004abc <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8004aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad8 <HAL_UARTEx_RxEventCallback+0x10b0>)
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f00a fcca 	bl	800f448 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 8004ab4:	4808      	ldr	r0, [pc, #32]	@ (8004ad8 <HAL_UARTEx_RxEventCallback+0x10b0>)
 8004ab6:	f000 f963 	bl	8004d80 <CUSTOM_MESSAGE_RxEventCallback>
				break;
 8004aba:	bf00      	nop
 8004abc:	46d5      	mov	sp, sl
 8004abe:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3774      	adds	r7, #116	@ 0x74
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004acc:	20000904 	.word	0x20000904
 8004ad0:	2000093b 	.word	0x2000093b
 8004ad4:	2000090a 	.word	0x2000090a
 8004ad8:	200009ac 	.word	0x200009ac

08004adc <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	71bb      	strb	r3, [r7, #6]
 8004aea:	4613      	mov	r3, r2
 8004aec:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8004af2:	2300      	movs	r3, #0
 8004af4:	73bb      	strb	r3, [r7, #14]
 8004af6:	e013      	b.n	8004b20 <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	79b9      	ldrb	r1, [r7, #6]
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	440b      	add	r3, r1
 8004b00:	fa42 f303 	asr.w	r3, r2, r3
 8004b04:	f003 0201 	and.w	r2, r3, #1
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	b25a      	sxtb	r2, r3
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8004b1a:	7bbb      	ldrb	r3, [r7, #14]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	73bb      	strb	r3, [r7, #14]
 8004b20:	7bba      	ldrb	r2, [r7, #14]
 8004b22:	797b      	ldrb	r3, [r7, #5]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d3e7      	bcc.n	8004af8 <UART_RM25_getBits+0x1c>
	}
	return result;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8004b4c:	b490      	push	{r4, r7}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	80fb      	strh	r3, [r7, #6]
 8004b5e:	4603      	mov	r3, r0
 8004b60:	80bb      	strh	r3, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	807b      	strh	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc90      	pop	{r4, r7}
 8004b72:	4770      	bx	lr

08004b74 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8004b74:	b490      	push	{r4, r7}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	71fb      	strb	r3, [r7, #7]
 8004b86:	4603      	mov	r3, r0
 8004b88:	71bb      	strb	r3, [r7, #6]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	717b      	strb	r3, [r7, #5]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc90      	pop	{r4, r7}
 8004b9a:	4770      	bx	lr

08004b9c <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	71bb      	strb	r3, [r7, #6]
 8004baa:	4613      	mov	r3, r2
 8004bac:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 8004bba:	b490      	push	{r4, r7}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4623      	mov	r3, r4
 8004bca:	71fb      	strb	r3, [r7, #7]
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71bb      	strb	r3, [r7, #6]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	717b      	strb	r3, [r7, #5]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc90      	pop	{r4, r7}
 8004be0:	4770      	bx	lr

08004be2 <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	ed87 0a03 	vstr	s0, [r7, #12]
 8004bec:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bf0:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 8004c00:	b490      	push	{r4, r7}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	71fb      	strb	r3, [r7, #7]
 8004c12:	4603      	mov	r3, r0
 8004c14:	71bb      	strb	r3, [r7, #6]
 8004c16:	460b      	mov	r3, r1
 8004c18:	717b      	strb	r3, [r7, #5]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc90      	pop	{r4, r7}
 8004c26:	4770      	bx	lr

08004c28 <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	460a      	mov	r2, r1
 8004c32:	71fb      	strb	r3, [r7, #7]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
	//NOTE: This function should not be modified
}

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	80bb      	strh	r3, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	71fb      	strb	r3, [r7, #7]
 8004c80:	460b      	mov	r3, r1
 8004c82:	80bb      	strh	r3, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	@ 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004c9e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004ca2:	ed87 1a07 	vstr	s2, [r7, #28]
 8004ca6:	edc7 1a06 	vstr	s3, [r7, #24]
 8004caa:	ed87 2a05 	vstr	s4, [r7, #20]
 8004cae:	edc7 2a04 	vstr	s5, [r7, #16]
 8004cb2:	ed87 3a03 	vstr	s6, [r7, #12]
 8004cb6:	edc7 3a02 	vstr	s7, [r7, #8]
 8004cba:	ed87 4a01 	vstr	s8, [r7, #4]
 8004cbe:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8004cc2:	bf00      	nop
 8004cc4:	372c      	adds	r7, #44	@ 0x2c
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 8004cce:	b490      	push	{r4, r7}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	4611      	mov	r1, r2
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4623      	mov	r3, r4
 8004cde:	71fb      	strb	r3, [r7, #7]
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	71bb      	strb	r3, [r7, #6]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	717b      	strb	r3, [r7, #5]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc90      	pop	{r4, r7}
 8004cf4:	4770      	bx	lr

08004cf6 <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8004cf6:	b490      	push	{r4, r7}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	461a      	mov	r2, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	80fb      	strh	r3, [r7, #6]
 8004d08:	4603      	mov	r3, r0
 8004d0a:	717b      	strb	r3, [r7, #5]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	713b      	strb	r3, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc90      	pop	{r4, r7}
 8004d1c:	4770      	bx	lr

08004d1e <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	460a      	mov	r2, r1
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d44:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	71bb      	strb	r3, [r7, #6]
 8004d50:	4613      	mov	r3, r2
 8004d52:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	81bb      	strh	r3, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_RxEventCallback_RM25Passthrough>:

__weak void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]

}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8004db6:	4a04      	ldr	r2, [pc, #16]	@ (8004dc8 <imu_pwm_set+0x1c>)
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40014400 	.word	0x40014400

08004dcc <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8004dd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004dd8:	f006 feba 	bl	800bb50 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8004ddc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004e80 <imu_temp_control_task+0xb4>
 8004de0:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8004e84 <imu_temp_control_task+0xb8>
 8004de4:	4a28      	ldr	r2, [pc, #160]	@ (8004e88 <imu_temp_control_task+0xbc>)
 8004de6:	2100      	movs	r1, #0
 8004de8:	4828      	ldr	r0, [pc, #160]	@ (8004e8c <imu_temp_control_task+0xc0>)
 8004dea:	f000 fefb 	bl	8005be4 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004dee:	4b28      	ldr	r3, [pc, #160]	@ (8004e90 <imu_temp_control_task+0xc4>)
 8004df0:	2210      	movs	r2, #16
 8004df2:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004df4:	4826      	ldr	r0, [pc, #152]	@ (8004e90 <imu_temp_control_task+0xc4>)
 8004df6:	f004 fa46 	bl	8009286 <HAL_SPI_Init>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8004e00:	f000 feea 	bl	8005bd8 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8004e04:	2000      	movs	r0, #0
 8004e06:	f007 ffc1 	bl	800cd8c <pcTaskGetName>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f008 f851 	bl	800ceb4 <xTaskGetHandle>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <imu_temp_control_task+0xc8>)
 8004e16:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8004e18:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <imu_temp_control_task+0xcc>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8004e1e:	bf00      	nop
 8004e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e24:	2001      	movs	r0, #1
 8004e26:	f008 fc71 	bl	800d70c <ulTaskNotifyTake>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d1f7      	bne.n	8004e20 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8004e30:	f7fc f9e6 	bl	8001200 <IMU_get_temp>
 8004e34:	eef0 7a40 	vmov.f32	s15, s0
 8004e38:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004e9c <imu_temp_control_task+0xd0>
 8004e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e40:	4812      	ldr	r0, [pc, #72]	@ (8004e8c <imu_temp_control_task+0xc0>)
 8004e42:	f000 ff26 	bl	8005c92 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8004e46:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <imu_temp_control_task+0xc0>)
 8004e48:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d503      	bpl.n	8004e5e <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <imu_temp_control_task+0xc0>)
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <imu_temp_control_task+0xc0>)
 8004e60:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 3a90 	vmov	r3, s15
 8004e6c:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8004e6e:	89fb      	ldrh	r3, [r7, #14]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff9b 	bl	8004dac <imu_pwm_set>
        osDelay(5);
 8004e76:	2005      	movs	r0, #5
 8004e78:	f006 fe6a 	bl	800bb50 <osDelay>
    {
 8004e7c:	e7cf      	b.n	8004e1e <imu_temp_control_task+0x52>
 8004e7e:	bf00      	nop
 8004e80:	45898000 	.word	0x45898000
 8004e84:	458ca000 	.word	0x458ca000
 8004e88:	08012548 	.word	0x08012548
 8004e8c:	20000b3c 	.word	0x20000b3c
 8004e90:	20000c2c 	.word	0x20000c2c
 8004e94:	20000b34 	.word	0x20000b34
 8004e98:	20000b38 	.word	0x20000b38
 8004e9c:	42200000 	.word	0x42200000

08004ea0 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <HAL_GPIO_EXTI_Callback+0x54>)
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d11b      	bne.n	8004eec <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8004eb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_GPIO_EXTI_Callback+0x58>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004ebe:	f008 fb97 	bl	800d5f0 <xTaskGetSchedulerState>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d011      	beq.n	8004eec <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <HAL_GPIO_EXTI_Callback+0x5c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	490c      	ldr	r1, [pc, #48]	@ (8004f00 <HAL_GPIO_EXTI_Callback+0x60>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f008 fc68 	bl	800d7a4 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <HAL_GPIO_EXTI_Callback+0x60>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_GPIO_EXTI_Callback+0x4c>
 8004edc:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <HAL_GPIO_EXTI_Callback+0x64>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	2000000e 	.word	0x2000000e
 8004ef8:	20000b38 	.word	0x20000b38
 8004efc:	20000b34 	.word	0x20000b34
 8004f00:	20000b84 	.word	0x20000b84
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f0c:	f001 fe3e 	bl	8006b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f10:	f000 f85a 	bl	8004fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f14:	f000 fccc 	bl	80058b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f18:	f000 fc8c 	bl	8005834 <MX_DMA_Init>
  MX_CAN1_Init();
 8004f1c:	f000 f8c0 	bl	80050a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004f20:	f000 f8f4 	bl	800510c <MX_CAN2_Init>
  MX_SPI1_Init();
 8004f24:	f000 f956 	bl	80051d4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8004f28:	f000 fa32 	bl	8005390 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004f2c:	f000 fc02 	bl	8005734 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004f30:	f000 fc56 	bl	80057e0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004f34:	f000 f984 	bl	8005240 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004f38:	f000 fb12 	bl	8005560 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8004f3c:	f000 fc24 	bl	8005788 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004f40:	f000 fbaa 	bl	8005698 <MX_TIM10_Init>
  MX_I2C3_Init();
 8004f44:	f000 f918 	bl	8005178 <MX_I2C3_Init>
  MX_TIM5_Init();
 8004f48:	f000 fa9a 	bl	8005480 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004f4c:	f006 fd24 	bl	800b998 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8004f50:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <main+0x90>)
 8004f52:	2100      	movs	r1, #0
 8004f54:	4811      	ldr	r0, [pc, #68]	@ (8004f9c <main+0x94>)
 8004f56:	f006 fd69 	bl	800ba2c <osThreadNew>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4a10      	ldr	r2, [pc, #64]	@ (8004fa0 <main+0x98>)
 8004f5e:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8004f60:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <main+0x9c>)
 8004f62:	2100      	movs	r1, #0
 8004f64:	4810      	ldr	r0, [pc, #64]	@ (8004fa8 <main+0xa0>)
 8004f66:	f006 fd61 	bl	800ba2c <osThreadNew>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8004fac <main+0xa4>)
 8004f6e:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(StartChassisTask, NULL, &ChassisTask_attributes);
 8004f70:	4a0f      	ldr	r2, [pc, #60]	@ (8004fb0 <main+0xa8>)
 8004f72:	2100      	movs	r1, #0
 8004f74:	480f      	ldr	r0, [pc, #60]	@ (8004fb4 <main+0xac>)
 8004f76:	f006 fd59 	bl	800ba2c <osThreadNew>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb8 <main+0xb0>)
 8004f7e:	6013      	str	r3, [r2, #0]

  /* creation of SentryAutonomy */
  SentryAutonomyHandle = osThreadNew(StartSentryAutonomy, NULL, &SentryAutonomy_attributes);
 8004f80:	4a0e      	ldr	r2, [pc, #56]	@ (8004fbc <main+0xb4>)
 8004f82:	2100      	movs	r1, #0
 8004f84:	480e      	ldr	r0, [pc, #56]	@ (8004fc0 <main+0xb8>)
 8004f86:	f006 fd51 	bl	800ba2c <osThreadNew>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc4 <main+0xbc>)
 8004f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004f90:	f006 fd26 	bl	800b9e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <main+0x8c>
 8004f98:	08012554 	.word	0x08012554
 8004f9c:	08005abd 	.word	0x08005abd
 8004fa0:	20000fe4 	.word	0x20000fe4
 8004fa4:	08012578 	.word	0x08012578
 8004fa8:	08004dcd 	.word	0x08004dcd
 8004fac:	20000fe8 	.word	0x20000fe8
 8004fb0:	0801259c 	.word	0x0801259c
 8004fb4:	08005b2d 	.word	0x08005b2d
 8004fb8:	20000fec 	.word	0x20000fec
 8004fbc:	080125c0 	.word	0x080125c0
 8004fc0:	08005bc9 	.word	0x08005bc9
 8004fc4:	20000ff0 	.word	0x20000ff0

08004fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b094      	sub	sp, #80	@ 0x50
 8004fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fce:	f107 0320 	add.w	r3, r7, #32
 8004fd2:	2230      	movs	r2, #48	@ 0x30
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f00a f99e 	bl	800f318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	4b29      	ldr	r3, [pc, #164]	@ (8005098 <SystemClock_Config+0xd0>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	4a28      	ldr	r2, [pc, #160]	@ (8005098 <SystemClock_Config+0xd0>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ffc:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <SystemClock_Config+0xd0>)
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005008:	2300      	movs	r3, #0
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	4b23      	ldr	r3, [pc, #140]	@ (800509c <SystemClock_Config+0xd4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a22      	ldr	r2, [pc, #136]	@ (800509c <SystemClock_Config+0xd4>)
 8005012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b20      	ldr	r3, [pc, #128]	@ (800509c <SystemClock_Config+0xd4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005024:	2301      	movs	r3, #1
 8005026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800502e:	2302      	movs	r3, #2
 8005030:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005032:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8005038:	2306      	movs	r3, #6
 800503a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800503c:	23a8      	movs	r3, #168	@ 0xa8
 800503e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005040:	2302      	movs	r3, #2
 8005042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005044:	2304      	movs	r3, #4
 8005046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005048:	f107 0320 	add.w	r3, r7, #32
 800504c:	4618      	mov	r0, r3
 800504e:	f003 fc9b 	bl	8008988 <HAL_RCC_OscConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005058:	f000 fdbe 	bl	8005bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800505c:	230f      	movs	r3, #15
 800505e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005060:	2302      	movs	r3, #2
 8005062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005068:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800506c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800506e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	2105      	movs	r1, #5
 800507a:	4618      	mov	r0, r3
 800507c:	f003 fefc 	bl	8008e78 <HAL_RCC_ClockConfig>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005086:	f000 fda7 	bl	8005bd8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800508a:	f003 ffdb 	bl	8009044 <HAL_RCC_EnableCSS>
}
 800508e:	bf00      	nop
 8005090:	3750      	adds	r7, #80	@ 0x50
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000

080050a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80050a4:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050a6:	4a18      	ldr	r2, [pc, #96]	@ (8005108 <MX_CAN1_Init+0x68>)
 80050a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80050aa:	4b16      	ldr	r3, [pc, #88]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050ac:	2203      	movs	r2, #3
 80050ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80050b0:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80050bc:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050be:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80050c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80050c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050c6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80050ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80050cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050da:	2200      	movs	r2, #0
 80050dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80050e4:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80050f0:	4804      	ldr	r0, [pc, #16]	@ (8005104 <MX_CAN1_Init+0x64>)
 80050f2:	f001 fdbd 	bl	8006c70 <HAL_CAN_Init>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80050fc:	f000 fd6c 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000b88 	.word	0x20000b88
 8005108:	40006400 	.word	0x40006400

0800510c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8005110:	4b17      	ldr	r3, [pc, #92]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005112:	4a18      	ldr	r2, [pc, #96]	@ (8005174 <MX_CAN2_Init+0x68>)
 8005114:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8005116:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005118:	2203      	movs	r2, #3
 800511a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800511c:	4b14      	ldr	r3, [pc, #80]	@ (8005170 <MX_CAN2_Init+0x64>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005122:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005124:	2200      	movs	r2, #0
 8005126:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <MX_CAN2_Init+0x64>)
 800512a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800512e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005130:	4b0f      	ldr	r3, [pc, #60]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005132:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005136:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <MX_CAN2_Init+0x64>)
 800513a:	2200      	movs	r2, #0
 800513c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005140:	2200      	movs	r2, #0
 8005142:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8005144:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005146:	2200      	movs	r2, #0
 8005148:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <MX_CAN2_Init+0x64>)
 800514c:	2200      	movs	r2, #0
 800514e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8005150:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <MX_CAN2_Init+0x64>)
 8005158:	2200      	movs	r2, #0
 800515a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800515c:	4804      	ldr	r0, [pc, #16]	@ (8005170 <MX_CAN2_Init+0x64>)
 800515e:	f001 fd87 	bl	8006c70 <HAL_CAN_Init>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8005168:	f000 fd36 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000bb0 	.word	0x20000bb0
 8005174:	40006800 	.word	0x40006800

08005178 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800517c:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <MX_I2C3_Init+0x50>)
 800517e:	4a13      	ldr	r2, [pc, #76]	@ (80051cc <MX_I2C3_Init+0x54>)
 8005180:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8005182:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <MX_I2C3_Init+0x50>)
 8005184:	4a12      	ldr	r2, [pc, #72]	@ (80051d0 <MX_I2C3_Init+0x58>)
 8005186:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005188:	4b0f      	ldr	r3, [pc, #60]	@ (80051c8 <MX_I2C3_Init+0x50>)
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <MX_I2C3_Init+0x50>)
 8005190:	2200      	movs	r2, #0
 8005192:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <MX_I2C3_Init+0x50>)
 8005196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800519a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800519c:	4b0a      	ldr	r3, [pc, #40]	@ (80051c8 <MX_I2C3_Init+0x50>)
 800519e:	2200      	movs	r2, #0
 80051a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80051a2:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <MX_I2C3_Init+0x50>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051a8:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <MX_I2C3_Init+0x50>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ae:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <MX_I2C3_Init+0x50>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80051b4:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <MX_I2C3_Init+0x50>)
 80051b6:	f003 faa3 	bl	8008700 <HAL_I2C_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80051c0:	f000 fd0a 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000bd8 	.word	0x20000bd8
 80051cc:	40005c00 	.word	0x40005c00
 80051d0:	00061a80 	.word	0x00061a80

080051d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80051d8:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051da:	4a18      	ldr	r2, [pc, #96]	@ (800523c <MX_SPI1_Init+0x68>)
 80051dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80051ec:	4b12      	ldr	r3, [pc, #72]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80051f2:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051f4:	2202      	movs	r2, #2
 80051f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80051f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005238 <MX_SPI1_Init+0x64>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80051fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <MX_SPI1_Init+0x64>)
 8005200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005206:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <MX_SPI1_Init+0x64>)
 8005208:	2238      	movs	r2, #56	@ 0x38
 800520a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <MX_SPI1_Init+0x64>)
 800520e:	2200      	movs	r2, #0
 8005210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005212:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <MX_SPI1_Init+0x64>)
 8005214:	2200      	movs	r2, #0
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005218:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <MX_SPI1_Init+0x64>)
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800521e:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <MX_SPI1_Init+0x64>)
 8005220:	220a      	movs	r2, #10
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005224:	4804      	ldr	r0, [pc, #16]	@ (8005238 <MX_SPI1_Init+0x64>)
 8005226:	f004 f82e 	bl	8009286 <HAL_SPI_Init>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005230:	f000 fcd2 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000c2c 	.word	0x20000c2c
 800523c:	40013000 	.word	0x40013000

08005240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b092      	sub	sp, #72	@ 0x48
 8005244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005246:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	611a      	str	r2, [r3, #16]
 8005260:	615a      	str	r2, [r3, #20]
 8005262:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	2220      	movs	r2, #32
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f00a f854 	bl	800f318 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005270:	4b45      	ldr	r3, [pc, #276]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005272:	4a46      	ldr	r2, [pc, #280]	@ (800538c <MX_TIM1_Init+0x14c>)
 8005274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005276:	4b44      	ldr	r3, [pc, #272]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005278:	2253      	movs	r2, #83	@ 0x53
 800527a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527c:	4b42      	ldr	r3, [pc, #264]	@ (8005388 <MX_TIM1_Init+0x148>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005282:	4b41      	ldr	r3, [pc, #260]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005284:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800528a:	4b3f      	ldr	r3, [pc, #252]	@ (8005388 <MX_TIM1_Init+0x148>)
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005290:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005292:	2200      	movs	r2, #0
 8005294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005296:	4b3c      	ldr	r3, [pc, #240]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800529c:	483a      	ldr	r0, [pc, #232]	@ (8005388 <MX_TIM1_Init+0x148>)
 800529e:	f004 fb50 	bl	8009942 <HAL_TIM_PWM_Init>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80052a8:	f000 fc96 	bl	8005bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ac:	2300      	movs	r3, #0
 80052ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80052b8:	4619      	mov	r1, r3
 80052ba:	4833      	ldr	r0, [pc, #204]	@ (8005388 <MX_TIM1_Init+0x148>)
 80052bc:	f005 f80a 	bl	800a2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80052c6:	f000 fc87 	bl	8005bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ca:	2360      	movs	r3, #96	@ 0x60
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052d2:	2300      	movs	r3, #0
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80052d6:	2300      	movs	r3, #0
 80052d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ea:	2200      	movs	r2, #0
 80052ec:	4619      	mov	r1, r3
 80052ee:	4826      	ldr	r0, [pc, #152]	@ (8005388 <MX_TIM1_Init+0x148>)
 80052f0:	f004 fb76 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80052fa:	f000 fc6d 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80052fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005302:	2204      	movs	r2, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4820      	ldr	r0, [pc, #128]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005308:	f004 fb6a 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005312:	f000 fc61 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800531a:	2208      	movs	r2, #8
 800531c:	4619      	mov	r1, r3
 800531e:	481a      	ldr	r0, [pc, #104]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005320:	f004 fb5e 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800532a:	f000 fc55 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800532e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005332:	220c      	movs	r2, #12
 8005334:	4619      	mov	r1, r3
 8005336:	4814      	ldr	r0, [pc, #80]	@ (8005388 <MX_TIM1_Init+0x148>)
 8005338:	f004 fb52 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005342:	f000 fc49 	bl	8005bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800535a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800535e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005360:	2300      	movs	r3, #0
 8005362:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4807      	ldr	r0, [pc, #28]	@ (8005388 <MX_TIM1_Init+0x148>)
 800536a:	f005 f82f 	bl	800a3cc <HAL_TIMEx_ConfigBreakDeadTime>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005374:	f000 fc30 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005378:	4803      	ldr	r0, [pc, #12]	@ (8005388 <MX_TIM1_Init+0x148>)
 800537a:	f001 f807 	bl	800638c <HAL_TIM_MspPostInit>

}
 800537e:	bf00      	nop
 8005380:	3748      	adds	r7, #72	@ 0x48
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000c84 	.word	0x20000c84
 800538c:	40010000 	.word	0x40010000

08005390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08e      	sub	sp, #56	@ 0x38
 8005394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005396:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053a4:	f107 0320 	add.w	r3, r7, #32
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	605a      	str	r2, [r3, #4]
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	611a      	str	r2, [r3, #16]
 80053bc:	615a      	str	r2, [r3, #20]
 80053be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80053c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053c2:	4a2e      	ldr	r2, [pc, #184]	@ (800547c <MX_TIM4_Init+0xec>)
 80053c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80053c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80053d2:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053d4:	f245 2207 	movw	r2, #20999	@ 0x5207
 80053d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053da:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053e0:	4b25      	ldr	r3, [pc, #148]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053e2:	2280      	movs	r2, #128	@ 0x80
 80053e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80053e6:	4824      	ldr	r0, [pc, #144]	@ (8005478 <MX_TIM4_Init+0xe8>)
 80053e8:	f004 fa5c 	bl	80098a4 <HAL_TIM_Base_Init>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80053f2:	f000 fbf1 	bl	8005bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80053fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005400:	4619      	mov	r1, r3
 8005402:	481d      	ldr	r0, [pc, #116]	@ (8005478 <MX_TIM4_Init+0xe8>)
 8005404:	f004 fbae 	bl	8009b64 <HAL_TIM_ConfigClockSource>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800540e:	f000 fbe3 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005412:	4819      	ldr	r0, [pc, #100]	@ (8005478 <MX_TIM4_Init+0xe8>)
 8005414:	f004 fa95 	bl	8009942 <HAL_TIM_PWM_Init>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800541e:	f000 fbdb 	bl	8005bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800542a:	f107 0320 	add.w	r3, r7, #32
 800542e:	4619      	mov	r1, r3
 8005430:	4811      	ldr	r0, [pc, #68]	@ (8005478 <MX_TIM4_Init+0xe8>)
 8005432:	f004 ff4f 	bl	800a2d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800543c:	f000 fbcc 	bl	8005bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005440:	2360      	movs	r3, #96	@ 0x60
 8005442:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8005444:	f642 1303 	movw	r3, #10499	@ 0x2903
 8005448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	2208      	movs	r2, #8
 8005456:	4619      	mov	r1, r3
 8005458:	4807      	ldr	r0, [pc, #28]	@ (8005478 <MX_TIM4_Init+0xe8>)
 800545a:	f004 fac1 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005464:	f000 fbb8 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005468:	4803      	ldr	r0, [pc, #12]	@ (8005478 <MX_TIM4_Init+0xe8>)
 800546a:	f000 ff8f 	bl	800638c <HAL_TIM_MspPostInit>

}
 800546e:	bf00      	nop
 8005470:	3738      	adds	r7, #56	@ 0x38
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000ccc 	.word	0x20000ccc
 800547c:	40000800 	.word	0x40000800

08005480 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005486:	f107 0320 	add.w	r3, r7, #32
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	609a      	str	r2, [r3, #8]
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	611a      	str	r2, [r3, #16]
 800549e:	615a      	str	r2, [r3, #20]
 80054a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054a4:	4a2d      	ldr	r2, [pc, #180]	@ (800555c <MX_TIM5_Init+0xdc>)
 80054a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 80054a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054aa:	222a      	movs	r2, #42	@ 0x2a
 80054ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80054b4:	4b28      	ldr	r3, [pc, #160]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054b6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80054ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054bc:	4b26      	ldr	r3, [pc, #152]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054be:	2200      	movs	r2, #0
 80054c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054c2:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80054c8:	4823      	ldr	r0, [pc, #140]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054ca:	f004 fa3a 	bl	8009942 <HAL_TIM_PWM_Init>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80054d4:	f000 fb80 	bl	8005bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054dc:	2300      	movs	r3, #0
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80054e0:	f107 0320 	add.w	r3, r7, #32
 80054e4:	4619      	mov	r1, r3
 80054e6:	481c      	ldr	r0, [pc, #112]	@ (8005558 <MX_TIM5_Init+0xd8>)
 80054e8:	f004 fef4 	bl	800a2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80054f2:	f000 fb71 	bl	8005bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054f6:	2360      	movs	r3, #96	@ 0x60
 80054f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	2200      	movs	r2, #0
 800550a:	4619      	mov	r1, r3
 800550c:	4812      	ldr	r0, [pc, #72]	@ (8005558 <MX_TIM5_Init+0xd8>)
 800550e:	f004 fa67 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005518:	f000 fb5e 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	2204      	movs	r2, #4
 8005520:	4619      	mov	r1, r3
 8005522:	480d      	ldr	r0, [pc, #52]	@ (8005558 <MX_TIM5_Init+0xd8>)
 8005524:	f004 fa5c 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800552e:	f000 fb53 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	2208      	movs	r2, #8
 8005536:	4619      	mov	r1, r3
 8005538:	4807      	ldr	r0, [pc, #28]	@ (8005558 <MX_TIM5_Init+0xd8>)
 800553a:	f004 fa51 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8005544:	f000 fb48 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005548:	4803      	ldr	r0, [pc, #12]	@ (8005558 <MX_TIM5_Init+0xd8>)
 800554a:	f000 ff1f 	bl	800638c <HAL_TIM_MspPostInit>

}
 800554e:	bf00      	nop
 8005550:	3728      	adds	r7, #40	@ 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000d14 	.word	0x20000d14
 800555c:	40000c00 	.word	0x40000c00

08005560 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b092      	sub	sp, #72	@ 0x48
 8005564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005566:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	615a      	str	r2, [r3, #20]
 8005582:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	2220      	movs	r2, #32
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f009 fec4 	bl	800f318 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005590:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005592:	4a40      	ldr	r2, [pc, #256]	@ (8005694 <MX_TIM8_Init+0x134>)
 8005594:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8005596:	4b3e      	ldr	r3, [pc, #248]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005598:	2253      	movs	r2, #83	@ 0x53
 800559a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800559c:	4b3c      	ldr	r3, [pc, #240]	@ (8005690 <MX_TIM8_Init+0x130>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80055a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80055a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80055b0:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055b6:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055b8:	2280      	movs	r2, #128	@ 0x80
 80055ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80055bc:	4834      	ldr	r0, [pc, #208]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055be:	f004 f9c0 	bl	8009942 <HAL_TIM_PWM_Init>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80055c8:	f000 fb06 	bl	8005bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055cc:	2300      	movs	r3, #0
 80055ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80055d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055d8:	4619      	mov	r1, r3
 80055da:	482d      	ldr	r0, [pc, #180]	@ (8005690 <MX_TIM8_Init+0x130>)
 80055dc:	f004 fe7a 	bl	800a2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80055e6:	f000 faf7 	bl	8005bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055ea:	2360      	movs	r3, #96	@ 0x60
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80055f6:	2300      	movs	r3, #0
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800560a:	2200      	movs	r2, #0
 800560c:	4619      	mov	r1, r3
 800560e:	4820      	ldr	r0, [pc, #128]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005610:	f004 f9e6 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800561a:	f000 fadd 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800561e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005622:	2204      	movs	r2, #4
 8005624:	4619      	mov	r1, r3
 8005626:	481a      	ldr	r0, [pc, #104]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005628:	f004 f9da 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8005632:	f000 fad1 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800563a:	2208      	movs	r2, #8
 800563c:	4619      	mov	r1, r3
 800563e:	4814      	ldr	r0, [pc, #80]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005640:	f004 f9ce 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800564a:	f000 fac5 	bl	8005bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005666:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005668:	2300      	movs	r3, #0
 800566a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4807      	ldr	r0, [pc, #28]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005672:	f004 feab 	bl	800a3cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 800567c:	f000 faac 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005680:	4803      	ldr	r0, [pc, #12]	@ (8005690 <MX_TIM8_Init+0x130>)
 8005682:	f000 fe83 	bl	800638c <HAL_TIM_MspPostInit>

}
 8005686:	bf00      	nop
 8005688:	3748      	adds	r7, #72	@ 0x48
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000d5c 	.word	0x20000d5c
 8005694:	40010400 	.word	0x40010400

08005698 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80056b0:	4b1e      	ldr	r3, [pc, #120]	@ (800572c <MX_TIM10_Init+0x94>)
 80056b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005730 <MX_TIM10_Init+0x98>)
 80056b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80056b6:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <MX_TIM10_Init+0x94>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056bc:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <MX_TIM10_Init+0x94>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <MX_TIM10_Init+0x94>)
 80056c4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80056c8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ca:	4b18      	ldr	r3, [pc, #96]	@ (800572c <MX_TIM10_Init+0x94>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056d0:	4b16      	ldr	r3, [pc, #88]	@ (800572c <MX_TIM10_Init+0x94>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80056d6:	4815      	ldr	r0, [pc, #84]	@ (800572c <MX_TIM10_Init+0x94>)
 80056d8:	f004 f8e4 	bl	80098a4 <HAL_TIM_Base_Init>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80056e2:	f000 fa79 	bl	8005bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80056e6:	4811      	ldr	r0, [pc, #68]	@ (800572c <MX_TIM10_Init+0x94>)
 80056e8:	f004 f92b 	bl	8009942 <HAL_TIM_PWM_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80056f2:	f000 fa71 	bl	8005bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056f6:	2360      	movs	r3, #96	@ 0x60
 80056f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005706:	1d3b      	adds	r3, r7, #4
 8005708:	2200      	movs	r2, #0
 800570a:	4619      	mov	r1, r3
 800570c:	4807      	ldr	r0, [pc, #28]	@ (800572c <MX_TIM10_Init+0x94>)
 800570e:	f004 f967 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005718:	f000 fa5e 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800571c:	4803      	ldr	r0, [pc, #12]	@ (800572c <MX_TIM10_Init+0x94>)
 800571e:	f000 fe35 	bl	800638c <HAL_TIM_MspPostInit>

}
 8005722:	bf00      	nop
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000da4 	.word	0x20000da4
 8005730:	40014400 	.word	0x40014400

08005734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005738:	4b11      	ldr	r3, [pc, #68]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 800573a:	4a12      	ldr	r2, [pc, #72]	@ (8005784 <MX_USART1_UART_Init+0x50>)
 800573c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800573e:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 8005740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005746:	4b0e      	ldr	r3, [pc, #56]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 8005748:	2200      	movs	r2, #0
 800574a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 800574e:	2200      	movs	r2, #0
 8005750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005752:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 8005754:	2200      	movs	r2, #0
 8005756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005758:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 800575a:	220c      	movs	r2, #12
 800575c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 8005760:	2200      	movs	r2, #0
 8005762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 8005766:	2200      	movs	r2, #0
 8005768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800576a:	4805      	ldr	r0, [pc, #20]	@ (8005780 <MX_USART1_UART_Init+0x4c>)
 800576c:	f004 fe80 	bl	800a470 <HAL_UART_Init>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005776:	f000 fa2f 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000dec 	.word	0x20000dec
 8005784:	40011000 	.word	0x40011000

08005788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800578c:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 800578e:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <MX_USART3_UART_Init+0x50>)
 8005790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8005792:	4b10      	ldr	r3, [pc, #64]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 8005794:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <MX_USART3_UART_Init+0x54>)
 8005796:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800579e:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80057a4:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057ac:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057ae:	220c      	movs	r2, #12
 80057b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057b2:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057b8:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057be:	4805      	ldr	r0, [pc, #20]	@ (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057c0:	f004 fe56 	bl	800a470 <HAL_UART_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80057ca:	f000 fa05 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000e34 	.word	0x20000e34
 80057d8:	40004800 	.word	0x40004800
 80057dc:	000186a0 	.word	0x000186a0

080057e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80057e4:	4b11      	ldr	r3, [pc, #68]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <MX_USART6_UART_Init+0x50>)
 80057e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80057ea:	4b10      	ldr	r3, [pc, #64]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 80057ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80057f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80057f2:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 8005800:	2200      	movs	r2, #0
 8005802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005804:	4b09      	ldr	r3, [pc, #36]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 8005806:	220c      	movs	r2, #12
 8005808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005816:	4805      	ldr	r0, [pc, #20]	@ (800582c <MX_USART6_UART_Init+0x4c>)
 8005818:	f004 fe2a 	bl	800a470 <HAL_UART_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005822:	f000 f9d9 	bl	8005bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000e7c 	.word	0x20000e7c
 8005830:	40011400 	.word	0x40011400

08005834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <MX_DMA_Init+0x78>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <MX_DMA_Init+0x78>)
 8005844:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005848:	6313      	str	r3, [r2, #48]	@ 0x30
 800584a:	4b18      	ldr	r3, [pc, #96]	@ (80058ac <MX_DMA_Init+0x78>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <MX_DMA_Init+0x78>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <MX_DMA_Init+0x78>)
 8005860:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005864:	6313      	str	r3, [r2, #48]	@ 0x30
 8005866:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <MX_DMA_Init+0x78>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8005872:	2200      	movs	r2, #0
 8005874:	2105      	movs	r1, #5
 8005876:	200c      	movs	r0, #12
 8005878:	f002 f93b 	bl	8007af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800587c:	200c      	movs	r0, #12
 800587e:	f002 f954 	bl	8007b2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005882:	2200      	movs	r2, #0
 8005884:	2105      	movs	r1, #5
 8005886:	2039      	movs	r0, #57	@ 0x39
 8005888:	f002 f933 	bl	8007af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800588c:	2039      	movs	r0, #57	@ 0x39
 800588e:	f002 f94c 	bl	8007b2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8005892:	2200      	movs	r2, #0
 8005894:	2105      	movs	r1, #5
 8005896:	203a      	movs	r0, #58	@ 0x3a
 8005898:	f002 f92b 	bl	8007af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800589c:	203a      	movs	r0, #58	@ 0x3a
 800589e:	f002 f944 	bl	8007b2a <HAL_NVIC_EnableIRQ>

}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800

080058b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	@ 0x38
 80058b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	4b77      	ldr	r3, [pc, #476]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	4a76      	ldr	r2, [pc, #472]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058d6:	4b74      	ldr	r3, [pc, #464]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	4b70      	ldr	r3, [pc, #448]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	4a6f      	ldr	r2, [pc, #444]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058f2:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	4b69      	ldr	r3, [pc, #420]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	4a68      	ldr	r2, [pc, #416]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	6313      	str	r3, [r2, #48]	@ 0x30
 800590e:	4b66      	ldr	r3, [pc, #408]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	4b62      	ldr	r3, [pc, #392]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	4a61      	ldr	r2, [pc, #388]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005924:	f043 0308 	orr.w	r3, r3, #8
 8005928:	6313      	str	r3, [r2, #48]	@ 0x30
 800592a:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593e:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005940:	f043 0304 	orr.w	r3, r3, #4
 8005944:	6313      	str	r3, [r2, #48]	@ 0x30
 8005946:	4b58      	ldr	r3, [pc, #352]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b54      	ldr	r3, [pc, #336]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	4a53      	ldr	r2, [pc, #332]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005960:	6313      	str	r3, [r2, #48]	@ 0x30
 8005962:	4b51      	ldr	r3, [pc, #324]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597c:	6313      	str	r3, [r2, #48]	@ 0x30
 800597e:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	4b46      	ldr	r3, [pc, #280]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005992:	4a45      	ldr	r2, [pc, #276]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 8005994:	f043 0320 	orr.w	r3, r3, #32
 8005998:	6313      	str	r3, [r2, #48]	@ 0x30
 800599a:	4b43      	ldr	r3, [pc, #268]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	4a3e      	ldr	r2, [pc, #248]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80059b0:	f043 0310 	orr.w	r3, r3, #16
 80059b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059b6:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa8 <MX_GPIO_Init+0x1f8>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2140      	movs	r1, #64	@ 0x40
 80059c6:	4839      	ldr	r0, [pc, #228]	@ (8005aac <MX_GPIO_Init+0x1fc>)
 80059c8:	f002 fe68 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80059cc:	2200      	movs	r2, #0
 80059ce:	2110      	movs	r1, #16
 80059d0:	4837      	ldr	r0, [pc, #220]	@ (8005ab0 <MX_GPIO_Init+0x200>)
 80059d2:	f002 fe63 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80059d6:	2200      	movs	r2, #0
 80059d8:	2101      	movs	r1, #1
 80059da:	4836      	ldr	r0, [pc, #216]	@ (8005ab4 <MX_GPIO_Init+0x204>)
 80059dc:	f002 fe5e 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80059e0:	2340      	movs	r3, #64	@ 0x40
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e4:	2301      	movs	r3, #1
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ec:	2300      	movs	r3, #0
 80059ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80059f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059f4:	4619      	mov	r1, r3
 80059f6:	482d      	ldr	r0, [pc, #180]	@ (8005aac <MX_GPIO_Init+0x1fc>)
 80059f8:	f002 fcb4 	bl	8008364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059fc:	2308      	movs	r3, #8
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4826      	ldr	r0, [pc, #152]	@ (8005aac <MX_GPIO_Init+0x1fc>)
 8005a12:	f002 fca7 	bl	8008364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a16:	2301      	movs	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a26:	4619      	mov	r1, r3
 8005a28:	4821      	ldr	r0, [pc, #132]	@ (8005ab0 <MX_GPIO_Init+0x200>)
 8005a2a:	f002 fc9b 	bl	8008364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a2e:	2310      	movs	r3, #16
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a42:	4619      	mov	r1, r3
 8005a44:	481a      	ldr	r0, [pc, #104]	@ (8005ab0 <MX_GPIO_Init+0x200>)
 8005a46:	f002 fc8d 	bl	8008364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8005a4a:	2330      	movs	r3, #48	@ 0x30
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4816      	ldr	r0, [pc, #88]	@ (8005ab8 <MX_GPIO_Init+0x208>)
 8005a60:	f002 fc80 	bl	8008364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a64:	2301      	movs	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a70:	2300      	movs	r3, #0
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a78:	4619      	mov	r1, r3
 8005a7a:	480e      	ldr	r0, [pc, #56]	@ (8005ab4 <MX_GPIO_Init+0x204>)
 8005a7c:	f002 fc72 	bl	8008364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005a80:	2200      	movs	r2, #0
 8005a82:	2105      	movs	r1, #5
 8005a84:	2009      	movs	r0, #9
 8005a86:	f002 f834 	bl	8007af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005a8a:	2009      	movs	r0, #9
 8005a8c:	f002 f84d 	bl	8007b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005a90:	2200      	movs	r2, #0
 8005a92:	2105      	movs	r1, #5
 8005a94:	200a      	movs	r0, #10
 8005a96:	f002 f82c 	bl	8007af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005a9a:	200a      	movs	r0, #10
 8005a9c:	f002 f845 	bl	8007b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005aa0:	bf00      	nop
 8005aa2:	3738      	adds	r7, #56	@ 0x38
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40021800 	.word	0x40021800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40020800 	.word	0x40020800

08005abc <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

	DBUS_Rx_Init(&huart3);
 8005ac8:	4814      	ldr	r0, [pc, #80]	@ (8005b1c <StartFlowManager+0x60>)
 8005aca:	f7fc ff3b 	bl	8002944 <DBUS_Rx_Init>

	UART_Ex_Init(&huart1);
 8005ace:	4814      	ldr	r0, [pc, #80]	@ (8005b20 <StartFlowManager+0x64>)
 8005ad0:	f7fd ff9a 	bl	8003a08 <UART_Ex_Init>
	UART_Ex_Init(&huart6);
 8005ad4:	4813      	ldr	r0, [pc, #76]	@ (8005b24 <StartFlowManager+0x68>)
 8005ad6:	f7fd ff97 	bl	8003a08 <UART_Ex_Init>
	CAN_Init();
 8005ada:	f7fc fef7 	bl	80028cc <CAN_Init>
	BMI088_gyro_init();
 8005ade:	f7fb faf7 	bl	80010d0 <BMI088_gyro_init>
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 8005ae2:	f7fc ff61 	bl	80029a8 <DBUS_Update>

	  // UART_Printf(&huart1, "%d %d\r\n", CAL_getBufferEnergy(), CAL_getPowerLimit());

	  if(iCount%3==0){
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b28 <StartFlowManager+0x6c>)
 8005aea:	fba3 1302 	umull	r1, r3, r3, r2
 8005aee:	0859      	lsrs	r1, r3, #1
 8005af0:	460b      	mov	r3, r1
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	440b      	add	r3, r1
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <StartFlowManager+0x46>
		  CAL_Update();
 8005afe:	f7fb fccf 	bl	80014a0 <CAL_Update>


	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2bff      	cmp	r3, #255	@ 0xff
 8005b06:	d003      	beq.n	8005b10 <StartFlowManager+0x54>
		  iCount++;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e001      	b.n	8005b14 <StartFlowManager+0x58>
	  }else{
		  iCount = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
	  }
	  osDelay(1);
 8005b14:	2001      	movs	r0, #1
 8005b16:	f006 f81b 	bl	800bb50 <osDelay>
	  DBUS_Update();
 8005b1a:	e7e2      	b.n	8005ae2 <StartFlowManager+0x26>
 8005b1c:	20000e34 	.word	0x20000e34
 8005b20:	20000dec 	.word	0x20000dec
 8005b24:	20000e7c 	.word	0x20000e7c
 8005b28:	aaaaaaab 	.word	0xaaaaaaab

08005b2c <StartChassisTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassisTask */
void StartChassisTask(void *argument)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassisTask */
	PID_preset_t test = {5.0, 0.0, 0.0};
 8005b34:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <StartChassisTask+0x90>)
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
	int16_t axis[3] = {0, 0, 0};
 8005b44:	2300      	movs	r3, #0
 8005b46:	81bb      	strh	r3, [r7, #12]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	81fb      	strh	r3, [r7, #14]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	823b      	strh	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  axis[0] = CAL_getFrontBack();
 8005b50:	f7fc f9a0 	bl	8001e94 <CAL_getFrontBack>
 8005b54:	4603      	mov	r3, r0
 8005b56:	81bb      	strh	r3, [r7, #12]
	  axis[1] = CAL_getRightLeft();
 8005b58:	f7fc f9a8 	bl	8001eac <CAL_getRightLeft>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	81fb      	strh	r3, [r7, #14]
	  axis[2] = CAL_getChassisSpin();
 8005b60:	f7fc f9b0 	bl	8001ec4 <CAL_getChassisSpin>
 8005b64:	4603      	mov	r3, r0
 8005b66:	823b      	strh	r3, [r7, #16]
	  AllBufferCalculations(CAL_getBufferEnergy(), 0, axis);
 8005b68:	f7fc f988 	bl	8001e7c <CAL_getBufferEnergy>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	461a      	mov	r2, r3
 8005b76:	2100      	movs	r1, #0
 8005b78:	f7fd fcea 	bl	8003550 <AllBufferCalculations>
	  UART_Printf(&huart1, "%f\r\n", CAL_getInitialSpeed());
 8005b7c:	f7fc f9ae 	bl	8001edc <CAL_getInitialSpeed>
 8005b80:	ee10 3a10 	vmov	r3, s0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fa fcdf 	bl	8000548 <__aeabi_f2d>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	490c      	ldr	r1, [pc, #48]	@ (8005bc0 <StartChassisTask+0x94>)
 8005b90:	480c      	ldr	r0, [pc, #48]	@ (8005bc4 <StartChassisTask+0x98>)
 8005b92:	f7fd ff11 	bl	80039b8 <UART_Printf>
	  // UART_Printf(&huart1, "%d %d %d\r\n",axis[0], axis[1], axis[2]);
	  // setMotorRPM(Bus1, GM6020, 1, axis[0]*10, test);
	  // UART_Printf(&huart1, "%d %d %d %d\r\n",getRotorPosition(Bus1, GM6020, 1)-2754, getRotorPosition(Bus1, GM6020, 2)-6880, getRotorPosition(Bus1, GM6020, 3)-128, getRotorPosition(Bus1, GM6020, 4)-4880);
	  // UART_Printf(&huart1, "%d, %d\r\n", CAL_getTurretSpin(), getRotorPosition(Bus2, GM6020, 5));
	  Loop(axis, getRotorPosition(Bus2, GM6020, 5));
 8005b96:	2205      	movs	r2, #5
 8005b98:	2103      	movs	r1, #3
 8005b9a:	2002      	movs	r0, #2
 8005b9c:	f7fc fe48 	bl	8002830 <getRotorPosition>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b21a      	sxth	r2, r3
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd fa3c 	bl	8003028 <Loop>
    osDelay(5);
 8005bb0:	2005      	movs	r0, #5
 8005bb2:	f005 ffcd 	bl	800bb50 <osDelay>
	  axis[0] = CAL_getFrontBack();
 8005bb6:	bf00      	nop
 8005bb8:	e7ca      	b.n	8005b50 <StartChassisTask+0x24>
 8005bba:	bf00      	nop
 8005bbc:	40a00000 	.word	0x40a00000
 8005bc0:	08012328 	.word	0x08012328
 8005bc4:	20000dec 	.word	0x20000dec

08005bc8 <StartSentryAutonomy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSentryAutonomy */
void StartSentryAutonomy(void *argument)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSentryAutonomy */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8005bd0:	2005      	movs	r0, #5
 8005bd2:	f005 ffbd 	bl	800bb50 <osDelay>
 8005bd6:	e7fb      	b.n	8005bd0 <StartSentryAutonomy+0x8>

08005bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bdc:	b672      	cpsid	i
}
 8005bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <Error_Handler+0x8>

08005be4 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6178      	str	r0, [r7, #20]
 8005bec:	460b      	mov	r3, r1
 8005bee:	60fa      	str	r2, [r7, #12]
 8005bf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bf4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bf8:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d042      	beq.n	8005c86 <PID_init+0xa2>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03f      	beq.n	8005c86 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	7cfa      	ldrb	r2, [r7, #19]
 8005c0a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3304      	adds	r3, #4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3308      	adds	r3, #8
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	621a      	str	r2, [r3, #32]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c84:	e000      	b.n	8005c88 <PID_init+0xa4>
        return;
 8005c86:	bf00      	nop
}
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c9e:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <PID_calc+0x1c>
    {
        return 0.0f;
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e130      	b.n	8005f10 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8005cce:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8095 	bne.w	8005e10 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	ed93 7a01 	vldr	s14, [r3, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	ed93 7a03 	vldr	s14, [r3, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	dd04      	ble.n	8005d78 <PID_calc+0xe6>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d76:	e014      	b.n	8005da2 <PID_calc+0x110>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d84:	eef1 7a67 	vneg.f32	s15, s15
 8005d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	d507      	bpl.n	8005da2 <PID_calc+0x110>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d98:	eef1 7a67 	vneg.f32	s15, s15
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	ed93 7a08 	vldr	s14, [r3, #32]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	dd04      	ble.n	8005de2 <PID_calc+0x150>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]
 8005de0:	e094      	b.n	8005f0c <PID_calc+0x27a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	ed93 7a08 	vldr	s14, [r3, #32]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dee:	eef1 7a67 	vneg.f32	s15, s15
 8005df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfa:	f140 8087 	bpl.w	8005f0c <PID_calc+0x27a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e04:	eef1 7a67 	vneg.f32	s15, s15
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	edc3 7a08 	vstr	s15, [r3, #32]
 8005e0e:	e07d      	b.n	8005f0c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d179      	bne.n	8005f0c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005e2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005e6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	ed93 7a03 	vldr	s14, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	ed93 7a08 	vldr	s14, [r3, #32]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005eaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	ed93 7a08 	vldr	s14, [r3, #32]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed6:	dd04      	ble.n	8005ee2 <PID_calc+0x250>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	621a      	str	r2, [r3, #32]
 8005ee0:	e014      	b.n	8005f0c <PID_calc+0x27a>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	ed93 7a08 	vldr	s14, [r3, #32]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	edd3 7a04 	vldr	s15, [r3, #16]
 8005eee:	eef1 7a67 	vneg.f32	s15, s15
 8005ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	d507      	bpl.n	8005f0c <PID_calc+0x27a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f02:	eef1 7a67 	vneg.f32	s15, s15
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
}
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eeb0 0a67 	vmov.f32	s0, s15
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f56:	4b08      	ldr	r3, [pc, #32]	@ (8005f78 <HAL_MspInit+0x54>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f62:	2200      	movs	r2, #0
 8005f64:	210f      	movs	r1, #15
 8005f66:	f06f 0001 	mvn.w	r0, #1
 8005f6a:	f001 fdc2 	bl	8007af2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800

08005f7c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f84:	f107 031c 	add.w	r3, r7, #28
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a4a      	ldr	r2, [pc, #296]	@ (80060c4 <HAL_CAN_MspInit+0x148>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d13d      	bne.n	800601a <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a48      	ldr	r2, [pc, #288]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 8005fa6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005fa8:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10d      	bne.n	8005fcc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	4b45      	ldr	r3, [pc, #276]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	4a44      	ldr	r2, [pc, #272]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fc0:	4b42      	ldr	r3, [pc, #264]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fd6:	f043 0308 	orr.w	r3, r3, #8
 8005fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fec:	2302      	movs	r3, #2
 8005fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ffc:	f107 031c 	add.w	r3, r7, #28
 8006000:	4619      	mov	r1, r3
 8006002:	4833      	ldr	r0, [pc, #204]	@ (80060d0 <HAL_CAN_MspInit+0x154>)
 8006004:	f002 f9ae 	bl	8008364 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006008:	2200      	movs	r2, #0
 800600a:	2105      	movs	r1, #5
 800600c:	2014      	movs	r0, #20
 800600e:	f001 fd70 	bl	8007af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006012:	2014      	movs	r0, #20
 8006014:	f001 fd89 	bl	8007b2a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8006018:	e04f      	b.n	80060ba <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2d      	ldr	r2, [pc, #180]	@ (80060d4 <HAL_CAN_MspInit+0x158>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d14a      	bne.n	80060ba <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	4b28      	ldr	r3, [pc, #160]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	4a27      	ldr	r2, [pc, #156]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 800602e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006032:	6413      	str	r3, [r2, #64]	@ 0x40
 8006034:	4b25      	ldr	r3, [pc, #148]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006040:	4b21      	ldr	r3, [pc, #132]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 8006048:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800604a:	4b1f      	ldr	r3, [pc, #124]	@ (80060c8 <HAL_CAN_MspInit+0x14c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 800605c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006060:	6413      	str	r3, [r2, #64]	@ 0x40
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006076:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	6313      	str	r3, [r2, #48]	@ 0x30
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <HAL_CAN_MspInit+0x150>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800608a:	2360      	movs	r3, #96	@ 0x60
 800608c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608e:	2302      	movs	r3, #2
 8006090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006096:	2303      	movs	r3, #3
 8006098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800609a:	2309      	movs	r3, #9
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800609e:	f107 031c 	add.w	r3, r7, #28
 80060a2:	4619      	mov	r1, r3
 80060a4:	480c      	ldr	r0, [pc, #48]	@ (80060d8 <HAL_CAN_MspInit+0x15c>)
 80060a6:	f002 f95d 	bl	8008364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2105      	movs	r1, #5
 80060ae:	2040      	movs	r0, #64	@ 0x40
 80060b0:	f001 fd1f 	bl	8007af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80060b4:	2040      	movs	r0, #64	@ 0x40
 80060b6:	f001 fd38 	bl	8007b2a <HAL_NVIC_EnableIRQ>
}
 80060ba:	bf00      	nop
 80060bc:	3730      	adds	r7, #48	@ 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40006400 	.word	0x40006400
 80060c8:	20000ff4 	.word	0x20000ff4
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020c00 	.word	0x40020c00
 80060d4:	40006800 	.word	0x40006800
 80060d8:	40020400 	.word	0x40020400

080060dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e4:	f107 0314 	add.w	r3, r7, #20
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a29      	ldr	r2, [pc, #164]	@ (80061a0 <HAL_I2C_MspInit+0xc4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d14b      	bne.n	8006196 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	4b28      	ldr	r3, [pc, #160]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006106:	4a27      	ldr	r2, [pc, #156]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006108:	f043 0304 	orr.w	r3, r3, #4
 800610c:	6313      	str	r3, [r2, #48]	@ 0x30
 800610e:	4b25      	ldr	r3, [pc, #148]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	4b21      	ldr	r3, [pc, #132]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	4a20      	ldr	r2, [pc, #128]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	6313      	str	r3, [r2, #48]	@ 0x30
 800612a:	4b1e      	ldr	r3, [pc, #120]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800613a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800613c:	2312      	movs	r3, #18
 800613e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006144:	2303      	movs	r3, #3
 8006146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006148:	2304      	movs	r3, #4
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	4619      	mov	r1, r3
 8006152:	4815      	ldr	r0, [pc, #84]	@ (80061a8 <HAL_I2C_MspInit+0xcc>)
 8006154:	f002 f906 	bl	8008364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800615c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800615e:	2312      	movs	r3, #18
 8006160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006166:	2303      	movs	r3, #3
 8006168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800616a:	2304      	movs	r3, #4
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4619      	mov	r1, r3
 8006174:	480d      	ldr	r0, [pc, #52]	@ (80061ac <HAL_I2C_MspInit+0xd0>)
 8006176:	f002 f8f5 	bl	8008364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	4a08      	ldr	r2, [pc, #32]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 8006184:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006188:	6413      	str	r3, [r2, #64]	@ 0x40
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_I2C_MspInit+0xc8>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8006196:	bf00      	nop
 8006198:	3728      	adds	r7, #40	@ 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40005c00 	.word	0x40005c00
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40020800 	.word	0x40020800
 80061ac:	40020000 	.word	0x40020000

080061b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	@ 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a28      	ldr	r2, [pc, #160]	@ (8006270 <HAL_SPI_MspInit+0xc0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d149      	bne.n	8006266 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 80061dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80061e2:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80061fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	6313      	str	r3, [r2, #48]	@ 0x30
 800621a:	4b16      	ldr	r3, [pc, #88]	@ (8006274 <HAL_SPI_MspInit+0xc4>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8006226:	2318      	movs	r3, #24
 8006228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622a:	2302      	movs	r3, #2
 800622c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006232:	2303      	movs	r3, #3
 8006234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006236:	2305      	movs	r3, #5
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4619      	mov	r1, r3
 8006240:	480d      	ldr	r0, [pc, #52]	@ (8006278 <HAL_SPI_MspInit+0xc8>)
 8006242:	f002 f88f 	bl	8008364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006246:	2380      	movs	r3, #128	@ 0x80
 8006248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624a:	2302      	movs	r3, #2
 800624c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006252:	2303      	movs	r3, #3
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006256:	2305      	movs	r3, #5
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	4619      	mov	r1, r3
 8006260:	4806      	ldr	r0, [pc, #24]	@ (800627c <HAL_SPI_MspInit+0xcc>)
 8006262:	f002 f87f 	bl	8008364 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006266:	bf00      	nop
 8006268:	3728      	adds	r7, #40	@ 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40013000 	.word	0x40013000
 8006274:	40023800 	.word	0x40023800
 8006278:	40020400 	.word	0x40020400
 800627c:	40020000 	.word	0x40020000

08006280 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	@ (800630c <HAL_TIM_PWM_MspInit+0x8c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	4b1e      	ldr	r3, [pc, #120]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 8006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629a:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80062a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80062ae:	e026      	b.n	80062fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a17      	ldr	r2, [pc, #92]	@ (8006314 <HAL_TIM_PWM_MspInit+0x94>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	4a13      	ldr	r2, [pc, #76]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062c4:	f043 0308 	orr.w	r3, r3, #8
 80062c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80062ca:	4b11      	ldr	r3, [pc, #68]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	693b      	ldr	r3, [r7, #16]
}
 80062d6:	e012      	b.n	80062fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <HAL_TIM_PWM_MspInit+0x98>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10d      	bne.n	80062fe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ea:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80062f2:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <HAL_TIM_PWM_MspInit+0x90>)
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000
 8006310:	40023800 	.word	0x40023800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400

0800631c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a15      	ldr	r2, [pc, #84]	@ (8006380 <HAL_TIM_Base_MspInit+0x64>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d10e      	bne.n	800634c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	4a13      	ldr	r2, [pc, #76]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 8006338:	f043 0304 	orr.w	r3, r3, #4
 800633c:	6413      	str	r3, [r2, #64]	@ 0x40
 800633e:	4b11      	ldr	r3, [pc, #68]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 800634a:	e012      	b.n	8006372 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0d      	ldr	r2, [pc, #52]	@ (8006388 <HAL_TIM_Base_MspInit+0x6c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10d      	bne.n	8006372 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	4a09      	ldr	r2, [pc, #36]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 8006360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006364:	6453      	str	r3, [r2, #68]	@ 0x44
 8006366:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <HAL_TIM_Base_MspInit+0x68>)
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	68bb      	ldr	r3, [r7, #8]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40000800 	.word	0x40000800
 8006384:	40023800 	.word	0x40023800
 8006388:	40014400 	.word	0x40014400

0800638c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	@ 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006554 <HAL_TIM_MspPostInit+0x1c8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d11f      	bne.n	80063ee <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
 80063b2:	4b69      	ldr	r3, [pc, #420]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	4a68      	ldr	r2, [pc, #416]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80063b8:	f043 0310 	orr.w	r3, r3, #16
 80063bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80063be:	4b66      	ldr	r3, [pc, #408]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80063ca:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d0:	2302      	movs	r3, #2
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063d8:	2300      	movs	r3, #0
 80063da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80063dc:	2301      	movs	r3, #1
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063e4:	4619      	mov	r1, r3
 80063e6:	485d      	ldr	r0, [pc, #372]	@ (800655c <HAL_TIM_MspPostInit+0x1d0>)
 80063e8:	f001 ffbc 	bl	8008364 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80063ec:	e0ae      	b.n	800654c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006560 <HAL_TIM_MspPostInit+0x1d4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d11f      	bne.n	8006438 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	4b56      	ldr	r3, [pc, #344]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80063fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006400:	4a55      	ldr	r2, [pc, #340]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006402:	f043 0308 	orr.w	r3, r3, #8
 8006406:	6313      	str	r3, [r2, #48]	@ 0x30
 8006408:	4b53      	ldr	r3, [pc, #332]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006414:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641a:	2302      	movs	r3, #2
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641e:	2300      	movs	r3, #0
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006422:	2300      	movs	r3, #0
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006426:	2302      	movs	r3, #2
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800642a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800642e:	4619      	mov	r1, r3
 8006430:	484c      	ldr	r0, [pc, #304]	@ (8006564 <HAL_TIM_MspPostInit+0x1d8>)
 8006432:	f001 ff97 	bl	8008364 <HAL_GPIO_Init>
}
 8006436:	e089      	b.n	800654c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4a      	ldr	r2, [pc, #296]	@ (8006568 <HAL_TIM_MspPostInit+0x1dc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d11f      	bne.n	8006482 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	4b44      	ldr	r3, [pc, #272]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	4a43      	ldr	r2, [pc, #268]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 800644c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006450:	6313      	str	r3, [r2, #48]	@ 0x30
 8006452:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800645e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006464:	2302      	movs	r3, #2
 8006466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800646c:	2300      	movs	r3, #0
 800646e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006470:	2302      	movs	r3, #2
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006478:	4619      	mov	r1, r3
 800647a:	483c      	ldr	r0, [pc, #240]	@ (800656c <HAL_TIM_MspPostInit+0x1e0>)
 800647c:	f001 ff72 	bl	8008364 <HAL_GPIO_Init>
}
 8006480:	e064      	b.n	800654c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3a      	ldr	r2, [pc, #232]	@ (8006570 <HAL_TIM_MspPostInit+0x1e4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d13c      	bne.n	8006506 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006494:	4a30      	ldr	r2, [pc, #192]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649a:	6313      	str	r3, [r2, #48]	@ 0x30
 800649c:	4b2e      	ldr	r3, [pc, #184]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80064b8:	4b27      	ldr	r3, [pc, #156]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80064c4:	23c0      	movs	r3, #192	@ 0xc0
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c8:	2302      	movs	r3, #2
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064d0:	2300      	movs	r3, #0
 80064d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80064d4:	2303      	movs	r3, #3
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80064d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064dc:	4619      	mov	r1, r3
 80064de:	4825      	ldr	r0, [pc, #148]	@ (8006574 <HAL_TIM_MspPostInit+0x1e8>)
 80064e0:	f001 ff40 	bl	8008364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80064e4:	2340      	movs	r3, #64	@ 0x40
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e8:	2302      	movs	r3, #2
 80064ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f0:	2300      	movs	r3, #0
 80064f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80064f4:	2303      	movs	r3, #3
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064fc:	4619      	mov	r1, r3
 80064fe:	481e      	ldr	r0, [pc, #120]	@ (8006578 <HAL_TIM_MspPostInit+0x1ec>)
 8006500:	f001 ff30 	bl	8008364 <HAL_GPIO_Init>
}
 8006504:	e022      	b.n	800654c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1c      	ldr	r2, [pc, #112]	@ (800657c <HAL_TIM_MspPostInit+0x1f0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d11d      	bne.n	800654c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006518:	4a0f      	ldr	r2, [pc, #60]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006520:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <HAL_TIM_MspPostInit+0x1cc>)
 8006522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800652c:	2340      	movs	r3, #64	@ 0x40
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006530:	2302      	movs	r3, #2
 8006532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006534:	2301      	movs	r3, #1
 8006536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006538:	2302      	movs	r3, #2
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800653c:	2303      	movs	r3, #3
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006544:	4619      	mov	r1, r3
 8006546:	480e      	ldr	r0, [pc, #56]	@ (8006580 <HAL_TIM_MspPostInit+0x1f4>)
 8006548:	f001 ff0c 	bl	8008364 <HAL_GPIO_Init>
}
 800654c:	bf00      	nop
 800654e:	3738      	adds	r7, #56	@ 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40010000 	.word	0x40010000
 8006558:	40023800 	.word	0x40023800
 800655c:	40021000 	.word	0x40021000
 8006560:	40000800 	.word	0x40000800
 8006564:	40020c00 	.word	0x40020c00
 8006568:	40000c00 	.word	0x40000c00
 800656c:	40021c00 	.word	0x40021c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40022000 	.word	0x40022000
 8006578:	40020800 	.word	0x40020800
 800657c:	40014400 	.word	0x40014400
 8006580:	40021400 	.word	0x40021400

08006584 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	@ 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800658c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a74      	ldr	r2, [pc, #464]	@ (8006774 <HAL_UART_MspInit+0x1f0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	f040 8083 	bne.w	80066ae <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065a8:	2300      	movs	r3, #0
 80065aa:	623b      	str	r3, [r7, #32]
 80065ac:	4b72      	ldr	r3, [pc, #456]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b0:	4a71      	ldr	r2, [pc, #452]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065b2:	f043 0310 	orr.w	r3, r3, #16
 80065b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80065b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	4b6b      	ldr	r3, [pc, #428]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065cc:	4a6a      	ldr	r2, [pc, #424]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065ce:	f043 0302 	orr.w	r3, r3, #2
 80065d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80065d4:	4b68      	ldr	r3, [pc, #416]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e0:	2300      	movs	r3, #0
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	4b64      	ldr	r3, [pc, #400]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	4a63      	ldr	r2, [pc, #396]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80065f0:	4b61      	ldr	r3, [pc, #388]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80065fc:	2380      	movs	r3, #128	@ 0x80
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006600:	2302      	movs	r3, #2
 8006602:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006608:	2303      	movs	r3, #3
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800660c:	2307      	movs	r3, #7
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006614:	4619      	mov	r1, r3
 8006616:	4859      	ldr	r0, [pc, #356]	@ (800677c <HAL_UART_MspInit+0x1f8>)
 8006618:	f001 fea4 	bl	8008364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800661c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006622:	2302      	movs	r3, #2
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800662a:	2303      	movs	r3, #3
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800662e:	2307      	movs	r3, #7
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006636:	4619      	mov	r1, r3
 8006638:	4851      	ldr	r0, [pc, #324]	@ (8006780 <HAL_UART_MspInit+0x1fc>)
 800663a:	f001 fe93 	bl	8008364 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800663e:	4b51      	ldr	r3, [pc, #324]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006640:	4a51      	ldr	r2, [pc, #324]	@ (8006788 <HAL_UART_MspInit+0x204>)
 8006642:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006644:	4b4f      	ldr	r3, [pc, #316]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006646:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800664a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800664c:	4b4d      	ldr	r3, [pc, #308]	@ (8006784 <HAL_UART_MspInit+0x200>)
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006652:	4b4c      	ldr	r3, [pc, #304]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006654:	2200      	movs	r2, #0
 8006656:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006658:	4b4a      	ldr	r3, [pc, #296]	@ (8006784 <HAL_UART_MspInit+0x200>)
 800665a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800665e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006660:	4b48      	ldr	r3, [pc, #288]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006662:	2200      	movs	r2, #0
 8006664:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006666:	4b47      	ldr	r3, [pc, #284]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006668:	2200      	movs	r2, #0
 800666a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800666c:	4b45      	ldr	r3, [pc, #276]	@ (8006784 <HAL_UART_MspInit+0x200>)
 800666e:	2200      	movs	r2, #0
 8006670:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006672:	4b44      	ldr	r3, [pc, #272]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006674:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006678:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800667a:	4b42      	ldr	r3, [pc, #264]	@ (8006784 <HAL_UART_MspInit+0x200>)
 800667c:	2200      	movs	r2, #0
 800667e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006680:	4840      	ldr	r0, [pc, #256]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006682:	f001 fa6d 	bl	8007b60 <HAL_DMA_Init>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800668c:	f7ff faa4 	bl	8005bd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006694:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006696:	4a3b      	ldr	r2, [pc, #236]	@ (8006784 <HAL_UART_MspInit+0x200>)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800669c:	2200      	movs	r2, #0
 800669e:	2105      	movs	r1, #5
 80066a0:	2025      	movs	r0, #37	@ 0x25
 80066a2:	f001 fa26 	bl	8007af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80066a6:	2025      	movs	r0, #37	@ 0x25
 80066a8:	f001 fa3f 	bl	8007b2a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80066ac:	e0df      	b.n	800686e <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a36      	ldr	r2, [pc, #216]	@ (800678c <HAL_UART_MspInit+0x208>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d171      	bne.n	800679c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80066c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066de:	f043 0304 	orr.w	r3, r3, #4
 80066e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80066e4:	4b24      	ldr	r3, [pc, #144]	@ (8006778 <HAL_UART_MspInit+0x1f4>)
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80066f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80066f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f6:	2302      	movs	r3, #2
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066fe:	2303      	movs	r3, #3
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006702:	2307      	movs	r3, #7
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800670a:	4619      	mov	r1, r3
 800670c:	4820      	ldr	r0, [pc, #128]	@ (8006790 <HAL_UART_MspInit+0x20c>)
 800670e:	f001 fe29 	bl	8008364 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006712:	4b20      	ldr	r3, [pc, #128]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006714:	4a20      	ldr	r2, [pc, #128]	@ (8006798 <HAL_UART_MspInit+0x214>)
 8006716:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006718:	4b1e      	ldr	r3, [pc, #120]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800671a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800671e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006720:	4b1c      	ldr	r3, [pc, #112]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006726:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006728:	2200      	movs	r2, #0
 800672a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800672c:	4b19      	ldr	r3, [pc, #100]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800672e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006732:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006734:	4b17      	ldr	r3, [pc, #92]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006736:	2200      	movs	r2, #0
 8006738:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800673a:	4b16      	ldr	r3, [pc, #88]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800673c:	2200      	movs	r2, #0
 800673e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006740:	4b14      	ldr	r3, [pc, #80]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006746:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006748:	4b12      	ldr	r3, [pc, #72]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800674a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800674e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006750:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006752:	2200      	movs	r2, #0
 8006754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006756:	480f      	ldr	r0, [pc, #60]	@ (8006794 <HAL_UART_MspInit+0x210>)
 8006758:	f001 fa02 	bl	8007b60 <HAL_DMA_Init>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8006762:	f7ff fa39 	bl	8005bd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a0a      	ldr	r2, [pc, #40]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800676a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800676c:	4a09      	ldr	r2, [pc, #36]	@ (8006794 <HAL_UART_MspInit+0x210>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006772:	e07c      	b.n	800686e <HAL_UART_MspInit+0x2ea>
 8006774:	40011000 	.word	0x40011000
 8006778:	40023800 	.word	0x40023800
 800677c:	40020400 	.word	0x40020400
 8006780:	40020000 	.word	0x40020000
 8006784:	20000ec4 	.word	0x20000ec4
 8006788:	40026440 	.word	0x40026440
 800678c:	40004800 	.word	0x40004800
 8006790:	40020800 	.word	0x40020800
 8006794:	20000f24 	.word	0x20000f24
 8006798:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a35      	ldr	r2, [pc, #212]	@ (8006878 <HAL_UART_MspInit+0x2f4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d163      	bne.n	800686e <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	4b34      	ldr	r3, [pc, #208]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	4a33      	ldr	r2, [pc, #204]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067b0:	f043 0320 	orr.w	r3, r3, #32
 80067b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80067b6:	4b31      	ldr	r3, [pc, #196]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	4b2d      	ldr	r3, [pc, #180]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	4a2c      	ldr	r2, [pc, #176]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80067d2:	4b2a      	ldr	r3, [pc, #168]	@ (800687c <HAL_UART_MspInit+0x2f8>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80067de:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e4:	2302      	movs	r3, #2
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ec:	2303      	movs	r3, #3
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80067f0:	2308      	movs	r3, #8
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80067f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067f8:	4619      	mov	r1, r3
 80067fa:	4821      	ldr	r0, [pc, #132]	@ (8006880 <HAL_UART_MspInit+0x2fc>)
 80067fc:	f001 fdb2 	bl	8008364 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006800:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006802:	4a21      	ldr	r2, [pc, #132]	@ (8006888 <HAL_UART_MspInit+0x304>)
 8006804:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006806:	4b1f      	ldr	r3, [pc, #124]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006808:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800680c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800680e:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006814:	4b1b      	ldr	r3, [pc, #108]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006816:	2200      	movs	r2, #0
 8006818:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800681a:	4b1a      	ldr	r3, [pc, #104]	@ (8006884 <HAL_UART_MspInit+0x300>)
 800681c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006820:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006822:	4b18      	ldr	r3, [pc, #96]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006824:	2200      	movs	r2, #0
 8006826:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006828:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <HAL_UART_MspInit+0x300>)
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800682e:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006830:	2200      	movs	r2, #0
 8006832:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006834:	4b13      	ldr	r3, [pc, #76]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006836:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800683a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800683c:	4b11      	ldr	r3, [pc, #68]	@ (8006884 <HAL_UART_MspInit+0x300>)
 800683e:	2200      	movs	r2, #0
 8006840:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006842:	4810      	ldr	r0, [pc, #64]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006844:	f001 f98c 	bl	8007b60 <HAL_DMA_Init>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 800684e:	f7ff f9c3 	bl	8005bd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a0b      	ldr	r2, [pc, #44]	@ (8006884 <HAL_UART_MspInit+0x300>)
 8006856:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006858:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <HAL_UART_MspInit+0x300>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800685e:	2200      	movs	r2, #0
 8006860:	2105      	movs	r1, #5
 8006862:	2047      	movs	r0, #71	@ 0x47
 8006864:	f001 f945 	bl	8007af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006868:	2047      	movs	r0, #71	@ 0x47
 800686a:	f001 f95e 	bl	8007b2a <HAL_NVIC_EnableIRQ>
}
 800686e:	bf00      	nop
 8006870:	3738      	adds	r7, #56	@ 0x38
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40011400 	.word	0x40011400
 800687c:	40023800 	.word	0x40023800
 8006880:	40021800 	.word	0x40021800
 8006884:	20000f84 	.word	0x20000f84
 8006888:	40026428 	.word	0x40026428

0800688c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006890:	f002 fcde 	bl	8009250 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <NMI_Handler+0x8>

08006898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <HardFault_Handler+0x4>

080068a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068a4:	bf00      	nop
 80068a6:	e7fd      	b.n	80068a4 <MemManage_Handler+0x4>

080068a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <BusFault_Handler+0x4>

080068b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <UsageFault_Handler+0x4>

080068b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068ca:	f000 f9b1 	bl	8006c30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80068ce:	f006 fe8f 	bl	800d5f0 <xTaskGetSchedulerState>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d001      	beq.n	80068dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80068d8:	f007 fd66 	bl	800e3a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068dc:	bf00      	nop
 80068de:	bd80      	pop	{r7, pc}

080068e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80068e4:	2008      	movs	r0, #8
 80068e6:	f001 fef3 	bl	80086d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}

080068ee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80068f2:	2010      	movs	r0, #16
 80068f4:	f001 feec 	bl	80086d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}

080068fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006900:	4802      	ldr	r0, [pc, #8]	@ (800690c <DMA1_Stream1_IRQHandler+0x10>)
 8006902:	f001 fac5 	bl	8007e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000f24 	.word	0x20000f24

08006910 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006914:	4802      	ldr	r0, [pc, #8]	@ (8006920 <CAN1_RX0_IRQHandler+0x10>)
 8006916:	f000 fde1 	bl	80074dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000b88 	.word	0x20000b88

08006924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006928:	4802      	ldr	r0, [pc, #8]	@ (8006934 <USART1_IRQHandler+0x10>)
 800692a:	f003 fefb 	bl	800a724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000dec 	.word	0x20000dec

08006938 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800693c:	4802      	ldr	r0, [pc, #8]	@ (8006948 <DMA2_Stream1_IRQHandler+0x10>)
 800693e:	f001 faa7 	bl	8007e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000f84 	.word	0x20000f84

0800694c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006950:	4802      	ldr	r0, [pc, #8]	@ (800695c <DMA2_Stream2_IRQHandler+0x10>)
 8006952:	f001 fa9d 	bl	8007e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000ec4 	.word	0x20000ec4

08006960 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006964:	4802      	ldr	r0, [pc, #8]	@ (8006970 <CAN2_RX0_IRQHandler+0x10>)
 8006966:	f000 fdb9 	bl	80074dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000bb0 	.word	0x20000bb0

08006974 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006978:	4802      	ldr	r0, [pc, #8]	@ (8006984 <USART6_IRQHandler+0x10>)
 800697a:	f003 fed3 	bl	800a724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000e7c 	.word	0x20000e7c

08006988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return 1;
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <_kill>:

int _kill(int pid, int sig)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80069a2:	f008 fcc1 	bl	800f328 <__errno>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2216      	movs	r2, #22
 80069aa:	601a      	str	r2, [r3, #0]
  return -1;
 80069ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_exit>:

void _exit (int status)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80069c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff ffe7 	bl	8006998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80069ca:	bf00      	nop
 80069cc:	e7fd      	b.n	80069ca <_exit+0x12>

080069ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	e00a      	b.n	80069f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80069e0:	f3af 8000 	nop.w
 80069e4:	4601      	mov	r1, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	60ba      	str	r2, [r7, #8]
 80069ec:	b2ca      	uxtb	r2, r1
 80069ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3301      	adds	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	dbf0      	blt.n	80069e0 <_read+0x12>
  }

  return len;
 80069fe:	687b      	ldr	r3, [r7, #4]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e009      	b.n	8006a2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	60ba      	str	r2, [r7, #8]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	dbf1      	blt.n	8006a1a <_write+0x12>
  }
  return len;
 8006a36:	687b      	ldr	r3, [r7, #4]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <_close>:

int _close(int file)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a68:	605a      	str	r2, [r3, #4]
  return 0;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <_isatty>:

int _isatty(int file)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006a80:	2301      	movs	r3, #1
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ab0:	4a14      	ldr	r2, [pc, #80]	@ (8006b04 <_sbrk+0x5c>)
 8006ab2:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <_sbrk+0x60>)
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006abc:	4b13      	ldr	r3, [pc, #76]	@ (8006b0c <_sbrk+0x64>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ac4:	4b11      	ldr	r3, [pc, #68]	@ (8006b0c <_sbrk+0x64>)
 8006ac6:	4a12      	ldr	r2, [pc, #72]	@ (8006b10 <_sbrk+0x68>)
 8006ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aca:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <_sbrk+0x64>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d207      	bcs.n	8006ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ad8:	f008 fc26 	bl	800f328 <__errno>
 8006adc:	4603      	mov	r3, r0
 8006ade:	220c      	movs	r2, #12
 8006ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ae6:	e009      	b.n	8006afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ae8:	4b08      	ldr	r3, [pc, #32]	@ (8006b0c <_sbrk+0x64>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006aee:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <_sbrk+0x64>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	4a05      	ldr	r2, [pc, #20]	@ (8006b0c <_sbrk+0x64>)
 8006af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006afa:	68fb      	ldr	r3, [r7, #12]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20020000 	.word	0x20020000
 8006b08:	00000400 	.word	0x00000400
 8006b0c:	20000ff8 	.word	0x20000ff8
 8006b10:	20005b38 	.word	0x20005b38

08006b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <SystemInit+0x20>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <SystemInit+0x20>)
 8006b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b28:	bf00      	nop
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	e000ed00 	.word	0xe000ed00

08006b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006b3c:	f7ff ffea 	bl	8006b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b40:	480c      	ldr	r0, [pc, #48]	@ (8006b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b42:	490d      	ldr	r1, [pc, #52]	@ (8006b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b44:	4a0d      	ldr	r2, [pc, #52]	@ (8006b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b48:	e002      	b.n	8006b50 <LoopCopyDataInit>

08006b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b4e:	3304      	adds	r3, #4

08006b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b54:	d3f9      	bcc.n	8006b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b56:	4a0a      	ldr	r2, [pc, #40]	@ (8006b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b58:	4c0a      	ldr	r4, [pc, #40]	@ (8006b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b5c:	e001      	b.n	8006b62 <LoopFillZerobss>

08006b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b60:	3204      	adds	r2, #4

08006b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b64:	d3fb      	bcc.n	8006b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b66:	f008 fbe5 	bl	800f334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b6a:	f7fe f9cd 	bl	8004f08 <main>
  bx  lr    
 8006b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b78:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8006b7c:	08012d7c 	.word	0x08012d7c
  ldr r2, =_sbss
 8006b80:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8006b84:	20005b34 	.word	0x20005b34

08006b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b88:	e7fe      	b.n	8006b88 <ADC_IRQHandler>
	...

08006b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b90:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <HAL_Init+0x40>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a0d      	ldr	r2, [pc, #52]	@ (8006bcc <HAL_Init+0x40>)
 8006b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <HAL_Init+0x40>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bcc <HAL_Init+0x40>)
 8006ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ba8:	4b08      	ldr	r3, [pc, #32]	@ (8006bcc <HAL_Init+0x40>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a07      	ldr	r2, [pc, #28]	@ (8006bcc <HAL_Init+0x40>)
 8006bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f000 ff91 	bl	8007adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bba:	200f      	movs	r0, #15
 8006bbc:	f000 f808 	bl	8006bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bc0:	f7ff f9b0 	bl	8005f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023c00 	.word	0x40023c00

08006bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bd8:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <HAL_InitTick+0x54>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_InitTick+0x58>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 ffa9 	bl	8007b46 <HAL_SYSTICK_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00e      	b.n	8006c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d80a      	bhi.n	8006c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c04:	2200      	movs	r2, #0
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c0c:	f000 ff71 	bl	8007af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c10:	4a06      	ldr	r2, [pc, #24]	@ (8006c2c <HAL_InitTick+0x5c>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000005c 	.word	0x2000005c
 8006c28:	20000064 	.word	0x20000064
 8006c2c:	20000060 	.word	0x20000060

08006c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <HAL_IncTick+0x20>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <HAL_IncTick+0x24>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a04      	ldr	r2, [pc, #16]	@ (8006c54 <HAL_IncTick+0x24>)
 8006c42:	6013      	str	r3, [r2, #0]
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000064 	.word	0x20000064
 8006c54:	20000ffc 	.word	0x20000ffc

08006c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	@ (8006c6c <HAL_GetTick+0x14>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000ffc 	.word	0x20000ffc

08006c70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0ed      	b.n	8006e5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff f974 	bl	8005f7c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca4:	f7ff ffd8 	bl	8006c58 <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006caa:	e012      	b.n	8006cd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cac:	f7ff ffd4 	bl	8006c58 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b0a      	cmp	r3, #10
 8006cb8:	d90b      	bls.n	8006cd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0c5      	b.n	8006e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0e5      	beq.n	8006cac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0202 	bic.w	r2, r2, #2
 8006cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cf0:	f7ff ffb2 	bl	8006c58 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cf6:	e012      	b.n	8006d1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cf8:	f7ff ffae 	bl	8006c58 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b0a      	cmp	r3, #10
 8006d04:	d90b      	bls.n	8006d1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2205      	movs	r2, #5
 8006d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e09f      	b.n	8006e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7e1b      	ldrb	r3, [r3, #24]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d108      	bne.n	8006d46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e007      	b.n	8006d56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7e5b      	ldrb	r3, [r3, #25]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d108      	bne.n	8006d70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7e9b      	ldrb	r3, [r3, #26]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d108      	bne.n	8006d9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0220 	orr.w	r2, r2, #32
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e007      	b.n	8006daa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0220 	bic.w	r2, r2, #32
 8006da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7edb      	ldrb	r3, [r3, #27]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d108      	bne.n	8006dc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0210 	bic.w	r2, r2, #16
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e007      	b.n	8006dd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0210 	orr.w	r2, r2, #16
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7f1b      	ldrb	r3, [r3, #28]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d108      	bne.n	8006dee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0208 	orr.w	r2, r2, #8
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e007      	b.n	8006dfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0208 	bic.w	r2, r2, #8
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7f5b      	ldrb	r3, [r3, #29]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d108      	bne.n	8006e18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0204 	orr.w	r2, r2, #4
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0204 	bic.w	r2, r2, #4
 8006e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	ea42 0103 	orr.w	r1, r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	1e5a      	subs	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e78:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <HAL_CAN_ConfigFilter+0x20>
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	f040 80be 	bne.w	8007004 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006e88:	4b65      	ldr	r3, [pc, #404]	@ (8007020 <HAL_CAN_ConfigFilter+0x1b8>)
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006ea2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	2201      	movs	r2, #1
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	401a      	ands	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d123      	bne.n	8006f32 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3248      	adds	r2, #72	@ 0x48
 8006f12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f28:	6939      	ldr	r1, [r7, #16]
 8006f2a:	3348      	adds	r3, #72	@ 0x48
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	440b      	add	r3, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d122      	bne.n	8006f80 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3248      	adds	r2, #72	@ 0x48
 8006f60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f76:	6939      	ldr	r1, [r7, #16]
 8006f78:	3348      	adds	r3, #72	@ 0x48
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	440b      	add	r3, r1
 8006f7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	401a      	ands	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006f9a:	e007      	b.n	8006fac <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d109      	bne.n	8006fc8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006fc6:	e007      	b.n	8006fd8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006ff6:	f023 0201 	bic.w	r2, r3, #1
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e006      	b.n	8007012 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40006400 	.word	0x40006400

08007024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d12e      	bne.n	8007096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007050:	f7ff fe02 	bl	8006c58 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007056:	e012      	b.n	800707e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007058:	f7ff fdfe 	bl	8006c58 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b0a      	cmp	r3, #10
 8007064:	d90b      	bls.n	800707e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2205      	movs	r2, #5
 8007076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e012      	b.n	80070a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	e006      	b.n	80070a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	@ 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070ca:	7ffb      	ldrb	r3, [r7, #31]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d003      	beq.n	80070d8 <HAL_CAN_AddTxMessage+0x2c>
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	f040 80ad 	bne.w	8007232 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8095 	beq.w	8007222 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	0e1b      	lsrs	r3, r3, #24
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007102:	2201      	movs	r2, #1
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	409a      	lsls	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6809      	ldr	r1, [r1, #0]
 8007122:	431a      	orrs	r2, r3
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3318      	adds	r3, #24
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	440b      	add	r3, r1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e00f      	b.n	8007150 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800713a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007140:	68f9      	ldr	r1, [r7, #12]
 8007142:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007144:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	3318      	adds	r3, #24
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	440b      	add	r3, r1
 800714e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	3318      	adds	r3, #24
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	440b      	add	r3, r1
 8007160:	3304      	adds	r3, #4
 8007162:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	7d1b      	ldrb	r3, [r3, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d111      	bne.n	8007190 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3318      	adds	r3, #24
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	6811      	ldr	r1, [r2, #0]
 8007180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3318      	adds	r3, #24
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	440b      	add	r3, r1
 800718c:	3304      	adds	r3, #4
 800718e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3307      	adds	r3, #7
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	061a      	lsls	r2, r3, #24
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3306      	adds	r3, #6
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3305      	adds	r3, #5
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	4313      	orrs	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	3204      	adds	r2, #4
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	4610      	mov	r0, r2
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	6811      	ldr	r1, [r2, #0]
 80071b8:	ea43 0200 	orr.w	r2, r3, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	440b      	add	r3, r1
 80071c2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80071c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3303      	adds	r3, #3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	061a      	lsls	r2, r3, #24
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3302      	adds	r3, #2
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3301      	adds	r3, #1
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	4313      	orrs	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	4610      	mov	r0, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	ea43 0200 	orr.w	r2, r3, r0
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80071fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3318      	adds	r3, #24
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	6811      	ldr	r1, [r2, #0]
 8007210:	f043 0201 	orr.w	r2, r3, #1
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	3318      	adds	r3, #24
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	440b      	add	r3, r1
 800721c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e00e      	b.n	8007240 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e006      	b.n	8007240 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
  }
}
 8007240:	4618      	mov	r0, r3
 8007242:	3724      	adds	r7, #36	@ 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007260:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d003      	beq.n	8007270 <HAL_CAN_GetRxMessage+0x24>
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b02      	cmp	r3, #2
 800726c:	f040 8103 	bne.w	8007476 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10e      	bne.n	8007294 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d116      	bne.n	80072b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0f7      	b.n	8007484 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d107      	bne.n	80072b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e0e8      	b.n	8007484 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	331b      	adds	r3, #27
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	4413      	add	r3, r2
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0204 	and.w	r2, r3, #4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	331b      	adds	r3, #27
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	4413      	add	r3, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	0d5b      	lsrs	r3, r3, #21
 80072e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e00b      	b.n	8007302 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	331b      	adds	r3, #27
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	4413      	add	r3, r2
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	331b      	adds	r3, #27
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	4413      	add	r3, r2
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0202 	and.w	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	331b      	adds	r3, #27
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2208      	movs	r2, #8
 8007334:	611a      	str	r2, [r3, #16]
 8007336:	e00b      	b.n	8007350 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	331b      	adds	r3, #27
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	4413      	add	r3, r2
 8007344:	3304      	adds	r3, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	331b      	adds	r3, #27
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	4413      	add	r3, r2
 800735c:	3304      	adds	r3, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	331b      	adds	r3, #27
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	4413      	add	r3, r2
 8007374:	3304      	adds	r3, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	4413      	add	r3, r2
 800738a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	b2da      	uxtb	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	4413      	add	r3, r2
 80073a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	0a1a      	lsrs	r2, r3, #8
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	0c1a      	lsrs	r2, r3, #16
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	3302      	adds	r3, #2
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	0e1a      	lsrs	r2, r3, #24
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3303      	adds	r3, #3
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3304      	adds	r3, #4
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	0a1a      	lsrs	r2, r3, #8
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	3305      	adds	r3, #5
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	4413      	add	r3, r2
 8007420:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	0c1a      	lsrs	r2, r3, #16
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	3306      	adds	r3, #6
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	4413      	add	r3, r2
 800743a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	0e1a      	lsrs	r2, r3, #24
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	3307      	adds	r3, #7
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0220 	orr.w	r2, r2, #32
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e007      	b.n	8007472 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f042 0220 	orr.w	r2, r2, #32
 8007470:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e006      	b.n	8007484 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d002      	beq.n	80074ae <HAL_CAN_ActivateNotification+0x1e>
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d109      	bne.n	80074c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6959      	ldr	r1, [r3, #20]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	e006      	b.n	80074d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	@ 0x28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d07c      	beq.n	800761c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d023      	beq.n	8007574 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f983 	bl	800784a <HAL_CAN_TxMailbox0CompleteCallback>
 8007544:	e016      	b.n	8007574 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
 8007558:	e00c      	b.n	8007574 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
 800756c:	e002      	b.n	8007574 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f989 	bl	8007886 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d024      	beq.n	80075c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007586:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f963 	bl	800785e <HAL_CAN_TxMailbox1CompleteCallback>
 8007598:	e016      	b.n	80075c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ac:	e00c      	b.n	80075c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c0:	e002      	b.n	80075c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f969 	bl	800789a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d024      	beq.n	800761c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80075da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f943 	bl	8007872 <HAL_CAN_TxMailbox2CompleteCallback>
 80075ec:	e016      	b.n	800761c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007600:	e00c      	b.n	800761c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
 8007614:	e002      	b.n	800761c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f949 	bl	80078ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2210      	movs	r2, #16
 800763e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2208      	movs	r2, #8
 800765a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f930 	bl	80078c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fa fc3c 	bl	8001ef8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00c      	beq.n	80076a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2210      	movs	r2, #16
 80076a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2208      	movs	r2, #8
 80076be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f912 	bl	80078ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8f9 	bl	80078d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2210      	movs	r2, #16
 80076fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8fc 	bl	80078fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2208      	movs	r2, #8
 8007720:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8f5 	bl	8007912 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d07b      	beq.n	800782a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d072      	beq.n	8007822 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	f043 0301 	orr.w	r3, r3, #1
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	f043 0302 	orr.w	r3, r3, #2
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007796:	2b00      	cmp	r3, #0
 8007798:	d043      	beq.n	8007822 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d03e      	beq.n	8007822 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077aa:	2b60      	cmp	r3, #96	@ 0x60
 80077ac:	d02b      	beq.n	8007806 <HAL_CAN_IRQHandler+0x32a>
 80077ae:	2b60      	cmp	r3, #96	@ 0x60
 80077b0:	d82e      	bhi.n	8007810 <HAL_CAN_IRQHandler+0x334>
 80077b2:	2b50      	cmp	r3, #80	@ 0x50
 80077b4:	d022      	beq.n	80077fc <HAL_CAN_IRQHandler+0x320>
 80077b6:	2b50      	cmp	r3, #80	@ 0x50
 80077b8:	d82a      	bhi.n	8007810 <HAL_CAN_IRQHandler+0x334>
 80077ba:	2b40      	cmp	r3, #64	@ 0x40
 80077bc:	d019      	beq.n	80077f2 <HAL_CAN_IRQHandler+0x316>
 80077be:	2b40      	cmp	r3, #64	@ 0x40
 80077c0:	d826      	bhi.n	8007810 <HAL_CAN_IRQHandler+0x334>
 80077c2:	2b30      	cmp	r3, #48	@ 0x30
 80077c4:	d010      	beq.n	80077e8 <HAL_CAN_IRQHandler+0x30c>
 80077c6:	2b30      	cmp	r3, #48	@ 0x30
 80077c8:	d822      	bhi.n	8007810 <HAL_CAN_IRQHandler+0x334>
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d002      	beq.n	80077d4 <HAL_CAN_IRQHandler+0x2f8>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d005      	beq.n	80077de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80077d2:	e01d      	b.n	8007810 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	f043 0308 	orr.w	r3, r3, #8
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80077dc:	e019      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	f043 0310 	orr.w	r3, r3, #16
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80077e6:	e014      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	f043 0320 	orr.w	r3, r3, #32
 80077ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80077f0:	e00f      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80077fa:	e00a      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007804:	e005      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800780e:	e000      	b.n	8007812 <HAL_CAN_IRQHandler+0x336>
            break;
 8007810:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007820:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2204      	movs	r2, #4
 8007828:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f872 	bl	8007926 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007842:	bf00      	nop
 8007844:	3728      	adds	r7, #40	@ 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800794c:	4b0c      	ldr	r3, [pc, #48]	@ (8007980 <__NVIC_SetPriorityGrouping+0x44>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007958:	4013      	ands	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800796c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800796e:	4a04      	ldr	r2, [pc, #16]	@ (8007980 <__NVIC_SetPriorityGrouping+0x44>)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	60d3      	str	r3, [r2, #12]
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007988:	4b04      	ldr	r3, [pc, #16]	@ (800799c <__NVIC_GetPriorityGrouping+0x18>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	f003 0307 	and.w	r3, r3, #7
}
 8007992:	4618      	mov	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	e000ed00 	.word	0xe000ed00

080079a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	db0b      	blt.n	80079ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	f003 021f 	and.w	r2, r3, #31
 80079b8:	4907      	ldr	r1, [pc, #28]	@ (80079d8 <__NVIC_EnableIRQ+0x38>)
 80079ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2001      	movs	r0, #1
 80079c2:	fa00 f202 	lsl.w	r2, r0, r2
 80079c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	e000e100 	.word	0xe000e100

080079dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db0a      	blt.n	8007a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	490c      	ldr	r1, [pc, #48]	@ (8007a28 <__NVIC_SetPriority+0x4c>)
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	0112      	lsls	r2, r2, #4
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	440b      	add	r3, r1
 8007a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a04:	e00a      	b.n	8007a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	4908      	ldr	r1, [pc, #32]	@ (8007a2c <__NVIC_SetPriority+0x50>)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	3b04      	subs	r3, #4
 8007a14:	0112      	lsls	r2, r2, #4
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	440b      	add	r3, r1
 8007a1a:	761a      	strb	r2, [r3, #24]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	e000e100 	.word	0xe000e100
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b089      	sub	sp, #36	@ 0x24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f1c3 0307 	rsb	r3, r3, #7
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	bf28      	it	cs
 8007a4e:	2304      	movcs	r3, #4
 8007a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	3304      	adds	r3, #4
 8007a56:	2b06      	cmp	r3, #6
 8007a58:	d902      	bls.n	8007a60 <NVIC_EncodePriority+0x30>
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3b03      	subs	r3, #3
 8007a5e:	e000      	b.n	8007a62 <NVIC_EncodePriority+0x32>
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43da      	mvns	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	401a      	ands	r2, r3
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a82:	43d9      	mvns	r1, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a88:	4313      	orrs	r3, r2
         );
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3724      	adds	r7, #36	@ 0x24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aa8:	d301      	bcc.n	8007aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e00f      	b.n	8007ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007aae:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad8 <SysTick_Config+0x40>)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ab6:	210f      	movs	r1, #15
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007abc:	f7ff ff8e 	bl	80079dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ac0:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <SysTick_Config+0x40>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ac6:	4b04      	ldr	r3, [pc, #16]	@ (8007ad8 <SysTick_Config+0x40>)
 8007ac8:	2207      	movs	r2, #7
 8007aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	e000e010 	.word	0xe000e010

08007adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ff29 	bl	800793c <__NVIC_SetPriorityGrouping>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	4603      	mov	r3, r0
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b04:	f7ff ff3e 	bl	8007984 <__NVIC_GetPriorityGrouping>
 8007b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	6978      	ldr	r0, [r7, #20]
 8007b10:	f7ff ff8e 	bl	8007a30 <NVIC_EncodePriority>
 8007b14:	4602      	mov	r2, r0
 8007b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff ff5d 	bl	80079dc <__NVIC_SetPriority>
}
 8007b22:	bf00      	nop
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	4603      	mov	r3, r0
 8007b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff ff31 	bl	80079a0 <__NVIC_EnableIRQ>
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ffa2 	bl	8007a98 <SysTick_Config>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b6c:	f7ff f874 	bl	8006c58 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e099      	b.n	8007cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0201 	bic.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b9c:	e00f      	b.n	8007bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b9e:	f7ff f85b 	bl	8006c58 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b05      	cmp	r3, #5
 8007baa:	d908      	bls.n	8007bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e078      	b.n	8007cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e8      	bne.n	8007b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4b38      	ldr	r3, [pc, #224]	@ (8007cb8 <HAL_DMA_Init+0x158>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d107      	bne.n	8007c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c20:	4313      	orrs	r3, r2
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d117      	bne.n	8007c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fb01 	bl	800826c <DMA_CheckFifoParam>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e016      	b.n	8007cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fab8 	bl	8008200 <DMA_CalcBaseAndBitshift>
 8007c90:	4603      	mov	r3, r0
 8007c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c98:	223f      	movs	r2, #63	@ 0x3f
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	f010803f 	.word	0xf010803f

08007cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_DMA_Start_IT+0x26>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e040      	b.n	8007d64 <HAL_DMA_Start_IT+0xa8>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d12f      	bne.n	8007d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fa4a 	bl	80081a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d14:	223f      	movs	r2, #63	@ 0x3f
 8007d16:	409a      	lsls	r2, r3
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0216 	orr.w	r2, r2, #22
 8007d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0208 	orr.w	r2, r2, #8
 8007d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e005      	b.n	8007d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
 8007d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d7a:	f7fe ff6d 	bl	8006c58 <HAL_GetTick>
 8007d7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d008      	beq.n	8007d9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e052      	b.n	8007e44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0216 	bic.w	r2, r2, #22
 8007dac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695a      	ldr	r2, [r3, #20]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007dbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <HAL_DMA_Abort+0x62>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d007      	beq.n	8007dde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0208 	bic.w	r2, r2, #8
 8007ddc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0201 	bic.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dee:	e013      	b.n	8007e18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007df0:	f7fe ff32 	bl	8006c58 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	d90c      	bls.n	8007e18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2203      	movs	r2, #3
 8007e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e015      	b.n	8007e44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e4      	bne.n	8007df0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e2a:	223f      	movs	r2, #63	@ 0x3f
 8007e2c:	409a      	lsls	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2280      	movs	r2, #128	@ 0x80
 8007e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e00c      	b.n	8007e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0201 	bic.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80080d8 <HAL_DMA_IRQHandler+0x248>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80080dc <HAL_DMA_IRQHandler+0x24c>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0a9b      	lsrs	r3, r3, #10
 8007ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eba:	2208      	movs	r2, #8
 8007ebc:	409a      	lsls	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01a      	beq.n	8007efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0204 	bic.w	r2, r2, #4
 8007ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee8:	2208      	movs	r2, #8
 8007eea:	409a      	lsls	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f00:	2201      	movs	r2, #1
 8007f02:	409a      	lsls	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d012      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1e:	2201      	movs	r2, #1
 8007f20:	409a      	lsls	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f36:	2204      	movs	r2, #4
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f54:	2204      	movs	r2, #4
 8007f56:	409a      	lsls	r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f60:	f043 0204 	orr.w	r2, r3, #4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d043      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d03c      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d018      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d108      	bne.n	8007fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d024      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	e01f      	b.n	8008000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01b      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
 8007fd0:	e016      	b.n	8008000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d107      	bne.n	8007ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0208 	bic.w	r2, r2, #8
 8007fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008004:	2220      	movs	r2, #32
 8008006:	409a      	lsls	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 808f 	beq.w	8008130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8087 	beq.w	8008130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008026:	2220      	movs	r2, #32
 8008028:	409a      	lsls	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b05      	cmp	r3, #5
 8008038:	d136      	bne.n	80080a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0216 	bic.w	r2, r2, #22
 8008048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695a      	ldr	r2, [r3, #20]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <HAL_DMA_IRQHandler+0x1da>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0208 	bic.w	r2, r2, #8
 8008078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800807e:	223f      	movs	r2, #63	@ 0x3f
 8008080:	409a      	lsls	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d07e      	beq.n	800819c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
        }
        return;
 80080a6:	e079      	b.n	800819c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01d      	beq.n	80080f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10d      	bne.n	80080e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d031      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
 80080d4:	e02c      	b.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
 80080d6:	bf00      	nop
 80080d8:	2000005c 	.word	0x2000005c
 80080dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d023      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
 80080f0:	e01e      	b.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0210 	bic.w	r2, r2, #16
 800810e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008134:	2b00      	cmp	r3, #0
 8008136:	d032      	beq.n	800819e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d022      	beq.n	800818a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3301      	adds	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	429a      	cmp	r2, r3
 8008166:	d307      	bcc.n	8008178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f2      	bne.n	800815c <HAL_DMA_IRQHandler+0x2cc>
 8008176:	e000      	b.n	800817a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	e000      	b.n	800819e <HAL_DMA_IRQHandler+0x30e>
        return;
 800819c:	bf00      	nop
    }
  }
}
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d108      	bne.n	80081e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081e2:	e007      	b.n	80081f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	60da      	str	r2, [r3, #12]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	3b10      	subs	r3, #16
 8008210:	4a14      	ldr	r2, [pc, #80]	@ (8008264 <DMA_CalcBaseAndBitshift+0x64>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	091b      	lsrs	r3, r3, #4
 8008218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800821a:	4a13      	ldr	r2, [pc, #76]	@ (8008268 <DMA_CalcBaseAndBitshift+0x68>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b03      	cmp	r3, #3
 800822c:	d909      	bls.n	8008242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	1d1a      	adds	r2, r3, #4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008240:	e007      	b.n	8008252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	aaaaaaab 	.word	0xaaaaaaab
 8008268:	080125fc 	.word	0x080125fc

0800826c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d11f      	bne.n	80082c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d856      	bhi.n	800833a <DMA_CheckFifoParam+0xce>
 800828c:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <DMA_CheckFifoParam+0x28>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082b7 	.word	0x080082b7
 800829c:	080082a5 	.word	0x080082a5
 80082a0:	0800833b 	.word	0x0800833b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d046      	beq.n	800833e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b4:	e043      	b.n	800833e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082be:	d140      	bne.n	8008342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082c4:	e03d      	b.n	8008342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ce:	d121      	bne.n	8008314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d837      	bhi.n	8008346 <DMA_CheckFifoParam+0xda>
 80082d6:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <DMA_CheckFifoParam+0x70>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	080082f3 	.word	0x080082f3
 80082e4:	080082ed 	.word	0x080082ed
 80082e8:	08008305 	.word	0x08008305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
      break;
 80082f0:	e030      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d025      	beq.n	800834a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008302:	e022      	b.n	800834a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800830c:	d11f      	bne.n	800834e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008312:	e01c      	b.n	800834e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d903      	bls.n	8008322 <DMA_CheckFifoParam+0xb6>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b03      	cmp	r3, #3
 800831e:	d003      	beq.n	8008328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008320:	e018      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
      break;
 8008326:	e015      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00e      	beq.n	8008352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e00b      	b.n	8008352 <DMA_CheckFifoParam+0xe6>
      break;
 800833a:	bf00      	nop
 800833c:	e00a      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;
 800833e:	bf00      	nop
 8008340:	e008      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;
 8008342:	bf00      	nop
 8008344:	e006      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;
 8008346:	bf00      	nop
 8008348:	e004      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;   
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <DMA_CheckFifoParam+0xe8>
      break;
 8008352:	bf00      	nop
    }
  } 
  
  return status; 
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	@ 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	e16b      	b.n	8008658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008380:	2201      	movs	r2, #1
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4013      	ands	r3, r2
 8008392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	429a      	cmp	r2, r3
 800839a:	f040 815a 	bne.w	8008652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d005      	beq.n	80083b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d130      	bne.n	8008418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	2203      	movs	r2, #3
 80083c2:	fa02 f303 	lsl.w	r3, r2, r3
 80083c6:	43db      	mvns	r3, r3
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	4313      	orrs	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083ec:	2201      	movs	r2, #1
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	43db      	mvns	r3, r3
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	4013      	ands	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 0201 	and.w	r2, r3, #1
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4313      	orrs	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d017      	beq.n	8008454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	2203      	movs	r2, #3
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	43db      	mvns	r3, r3
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	4013      	ands	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	fa02 f303 	lsl.w	r3, r2, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4313      	orrs	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d123      	bne.n	80084a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	08da      	lsrs	r2, r3, #3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3208      	adds	r2, #8
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	220f      	movs	r2, #15
 8008478:	fa02 f303 	lsl.w	r3, r2, r3
 800847c:	43db      	mvns	r3, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4013      	ands	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4313      	orrs	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	08da      	lsrs	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3208      	adds	r2, #8
 80084a2:	69b9      	ldr	r1, [r7, #24]
 80084a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	2203      	movs	r2, #3
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	43db      	mvns	r3, r3
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	4013      	ands	r3, r2
 80084be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f003 0203 	and.w	r2, r3, #3
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80b4 	beq.w	8008652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	4b60      	ldr	r3, [pc, #384]	@ (8008670 <HAL_GPIO_Init+0x30c>)
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	4a5f      	ldr	r2, [pc, #380]	@ (8008670 <HAL_GPIO_Init+0x30c>)
 80084f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80084fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008670 <HAL_GPIO_Init+0x30c>)
 80084fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008506:	4a5b      	ldr	r2, [pc, #364]	@ (8008674 <HAL_GPIO_Init+0x310>)
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	089b      	lsrs	r3, r3, #2
 800850c:	3302      	adds	r3, #2
 800850e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	220f      	movs	r2, #15
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	43db      	mvns	r3, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	4013      	ands	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a52      	ldr	r2, [pc, #328]	@ (8008678 <HAL_GPIO_Init+0x314>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d02b      	beq.n	800858a <HAL_GPIO_Init+0x226>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a51      	ldr	r2, [pc, #324]	@ (800867c <HAL_GPIO_Init+0x318>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d025      	beq.n	8008586 <HAL_GPIO_Init+0x222>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a50      	ldr	r2, [pc, #320]	@ (8008680 <HAL_GPIO_Init+0x31c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d01f      	beq.n	8008582 <HAL_GPIO_Init+0x21e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a4f      	ldr	r2, [pc, #316]	@ (8008684 <HAL_GPIO_Init+0x320>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d019      	beq.n	800857e <HAL_GPIO_Init+0x21a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a4e      	ldr	r2, [pc, #312]	@ (8008688 <HAL_GPIO_Init+0x324>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <HAL_GPIO_Init+0x216>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a4d      	ldr	r2, [pc, #308]	@ (800868c <HAL_GPIO_Init+0x328>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00d      	beq.n	8008576 <HAL_GPIO_Init+0x212>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a4c      	ldr	r2, [pc, #304]	@ (8008690 <HAL_GPIO_Init+0x32c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d007      	beq.n	8008572 <HAL_GPIO_Init+0x20e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a4b      	ldr	r2, [pc, #300]	@ (8008694 <HAL_GPIO_Init+0x330>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d101      	bne.n	800856e <HAL_GPIO_Init+0x20a>
 800856a:	2307      	movs	r3, #7
 800856c:	e00e      	b.n	800858c <HAL_GPIO_Init+0x228>
 800856e:	2308      	movs	r3, #8
 8008570:	e00c      	b.n	800858c <HAL_GPIO_Init+0x228>
 8008572:	2306      	movs	r3, #6
 8008574:	e00a      	b.n	800858c <HAL_GPIO_Init+0x228>
 8008576:	2305      	movs	r3, #5
 8008578:	e008      	b.n	800858c <HAL_GPIO_Init+0x228>
 800857a:	2304      	movs	r3, #4
 800857c:	e006      	b.n	800858c <HAL_GPIO_Init+0x228>
 800857e:	2303      	movs	r3, #3
 8008580:	e004      	b.n	800858c <HAL_GPIO_Init+0x228>
 8008582:	2302      	movs	r3, #2
 8008584:	e002      	b.n	800858c <HAL_GPIO_Init+0x228>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <HAL_GPIO_Init+0x228>
 800858a:	2300      	movs	r3, #0
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	f002 0203 	and.w	r2, r2, #3
 8008592:	0092      	lsls	r2, r2, #2
 8008594:	4093      	lsls	r3, r2
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	4313      	orrs	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800859c:	4935      	ldr	r1, [pc, #212]	@ (8008674 <HAL_GPIO_Init+0x310>)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	089b      	lsrs	r3, r3, #2
 80085a2:	3302      	adds	r3, #2
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008698 <HAL_GPIO_Init+0x334>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	43db      	mvns	r3, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4013      	ands	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80085ce:	4a32      	ldr	r2, [pc, #200]	@ (8008698 <HAL_GPIO_Init+0x334>)
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085d4:	4b30      	ldr	r3, [pc, #192]	@ (8008698 <HAL_GPIO_Init+0x334>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	43db      	mvns	r3, r3
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	4013      	ands	r3, r2
 80085e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085f8:	4a27      	ldr	r2, [pc, #156]	@ (8008698 <HAL_GPIO_Init+0x334>)
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085fe:	4b26      	ldr	r3, [pc, #152]	@ (8008698 <HAL_GPIO_Init+0x334>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	43db      	mvns	r3, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4013      	ands	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008622:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <HAL_GPIO_Init+0x334>)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008628:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <HAL_GPIO_Init+0x334>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	43db      	mvns	r3, r3
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	4013      	ands	r3, r2
 8008636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800864c:	4a12      	ldr	r2, [pc, #72]	@ (8008698 <HAL_GPIO_Init+0x334>)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b0f      	cmp	r3, #15
 800865c:	f67f ae90 	bls.w	8008380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	3724      	adds	r7, #36	@ 0x24
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	40023800 	.word	0x40023800
 8008674:	40013800 	.word	0x40013800
 8008678:	40020000 	.word	0x40020000
 800867c:	40020400 	.word	0x40020400
 8008680:	40020800 	.word	0x40020800
 8008684:	40020c00 	.word	0x40020c00
 8008688:	40021000 	.word	0x40021000
 800868c:	40021400 	.word	0x40021400
 8008690:	40021800 	.word	0x40021800
 8008694:	40021c00 	.word	0x40021c00
 8008698:	40013c00 	.word	0x40013c00

0800869c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	807b      	strh	r3, [r7, #2]
 80086a8:	4613      	mov	r3, r2
 80086aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086b2:	887a      	ldrh	r2, [r7, #2]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086b8:	e003      	b.n	80086c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086ba:	887b      	ldrh	r3, [r7, #2]
 80086bc:	041a      	lsls	r2, r3, #16
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	619a      	str	r2, [r3, #24]
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80086da:	4b08      	ldr	r3, [pc, #32]	@ (80086fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	4013      	ands	r3, r2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d006      	beq.n	80086f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086e6:	4a05      	ldr	r2, [pc, #20]	@ (80086fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fc fbd6 	bl	8004ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40013c00 	.word	0x40013c00

08008700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e12b      	b.n	800896a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fd fcd8 	bl	80060dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2224      	movs	r2, #36	@ 0x24
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0201 	bic.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008752:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008762:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008764:	f000 fd4c 	bl	8009200 <HAL_RCC_GetPCLK1Freq>
 8008768:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	4a81      	ldr	r2, [pc, #516]	@ (8008974 <HAL_I2C_Init+0x274>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d807      	bhi.n	8008784 <HAL_I2C_Init+0x84>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a80      	ldr	r2, [pc, #512]	@ (8008978 <HAL_I2C_Init+0x278>)
 8008778:	4293      	cmp	r3, r2
 800877a:	bf94      	ite	ls
 800877c:	2301      	movls	r3, #1
 800877e:	2300      	movhi	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	e006      	b.n	8008792 <HAL_I2C_Init+0x92>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a7d      	ldr	r2, [pc, #500]	@ (800897c <HAL_I2C_Init+0x27c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	bf94      	ite	ls
 800878c:	2301      	movls	r3, #1
 800878e:	2300      	movhi	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0e7      	b.n	800896a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4a78      	ldr	r2, [pc, #480]	@ (8008980 <HAL_I2C_Init+0x280>)
 800879e:	fba2 2303 	umull	r2, r3, r2, r3
 80087a2:	0c9b      	lsrs	r3, r3, #18
 80087a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008974 <HAL_I2C_Init+0x274>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d802      	bhi.n	80087d4 <HAL_I2C_Init+0xd4>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	3301      	adds	r3, #1
 80087d2:	e009      	b.n	80087e8 <HAL_I2C_Init+0xe8>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	4a69      	ldr	r2, [pc, #420]	@ (8008984 <HAL_I2C_Init+0x284>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	099b      	lsrs	r3, r3, #6
 80087e6:	3301      	adds	r3, #1
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80087fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	495c      	ldr	r1, [pc, #368]	@ (8008974 <HAL_I2C_Init+0x274>)
 8008804:	428b      	cmp	r3, r1
 8008806:	d819      	bhi.n	800883c <HAL_I2C_Init+0x13c>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1e59      	subs	r1, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	fbb1 f3f3 	udiv	r3, r1, r3
 8008816:	1c59      	adds	r1, r3, #1
 8008818:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800881c:	400b      	ands	r3, r1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <HAL_I2C_Init+0x138>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1e59      	subs	r1, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008830:	3301      	adds	r3, #1
 8008832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008836:	e051      	b.n	80088dc <HAL_I2C_Init+0x1dc>
 8008838:	2304      	movs	r3, #4
 800883a:	e04f      	b.n	80088dc <HAL_I2C_Init+0x1dc>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d111      	bne.n	8008868 <HAL_I2C_Init+0x168>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1e58      	subs	r0, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6859      	ldr	r1, [r3, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	440b      	add	r3, r1
 8008852:	fbb0 f3f3 	udiv	r3, r0, r3
 8008856:	3301      	adds	r3, #1
 8008858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800885c:	2b00      	cmp	r3, #0
 800885e:	bf0c      	ite	eq
 8008860:	2301      	moveq	r3, #1
 8008862:	2300      	movne	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	e012      	b.n	800888e <HAL_I2C_Init+0x18e>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	1e58      	subs	r0, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6859      	ldr	r1, [r3, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	0099      	lsls	r1, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	fbb0 f3f3 	udiv	r3, r0, r3
 800887e:	3301      	adds	r3, #1
 8008880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf0c      	ite	eq
 8008888:	2301      	moveq	r3, #1
 800888a:	2300      	movne	r3, #0
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_I2C_Init+0x196>
 8008892:	2301      	movs	r3, #1
 8008894:	e022      	b.n	80088dc <HAL_I2C_Init+0x1dc>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10e      	bne.n	80088bc <HAL_I2C_Init+0x1bc>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1e58      	subs	r0, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6859      	ldr	r1, [r3, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	440b      	add	r3, r1
 80088ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80088b0:	3301      	adds	r3, #1
 80088b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ba:	e00f      	b.n	80088dc <HAL_I2C_Init+0x1dc>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	1e58      	subs	r0, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	0099      	lsls	r1, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80088d2:	3301      	adds	r3, #1
 80088d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	6809      	ldr	r1, [r1, #0]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800890a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6911      	ldr	r1, [r2, #16]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68d2      	ldr	r2, [r2, #12]
 8008916:	4311      	orrs	r1, r2
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6812      	ldr	r2, [r2, #0]
 800891c:	430b      	orrs	r3, r1
 800891e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	000186a0 	.word	0x000186a0
 8008978:	001e847f 	.word	0x001e847f
 800897c:	003d08ff 	.word	0x003d08ff
 8008980:	431bde83 	.word	0x431bde83
 8008984:	10624dd3 	.word	0x10624dd3

08008988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e267      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d075      	beq.n	8008a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80089a6:	4b88      	ldr	r3, [pc, #544]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 030c 	and.w	r3, r3, #12
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00c      	beq.n	80089cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089b2:	4b85      	ldr	r3, [pc, #532]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80089ba:	2b08      	cmp	r3, #8
 80089bc:	d112      	bne.n	80089e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089be:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089ca:	d10b      	bne.n	80089e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089cc:	4b7e      	ldr	r3, [pc, #504]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d05b      	beq.n	8008a90 <HAL_RCC_OscConfig+0x108>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d157      	bne.n	8008a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e242      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ec:	d106      	bne.n	80089fc <HAL_RCC_OscConfig+0x74>
 80089ee:	4b76      	ldr	r3, [pc, #472]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a75      	ldr	r2, [pc, #468]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e01d      	b.n	8008a38 <HAL_RCC_OscConfig+0xb0>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a04:	d10c      	bne.n	8008a20 <HAL_RCC_OscConfig+0x98>
 8008a06:	4b70      	ldr	r3, [pc, #448]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a6f      	ldr	r2, [pc, #444]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	4b6d      	ldr	r3, [pc, #436]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a6c      	ldr	r2, [pc, #432]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	e00b      	b.n	8008a38 <HAL_RCC_OscConfig+0xb0>
 8008a20:	4b69      	ldr	r3, [pc, #420]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a68      	ldr	r2, [pc, #416]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	4b66      	ldr	r3, [pc, #408]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a65      	ldr	r2, [pc, #404]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d013      	beq.n	8008a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a40:	f7fe f90a 	bl	8006c58 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a48:	f7fe f906 	bl	8006c58 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b64      	cmp	r3, #100	@ 0x64
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e207      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0xc0>
 8008a66:	e014      	b.n	8008a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a68:	f7fe f8f6 	bl	8006c58 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a70:	f7fe f8f2 	bl	8006c58 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b64      	cmp	r3, #100	@ 0x64
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e1f3      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a82:	4b51      	ldr	r3, [pc, #324]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f0      	bne.n	8008a70 <HAL_RCC_OscConfig+0xe8>
 8008a8e:	e000      	b.n	8008a92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d063      	beq.n	8008b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 030c 	and.w	r3, r3, #12
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aaa:	4b47      	ldr	r3, [pc, #284]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d11c      	bne.n	8008af0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ab6:	4b44      	ldr	r3, [pc, #272]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d116      	bne.n	8008af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ac2:	4b41      	ldr	r3, [pc, #260]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_RCC_OscConfig+0x152>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d001      	beq.n	8008ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e1c7      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ada:	4b3b      	ldr	r3, [pc, #236]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4937      	ldr	r1, [pc, #220]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aee:	e03a      	b.n	8008b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d020      	beq.n	8008b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008af8:	4b34      	ldr	r3, [pc, #208]	@ (8008bcc <HAL_RCC_OscConfig+0x244>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afe:	f7fe f8ab 	bl	8006c58 <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b04:	e008      	b.n	8008b18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b06:	f7fe f8a7 	bl	8006c58 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e1a8      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b18:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0f0      	beq.n	8008b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b24:	4b28      	ldr	r3, [pc, #160]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4925      	ldr	r1, [pc, #148]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	600b      	str	r3, [r1, #0]
 8008b38:	e015      	b.n	8008b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b3a:	4b24      	ldr	r3, [pc, #144]	@ (8008bcc <HAL_RCC_OscConfig+0x244>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b40:	f7fe f88a 	bl	8006c58 <HAL_GetTick>
 8008b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b46:	e008      	b.n	8008b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b48:	f7fe f886 	bl	8006c58 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d901      	bls.n	8008b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e187      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f0      	bne.n	8008b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d036      	beq.n	8008be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d016      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b7a:	4b15      	ldr	r3, [pc, #84]	@ (8008bd0 <HAL_RCC_OscConfig+0x248>)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b80:	f7fe f86a 	bl	8006c58 <HAL_GetTick>
 8008b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b88:	f7fe f866 	bl	8006c58 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e167      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0x200>
 8008ba6:	e01b      	b.n	8008be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ba8:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <HAL_RCC_OscConfig+0x248>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bae:	f7fe f853 	bl	8006c58 <HAL_GetTick>
 8008bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bb4:	e00e      	b.n	8008bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bb6:	f7fe f84f 	bl	8006c58 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d907      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e150      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	42470000 	.word	0x42470000
 8008bd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bd4:	4b88      	ldr	r3, [pc, #544]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1ea      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8097 	beq.w	8008d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bf2:	4b81      	ldr	r3, [pc, #516]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10f      	bne.n	8008c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60bb      	str	r3, [r7, #8]
 8008c02:	4b7d      	ldr	r3, [pc, #500]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	4a7c      	ldr	r2, [pc, #496]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c16:	60bb      	str	r3, [r7, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c1e:	4b77      	ldr	r3, [pc, #476]	@ (8008dfc <HAL_RCC_OscConfig+0x474>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d118      	bne.n	8008c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c2a:	4b74      	ldr	r3, [pc, #464]	@ (8008dfc <HAL_RCC_OscConfig+0x474>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a73      	ldr	r2, [pc, #460]	@ (8008dfc <HAL_RCC_OscConfig+0x474>)
 8008c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c36:	f7fe f80f 	bl	8006c58 <HAL_GetTick>
 8008c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c3c:	e008      	b.n	8008c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c3e:	f7fe f80b 	bl	8006c58 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e10c      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c50:	4b6a      	ldr	r3, [pc, #424]	@ (8008dfc <HAL_RCC_OscConfig+0x474>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0f0      	beq.n	8008c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d106      	bne.n	8008c72 <HAL_RCC_OscConfig+0x2ea>
 8008c64:	4b64      	ldr	r3, [pc, #400]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c68:	4a63      	ldr	r2, [pc, #396]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c70:	e01c      	b.n	8008cac <HAL_RCC_OscConfig+0x324>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d10c      	bne.n	8008c94 <HAL_RCC_OscConfig+0x30c>
 8008c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c80:	f043 0304 	orr.w	r3, r3, #4
 8008c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c86:	4b5c      	ldr	r3, [pc, #368]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c92:	e00b      	b.n	8008cac <HAL_RCC_OscConfig+0x324>
 8008c94:	4b58      	ldr	r3, [pc, #352]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c98:	4a57      	ldr	r2, [pc, #348]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ca0:	4b55      	ldr	r3, [pc, #340]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca4:	4a54      	ldr	r2, [pc, #336]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008ca6:	f023 0304 	bic.w	r3, r3, #4
 8008caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d015      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb4:	f7fd ffd0 	bl	8006c58 <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cba:	e00a      	b.n	8008cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cbc:	f7fd ffcc 	bl	8006c58 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e0cb      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cd2:	4b49      	ldr	r3, [pc, #292]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ee      	beq.n	8008cbc <HAL_RCC_OscConfig+0x334>
 8008cde:	e014      	b.n	8008d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ce0:	f7fd ffba 	bl	8006c58 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ce6:	e00a      	b.n	8008cfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ce8:	f7fd ffb6 	bl	8006c58 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e0b5      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1ee      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d105      	bne.n	8008d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d10:	4b39      	ldr	r3, [pc, #228]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d14:	4a38      	ldr	r2, [pc, #224]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80a1 	beq.w	8008e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d26:	4b34      	ldr	r3, [pc, #208]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d05c      	beq.n	8008dec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d141      	bne.n	8008dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d3a:	4b31      	ldr	r3, [pc, #196]	@ (8008e00 <HAL_RCC_OscConfig+0x478>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d40:	f7fd ff8a 	bl	8006c58 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d48:	f7fd ff86 	bl	8006c58 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e087      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69da      	ldr	r2, [r3, #28]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	019b      	lsls	r3, r3, #6
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	041b      	lsls	r3, r3, #16
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	061b      	lsls	r3, r3, #24
 8008d8a:	491b      	ldr	r1, [pc, #108]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d90:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <HAL_RCC_OscConfig+0x478>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d96:	f7fd ff5f 	bl	8006c58 <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d9e:	f7fd ff5b 	bl	8006c58 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e05c      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008db0:	4b11      	ldr	r3, [pc, #68]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCC_OscConfig+0x416>
 8008dbc:	e054      	b.n	8008e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dbe:	4b10      	ldr	r3, [pc, #64]	@ (8008e00 <HAL_RCC_OscConfig+0x478>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc4:	f7fd ff48 	bl	8006c58 <HAL_GetTick>
 8008dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dcc:	f7fd ff44 	bl	8006c58 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e045      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dde:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <HAL_RCC_OscConfig+0x470>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f0      	bne.n	8008dcc <HAL_RCC_OscConfig+0x444>
 8008dea:	e03d      	b.n	8008e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d107      	bne.n	8008e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e038      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40007000 	.word	0x40007000
 8008e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e04:	4b1b      	ldr	r3, [pc, #108]	@ (8008e74 <HAL_RCC_OscConfig+0x4ec>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d028      	beq.n	8008e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d121      	bne.n	8008e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d11a      	bne.n	8008e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e34:	4013      	ands	r3, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d111      	bne.n	8008e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d107      	bne.n	8008e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d001      	beq.n	8008e68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40023800 	.word	0x40023800

08008e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e0cc      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e8c:	4b68      	ldr	r3, [pc, #416]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d90c      	bls.n	8008eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e9a:	4b65      	ldr	r3, [pc, #404]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea2:	4b63      	ldr	r3, [pc, #396]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d001      	beq.n	8008eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0b8      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d020      	beq.n	8008f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ecc:	4b59      	ldr	r3, [pc, #356]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	4a58      	ldr	r2, [pc, #352]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008ed6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ee4:	4b53      	ldr	r3, [pc, #332]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	4a52      	ldr	r2, [pc, #328]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008eea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ef0:	4b50      	ldr	r3, [pc, #320]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	494d      	ldr	r1, [pc, #308]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d044      	beq.n	8008f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d107      	bne.n	8008f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f16:	4b47      	ldr	r3, [pc, #284]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d119      	bne.n	8008f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07f      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d003      	beq.n	8008f36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d107      	bne.n	8008f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f36:	4b3f      	ldr	r3, [pc, #252]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e06f      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f46:	4b3b      	ldr	r3, [pc, #236]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e067      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f56:	4b37      	ldr	r3, [pc, #220]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f023 0203 	bic.w	r2, r3, #3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4934      	ldr	r1, [pc, #208]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f68:	f7fd fe76 	bl	8006c58 <HAL_GetTick>
 8008f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6e:	e00a      	b.n	8008f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f70:	f7fd fe72 	bl	8006c58 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e04f      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f86:	4b2b      	ldr	r3, [pc, #172]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 020c 	and.w	r2, r3, #12
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d1eb      	bne.n	8008f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f98:	4b25      	ldr	r3, [pc, #148]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d20c      	bcs.n	8008fc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fa6:	4b22      	ldr	r3, [pc, #136]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fae:	4b20      	ldr	r3, [pc, #128]	@ (8009030 <HAL_RCC_ClockConfig+0x1b8>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d001      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e032      	b.n	8009026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fcc:	4b19      	ldr	r3, [pc, #100]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	4916      	ldr	r1, [pc, #88]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fea:	4b12      	ldr	r3, [pc, #72]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	490e      	ldr	r1, [pc, #56]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ffe:	f000 f82d 	bl	800905c <HAL_RCC_GetSysClockFreq>
 8009002:	4602      	mov	r2, r0
 8009004:	4b0b      	ldr	r3, [pc, #44]	@ (8009034 <HAL_RCC_ClockConfig+0x1bc>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	490a      	ldr	r1, [pc, #40]	@ (8009038 <HAL_RCC_ClockConfig+0x1c0>)
 8009010:	5ccb      	ldrb	r3, [r1, r3]
 8009012:	fa22 f303 	lsr.w	r3, r2, r3
 8009016:	4a09      	ldr	r2, [pc, #36]	@ (800903c <HAL_RCC_ClockConfig+0x1c4>)
 8009018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800901a:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <HAL_RCC_ClockConfig+0x1c8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7fd fdd6 	bl	8006bd0 <HAL_InitTick>

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	40023c00 	.word	0x40023c00
 8009034:	40023800 	.word	0x40023800
 8009038:	080125e4 	.word	0x080125e4
 800903c:	2000005c 	.word	0x2000005c
 8009040:	20000060 	.word	0x20000060

08009044 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009048:	4b03      	ldr	r3, [pc, #12]	@ (8009058 <HAL_RCC_EnableCSS+0x14>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	4247004c 	.word	0x4247004c

0800905c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800905c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009060:	b090      	sub	sp, #64	@ 0x40
 8009062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009074:	4b59      	ldr	r3, [pc, #356]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 030c 	and.w	r3, r3, #12
 800907c:	2b08      	cmp	r3, #8
 800907e:	d00d      	beq.n	800909c <HAL_RCC_GetSysClockFreq+0x40>
 8009080:	2b08      	cmp	r3, #8
 8009082:	f200 80a1 	bhi.w	80091c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <HAL_RCC_GetSysClockFreq+0x34>
 800908a:	2b04      	cmp	r3, #4
 800908c:	d003      	beq.n	8009096 <HAL_RCC_GetSysClockFreq+0x3a>
 800908e:	e09b      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009090:	4b53      	ldr	r3, [pc, #332]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009092:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009094:	e09b      	b.n	80091ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009096:	4b53      	ldr	r3, [pc, #332]	@ (80091e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800909a:	e098      	b.n	80091ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800909c:	4b4f      	ldr	r3, [pc, #316]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090a6:	4b4d      	ldr	r3, [pc, #308]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d028      	beq.n	8009104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090b2:	4b4a      	ldr	r3, [pc, #296]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	099b      	lsrs	r3, r3, #6
 80090b8:	2200      	movs	r2, #0
 80090ba:	623b      	str	r3, [r7, #32]
 80090bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80090c4:	2100      	movs	r1, #0
 80090c6:	4b47      	ldr	r3, [pc, #284]	@ (80091e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80090c8:	fb03 f201 	mul.w	r2, r3, r1
 80090cc:	2300      	movs	r3, #0
 80090ce:	fb00 f303 	mul.w	r3, r0, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	4a43      	ldr	r2, [pc, #268]	@ (80091e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80090d6:	fba0 1202 	umull	r1, r2, r0, r2
 80090da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090dc:	460a      	mov	r2, r1
 80090de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80090e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090e2:	4413      	add	r3, r2
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e8:	2200      	movs	r2, #0
 80090ea:	61bb      	str	r3, [r7, #24]
 80090ec:	61fa      	str	r2, [r7, #28]
 80090ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80090f6:	f7f7 fda7 	bl	8000c48 <__aeabi_uldivmod>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4613      	mov	r3, r2
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009102:	e053      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009104:	4b35      	ldr	r3, [pc, #212]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	099b      	lsrs	r3, r3, #6
 800910a:	2200      	movs	r2, #0
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	617a      	str	r2, [r7, #20]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009116:	f04f 0b00 	mov.w	fp, #0
 800911a:	4652      	mov	r2, sl
 800911c:	465b      	mov	r3, fp
 800911e:	f04f 0000 	mov.w	r0, #0
 8009122:	f04f 0100 	mov.w	r1, #0
 8009126:	0159      	lsls	r1, r3, #5
 8009128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800912c:	0150      	lsls	r0, r2, #5
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	ebb2 080a 	subs.w	r8, r2, sl
 8009136:	eb63 090b 	sbc.w	r9, r3, fp
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800914a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800914e:	ebb2 0408 	subs.w	r4, r2, r8
 8009152:	eb63 0509 	sbc.w	r5, r3, r9
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	00eb      	lsls	r3, r5, #3
 8009160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009164:	00e2      	lsls	r2, r4, #3
 8009166:	4614      	mov	r4, r2
 8009168:	461d      	mov	r5, r3
 800916a:	eb14 030a 	adds.w	r3, r4, sl
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	eb45 030b 	adc.w	r3, r5, fp
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	f04f 0200 	mov.w	r2, #0
 800917a:	f04f 0300 	mov.w	r3, #0
 800917e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009182:	4629      	mov	r1, r5
 8009184:	028b      	lsls	r3, r1, #10
 8009186:	4621      	mov	r1, r4
 8009188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800918c:	4621      	mov	r1, r4
 800918e:	028a      	lsls	r2, r1, #10
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009196:	2200      	movs	r2, #0
 8009198:	60bb      	str	r3, [r7, #8]
 800919a:	60fa      	str	r2, [r7, #12]
 800919c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091a0:	f7f7 fd52 	bl	8000c48 <__aeabi_uldivmod>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4613      	mov	r3, r2
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80091ac:	4b0b      	ldr	r3, [pc, #44]	@ (80091dc <HAL_RCC_GetSysClockFreq+0x180>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	3301      	adds	r3, #1
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80091bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80091c6:	e002      	b.n	80091ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80091c8:	4b05      	ldr	r3, [pc, #20]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80091ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80091cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3740      	adds	r7, #64	@ 0x40
 80091d4:	46bd      	mov	sp, r7
 80091d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091da:	bf00      	nop
 80091dc:	40023800 	.word	0x40023800
 80091e0:	00f42400 	.word	0x00f42400
 80091e4:	00b71b00 	.word	0x00b71b00

080091e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091ec:	4b03      	ldr	r3, [pc, #12]	@ (80091fc <HAL_RCC_GetHCLKFreq+0x14>)
 80091ee:	681b      	ldr	r3, [r3, #0]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	2000005c 	.word	0x2000005c

08009200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009204:	f7ff fff0 	bl	80091e8 <HAL_RCC_GetHCLKFreq>
 8009208:	4602      	mov	r2, r0
 800920a:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	0a9b      	lsrs	r3, r3, #10
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	4903      	ldr	r1, [pc, #12]	@ (8009224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009216:	5ccb      	ldrb	r3, [r1, r3]
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800921c:	4618      	mov	r0, r3
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40023800 	.word	0x40023800
 8009224:	080125f4 	.word	0x080125f4

08009228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800922c:	f7ff ffdc 	bl	80091e8 <HAL_RCC_GetHCLKFreq>
 8009230:	4602      	mov	r2, r0
 8009232:	4b05      	ldr	r3, [pc, #20]	@ (8009248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	0b5b      	lsrs	r3, r3, #13
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	4903      	ldr	r1, [pc, #12]	@ (800924c <HAL_RCC_GetPCLK2Freq+0x24>)
 800923e:	5ccb      	ldrb	r3, [r1, r3]
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	bd80      	pop	{r7, pc}
 8009248:	40023800 	.word	0x40023800
 800924c:	080125f4 	.word	0x080125f4

08009250 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009254:	4b06      	ldr	r3, [pc, #24]	@ (8009270 <HAL_RCC_NMI_IRQHandler+0x20>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925c:	2b80      	cmp	r3, #128	@ 0x80
 800925e:	d104      	bne.n	800926a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009260:	f000 f80a 	bl	8009278 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009264:	4b03      	ldr	r3, [pc, #12]	@ (8009274 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009266:	2280      	movs	r2, #128	@ 0x80
 8009268:	701a      	strb	r2, [r3, #0]
  }
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	40023800 	.word	0x40023800
 8009274:	4002380e 	.word	0x4002380e

08009278 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e07b      	b.n	8009390 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d108      	bne.n	80092b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092a8:	d009      	beq.n	80092be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	61da      	str	r2, [r3, #28]
 80092b0:	e005      	b.n	80092be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7fc ff69 	bl	80061b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009342:	ea42 0103 	orr.w	r1, r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	f003 0104 	and.w	r1, r3, #4
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	f003 0210 	and.w	r2, r3, #16
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	69da      	ldr	r2, [r3, #28]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800937e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	@ 0x28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093a6:	2301      	movs	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093aa:	f7fd fc55 	bl	8006c58 <HAL_GetTick>
 80093ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d00c      	beq.n	80093e2 <HAL_SPI_TransmitReceive+0x4a>
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ce:	d106      	bne.n	80093de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <HAL_SPI_TransmitReceive+0x46>
 80093d8:	7ffb      	ldrb	r3, [r7, #31]
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d001      	beq.n	80093e2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80093de:	2302      	movs	r3, #2
 80093e0:	e17f      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <HAL_SPI_TransmitReceive+0x5c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_SPI_TransmitReceive+0x5c>
 80093ee:	887b      	ldrh	r3, [r7, #2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e174      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_SPI_TransmitReceive+0x6e>
 8009402:	2302      	movs	r3, #2
 8009404:	e16d      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b04      	cmp	r3, #4
 8009418:	d003      	beq.n	8009422 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2205      	movs	r2, #5
 800941e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	887a      	ldrh	r2, [r7, #2]
 8009432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	887a      	ldrh	r2, [r7, #2]
 8009438:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	887a      	ldrh	r2, [r7, #2]
 8009444:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	887a      	ldrh	r2, [r7, #2]
 800944a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009462:	2b40      	cmp	r3, #64	@ 0x40
 8009464:	d007      	beq.n	8009476 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009474:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800947e:	d17e      	bne.n	800957e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <HAL_SPI_TransmitReceive+0xf6>
 8009488:	8afb      	ldrh	r3, [r7, #22]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d16c      	bne.n	8009568 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	881a      	ldrh	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949e:	1c9a      	adds	r2, r3, #2
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b2:	e059      	b.n	8009568 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d11b      	bne.n	80094fa <HAL_SPI_TransmitReceive+0x162>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d016      	beq.n	80094fa <HAL_SPI_TransmitReceive+0x162>
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d113      	bne.n	80094fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d6:	881a      	ldrh	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e2:	1c9a      	adds	r2, r3, #2
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b01      	cmp	r3, #1
 8009506:	d119      	bne.n	800953c <HAL_SPI_TransmitReceive+0x1a4>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d014      	beq.n	800953c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68da      	ldr	r2, [r3, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	b292      	uxth	r2, r2
 800951e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	1c9a      	adds	r2, r3, #2
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009538:	2301      	movs	r3, #1
 800953a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800953c:	f7fd fb8c 	bl	8006c58 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009548:	429a      	cmp	r2, r3
 800954a:	d80d      	bhi.n	8009568 <HAL_SPI_TransmitReceive+0x1d0>
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009552:	d009      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e0bc      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1a0      	bne.n	80094b4 <HAL_SPI_TransmitReceive+0x11c>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d19b      	bne.n	80094b4 <HAL_SPI_TransmitReceive+0x11c>
 800957c:	e082      	b.n	8009684 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <HAL_SPI_TransmitReceive+0x1f4>
 8009586:	8afb      	ldrh	r3, [r7, #22]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d171      	bne.n	8009670 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	330c      	adds	r3, #12
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b2:	e05d      	b.n	8009670 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d11c      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x264>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d017      	beq.n	80095fc <HAL_SPI_TransmitReceive+0x264>
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d114      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	330c      	adds	r3, #12
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b01      	cmp	r3, #1
 8009608:	d119      	bne.n	800963e <HAL_SPI_TransmitReceive+0x2a6>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800960e:	b29b      	uxth	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d014      	beq.n	800963e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800963a:	2301      	movs	r3, #1
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800963e:	f7fd fb0b 	bl	8006c58 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964a:	429a      	cmp	r2, r3
 800964c:	d803      	bhi.n	8009656 <HAL_SPI_TransmitReceive+0x2be>
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009654:	d102      	bne.n	800965c <HAL_SPI_TransmitReceive+0x2c4>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2b00      	cmp	r3, #0
 800965a:	d109      	bne.n	8009670 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e038      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d19c      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x21c>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d197      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f8b7 	bl	80097fc <SPI_EndRxTxTransaction>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d008      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e01d      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80096e0:	2300      	movs	r3, #0
  }
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3728      	adds	r7, #40	@ 0x28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096fc:	f7fd faac 	bl	8006c58 <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4413      	add	r3, r2
 800970a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800970c:	f7fd faa4 	bl	8006c58 <HAL_GetTick>
 8009710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009712:	4b39      	ldr	r3, [pc, #228]	@ (80097f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	015b      	lsls	r3, r3, #5
 8009718:	0d1b      	lsrs	r3, r3, #20
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	fb02 f303 	mul.w	r3, r2, r3
 8009720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009722:	e055      	b.n	80097d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800972a:	d051      	beq.n	80097d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800972c:	f7fd fa94 	bl	8006c58 <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	429a      	cmp	r2, r3
 800973a:	d902      	bls.n	8009742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d13d      	bne.n	80097be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800975a:	d111      	bne.n	8009780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009764:	d004      	beq.n	8009770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976e:	d107      	bne.n	8009780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800977e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009788:	d10f      	bne.n	80097aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e018      	b.n	80097f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
 80097c8:	e002      	b.n	80097d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689a      	ldr	r2, [r3, #8]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4013      	ands	r3, r2
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	bf0c      	ite	eq
 80097e0:	2301      	moveq	r3, #1
 80097e2:	2300      	movne	r3, #0
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d19a      	bne.n	8009724 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	2000005c 	.word	0x2000005c

080097fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2201      	movs	r2, #1
 8009810:	2102      	movs	r1, #2
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff ff6a 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009822:	f043 0220 	orr.w	r2, r3, #32
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e032      	b.n	8009894 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800982e:	4b1b      	ldr	r3, [pc, #108]	@ (800989c <SPI_EndRxTxTransaction+0xa0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a1b      	ldr	r2, [pc, #108]	@ (80098a0 <SPI_EndRxTxTransaction+0xa4>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	0d5b      	lsrs	r3, r3, #21
 800983a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800983e:	fb02 f303 	mul.w	r3, r2, r3
 8009842:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800984c:	d112      	bne.n	8009874 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2200      	movs	r2, #0
 8009856:	2180      	movs	r1, #128	@ 0x80
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7ff ff47 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d016      	beq.n	8009892 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009868:	f043 0220 	orr.w	r2, r3, #32
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e00f      	b.n	8009894 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	3b01      	subs	r3, #1
 800987e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800988a:	2b80      	cmp	r3, #128	@ 0x80
 800988c:	d0f2      	beq.n	8009874 <SPI_EndRxTxTransaction+0x78>
 800988e:	e000      	b.n	8009892 <SPI_EndRxTxTransaction+0x96>
        break;
 8009890:	bf00      	nop
  }

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	2000005c 	.word	0x2000005c
 80098a0:	165e9f81 	.word	0x165e9f81

080098a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e041      	b.n	800993a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d106      	bne.n	80098d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7fc fd26 	bl	800631c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3304      	adds	r3, #4
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f000 fa06 	bl	8009cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e041      	b.n	80099d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fc fc89 	bl	8006280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	4619      	mov	r1, r3
 8009980:	4610      	mov	r0, r2
 8009982:	f000 f9b7 	bl	8009cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0ae      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b0c      	cmp	r3, #12
 8009a0a:	f200 809f 	bhi.w	8009b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a49 	.word	0x08009a49
 8009a18:	08009b4d 	.word	0x08009b4d
 8009a1c:	08009b4d 	.word	0x08009b4d
 8009a20:	08009b4d 	.word	0x08009b4d
 8009a24:	08009a89 	.word	0x08009a89
 8009a28:	08009b4d 	.word	0x08009b4d
 8009a2c:	08009b4d 	.word	0x08009b4d
 8009a30:	08009b4d 	.word	0x08009b4d
 8009a34:	08009acb 	.word	0x08009acb
 8009a38:	08009b4d 	.word	0x08009b4d
 8009a3c:	08009b4d 	.word	0x08009b4d
 8009a40:	08009b4d 	.word	0x08009b4d
 8009a44:	08009b0b 	.word	0x08009b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f9f6 	bl	8009e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0208 	orr.w	r2, r2, #8
 8009a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0204 	bic.w	r2, r2, #4
 8009a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6999      	ldr	r1, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	619a      	str	r2, [r3, #24]
      break;
 8009a86:	e064      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fa46 	bl	8009f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6999      	ldr	r1, [r3, #24]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	021a      	lsls	r2, r3, #8
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	619a      	str	r2, [r3, #24]
      break;
 8009ac8:	e043      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fa9b 	bl	800a00c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0204 	bic.w	r2, r2, #4
 8009af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69d9      	ldr	r1, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	61da      	str	r2, [r3, #28]
      break;
 8009b08:	e023      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 faef 	bl	800a0f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	021a      	lsls	r2, r3, #8
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	61da      	str	r2, [r3, #28]
      break;
 8009b4a:	e002      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_TIM_ConfigClockSource+0x1c>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e0b4      	b.n	8009cea <HAL_TIM_ConfigClockSource+0x186>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bb8:	d03e      	beq.n	8009c38 <HAL_TIM_ConfigClockSource+0xd4>
 8009bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bbe:	f200 8087 	bhi.w	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bc6:	f000 8086 	beq.w	8009cd6 <HAL_TIM_ConfigClockSource+0x172>
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bce:	d87f      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b70      	cmp	r3, #112	@ 0x70
 8009bd2:	d01a      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0xa6>
 8009bd4:	2b70      	cmp	r3, #112	@ 0x70
 8009bd6:	d87b      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b60      	cmp	r3, #96	@ 0x60
 8009bda:	d050      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x11a>
 8009bdc:	2b60      	cmp	r3, #96	@ 0x60
 8009bde:	d877      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b50      	cmp	r3, #80	@ 0x50
 8009be2:	d03c      	beq.n	8009c5e <HAL_TIM_ConfigClockSource+0xfa>
 8009be4:	2b50      	cmp	r3, #80	@ 0x50
 8009be6:	d873      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be8:	2b40      	cmp	r3, #64	@ 0x40
 8009bea:	d058      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x13a>
 8009bec:	2b40      	cmp	r3, #64	@ 0x40
 8009bee:	d86f      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf0:	2b30      	cmp	r3, #48	@ 0x30
 8009bf2:	d064      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009bf4:	2b30      	cmp	r3, #48	@ 0x30
 8009bf6:	d86b      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d060      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d867      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d05c      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d05a      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009c08:	e062      	b.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1a:	f000 fb3b 	bl	800a294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	609a      	str	r2, [r3, #8]
      break;
 8009c36:	e04f      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c48:	f000 fb24 	bl	800a294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c5a:	609a      	str	r2, [r3, #8]
      break;
 8009c5c:	e03c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f000 fa98 	bl	800a1a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2150      	movs	r1, #80	@ 0x50
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 faf1 	bl	800a25e <TIM_ITRx_SetConfig>
      break;
 8009c7c:	e02c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f000 fab7 	bl	800a1fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2160      	movs	r1, #96	@ 0x60
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fae1 	bl	800a25e <TIM_ITRx_SetConfig>
      break;
 8009c9c:	e01c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009caa:	461a      	mov	r2, r3
 8009cac:	f000 fa78 	bl	800a1a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2140      	movs	r1, #64	@ 0x40
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fad1 	bl	800a25e <TIM_ITRx_SetConfig>
      break;
 8009cbc:	e00c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f000 fac8 	bl	800a25e <TIM_ITRx_SetConfig>
      break;
 8009cce:	e003      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e000      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a43      	ldr	r2, [pc, #268]	@ (8009e14 <TIM_Base_SetConfig+0x120>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d12:	d00f      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a40      	ldr	r2, [pc, #256]	@ (8009e18 <TIM_Base_SetConfig+0x124>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00b      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8009e1c <TIM_Base_SetConfig+0x128>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d007      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a3e      	ldr	r2, [pc, #248]	@ (8009e20 <TIM_Base_SetConfig+0x12c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e24 <TIM_Base_SetConfig+0x130>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d108      	bne.n	8009d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a32      	ldr	r2, [pc, #200]	@ (8009e14 <TIM_Base_SetConfig+0x120>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d02b      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d54:	d027      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2f      	ldr	r2, [pc, #188]	@ (8009e18 <TIM_Base_SetConfig+0x124>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d023      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2e      	ldr	r2, [pc, #184]	@ (8009e1c <TIM_Base_SetConfig+0x128>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01f      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2d      	ldr	r2, [pc, #180]	@ (8009e20 <TIM_Base_SetConfig+0x12c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d01b      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a2c      	ldr	r2, [pc, #176]	@ (8009e24 <TIM_Base_SetConfig+0x130>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d017      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2b      	ldr	r2, [pc, #172]	@ (8009e28 <TIM_Base_SetConfig+0x134>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2a      	ldr	r2, [pc, #168]	@ (8009e2c <TIM_Base_SetConfig+0x138>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00f      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a29      	ldr	r2, [pc, #164]	@ (8009e30 <TIM_Base_SetConfig+0x13c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d00b      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a28      	ldr	r2, [pc, #160]	@ (8009e34 <TIM_Base_SetConfig+0x140>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d007      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a27      	ldr	r2, [pc, #156]	@ (8009e38 <TIM_Base_SetConfig+0x144>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d003      	beq.n	8009da6 <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a26      	ldr	r2, [pc, #152]	@ (8009e3c <TIM_Base_SetConfig+0x148>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d108      	bne.n	8009db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e14 <TIM_Base_SetConfig+0x120>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d003      	beq.n	8009de6 <TIM_Base_SetConfig+0xf2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a10      	ldr	r2, [pc, #64]	@ (8009e24 <TIM_Base_SetConfig+0x130>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d103      	bne.n	8009dee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	691a      	ldr	r2, [r3, #16]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f043 0204 	orr.w	r2, r3, #4
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	40010000 	.word	0x40010000
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	40000800 	.word	0x40000800
 8009e20:	40000c00 	.word	0x40000c00
 8009e24:	40010400 	.word	0x40010400
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40014400 	.word	0x40014400
 8009e30:	40014800 	.word	0x40014800
 8009e34:	40001800 	.word	0x40001800
 8009e38:	40001c00 	.word	0x40001c00
 8009e3c:	40002000 	.word	0x40002000

08009e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	f023 0201 	bic.w	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 0303 	bic.w	r3, r3, #3
 8009e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f023 0302 	bic.w	r3, r3, #2
 8009e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a20      	ldr	r2, [pc, #128]	@ (8009f18 <TIM_OC1_SetConfig+0xd8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_OC1_SetConfig+0x64>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f1c <TIM_OC1_SetConfig+0xdc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d10c      	bne.n	8009ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f023 0308 	bic.w	r3, r3, #8
 8009eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f023 0304 	bic.w	r3, r3, #4
 8009ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a15      	ldr	r2, [pc, #84]	@ (8009f18 <TIM_OC1_SetConfig+0xd8>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d003      	beq.n	8009ece <TIM_OC1_SetConfig+0x8e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a14      	ldr	r2, [pc, #80]	@ (8009f1c <TIM_OC1_SetConfig+0xdc>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d111      	bne.n	8009ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	621a      	str	r2, [r3, #32]
}
 8009f0c:	bf00      	nop
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	40010000 	.word	0x40010000
 8009f1c:	40010400 	.word	0x40010400

08009f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f023 0210 	bic.w	r2, r3, #16
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f023 0320 	bic.w	r3, r3, #32
 8009f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a22      	ldr	r2, [pc, #136]	@ (800a004 <TIM_OC2_SetConfig+0xe4>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC2_SetConfig+0x68>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a21      	ldr	r2, [pc, #132]	@ (800a008 <TIM_OC2_SetConfig+0xe8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d10d      	bne.n	8009fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a17      	ldr	r2, [pc, #92]	@ (800a004 <TIM_OC2_SetConfig+0xe4>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_OC2_SetConfig+0x94>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a16      	ldr	r2, [pc, #88]	@ (800a008 <TIM_OC2_SetConfig+0xe8>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d113      	bne.n	8009fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40010000 	.word	0x40010000
 800a008:	40010400 	.word	0x40010400

0800a00c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a21      	ldr	r2, [pc, #132]	@ (800a0ec <TIM_OC3_SetConfig+0xe0>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d003      	beq.n	800a072 <TIM_OC3_SetConfig+0x66>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a20      	ldr	r2, [pc, #128]	@ (800a0f0 <TIM_OC3_SetConfig+0xe4>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d10d      	bne.n	800a08e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a08c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a16      	ldr	r2, [pc, #88]	@ (800a0ec <TIM_OC3_SetConfig+0xe0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d003      	beq.n	800a09e <TIM_OC3_SetConfig+0x92>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a15      	ldr	r2, [pc, #84]	@ (800a0f0 <TIM_OC3_SetConfig+0xe4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d113      	bne.n	800a0c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	621a      	str	r2, [r3, #32]
}
 800a0e0:	bf00      	nop
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40010400 	.word	0x40010400

0800a0f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69db      	ldr	r3, [r3, #28]
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a13e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	031b      	lsls	r3, r3, #12
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a12      	ldr	r2, [pc, #72]	@ (800a198 <TIM_OC4_SetConfig+0xa4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC4_SetConfig+0x68>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a11      	ldr	r2, [pc, #68]	@ (800a19c <TIM_OC4_SetConfig+0xa8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d109      	bne.n	800a170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	019b      	lsls	r3, r3, #6
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	621a      	str	r2, [r3, #32]
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400

0800a1a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f023 0201 	bic.w	r2, r3, #1
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f023 030a 	bic.w	r3, r3, #10
 800a1dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	621a      	str	r2, [r3, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b087      	sub	sp, #28
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f023 0210 	bic.w	r2, r3, #16
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	031b      	lsls	r3, r3, #12
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	4313      	orrs	r3, r2
 800a232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a23a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f043 0307 	orr.w	r3, r3, #7
 800a280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	609a      	str	r2, [r3, #8]
}
 800a288:	bf00      	nop
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	609a      	str	r2, [r3, #8]
}
 800a2c8:	bf00      	nop
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e05a      	b.n	800a3a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a21      	ldr	r2, [pc, #132]	@ (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d022      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a338:	d01d      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d018      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d013      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1a      	ldr	r2, [pc, #104]	@ (800a3bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00e      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a18      	ldr	r2, [pc, #96]	@ (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d009      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a17      	ldr	r2, [pc, #92]	@ (800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d004      	beq.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a15      	ldr	r2, [pc, #84]	@ (800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d10c      	bne.n	800a390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a37c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	4313      	orrs	r3, r2
 800a386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40000400 	.word	0x40000400
 800a3b8:	40000800 	.word	0x40000800
 800a3bc:	40000c00 	.word	0x40000c00
 800a3c0:	40010400 	.word	0x40010400
 800a3c4:	40014000 	.word	0x40014000
 800a3c8:	40001800 	.word	0x40001800

0800a3cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e03d      	b.n	800a464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	4313      	orrs	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4313      	orrs	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e042      	b.n	800a508 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fc f874 	bl	8006584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2224      	movs	r2, #36	@ 0x24
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 ffc7 	bl	800b448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	695a      	ldr	r2, [r3, #20]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	@ 0x28
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d175      	bne.n	800a61c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_UART_Transmit+0x2c>
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e06e      	b.n	800a61e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2221      	movs	r2, #33	@ 0x21
 800a54a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a54e:	f7fc fb83 	bl	8006c58 <HAL_GetTick>
 800a552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	88fa      	ldrh	r2, [r7, #6]
 800a55e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a568:	d108      	bne.n	800a57c <HAL_UART_Transmit+0x6c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	e003      	b.n	800a584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a584:	e02e      	b.n	800a5e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	2180      	movs	r1, #128	@ 0x80
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fc97 	bl	800aec4 <UART_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e03a      	b.n	800a61e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	e007      	b.n	800a5d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1cb      	bne.n	800a586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2140      	movs	r1, #64	@ 0x40
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fc63 	bl	800aec4 <UART_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e006      	b.n	800a61e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	e000      	b.n	800a61e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a61c:	2302      	movs	r3, #2
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	4613      	mov	r3, r2
 800a632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d112      	bne.n	800a666 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_UART_Receive_DMA+0x26>
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e00b      	b.n	800a668 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a656:	88fb      	ldrh	r3, [r7, #6]
 800a658:	461a      	mov	r2, r3
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fc8b 	bl	800af78 <UART_Start_Receive_DMA>
 800a662:	4603      	mov	r3, r0
 800a664:	e000      	b.n	800a668 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a666:	2302      	movs	r3, #2
  }
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08c      	sub	sp, #48	@ 0x30
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b20      	cmp	r3, #32
 800a688:	d146      	bne.n	800a718 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e03f      	b.n	800a71a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2201      	movs	r2, #1
 800a69e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a6a6:	88fb      	ldrh	r3, [r7, #6]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 fc63 	bl	800af78 <UART_Start_Receive_DMA>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d125      	bne.n	800a70c <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	330c      	adds	r3, #12
 800a6dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	e853 3f00 	ldrex	r3, [r3]
 800a6e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f043 0310 	orr.w	r3, r3, #16
 800a6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	330c      	adds	r3, #12
 800a6f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fa:	6a39      	ldr	r1, [r7, #32]
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	61fb      	str	r3, [r7, #28]
   return(result);
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e5      	bne.n	800a6d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800a70a:	e002      	b.n	800a712 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800a712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a716:	e000      	b.n	800a71a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3730      	adds	r7, #48	@ 0x30
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b0ba      	sub	sp, #232	@ 0xe8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a750:	2300      	movs	r3, #0
 800a752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10f      	bne.n	800a78a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <HAL_UART_IRQHandler+0x66>
 800a776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a77a:	f003 0320 	and.w	r3, r3, #32
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fda2 	bl	800b2cc <UART_Receive_IT>
      return;
 800a788:	e273      	b.n	800ac72 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a78a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80de 	beq.w	800a950 <HAL_UART_IRQHandler+0x22c>
 800a794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80d1 	beq.w	800a950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00b      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xae>
 800a7ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00b      	beq.n	800a7f6 <HAL_UART_IRQHandler+0xd2>
 800a7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ee:	f043 0202 	orr.w	r2, r3, #2
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <HAL_UART_IRQHandler+0xf6>
 800a802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a812:	f043 0204 	orr.w	r2, r3, #4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d011      	beq.n	800a84a <HAL_UART_IRQHandler+0x126>
 800a826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a82a:	f003 0320 	and.w	r3, r3, #32
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d105      	bne.n	800a83e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d005      	beq.n	800a84a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a842:	f043 0208 	orr.w	r2, r3, #8
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 820a 	beq.w	800ac68 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <HAL_UART_IRQHandler+0x14e>
 800a860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fd2d 	bl	800b2cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a87c:	2b40      	cmp	r3, #64	@ 0x40
 800a87e:	bf0c      	ite	eq
 800a880:	2301      	moveq	r3, #1
 800a882:	2300      	movne	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a88e:	f003 0308 	and.w	r3, r3, #8
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <HAL_UART_IRQHandler+0x17a>
 800a896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d04f      	beq.n	800a93e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fc38 	bl	800b114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ae:	2b40      	cmp	r3, #64	@ 0x40
 800a8b0:	d141      	bne.n	800a936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3314      	adds	r3, #20
 800a8b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a8c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3314      	adds	r3, #20
 800a8da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a8de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a8e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a8ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a8f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1d9      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d013      	beq.n	800a92e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a90a:	4a8a      	ldr	r2, [pc, #552]	@ (800ab34 <HAL_UART_IRQHandler+0x410>)
 800a90c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd fa9a 	bl	8007e4c <HAL_DMA_Abort_IT>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d016      	beq.n	800a94c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a928:	4610      	mov	r0, r2
 800a92a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a92c:	e00e      	b.n	800a94c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f9c0 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a934:	e00a      	b.n	800a94c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f9bc 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93c:	e006      	b.n	800a94c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f9b8 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a94a:	e18d      	b.n	800ac68 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94c:	bf00      	nop
    return;
 800a94e:	e18b      	b.n	800ac68 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a954:	2b01      	cmp	r3, #1
 800a956:	f040 8167 	bne.w	800ac28 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a95e:	f003 0310 	and.w	r3, r3, #16
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 8160 	beq.w	800ac28 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 8159 	beq.w	800ac28 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60bb      	str	r3, [r7, #8]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a996:	2b40      	cmp	r3, #64	@ 0x40
 800a998:	f040 80ce 	bne.w	800ab38 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80a9 	beq.w	800ab04 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	f080 80a2 	bcs.w	800ab04 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9d2:	f000 8088 	beq.w	800aae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	330c      	adds	r3, #12
 800a9dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a9ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aa02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1d9      	bne.n	800a9d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3314      	adds	r3, #20
 800aa28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3314      	adds	r3, #20
 800aa42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e1      	bne.n	800aa22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3314      	adds	r3, #20
 800aa64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3314      	adds	r3, #20
 800aa7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e3      	bne.n	800aa5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aab6:	f023 0310 	bic.w	r3, r3, #16
 800aaba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	330c      	adds	r3, #12
 800aac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aac8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aaca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e3      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd f943 	bl	8007d6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7f8 ff93 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab02:	e0b3      	b.n	800ac6c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	f040 80ad 	bne.w	800ac6c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab1c:	f040 80a6 	bne.w	800ac6c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7f8 ff7b 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
      return;
 800ab32:	e09b      	b.n	800ac6c <HAL_UART_IRQHandler+0x548>
 800ab34:	0800b1db 	.word	0x0800b1db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 808e 	beq.w	800ac70 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800ab54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8089 	beq.w	800ac70 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	330c      	adds	r3, #12
 800ab64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	330c      	adds	r3, #12
 800ab7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ab82:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e3      	bne.n	800ab5e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	623b      	str	r3, [r7, #32]
   return(result);
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3314      	adds	r3, #20
 800abb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abba:	633a      	str	r2, [r7, #48]	@ 0x30
 800abbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e3      	bne.n	800ab96 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	330c      	adds	r3, #12
 800abe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	60fb      	str	r3, [r7, #12]
   return(result);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0310 	bic.w	r3, r3, #16
 800abf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	330c      	adds	r3, #12
 800abfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ac00:	61fa      	str	r2, [r7, #28]
 800ac02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	69fa      	ldr	r2, [r7, #28]
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e3      	bne.n	800abdc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7f8 ff01 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac26:	e023      	b.n	800ac70 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d009      	beq.n	800ac48 <HAL_UART_IRQHandler+0x524>
 800ac34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fadb 	bl	800b1fc <UART_Transmit_IT>
    return;
 800ac46:	e014      	b.n	800ac72 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00e      	beq.n	800ac72 <HAL_UART_IRQHandler+0x54e>
 800ac54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fb1b 	bl	800b29c <UART_EndTransmit_IT>
    return;
 800ac66:	e004      	b.n	800ac72 <HAL_UART_IRQHandler+0x54e>
    return;
 800ac68:	bf00      	nop
 800ac6a:	e002      	b.n	800ac72 <HAL_UART_IRQHandler+0x54e>
      return;
 800ac6c:	bf00      	nop
 800ac6e:	e000      	b.n	800ac72 <HAL_UART_IRQHandler+0x54e>
      return;
 800ac70:	bf00      	nop
  }
}
 800ac72:	37e8      	adds	r7, #232	@ 0xe8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b09c      	sub	sp, #112	@ 0x70
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d172      	bne.n	800adca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ace4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ace6:	2200      	movs	r2, #0
 800ace8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	330c      	adds	r3, #12
 800acf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	330c      	adds	r3, #12
 800ad08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ad0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e5      	bne.n	800acea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3314      	adds	r3, #20
 800ad24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3314      	adds	r3, #20
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	623b      	str	r3, [r7, #32]
   return(result);
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad68:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad72:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d119      	bne.n	800adca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	330c      	adds	r3, #12
 800ad9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f023 0310 	bic.w	r3, r3, #16
 800adac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800adae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800adb6:	61fa      	str	r2, [r7, #28]
 800adb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	69b9      	ldr	r1, [r7, #24]
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	617b      	str	r3, [r7, #20]
   return(result);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e5      	bne.n	800ad96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adcc:	2200      	movs	r2, #0
 800adce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800add8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800addc:	4619      	mov	r1, r3
 800adde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ade0:	f7f8 fe22 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ade4:	e002      	b.n	800adec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ade6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ade8:	f7ff ff50 	bl	800ac8c <HAL_UART_RxCpltCallback>
}
 800adec:	bf00      	nop
 800adee:	3770      	adds	r7, #112	@ 0x70
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d108      	bne.n	800ae22 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae14:	085b      	lsrs	r3, r3, #1
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4619      	mov	r1, r3
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7f8 fe04 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae20:	e002      	b.n	800ae28 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7ff ff3c 	bl	800aca0 <HAL_UART_RxHalfCpltCallback>
}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4c:	2b80      	cmp	r3, #128	@ 0x80
 800ae4e:	bf0c      	ite	eq
 800ae50:	2301      	moveq	r3, #1
 800ae52:	2300      	movne	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b21      	cmp	r3, #33	@ 0x21
 800ae62:	d108      	bne.n	800ae76 <UART_DMAError+0x46>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ae70:	68b8      	ldr	r0, [r7, #8]
 800ae72:	f000 f927 	bl	800b0c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b40      	cmp	r3, #64	@ 0x40
 800ae82:	bf0c      	ite	eq
 800ae84:	2301      	moveq	r3, #1
 800ae86:	2300      	movne	r3, #0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b22      	cmp	r3, #34	@ 0x22
 800ae96:	d108      	bne.n	800aeaa <UART_DMAError+0x7a>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d005      	beq.n	800aeaa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2200      	movs	r2, #0
 800aea2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800aea4:	68b8      	ldr	r0, [r7, #8]
 800aea6:	f000 f935 	bl	800b114 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeae:	f043 0210 	orr.w	r2, r3, #16
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aeb6:	68b8      	ldr	r0, [r7, #8]
 800aeb8:	f7ff fefc 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aebc:	bf00      	nop
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed4:	e03b      	b.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aedc:	d037      	beq.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aede:	f7fb febb 	bl	8006c58 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	6a3a      	ldr	r2, [r7, #32]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d302      	bcc.n	800aef4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e03a      	b.n	800af6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f003 0304 	and.w	r3, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	d023      	beq.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b80      	cmp	r3, #128	@ 0x80
 800af0a:	d020      	beq.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b40      	cmp	r3, #64	@ 0x40
 800af10:	d01d      	beq.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0308 	and.w	r3, r3, #8
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d116      	bne.n	800af4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800af20:	2300      	movs	r3, #0
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f8ec 	bl	800b114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2208      	movs	r2, #8
 800af40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e00f      	b.n	800af6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	4013      	ands	r3, r2
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	bf0c      	ite	eq
 800af5e:	2301      	moveq	r3, #1
 800af60:	2300      	movne	r3, #0
 800af62:	b2db      	uxtb	r3, r3
 800af64:	461a      	mov	r2, r3
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d0b4      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b098      	sub	sp, #96	@ 0x60
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	4613      	mov	r3, r2
 800af84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	88fa      	ldrh	r2, [r7, #6]
 800af90:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2222      	movs	r2, #34	@ 0x22
 800af9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa4:	4a44      	ldr	r2, [pc, #272]	@ (800b0b8 <UART_Start_Receive_DMA+0x140>)
 800afa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afac:	4a43      	ldr	r2, [pc, #268]	@ (800b0bc <UART_Start_Receive_DMA+0x144>)
 800afae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb4:	4a42      	ldr	r2, [pc, #264]	@ (800b0c0 <UART_Start_Receive_DMA+0x148>)
 800afb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afbc:	2200      	movs	r2, #0
 800afbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3304      	adds	r3, #4
 800afd0:	4619      	mov	r1, r3
 800afd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	f7fc fe70 	bl	8007cbc <HAL_DMA_Start_IT>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2210      	movs	r2, #16
 800afe6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e05d      	b.n	800b0b0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aff4:	2300      	movs	r3, #0
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	613b      	str	r3, [r7, #16]
 800b008:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d019      	beq.n	800b046 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	330c      	adds	r3, #12
 800b018:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	330c      	adds	r3, #12
 800b030:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b032:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b034:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e5      	bne.n	800b012 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3314      	adds	r3, #20
 800b04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3314      	adds	r3, #20
 800b064:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b066:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b06c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3314      	adds	r3, #20
 800b080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	617b      	str	r3, [r7, #20]
   return(result);
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b090:	653b      	str	r3, [r7, #80]	@ 0x50
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3314      	adds	r3, #20
 800b098:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b09a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b09c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6a39      	ldr	r1, [r7, #32]
 800b0a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e5      	bne.n	800b07a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3760      	adds	r7, #96	@ 0x60
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	0800acc9 	.word	0x0800acc9
 800b0bc:	0800adf5 	.word	0x0800adf5
 800b0c0:	0800ae31 	.word	0x0800ae31

0800b0c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b089      	sub	sp, #36	@ 0x24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	e853 3f00 	ldrex	r3, [r3]
 800b0da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	61ba      	str	r2, [r7, #24]
 800b0ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6979      	ldr	r1, [r7, #20]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e5      	bne.n	800b0cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b108:	bf00      	nop
 800b10a:	3724      	adds	r7, #36	@ 0x24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b114:	b480      	push	{r7}
 800b116:	b095      	sub	sp, #84	@ 0x54
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	330c      	adds	r3, #12
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b13c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e5      	bne.n	800b11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3314      	adds	r3, #20
 800b156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3314      	adds	r3, #20
 800b16e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e5      	bne.n	800b150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d119      	bne.n	800b1c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	330c      	adds	r3, #12
 800b192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f023 0310 	bic.w	r3, r3, #16
 800b1a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	330c      	adds	r3, #12
 800b1aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1ac:	61ba      	str	r2, [r7, #24]
 800b1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e5      	bne.n	800b18c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b1ce:	bf00      	nop
 800b1d0:	3754      	adds	r7, #84	@ 0x54
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fd60 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b21      	cmp	r3, #33	@ 0x21
 800b20e:	d13e      	bne.n	800b28e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b218:	d114      	bne.n	800b244 <UART_Transmit_IT+0x48>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d110      	bne.n	800b244 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	461a      	mov	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b236:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a1b      	ldr	r3, [r3, #32]
 800b23c:	1c9a      	adds	r2, r3, #2
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	621a      	str	r2, [r3, #32]
 800b242:	e008      	b.n	800b256 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	1c59      	adds	r1, r3, #1
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	6211      	str	r1, [r2, #32]
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29b      	uxth	r3, r3
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	4619      	mov	r1, r3
 800b264:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10f      	bne.n	800b28a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b278:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68da      	ldr	r2, [r3, #12]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b288:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	e000      	b.n	800b290 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b28e:	2302      	movs	r3, #2
  }
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fcdb 	bl	800ac78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08c      	sub	sp, #48	@ 0x30
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b22      	cmp	r3, #34	@ 0x22
 800b2e6:	f040 80aa 	bne.w	800b43e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2f2:	d115      	bne.n	800b320 <UART_Receive_IT+0x54>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d111      	bne.n	800b320 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b300:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30e:	b29a      	uxth	r2, r3
 800b310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b312:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b318:	1c9a      	adds	r2, r3, #2
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b31e:	e024      	b.n	800b36a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b32e:	d007      	beq.n	800b340 <UART_Receive_IT+0x74>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10a      	bne.n	800b34e <UART_Receive_IT+0x82>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	b2da      	uxtb	r2, r3
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	e008      	b.n	800b360 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29b      	uxth	r3, r3
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	4619      	mov	r1, r3
 800b378:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d15d      	bne.n	800b43a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68da      	ldr	r2, [r3, #12]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f022 0220 	bic.w	r2, r2, #32
 800b38c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b39c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	695a      	ldr	r2, [r3, #20]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0201 	bic.w	r2, r2, #1
 800b3ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d135      	bne.n	800b430 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	330c      	adds	r3, #12
 800b3d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f023 0310 	bic.w	r3, r3, #16
 800b3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	330c      	adds	r3, #12
 800b3e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ea:	623a      	str	r2, [r7, #32]
 800b3ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	69f9      	ldr	r1, [r7, #28]
 800b3f0:	6a3a      	ldr	r2, [r7, #32]
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e5      	bne.n	800b3ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b10      	cmp	r3, #16
 800b40a:	d10a      	bne.n	800b422 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7f8 fafd 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
 800b42e:	e002      	b.n	800b436 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fc2b 	bl	800ac8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	e002      	b.n	800b440 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	e000      	b.n	800b440 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b43e:	2302      	movs	r3, #2
  }
}
 800b440:	4618      	mov	r0, r3
 800b442:	3730      	adds	r7, #48	@ 0x30
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b44c:	b0c0      	sub	sp, #256	@ 0x100
 800b44e:	af00      	add	r7, sp, #0
 800b450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b464:	68d9      	ldr	r1, [r3, #12]
 800b466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	ea40 0301 	orr.w	r3, r0, r1
 800b470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b476:	689a      	ldr	r2, [r3, #8]
 800b478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	431a      	orrs	r2, r3
 800b480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	431a      	orrs	r2, r3
 800b488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	4313      	orrs	r3, r2
 800b490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b4a0:	f021 010c 	bic.w	r1, r1, #12
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4ae:	430b      	orrs	r3, r1
 800b4b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4c2:	6999      	ldr	r1, [r3, #24]
 800b4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	ea40 0301 	orr.w	r3, r0, r1
 800b4ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	4b8f      	ldr	r3, [pc, #572]	@ (800b714 <UART_SetConfig+0x2cc>)
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d005      	beq.n	800b4e8 <UART_SetConfig+0xa0>
 800b4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b8d      	ldr	r3, [pc, #564]	@ (800b718 <UART_SetConfig+0x2d0>)
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d104      	bne.n	800b4f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4e8:	f7fd fe9e 	bl	8009228 <HAL_RCC_GetPCLK2Freq>
 800b4ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b4f0:	e003      	b.n	800b4fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4f2:	f7fd fe85 	bl	8009200 <HAL_RCC_GetPCLK1Freq>
 800b4f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b504:	f040 810c 	bne.w	800b720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b51a:	4622      	mov	r2, r4
 800b51c:	462b      	mov	r3, r5
 800b51e:	1891      	adds	r1, r2, r2
 800b520:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b522:	415b      	adcs	r3, r3
 800b524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b52a:	4621      	mov	r1, r4
 800b52c:	eb12 0801 	adds.w	r8, r2, r1
 800b530:	4629      	mov	r1, r5
 800b532:	eb43 0901 	adc.w	r9, r3, r1
 800b536:	f04f 0200 	mov.w	r2, #0
 800b53a:	f04f 0300 	mov.w	r3, #0
 800b53e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b54a:	4690      	mov	r8, r2
 800b54c:	4699      	mov	r9, r3
 800b54e:	4623      	mov	r3, r4
 800b550:	eb18 0303 	adds.w	r3, r8, r3
 800b554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b558:	462b      	mov	r3, r5
 800b55a:	eb49 0303 	adc.w	r3, r9, r3
 800b55e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b56e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b576:	460b      	mov	r3, r1
 800b578:	18db      	adds	r3, r3, r3
 800b57a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b57c:	4613      	mov	r3, r2
 800b57e:	eb42 0303 	adc.w	r3, r2, r3
 800b582:	657b      	str	r3, [r7, #84]	@ 0x54
 800b584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b58c:	f7f5 fb5c 	bl	8000c48 <__aeabi_uldivmod>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4b61      	ldr	r3, [pc, #388]	@ (800b71c <UART_SetConfig+0x2d4>)
 800b596:	fba3 2302 	umull	r2, r3, r3, r2
 800b59a:	095b      	lsrs	r3, r3, #5
 800b59c:	011c      	lsls	r4, r3, #4
 800b59e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b5ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	1891      	adds	r1, r2, r2
 800b5b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b5b8:	415b      	adcs	r3, r3
 800b5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b5c0:	4641      	mov	r1, r8
 800b5c2:	eb12 0a01 	adds.w	sl, r2, r1
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	eb43 0b01 	adc.w	fp, r3, r1
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	f04f 0300 	mov.w	r3, #0
 800b5d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b5dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5e0:	4692      	mov	sl, r2
 800b5e2:	469b      	mov	fp, r3
 800b5e4:	4643      	mov	r3, r8
 800b5e6:	eb1a 0303 	adds.w	r3, sl, r3
 800b5ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b5ee:	464b      	mov	r3, r9
 800b5f0:	eb4b 0303 	adc.w	r3, fp, r3
 800b5f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b60c:	460b      	mov	r3, r1
 800b60e:	18db      	adds	r3, r3, r3
 800b610:	643b      	str	r3, [r7, #64]	@ 0x40
 800b612:	4613      	mov	r3, r2
 800b614:	eb42 0303 	adc.w	r3, r2, r3
 800b618:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b61e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b622:	f7f5 fb11 	bl	8000c48 <__aeabi_uldivmod>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4611      	mov	r1, r2
 800b62c:	4b3b      	ldr	r3, [pc, #236]	@ (800b71c <UART_SetConfig+0x2d4>)
 800b62e:	fba3 2301 	umull	r2, r3, r3, r1
 800b632:	095b      	lsrs	r3, r3, #5
 800b634:	2264      	movs	r2, #100	@ 0x64
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	1acb      	subs	r3, r1, r3
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b642:	4b36      	ldr	r3, [pc, #216]	@ (800b71c <UART_SetConfig+0x2d4>)
 800b644:	fba3 2302 	umull	r2, r3, r3, r2
 800b648:	095b      	lsrs	r3, r3, #5
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b650:	441c      	add	r4, r3
 800b652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b656:	2200      	movs	r2, #0
 800b658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b65c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b664:	4642      	mov	r2, r8
 800b666:	464b      	mov	r3, r9
 800b668:	1891      	adds	r1, r2, r2
 800b66a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b66c:	415b      	adcs	r3, r3
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b674:	4641      	mov	r1, r8
 800b676:	1851      	adds	r1, r2, r1
 800b678:	6339      	str	r1, [r7, #48]	@ 0x30
 800b67a:	4649      	mov	r1, r9
 800b67c:	414b      	adcs	r3, r1
 800b67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b680:	f04f 0200 	mov.w	r2, #0
 800b684:	f04f 0300 	mov.w	r3, #0
 800b688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b68c:	4659      	mov	r1, fp
 800b68e:	00cb      	lsls	r3, r1, #3
 800b690:	4651      	mov	r1, sl
 800b692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b696:	4651      	mov	r1, sl
 800b698:	00ca      	lsls	r2, r1, #3
 800b69a:	4610      	mov	r0, r2
 800b69c:	4619      	mov	r1, r3
 800b69e:	4603      	mov	r3, r0
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	189b      	adds	r3, r3, r2
 800b6a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	eb42 0303 	adc.w	r3, r2, r3
 800b6b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b6c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b6c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	18db      	adds	r3, r3, r3
 800b6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	eb42 0303 	adc.w	r3, r2, r3
 800b6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b6da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b6de:	f7f5 fab3 	bl	8000c48 <__aeabi_uldivmod>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b71c <UART_SetConfig+0x2d4>)
 800b6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ec:	095b      	lsrs	r3, r3, #5
 800b6ee:	2164      	movs	r1, #100	@ 0x64
 800b6f0:	fb01 f303 	mul.w	r3, r1, r3
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	3332      	adds	r3, #50	@ 0x32
 800b6fa:	4a08      	ldr	r2, [pc, #32]	@ (800b71c <UART_SetConfig+0x2d4>)
 800b6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b700:	095b      	lsrs	r3, r3, #5
 800b702:	f003 0207 	and.w	r2, r3, #7
 800b706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4422      	add	r2, r4
 800b70e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b710:	e106      	b.n	800b920 <UART_SetConfig+0x4d8>
 800b712:	bf00      	nop
 800b714:	40011000 	.word	0x40011000
 800b718:	40011400 	.word	0x40011400
 800b71c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b724:	2200      	movs	r2, #0
 800b726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b72a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b72e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b732:	4642      	mov	r2, r8
 800b734:	464b      	mov	r3, r9
 800b736:	1891      	adds	r1, r2, r2
 800b738:	6239      	str	r1, [r7, #32]
 800b73a:	415b      	adcs	r3, r3
 800b73c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b742:	4641      	mov	r1, r8
 800b744:	1854      	adds	r4, r2, r1
 800b746:	4649      	mov	r1, r9
 800b748:	eb43 0501 	adc.w	r5, r3, r1
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	f04f 0300 	mov.w	r3, #0
 800b754:	00eb      	lsls	r3, r5, #3
 800b756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b75a:	00e2      	lsls	r2, r4, #3
 800b75c:	4614      	mov	r4, r2
 800b75e:	461d      	mov	r5, r3
 800b760:	4643      	mov	r3, r8
 800b762:	18e3      	adds	r3, r4, r3
 800b764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b768:	464b      	mov	r3, r9
 800b76a:	eb45 0303 	adc.w	r3, r5, r3
 800b76e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b77e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b782:	f04f 0200 	mov.w	r2, #0
 800b786:	f04f 0300 	mov.w	r3, #0
 800b78a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b78e:	4629      	mov	r1, r5
 800b790:	008b      	lsls	r3, r1, #2
 800b792:	4621      	mov	r1, r4
 800b794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b798:	4621      	mov	r1, r4
 800b79a:	008a      	lsls	r2, r1, #2
 800b79c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b7a0:	f7f5 fa52 	bl	8000c48 <__aeabi_uldivmod>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4b60      	ldr	r3, [pc, #384]	@ (800b92c <UART_SetConfig+0x4e4>)
 800b7aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ae:	095b      	lsrs	r3, r3, #5
 800b7b0:	011c      	lsls	r4, r3, #4
 800b7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b7c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	1891      	adds	r1, r2, r2
 800b7ca:	61b9      	str	r1, [r7, #24]
 800b7cc:	415b      	adcs	r3, r3
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7d4:	4641      	mov	r1, r8
 800b7d6:	1851      	adds	r1, r2, r1
 800b7d8:	6139      	str	r1, [r7, #16]
 800b7da:	4649      	mov	r1, r9
 800b7dc:	414b      	adcs	r3, r1
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	00cb      	lsls	r3, r1, #3
 800b7f0:	4651      	mov	r1, sl
 800b7f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7f6:	4651      	mov	r1, sl
 800b7f8:	00ca      	lsls	r2, r1, #3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	4642      	mov	r2, r8
 800b802:	189b      	adds	r3, r3, r2
 800b804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b808:	464b      	mov	r3, r9
 800b80a:	460a      	mov	r2, r1
 800b80c:	eb42 0303 	adc.w	r3, r2, r3
 800b810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b81e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	f04f 0300 	mov.w	r3, #0
 800b828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b82c:	4649      	mov	r1, r9
 800b82e:	008b      	lsls	r3, r1, #2
 800b830:	4641      	mov	r1, r8
 800b832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b836:	4641      	mov	r1, r8
 800b838:	008a      	lsls	r2, r1, #2
 800b83a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b83e:	f7f5 fa03 	bl	8000c48 <__aeabi_uldivmod>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4611      	mov	r1, r2
 800b848:	4b38      	ldr	r3, [pc, #224]	@ (800b92c <UART_SetConfig+0x4e4>)
 800b84a:	fba3 2301 	umull	r2, r3, r3, r1
 800b84e:	095b      	lsrs	r3, r3, #5
 800b850:	2264      	movs	r2, #100	@ 0x64
 800b852:	fb02 f303 	mul.w	r3, r2, r3
 800b856:	1acb      	subs	r3, r1, r3
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	3332      	adds	r3, #50	@ 0x32
 800b85c:	4a33      	ldr	r2, [pc, #204]	@ (800b92c <UART_SetConfig+0x4e4>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b868:	441c      	add	r4, r3
 800b86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b86e:	2200      	movs	r2, #0
 800b870:	673b      	str	r3, [r7, #112]	@ 0x70
 800b872:	677a      	str	r2, [r7, #116]	@ 0x74
 800b874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b878:	4642      	mov	r2, r8
 800b87a:	464b      	mov	r3, r9
 800b87c:	1891      	adds	r1, r2, r2
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	415b      	adcs	r3, r3
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b888:	4641      	mov	r1, r8
 800b88a:	1851      	adds	r1, r2, r1
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	4649      	mov	r1, r9
 800b890:	414b      	adcs	r3, r1
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	f04f 0300 	mov.w	r3, #0
 800b89c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	00cb      	lsls	r3, r1, #3
 800b8a4:	4651      	mov	r1, sl
 800b8a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8aa:	4651      	mov	r1, sl
 800b8ac:	00ca      	lsls	r2, r1, #3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	189b      	adds	r3, r3, r2
 800b8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	460a      	mov	r2, r1
 800b8be:	eb42 0303 	adc.w	r3, r2, r3
 800b8c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	f04f 0300 	mov.w	r3, #0
 800b8d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b8dc:	4649      	mov	r1, r9
 800b8de:	008b      	lsls	r3, r1, #2
 800b8e0:	4641      	mov	r1, r8
 800b8e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8e6:	4641      	mov	r1, r8
 800b8e8:	008a      	lsls	r2, r1, #2
 800b8ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b8ee:	f7f5 f9ab 	bl	8000c48 <__aeabi_uldivmod>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b92c <UART_SetConfig+0x4e4>)
 800b8f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b8fc:	095b      	lsrs	r3, r3, #5
 800b8fe:	2164      	movs	r1, #100	@ 0x64
 800b900:	fb01 f303 	mul.w	r3, r1, r3
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	3332      	adds	r3, #50	@ 0x32
 800b90a:	4a08      	ldr	r2, [pc, #32]	@ (800b92c <UART_SetConfig+0x4e4>)
 800b90c:	fba2 2303 	umull	r2, r3, r2, r3
 800b910:	095b      	lsrs	r3, r3, #5
 800b912:	f003 020f 	and.w	r2, r3, #15
 800b916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4422      	add	r2, r4
 800b91e:	609a      	str	r2, [r3, #8]
}
 800b920:	bf00      	nop
 800b922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b926:	46bd      	mov	sp, r7
 800b928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b92c:	51eb851f 	.word	0x51eb851f

0800b930 <__NVIC_SetPriority>:
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	4603      	mov	r3, r0
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b93c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b940:	2b00      	cmp	r3, #0
 800b942:	db0a      	blt.n	800b95a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	b2da      	uxtb	r2, r3
 800b948:	490c      	ldr	r1, [pc, #48]	@ (800b97c <__NVIC_SetPriority+0x4c>)
 800b94a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b94e:	0112      	lsls	r2, r2, #4
 800b950:	b2d2      	uxtb	r2, r2
 800b952:	440b      	add	r3, r1
 800b954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b958:	e00a      	b.n	800b970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	4908      	ldr	r1, [pc, #32]	@ (800b980 <__NVIC_SetPriority+0x50>)
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	3b04      	subs	r3, #4
 800b968:	0112      	lsls	r2, r2, #4
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	440b      	add	r3, r1
 800b96e:	761a      	strb	r2, [r3, #24]
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	e000e100 	.word	0xe000e100
 800b980:	e000ed00 	.word	0xe000ed00

0800b984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b988:	2100      	movs	r1, #0
 800b98a:	f06f 0004 	mvn.w	r0, #4
 800b98e:	f7ff ffcf 	bl	800b930 <__NVIC_SetPriority>
#endif
}
 800b992:	bf00      	nop
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b99e:	f3ef 8305 	mrs	r3, IPSR
 800b9a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b9a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9aa:	f06f 0305 	mvn.w	r3, #5
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	e00c      	b.n	800b9cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9dc <osKernelInitialize+0x44>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d105      	bne.n	800b9c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9ba:	4b08      	ldr	r3, [pc, #32]	@ (800b9dc <osKernelInitialize+0x44>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	607b      	str	r3, [r7, #4]
 800b9c4:	e002      	b.n	800b9cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9cc:	687b      	ldr	r3, [r7, #4]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20001000 	.word	0x20001000

0800b9e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e6:	f3ef 8305 	mrs	r3, IPSR
 800b9ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b9ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9f2:	f06f 0305 	mvn.w	r3, #5
 800b9f6:	607b      	str	r3, [r7, #4]
 800b9f8:	e010      	b.n	800ba1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ba28 <osKernelStart+0x48>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d109      	bne.n	800ba16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba02:	f7ff ffbf 	bl	800b984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba06:	4b08      	ldr	r3, [pc, #32]	@ (800ba28 <osKernelStart+0x48>)
 800ba08:	2202      	movs	r2, #2
 800ba0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba0c:	f001 f892 	bl	800cb34 <vTaskStartScheduler>
      stat = osOK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	607b      	str	r3, [r7, #4]
 800ba14:	e002      	b.n	800ba1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba1c:	687b      	ldr	r3, [r7, #4]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20001000 	.word	0x20001000

0800ba2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08e      	sub	sp, #56	@ 0x38
 800ba30:	af04      	add	r7, sp, #16
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba3c:	f3ef 8305 	mrs	r3, IPSR
 800ba40:	617b      	str	r3, [r7, #20]
  return(result);
 800ba42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d17e      	bne.n	800bb46 <osThreadNew+0x11a>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d07b      	beq.n	800bb46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba4e:	2380      	movs	r3, #128	@ 0x80
 800ba50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba52:	2318      	movs	r3, #24
 800ba54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d045      	beq.n	800baf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <osThreadNew+0x48>
        name = attr->name;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <osThreadNew+0x6e>
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	2b38      	cmp	r3, #56	@ 0x38
 800ba8c:	d805      	bhi.n	800ba9a <osThreadNew+0x6e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <osThreadNew+0x72>
        return (NULL);
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e054      	b.n	800bb48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	089b      	lsrs	r3, r3, #2
 800baac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <osThreadNew+0xa8>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	2ba7      	cmp	r3, #167	@ 0xa7
 800babc:	d90a      	bls.n	800bad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d006      	beq.n	800bad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <osThreadNew+0xa8>
        mem = 1;
 800bace:	2301      	movs	r3, #1
 800bad0:	61bb      	str	r3, [r7, #24]
 800bad2:	e010      	b.n	800baf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10c      	bne.n	800baf6 <osThreadNew+0xca>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <osThreadNew+0xca>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d104      	bne.n	800baf6 <osThreadNew+0xca>
          mem = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	61bb      	str	r3, [r7, #24]
 800baf0:	e001      	b.n	800baf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d110      	bne.n	800bb1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb04:	9202      	str	r2, [sp, #8]
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	6a3a      	ldr	r2, [r7, #32]
 800bb10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 fe1a 	bl	800c74c <xTaskCreateStatic>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	e013      	b.n	800bb46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d110      	bne.n	800bb46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	f107 0310 	add.w	r3, r7, #16
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f000 fe68 	bl	800c80c <xTaskCreate>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d001      	beq.n	800bb46 <osThreadNew+0x11a>
            hTask = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb46:	693b      	ldr	r3, [r7, #16]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3728      	adds	r7, #40	@ 0x28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb58:	f3ef 8305 	mrs	r3, IPSR
 800bb5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <osDelay+0x1c>
    stat = osErrorISR;
 800bb64:	f06f 0305 	mvn.w	r3, #5
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	e007      	b.n	800bb7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 ffa6 	bl	800cac8 <vTaskDelay>
    }
  }

  return (stat);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4a07      	ldr	r2, [pc, #28]	@ (800bbb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4a06      	ldr	r2, [pc, #24]	@ (800bbb8 <vApplicationGetIdleTaskMemory+0x30>)
 800bb9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2280      	movs	r2, #128	@ 0x80
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20001004 	.word	0x20001004
 800bbb8:	200010ac 	.word	0x200010ac

0800bbbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4a07      	ldr	r2, [pc, #28]	@ (800bbe8 <vApplicationGetTimerTaskMemory+0x2c>)
 800bbcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	4a06      	ldr	r2, [pc, #24]	@ (800bbec <vApplicationGetTimerTaskMemory+0x30>)
 800bbd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbda:	601a      	str	r2, [r3, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	200012ac 	.word	0x200012ac
 800bbec:	20001354 	.word	0x20001354

0800bbf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f103 0208 	add.w	r2, r3, #8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f103 0208 	add.w	r2, r3, #8
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f103 0208 	add.w	r2, r3, #8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc3e:	bf00      	nop
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b085      	sub	sp, #20
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]
}
 800bc86:	bf00      	nop
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bca8:	d103      	bne.n	800bcb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e00c      	b.n	800bccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e002      	b.n	800bcc0 <vListInsert+0x2e>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d2f6      	bcs.n	800bcba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6892      	ldr	r2, [r2, #8]
 800bd1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6852      	ldr	r2, [r2, #4]
 800bd24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d103      	bne.n	800bd38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	1e5a      	subs	r2, r3, #1
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd7e:	bf00      	nop
 800bd80:	bf00      	nop
 800bd82:	e7fd      	b.n	800bd80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd84:	f002 fa80 	bl	800e288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd90:	68f9      	ldr	r1, [r7, #12]
 800bd92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd94:	fb01 f303 	mul.w	r3, r1, r3
 800bd98:	441a      	add	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdba:	fb01 f303 	mul.w	r3, r1, r3
 800bdbe:	441a      	add	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	22ff      	movs	r2, #255	@ 0xff
 800bdc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	22ff      	movs	r2, #255	@ 0xff
 800bdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01a      	beq.n	800be18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3310      	adds	r3, #16
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 fa3c 	bl	800d264 <xTaskRemoveFromEventList>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d012      	beq.n	800be18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800be28 <xQueueGenericReset+0xd0>)
 800bdf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	e009      	b.n	800be18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	3310      	adds	r3, #16
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fef1 	bl	800bbf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3324      	adds	r3, #36	@ 0x24
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff feec 	bl	800bbf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be18:	f002 fa68 	bl	800e2ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be1c:	2301      	movs	r3, #1
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	@ 0x38
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10b      	bne.n	800be58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be52:	bf00      	nop
 800be54:	bf00      	nop
 800be56:	e7fd      	b.n	800be54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	e7fd      	b.n	800be72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <xQueueGenericCreateStatic+0x56>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <xQueueGenericCreateStatic+0x5a>
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <xQueueGenericCreateStatic+0x5c>
 800be86:	2300      	movs	r3, #0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10b      	bne.n	800bea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	623b      	str	r3, [r7, #32]
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	e7fd      	b.n	800bea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <xQueueGenericCreateStatic+0x84>
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <xQueueGenericCreateStatic+0x88>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e000      	b.n	800beb6 <xQueueGenericCreateStatic+0x8a>
 800beb4:	2300      	movs	r3, #0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	61fb      	str	r3, [r7, #28]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bed2:	2350      	movs	r3, #80	@ 0x50
 800bed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b50      	cmp	r3, #80	@ 0x50
 800beda:	d00b      	beq.n	800bef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	61bb      	str	r3, [r7, #24]
}
 800beee:	bf00      	nop
 800bef0:	bf00      	nop
 800bef2:	e7fd      	b.n	800bef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800befa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00d      	beq.n	800bf1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4613      	mov	r3, r2
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f805 	bl	800bf26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3730      	adds	r7, #48	@ 0x30
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
 800bf32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	e002      	b.n	800bf48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf54:	2101      	movs	r1, #1
 800bf56:	69b8      	ldr	r0, [r7, #24]
 800bf58:	f7ff fefe 	bl	800bd58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	78fa      	ldrb	r2, [r7, #3]
 800bf60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08e      	sub	sp, #56	@ 0x38
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10b      	bne.n	800bfa0 <xQueueGenericSend+0x34>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	e7fd      	b.n	800bf9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d103      	bne.n	800bfae <xQueueGenericSend+0x42>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <xQueueGenericSend+0x46>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e000      	b.n	800bfb4 <xQueueGenericSend+0x48>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10b      	bne.n	800bfd0 <xQueueGenericSend+0x64>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	e7fd      	b.n	800bfcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d103      	bne.n	800bfde <xQueueGenericSend+0x72>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <xQueueGenericSend+0x76>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <xQueueGenericSend+0x78>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10b      	bne.n	800c000 <xQueueGenericSend+0x94>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	623b      	str	r3, [r7, #32]
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c000:	f001 faf6 	bl	800d5f0 <xTaskGetSchedulerState>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <xQueueGenericSend+0xa4>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <xQueueGenericSend+0xa8>
 800c010:	2301      	movs	r3, #1
 800c012:	e000      	b.n	800c016 <xQueueGenericSend+0xaa>
 800c014:	2300      	movs	r3, #0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10b      	bne.n	800c032 <xQueueGenericSend+0xc6>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	61fb      	str	r3, [r7, #28]
}
 800c02c:	bf00      	nop
 800c02e:	bf00      	nop
 800c030:	e7fd      	b.n	800c02e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c032:	f002 f929 	bl	800e288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c03e:	429a      	cmp	r2, r3
 800c040:	d302      	bcc.n	800c048 <xQueueGenericSend+0xdc>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d129      	bne.n	800c09c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c04e:	f000 fa0f 	bl	800c470 <prvCopyDataToQueue>
 800c052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d010      	beq.n	800c07e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05e:	3324      	adds	r3, #36	@ 0x24
 800c060:	4618      	mov	r0, r3
 800c062:	f001 f8ff 	bl	800d264 <xTaskRemoveFromEventList>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d013      	beq.n	800c094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c06c:	4b3f      	ldr	r3, [pc, #252]	@ (800c16c <xQueueGenericSend+0x200>)
 800c06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	e00a      	b.n	800c094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d007      	beq.n	800c094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c084:	4b39      	ldr	r3, [pc, #228]	@ (800c16c <xQueueGenericSend+0x200>)
 800c086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c094:	f002 f92a 	bl	800e2ec <vPortExitCritical>
				return pdPASS;
 800c098:	2301      	movs	r3, #1
 800c09a:	e063      	b.n	800c164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d103      	bne.n	800c0aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0a2:	f002 f923 	bl	800e2ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e05c      	b.n	800c164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0b0:	f107 0314 	add.w	r3, r7, #20
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 f939 	bl	800d32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0be:	f002 f915 	bl	800e2ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0c2:	f000 fda7 	bl	800cc14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0c6:	f002 f8df 	bl	800e288 <vPortEnterCritical>
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0d0:	b25b      	sxtb	r3, r3
 800c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0d6:	d103      	bne.n	800c0e0 <xQueueGenericSend+0x174>
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0e6:	b25b      	sxtb	r3, r3
 800c0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0ec:	d103      	bne.n	800c0f6 <xQueueGenericSend+0x18a>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0f6:	f002 f8f9 	bl	800e2ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0fa:	1d3a      	adds	r2, r7, #4
 800c0fc:	f107 0314 	add.w	r3, r7, #20
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f001 f928 	bl	800d358 <xTaskCheckForTimeOut>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d124      	bne.n	800c158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c10e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c110:	f000 faa6 	bl	800c660 <prvIsQueueFull>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d018      	beq.n	800c14c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	3310      	adds	r3, #16
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	4611      	mov	r1, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f001 f84c 	bl	800d1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c12a:	f000 fa31 	bl	800c590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c12e:	f000 fd7f 	bl	800cc30 <xTaskResumeAll>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	f47f af7c 	bne.w	800c032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c13a:	4b0c      	ldr	r3, [pc, #48]	@ (800c16c <xQueueGenericSend+0x200>)
 800c13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	e772      	b.n	800c032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c14e:	f000 fa1f 	bl	800c590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c152:	f000 fd6d 	bl	800cc30 <xTaskResumeAll>
 800c156:	e76c      	b.n	800c032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c15a:	f000 fa19 	bl	800c590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c15e:	f000 fd67 	bl	800cc30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c164:	4618      	mov	r0, r3
 800c166:	3738      	adds	r7, #56	@ 0x38
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	e000ed04 	.word	0xe000ed04

0800c170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b090      	sub	sp, #64	@ 0x40
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10b      	bne.n	800c1a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c19a:	bf00      	nop
 800c19c:	bf00      	nop
 800c19e:	e7fd      	b.n	800c19c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d103      	bne.n	800c1ae <xQueueGenericSendFromISR+0x3e>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <xQueueGenericSendFromISR+0x42>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <xQueueGenericSendFromISR+0x44>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10b      	bne.n	800c1d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1ca:	bf00      	nop
 800c1cc:	bf00      	nop
 800c1ce:	e7fd      	b.n	800c1cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d103      	bne.n	800c1de <xQueueGenericSendFromISR+0x6e>
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d101      	bne.n	800c1e2 <xQueueGenericSendFromISR+0x72>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <xQueueGenericSendFromISR+0x74>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10b      	bne.n	800c200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	623b      	str	r3, [r7, #32]
}
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	e7fd      	b.n	800c1fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c200:	f002 f922 	bl	800e448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c204:	f3ef 8211 	mrs	r2, BASEPRI
 800c208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	61fa      	str	r2, [r7, #28]
 800c21a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c21c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c21e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c228:	429a      	cmp	r2, r3
 800c22a:	d302      	bcc.n	800c232 <xQueueGenericSendFromISR+0xc2>
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d12f      	bne.n	800c292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c248:	f000 f912 	bl	800c470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c24c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c254:	d112      	bne.n	800c27c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d016      	beq.n	800c28c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	3324      	adds	r3, #36	@ 0x24
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fffe 	bl	800d264 <xTaskRemoveFromEventList>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00e      	beq.n	800c28c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	e007      	b.n	800c28c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c27c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c280:	3301      	adds	r3, #1
 800c282:	b2db      	uxtb	r3, r3
 800c284:	b25a      	sxtb	r2, r3
 800c286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c28c:	2301      	movs	r3, #1
 800c28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c290:	e001      	b.n	800c296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c292:	2300      	movs	r3, #0
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3740      	adds	r7, #64	@ 0x40
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b08c      	sub	sp, #48	@ 0x30
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10b      	bne.n	800c2de <xQueueReceive+0x32>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	623b      	str	r3, [r7, #32]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d103      	bne.n	800c2ec <xQueueReceive+0x40>
 800c2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <xQueueReceive+0x44>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <xQueueReceive+0x46>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10b      	bne.n	800c30e <xQueueReceive+0x62>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	61fb      	str	r3, [r7, #28]
}
 800c308:	bf00      	nop
 800c30a:	bf00      	nop
 800c30c:	e7fd      	b.n	800c30a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c30e:	f001 f96f 	bl	800d5f0 <xTaskGetSchedulerState>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <xQueueReceive+0x72>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <xQueueReceive+0x76>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <xQueueReceive+0x78>
 800c322:	2300      	movs	r3, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10b      	bne.n	800c340 <xQueueReceive+0x94>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	61bb      	str	r3, [r7, #24]
}
 800c33a:	bf00      	nop
 800c33c:	bf00      	nop
 800c33e:	e7fd      	b.n	800c33c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c340:	f001 ffa2 	bl	800e288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01f      	beq.n	800c390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c354:	f000 f8f6 	bl	800c544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	1e5a      	subs	r2, r3, #1
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00f      	beq.n	800c388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36a:	3310      	adds	r3, #16
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 ff79 	bl	800d264 <xTaskRemoveFromEventList>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d007      	beq.n	800c388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c378:	4b3c      	ldr	r3, [pc, #240]	@ (800c46c <xQueueReceive+0x1c0>)
 800c37a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c37e:	601a      	str	r2, [r3, #0]
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c388:	f001 ffb0 	bl	800e2ec <vPortExitCritical>
				return pdPASS;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e069      	b.n	800c464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d103      	bne.n	800c39e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c396:	f001 ffa9 	bl	800e2ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e062      	b.n	800c464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3a4:	f107 0310 	add.w	r3, r7, #16
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 ffbf 	bl	800d32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3b2:	f001 ff9b 	bl	800e2ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3b6:	f000 fc2d 	bl	800cc14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ba:	f001 ff65 	bl	800e288 <vPortEnterCritical>
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ca:	d103      	bne.n	800c3d4 <xQueueReceive+0x128>
 800c3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3da:	b25b      	sxtb	r3, r3
 800c3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3e0:	d103      	bne.n	800c3ea <xQueueReceive+0x13e>
 800c3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3ea:	f001 ff7f 	bl	800e2ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3ee:	1d3a      	adds	r2, r7, #4
 800c3f0:	f107 0310 	add.w	r3, r7, #16
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 ffae 	bl	800d358 <xTaskCheckForTimeOut>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d123      	bne.n	800c44a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c404:	f000 f916 	bl	800c634 <prvIsQueueEmpty>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d017      	beq.n	800c43e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	3324      	adds	r3, #36	@ 0x24
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fed2 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c41e:	f000 f8b7 	bl	800c590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c422:	f000 fc05 	bl	800cc30 <xTaskResumeAll>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d189      	bne.n	800c340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c42c:	4b0f      	ldr	r3, [pc, #60]	@ (800c46c <xQueueReceive+0x1c0>)
 800c42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	e780      	b.n	800c340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c440:	f000 f8a6 	bl	800c590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c444:	f000 fbf4 	bl	800cc30 <xTaskResumeAll>
 800c448:	e77a      	b.n	800c340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44c:	f000 f8a0 	bl	800c590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c450:	f000 fbee 	bl	800cc30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c456:	f000 f8ed 	bl	800c634 <prvIsQueueEmpty>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f43f af6f 	beq.w	800c340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c464:	4618      	mov	r0, r3
 800c466:	3730      	adds	r7, #48	@ 0x30
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	e000ed04 	.word	0xe000ed04

0800c470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10d      	bne.n	800c4aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d14d      	bne.n	800c532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 f8c6 	bl	800d62c <xTaskPriorityDisinherit>
 800c4a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	609a      	str	r2, [r3, #8]
 800c4a8:	e043      	b.n	800c532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d119      	bne.n	800c4e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6858      	ldr	r0, [r3, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	f002 ffc4 	bl	800f448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c8:	441a      	add	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d32b      	bcc.n	800c532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	605a      	str	r2, [r3, #4]
 800c4e2:	e026      	b.n	800c532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	68d8      	ldr	r0, [r3, #12]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	f002 ffaa 	bl	800f448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4fc:	425b      	negs	r3, r3
 800c4fe:	441a      	add	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d207      	bcs.n	800c520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c518:	425b      	negs	r3, r3
 800c51a:	441a      	add	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d105      	bne.n	800c532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	3b01      	subs	r3, #1
 800c530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d018      	beq.n	800c588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c55e:	441a      	add	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68da      	ldr	r2, [r3, #12]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d303      	bcc.n	800c578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68d9      	ldr	r1, [r3, #12]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c580:	461a      	mov	r2, r3
 800c582:	6838      	ldr	r0, [r7, #0]
 800c584:	f002 ff60 	bl	800f448 <memcpy>
	}
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c598:	f001 fe76 	bl	800e288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5a4:	e011      	b.n	800c5ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d012      	beq.n	800c5d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3324      	adds	r3, #36	@ 0x24
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 fe56 	bl	800d264 <xTaskRemoveFromEventList>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5be:	f000 ff2f 	bl	800d420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	dce9      	bgt.n	800c5a6 <prvUnlockQueue+0x16>
 800c5d2:	e000      	b.n	800c5d6 <prvUnlockQueue+0x46>
					break;
 800c5d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	22ff      	movs	r2, #255	@ 0xff
 800c5da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c5de:	f001 fe85 	bl	800e2ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5e2:	f001 fe51 	bl	800e288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5ee:	e011      	b.n	800c614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d012      	beq.n	800c61e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3310      	adds	r3, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 fe31 	bl	800d264 <xTaskRemoveFromEventList>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c608:	f000 ff0a 	bl	800d420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c60c:	7bbb      	ldrb	r3, [r7, #14]
 800c60e:	3b01      	subs	r3, #1
 800c610:	b2db      	uxtb	r3, r3
 800c612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dce9      	bgt.n	800c5f0 <prvUnlockQueue+0x60>
 800c61c:	e000      	b.n	800c620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c61e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	22ff      	movs	r2, #255	@ 0xff
 800c624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c628:	f001 fe60 	bl	800e2ec <vPortExitCritical>
}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c63c:	f001 fe24 	bl	800e288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c648:	2301      	movs	r3, #1
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e001      	b.n	800c652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c652:	f001 fe4b 	bl	800e2ec <vPortExitCritical>

	return xReturn;
 800c656:	68fb      	ldr	r3, [r7, #12]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c668:	f001 fe0e 	bl	800e288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	429a      	cmp	r2, r3
 800c676:	d102      	bne.n	800c67e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	e001      	b.n	800c682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c682:	f001 fe33 	bl	800e2ec <vPortExitCritical>

	return xReturn;
 800c686:	68fb      	ldr	r3, [r7, #12]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c69a:	2300      	movs	r3, #0
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	e014      	b.n	800c6ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c6a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c6e0 <vQueueAddToRegistry+0x50>)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10b      	bne.n	800c6c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c6ac:	490c      	ldr	r1, [pc, #48]	@ (800c6e0 <vQueueAddToRegistry+0x50>)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c6b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c6e0 <vQueueAddToRegistry+0x50>)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	4413      	add	r3, r2
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c6c2:	e006      	b.n	800c6d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	60fb      	str	r3, [r7, #12]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b07      	cmp	r3, #7
 800c6ce:	d9e7      	bls.n	800c6a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	20001754 	.word	0x20001754

0800c6e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6f4:	f001 fdc8 	bl	800e288 <vPortEnterCritical>
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6fe:	b25b      	sxtb	r3, r3
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c704:	d103      	bne.n	800c70e <vQueueWaitForMessageRestricted+0x2a>
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c714:	b25b      	sxtb	r3, r3
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c71a:	d103      	bne.n	800c724 <vQueueWaitForMessageRestricted+0x40>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c724:	f001 fde2 	bl	800e2ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d106      	bne.n	800c73e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	3324      	adds	r3, #36	@ 0x24
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fd67 	bl	800d20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c73e:	6978      	ldr	r0, [r7, #20]
 800c740:	f7ff ff26 	bl	800c590 <prvUnlockQueue>
	}
 800c744:	bf00      	nop
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08e      	sub	sp, #56	@ 0x38
 800c750:	af04      	add	r7, sp, #16
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10b      	bne.n	800c778 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	623b      	str	r3, [r7, #32]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d10b      	bne.n	800c796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	61fb      	str	r3, [r7, #28]
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	e7fd      	b.n	800c792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c796:	23a8      	movs	r3, #168	@ 0xa8
 800c798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	2ba8      	cmp	r3, #168	@ 0xa8
 800c79e:	d00b      	beq.n	800c7b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	61bb      	str	r3, [r7, #24]
}
 800c7b2:	bf00      	nop
 800c7b4:	bf00      	nop
 800c7b6:	e7fd      	b.n	800c7b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d01e      	beq.n	800c7fe <xTaskCreateStatic+0xb2>
 800c7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d01b      	beq.n	800c7fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7d8:	2300      	movs	r3, #0
 800c7da:	9303      	str	r3, [sp, #12]
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	9302      	str	r3, [sp, #8]
 800c7e0:	f107 0314 	add.w	r3, r7, #20
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f851 	bl	800c898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7f8:	f000 f8f6 	bl	800c9e8 <prvAddNewTaskToReadyList>
 800c7fc:	e001      	b.n	800c802 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c802:	697b      	ldr	r3, [r7, #20]
	}
 800c804:	4618      	mov	r0, r3
 800c806:	3728      	adds	r7, #40	@ 0x28
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08c      	sub	sp, #48	@ 0x30
 800c810:	af04      	add	r7, sp, #16
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	603b      	str	r3, [r7, #0]
 800c818:	4613      	mov	r3, r2
 800c81a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c81c:	88fb      	ldrh	r3, [r7, #6]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4618      	mov	r0, r3
 800c822:	f001 fe53 	bl	800e4cc <pvPortMalloc>
 800c826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00e      	beq.n	800c84c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c82e:	20a8      	movs	r0, #168	@ 0xa8
 800c830:	f001 fe4c 	bl	800e4cc <pvPortMalloc>
 800c834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	631a      	str	r2, [r3, #48]	@ 0x30
 800c842:	e005      	b.n	800c850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c844:	6978      	ldr	r0, [r7, #20]
 800c846:	f001 ff0f 	bl	800e668 <vPortFree>
 800c84a:	e001      	b.n	800c850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d017      	beq.n	800c886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c85e:	88fa      	ldrh	r2, [r7, #6]
 800c860:	2300      	movs	r3, #0
 800c862:	9303      	str	r3, [sp, #12]
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	9302      	str	r3, [sp, #8]
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 f80f 	bl	800c898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c87a:	69f8      	ldr	r0, [r7, #28]
 800c87c:	f000 f8b4 	bl	800c9e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c880:	2301      	movs	r3, #1
 800c882:	61bb      	str	r3, [r7, #24]
 800c884:	e002      	b.n	800c88c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c88a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c88c:	69bb      	ldr	r3, [r7, #24]
	}
 800c88e:	4618      	mov	r0, r3
 800c890:	3720      	adds	r7, #32
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
 800c8a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	21a5      	movs	r1, #165	@ 0xa5
 800c8b2:	f002 fd31 	bl	800f318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	617b      	str	r3, [r7, #20]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d01f      	beq.n	800c938 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	61fb      	str	r3, [r7, #28]
 800c8fc:	e012      	b.n	800c924 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	4413      	add	r3, r2
 800c904:	7819      	ldrb	r1, [r3, #0]
 800c906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	3334      	adds	r3, #52	@ 0x34
 800c90e:	460a      	mov	r2, r1
 800c910:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	4413      	add	r3, r2
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d006      	beq.n	800c92c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	3301      	adds	r3, #1
 800c922:	61fb      	str	r3, [r7, #28]
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2b0f      	cmp	r3, #15
 800c928:	d9e9      	bls.n	800c8fe <prvInitialiseNewTask+0x66>
 800c92a:	e000      	b.n	800c92e <prvInitialiseNewTask+0x96>
			{
				break;
 800c92c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c936:	e003      	b.n	800c940 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c942:	2b37      	cmp	r3, #55	@ 0x37
 800c944:	d901      	bls.n	800c94a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c946:	2337      	movs	r3, #55	@ 0x37
 800c948:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c94e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c954:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	2200      	movs	r2, #0
 800c95a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95e:	3304      	adds	r3, #4
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff f965 	bl	800bc30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c968:	3318      	adds	r3, #24
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff f960 	bl	800bc30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c974:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c978:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c984:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c988:	2200      	movs	r2, #0
 800c98a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c990:	2200      	movs	r2, #0
 800c992:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c998:	3354      	adds	r3, #84	@ 0x54
 800c99a:	224c      	movs	r2, #76	@ 0x4c
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f002 fcba 	bl	800f318 <memset>
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a6:	4a0d      	ldr	r2, [pc, #52]	@ (800c9dc <prvInitialiseNewTask+0x144>)
 800c9a8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c9e0 <prvInitialiseNewTask+0x148>)
 800c9ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c9e4 <prvInitialiseNewTask+0x14c>)
 800c9b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	68f9      	ldr	r1, [r7, #12]
 800c9ba:	69b8      	ldr	r0, [r7, #24]
 800c9bc:	f001 fb36 	bl	800e02c <pxPortInitialiseStack>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d2:	bf00      	nop
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200059e8 	.word	0x200059e8
 800c9e0:	20005a50 	.word	0x20005a50
 800c9e4:	20005ab8 	.word	0x20005ab8

0800c9e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9f0:	f001 fc4a 	bl	800e288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9f4:	4b2d      	ldr	r3, [pc, #180]	@ (800caac <prvAddNewTaskToReadyList+0xc4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	4a2c      	ldr	r2, [pc, #176]	@ (800caac <prvAddNewTaskToReadyList+0xc4>)
 800c9fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9fe:	4b2c      	ldr	r3, [pc, #176]	@ (800cab0 <prvAddNewTaskToReadyList+0xc8>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca06:	4a2a      	ldr	r2, [pc, #168]	@ (800cab0 <prvAddNewTaskToReadyList+0xc8>)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca0c:	4b27      	ldr	r3, [pc, #156]	@ (800caac <prvAddNewTaskToReadyList+0xc4>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d110      	bne.n	800ca36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca14:	f000 fd28 	bl	800d468 <prvInitialiseTaskLists>
 800ca18:	e00d      	b.n	800ca36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca1a:	4b26      	ldr	r3, [pc, #152]	@ (800cab4 <prvAddNewTaskToReadyList+0xcc>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d109      	bne.n	800ca36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca22:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <prvAddNewTaskToReadyList+0xc8>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d802      	bhi.n	800ca36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca30:	4a1f      	ldr	r2, [pc, #124]	@ (800cab0 <prvAddNewTaskToReadyList+0xc8>)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca36:	4b20      	ldr	r3, [pc, #128]	@ (800cab8 <prvAddNewTaskToReadyList+0xd0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	4a1e      	ldr	r2, [pc, #120]	@ (800cab8 <prvAddNewTaskToReadyList+0xd0>)
 800ca3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca40:	4b1d      	ldr	r3, [pc, #116]	@ (800cab8 <prvAddNewTaskToReadyList+0xd0>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca4c:	4b1b      	ldr	r3, [pc, #108]	@ (800cabc <prvAddNewTaskToReadyList+0xd4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d903      	bls.n	800ca5c <prvAddNewTaskToReadyList+0x74>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca58:	4a18      	ldr	r2, [pc, #96]	@ (800cabc <prvAddNewTaskToReadyList+0xd4>)
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca60:	4613      	mov	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4a15      	ldr	r2, [pc, #84]	@ (800cac0 <prvAddNewTaskToReadyList+0xd8>)
 800ca6a:	441a      	add	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3304      	adds	r3, #4
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f7ff f8e9 	bl	800bc4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca78:	f001 fc38 	bl	800e2ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <prvAddNewTaskToReadyList+0xcc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00e      	beq.n	800caa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca84:	4b0a      	ldr	r3, [pc, #40]	@ (800cab0 <prvAddNewTaskToReadyList+0xc8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d207      	bcs.n	800caa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca92:	4b0c      	ldr	r3, [pc, #48]	@ (800cac4 <prvAddNewTaskToReadyList+0xdc>)
 800ca94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001c68 	.word	0x20001c68
 800cab0:	20001794 	.word	0x20001794
 800cab4:	20001c74 	.word	0x20001c74
 800cab8:	20001c84 	.word	0x20001c84
 800cabc:	20001c70 	.word	0x20001c70
 800cac0:	20001798 	.word	0x20001798
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d018      	beq.n	800cb0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cada:	4b14      	ldr	r3, [pc, #80]	@ (800cb2c <vTaskDelay+0x64>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <vTaskDelay+0x32>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cafa:	f000 f88b 	bl	800cc14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cafe:	2100      	movs	r1, #0
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fee5 	bl	800d8d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb06:	f000 f893 	bl	800cc30 <xTaskResumeAll>
 800cb0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d107      	bne.n	800cb22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb12:	4b07      	ldr	r3, [pc, #28]	@ (800cb30 <vTaskDelay+0x68>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb22:	bf00      	nop
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20001c90 	.word	0x20001c90
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08a      	sub	sp, #40	@ 0x28
 800cb38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb42:	463a      	mov	r2, r7
 800cb44:	1d39      	adds	r1, r7, #4
 800cb46:	f107 0308 	add.w	r3, r7, #8
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff f81c 	bl	800bb88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	9202      	str	r2, [sp, #8]
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	460a      	mov	r2, r1
 800cb62:	4924      	ldr	r1, [pc, #144]	@ (800cbf4 <vTaskStartScheduler+0xc0>)
 800cb64:	4824      	ldr	r0, [pc, #144]	@ (800cbf8 <vTaskStartScheduler+0xc4>)
 800cb66:	f7ff fdf1 	bl	800c74c <xTaskCreateStatic>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4a23      	ldr	r2, [pc, #140]	@ (800cbfc <vTaskStartScheduler+0xc8>)
 800cb6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb70:	4b22      	ldr	r3, [pc, #136]	@ (800cbfc <vTaskStartScheduler+0xc8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	e001      	b.n	800cb82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d102      	bne.n	800cb8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb88:	f000 fef6 	bl	800d978 <xTimerCreateTimerTask>
 800cb8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d11b      	bne.n	800cbcc <vTaskStartScheduler+0x98>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	613b      	str	r3, [r7, #16]
}
 800cba6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cba8:	4b15      	ldr	r3, [pc, #84]	@ (800cc00 <vTaskStartScheduler+0xcc>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3354      	adds	r3, #84	@ 0x54
 800cbae:	4a15      	ldr	r2, [pc, #84]	@ (800cc04 <vTaskStartScheduler+0xd0>)
 800cbb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbb2:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <vTaskStartScheduler+0xd4>)
 800cbb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbba:	4b14      	ldr	r3, [pc, #80]	@ (800cc0c <vTaskStartScheduler+0xd8>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbc0:	4b13      	ldr	r3, [pc, #76]	@ (800cc10 <vTaskStartScheduler+0xdc>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbc6:	f001 fabb 	bl	800e140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbca:	e00f      	b.n	800cbec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbd2:	d10b      	bne.n	800cbec <vTaskStartScheduler+0xb8>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	60fb      	str	r3, [r7, #12]
}
 800cbe6:	bf00      	nop
 800cbe8:	bf00      	nop
 800cbea:	e7fd      	b.n	800cbe8 <vTaskStartScheduler+0xb4>
}
 800cbec:	bf00      	nop
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	08012330 	.word	0x08012330
 800cbf8:	0800d439 	.word	0x0800d439
 800cbfc:	20001c8c 	.word	0x20001c8c
 800cc00:	20001794 	.word	0x20001794
 800cc04:	20000078 	.word	0x20000078
 800cc08:	20001c88 	.word	0x20001c88
 800cc0c:	20001c74 	.word	0x20001c74
 800cc10:	20001c6c 	.word	0x20001c6c

0800cc14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc18:	4b04      	ldr	r3, [pc, #16]	@ (800cc2c <vTaskSuspendAll+0x18>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	4a03      	ldr	r2, [pc, #12]	@ (800cc2c <vTaskSuspendAll+0x18>)
 800cc20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc22:	bf00      	nop
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20001c90 	.word	0x20001c90

0800cc30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc3e:	4b42      	ldr	r3, [pc, #264]	@ (800cd48 <xTaskResumeAll+0x118>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10b      	bne.n	800cc5e <xTaskResumeAll+0x2e>
	__asm volatile
 800cc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	603b      	str	r3, [r7, #0]
}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	e7fd      	b.n	800cc5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc5e:	f001 fb13 	bl	800e288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc62:	4b39      	ldr	r3, [pc, #228]	@ (800cd48 <xTaskResumeAll+0x118>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	4a37      	ldr	r2, [pc, #220]	@ (800cd48 <xTaskResumeAll+0x118>)
 800cc6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc6c:	4b36      	ldr	r3, [pc, #216]	@ (800cd48 <xTaskResumeAll+0x118>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d162      	bne.n	800cd3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc74:	4b35      	ldr	r3, [pc, #212]	@ (800cd4c <xTaskResumeAll+0x11c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d05e      	beq.n	800cd3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc7c:	e02f      	b.n	800ccde <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc7e:	4b34      	ldr	r3, [pc, #208]	@ (800cd50 <xTaskResumeAll+0x120>)
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3318      	adds	r3, #24
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff f83a 	bl	800bd04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	3304      	adds	r3, #4
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff f835 	bl	800bd04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc9e:	4b2d      	ldr	r3, [pc, #180]	@ (800cd54 <xTaskResumeAll+0x124>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d903      	bls.n	800ccae <xTaskResumeAll+0x7e>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccaa:	4a2a      	ldr	r2, [pc, #168]	@ (800cd54 <xTaskResumeAll+0x124>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4a27      	ldr	r2, [pc, #156]	@ (800cd58 <xTaskResumeAll+0x128>)
 800ccbc:	441a      	add	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7fe ffc0 	bl	800bc4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccce:	4b23      	ldr	r3, [pc, #140]	@ (800cd5c <xTaskResumeAll+0x12c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d302      	bcc.n	800ccde <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ccd8:	4b21      	ldr	r3, [pc, #132]	@ (800cd60 <xTaskResumeAll+0x130>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccde:	4b1c      	ldr	r3, [pc, #112]	@ (800cd50 <xTaskResumeAll+0x120>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1cb      	bne.n	800cc7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccec:	f000 fc60 	bl	800d5b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccf0:	4b1c      	ldr	r3, [pc, #112]	@ (800cd64 <xTaskResumeAll+0x134>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d010      	beq.n	800cd1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccfc:	f000 f940 	bl	800cf80 <xTaskIncrementTick>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cd06:	4b16      	ldr	r3, [pc, #88]	@ (800cd60 <xTaskResumeAll+0x130>)
 800cd08:	2201      	movs	r2, #1
 800cd0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1f1      	bne.n	800ccfc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cd18:	4b12      	ldr	r3, [pc, #72]	@ (800cd64 <xTaskResumeAll+0x134>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd1e:	4b10      	ldr	r3, [pc, #64]	@ (800cd60 <xTaskResumeAll+0x130>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d009      	beq.n	800cd3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd26:	2301      	movs	r3, #1
 800cd28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd2a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd68 <xTaskResumeAll+0x138>)
 800cd2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd3a:	f001 fad7 	bl	800e2ec <vPortExitCritical>

	return xAlreadyYielded;
 800cd3e:	68bb      	ldr	r3, [r7, #8]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20001c90 	.word	0x20001c90
 800cd4c:	20001c68 	.word	0x20001c68
 800cd50:	20001c28 	.word	0x20001c28
 800cd54:	20001c70 	.word	0x20001c70
 800cd58:	20001798 	.word	0x20001798
 800cd5c:	20001794 	.word	0x20001794
 800cd60:	20001c7c 	.word	0x20001c7c
 800cd64:	20001c78 	.word	0x20001c78
 800cd68:	e000ed04 	.word	0xe000ed04

0800cd6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd72:	4b05      	ldr	r3, [pc, #20]	@ (800cd88 <xTaskGetTickCount+0x1c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd78:	687b      	ldr	r3, [r7, #4]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	370c      	adds	r7, #12
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	20001c6c 	.word	0x20001c6c

0800cd8c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d102      	bne.n	800cda0 <pcTaskGetName+0x14>
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	@ (800cdd4 <pcTaskGetName+0x48>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	e000      	b.n	800cda2 <pcTaskGetName+0x16>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10b      	bne.n	800cdc2 <pcTaskGetName+0x36>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	60bb      	str	r3, [r7, #8]
}
 800cdbc:	bf00      	nop
 800cdbe:	bf00      	nop
 800cdc0:	e7fd      	b.n	800cdbe <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3334      	adds	r3, #52	@ 0x34
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20001794 	.word	0x20001794

0800cdd8 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800cdd8:	b480      	push	{r7}
 800cdda:	b08b      	sub	sp, #44	@ 0x2c
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d05b      	beq.n	800cea6 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	605a      	str	r2, [r3, #4]
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	3308      	adds	r3, #8
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d104      	bne.n	800ce12 <prvSearchForNameWithinSingleList+0x3a>
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	613b      	str	r3, [r7, #16]
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	605a      	str	r2, [r3, #4]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	3308      	adds	r3, #8
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d104      	bne.n	800ce3e <prvSearchForNameWithinSingleList+0x66>
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	605a      	str	r2, [r3, #4]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	623b      	str	r3, [r7, #32]
 800ce4e:	e01c      	b.n	800ce8a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	4413      	add	r3, r2
 800ce56:	3334      	adds	r3, #52	@ 0x34
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	4413      	add	r3, r2
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	7afa      	ldrb	r2, [r7, #11]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d002      	beq.n	800ce70 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	61fb      	str	r3, [r7, #28]
 800ce6e:	e006      	b.n	800ce7e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d103      	bne.n	800ce7e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	3301      	adds	r3, #1
 800ce88:	623b      	str	r3, [r7, #32]
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	2b0f      	cmp	r3, #15
 800ce8e:	d9df      	bls.n	800ce50 <prvSearchForNameWithinSingleList+0x78>
 800ce90:	e000      	b.n	800ce94 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800ce92:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d1bb      	bne.n	800ce1a <prvSearchForNameWithinSingleList+0x42>
 800cea2:	e000      	b.n	800cea6 <prvSearchForNameWithinSingleList+0xce>
					break;
 800cea4:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800cea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	372c      	adds	r7, #44	@ 0x2c
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800cebc:	2338      	movs	r3, #56	@ 0x38
 800cebe:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7f3 f9d5 	bl	8000270 <strlen>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b0f      	cmp	r3, #15
 800ceca:	d90b      	bls.n	800cee4 <xTaskGetHandle+0x30>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	60fb      	str	r3, [r7, #12]
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	e7fd      	b.n	800cee0 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800cee4:	f7ff fe96 	bl	800cc14 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4a1c      	ldr	r2, [pc, #112]	@ (800cf6c <xTaskGetHandle+0xb8>)
 800cefa:	4413      	add	r3, r2
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff ff6a 	bl	800cdd8 <prvSearchForNameWithinSingleList>
 800cf04:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d103      	bne.n	800cf14 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1ea      	bne.n	800cee8 <xTaskGetHandle+0x34>
 800cf12:	e000      	b.n	800cf16 <xTaskGetHandle+0x62>
					break;
 800cf14:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d106      	bne.n	800cf2a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800cf1c:	4b14      	ldr	r3, [pc, #80]	@ (800cf70 <xTaskGetHandle+0xbc>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff ff58 	bl	800cdd8 <prvSearchForNameWithinSingleList>
 800cf28:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800cf30:	4b10      	ldr	r3, [pc, #64]	@ (800cf74 <xTaskGetHandle+0xc0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff ff4e 	bl	800cdd8 <prvSearchForNameWithinSingleList>
 800cf3c:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	480c      	ldr	r0, [pc, #48]	@ (800cf78 <xTaskGetHandle+0xc4>)
 800cf48:	f7ff ff46 	bl	800cdd8 <prvSearchForNameWithinSingleList>
 800cf4c:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	4809      	ldr	r0, [pc, #36]	@ (800cf7c <xTaskGetHandle+0xc8>)
 800cf58:	f7ff ff3e 	bl	800cdd8 <prvSearchForNameWithinSingleList>
 800cf5c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800cf5e:	f7ff fe67 	bl	800cc30 <xTaskResumeAll>

		return pxTCB;
 800cf62:	693b      	ldr	r3, [r7, #16]
	}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20001798 	.word	0x20001798
 800cf70:	20001c20 	.word	0x20001c20
 800cf74:	20001c24 	.word	0x20001c24
 800cf78:	20001c54 	.word	0x20001c54
 800cf7c:	20001c3c 	.word	0x20001c3c

0800cf80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf8a:	4b4f      	ldr	r3, [pc, #316]	@ (800d0c8 <xTaskIncrementTick+0x148>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f040 8090 	bne.w	800d0b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf94:	4b4d      	ldr	r3, [pc, #308]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf9c:	4a4b      	ldr	r2, [pc, #300]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d121      	bne.n	800cfec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa8:	4b49      	ldr	r3, [pc, #292]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <xTaskIncrementTick+0x4a>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xTaskIncrementTick+0x46>
 800cfca:	4b41      	ldr	r3, [pc, #260]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	4b40      	ldr	r3, [pc, #256]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	4a3c      	ldr	r2, [pc, #240]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	f000 fae2 	bl	800d5b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfec:	4b3b      	ldr	r3, [pc, #236]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d349      	bcc.n	800d08a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff6:	4b36      	ldr	r3, [pc, #216]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d104      	bne.n	800d00a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d000:	4b36      	ldr	r3, [pc, #216]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d006:	601a      	str	r2, [r3, #0]
					break;
 800d008:	e03f      	b.n	800d08a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00a:	4b31      	ldr	r3, [pc, #196]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d203      	bcs.n	800d02a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d022:	4a2e      	ldr	r2, [pc, #184]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d028:	e02f      	b.n	800d08a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fe68 	bl	800bd04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fe5f 	bl	800bd04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04a:	4b25      	ldr	r3, [pc, #148]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d903      	bls.n	800d05a <xTaskIncrementTick+0xda>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d056:	4a22      	ldr	r2, [pc, #136]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05e:	4613      	mov	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4a1f      	ldr	r2, [pc, #124]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d068:	441a      	add	r2, r3
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe fdea 	bl	800bc4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d080:	429a      	cmp	r2, r3
 800d082:	d3b8      	bcc.n	800cff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d088:	e7b5      	b.n	800cff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d08a:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d090:	4914      	ldr	r1, [pc, #80]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d901      	bls.n	800d0a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0a6:	4b11      	ldr	r3, [pc, #68]	@ (800d0ec <xTaskIncrementTick+0x16c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	e004      	b.n	800d0be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0be:	697b      	ldr	r3, [r7, #20]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20001c90 	.word	0x20001c90
 800d0cc:	20001c6c 	.word	0x20001c6c
 800d0d0:	20001c20 	.word	0x20001c20
 800d0d4:	20001c24 	.word	0x20001c24
 800d0d8:	20001c80 	.word	0x20001c80
 800d0dc:	20001c88 	.word	0x20001c88
 800d0e0:	20001c70 	.word	0x20001c70
 800d0e4:	20001798 	.word	0x20001798
 800d0e8:	20001794 	.word	0x20001794
 800d0ec:	20001c7c 	.word	0x20001c7c
 800d0f0:	20001c78 	.word	0x20001c78

0800d0f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800d1a8 <vTaskSwitchContext+0xb4>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d102:	4b2a      	ldr	r3, [pc, #168]	@ (800d1ac <vTaskSwitchContext+0xb8>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d108:	e047      	b.n	800d19a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d10a:	4b28      	ldr	r3, [pc, #160]	@ (800d1ac <vTaskSwitchContext+0xb8>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d110:	4b27      	ldr	r3, [pc, #156]	@ (800d1b0 <vTaskSwitchContext+0xbc>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e011      	b.n	800d13c <vTaskSwitchContext+0x48>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10b      	bne.n	800d136 <vTaskSwitchContext+0x42>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	e7fd      	b.n	800d132 <vTaskSwitchContext+0x3e>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3b01      	subs	r3, #1
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	491d      	ldr	r1, [pc, #116]	@ (800d1b4 <vTaskSwitchContext+0xc0>)
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	440b      	add	r3, r1
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0e3      	beq.n	800d118 <vTaskSwitchContext+0x24>
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a16      	ldr	r2, [pc, #88]	@ (800d1b4 <vTaskSwitchContext+0xc0>)
 800d15c:	4413      	add	r3, r2
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3308      	adds	r3, #8
 800d172:	429a      	cmp	r2, r3
 800d174:	d104      	bne.n	800d180 <vTaskSwitchContext+0x8c>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	605a      	str	r2, [r3, #4]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4a0c      	ldr	r2, [pc, #48]	@ (800d1b8 <vTaskSwitchContext+0xc4>)
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	4a09      	ldr	r2, [pc, #36]	@ (800d1b0 <vTaskSwitchContext+0xbc>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d190:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <vTaskSwitchContext+0xc4>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3354      	adds	r3, #84	@ 0x54
 800d196:	4a09      	ldr	r2, [pc, #36]	@ (800d1bc <vTaskSwitchContext+0xc8>)
 800d198:	6013      	str	r3, [r2, #0]
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	20001c90 	.word	0x20001c90
 800d1ac:	20001c7c 	.word	0x20001c7c
 800d1b0:	20001c70 	.word	0x20001c70
 800d1b4:	20001798 	.word	0x20001798
 800d1b8:	20001794 	.word	0x20001794
 800d1bc:	20000078 	.word	0x20000078

0800d1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e8:	4b07      	ldr	r3, [pc, #28]	@ (800d208 <vTaskPlaceOnEventList+0x48>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3318      	adds	r3, #24
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7fe fd4e 	bl	800bc92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	6838      	ldr	r0, [r7, #0]
 800d1fa:	f000 fb69 	bl	800d8d0 <prvAddCurrentTaskToDelayedList>
}
 800d1fe:	bf00      	nop
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20001794 	.word	0x20001794

0800d20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	617b      	str	r3, [r7, #20]
}
 800d230:	bf00      	nop
 800d232:	bf00      	nop
 800d234:	e7fd      	b.n	800d232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d236:	4b0a      	ldr	r3, [pc, #40]	@ (800d260 <vTaskPlaceOnEventListRestricted+0x54>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3318      	adds	r3, #24
 800d23c:	4619      	mov	r1, r3
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7fe fd03 	bl	800bc4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d24e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	68b8      	ldr	r0, [r7, #8]
 800d254:	f000 fb3c 	bl	800d8d0 <prvAddCurrentTaskToDelayedList>
	}
 800d258:	bf00      	nop
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20001794 	.word	0x20001794

0800d264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10b      	bne.n	800d292 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60fb      	str	r3, [r7, #12]
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	e7fd      	b.n	800d28e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	3318      	adds	r3, #24
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe fd34 	bl	800bd04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29c:	4b1d      	ldr	r3, [pc, #116]	@ (800d314 <xTaskRemoveFromEventList+0xb0>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d11d      	bne.n	800d2e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fd2b 	bl	800bd04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b2:	4b19      	ldr	r3, [pc, #100]	@ (800d318 <xTaskRemoveFromEventList+0xb4>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d903      	bls.n	800d2c2 <xTaskRemoveFromEventList+0x5e>
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2be:	4a16      	ldr	r2, [pc, #88]	@ (800d318 <xTaskRemoveFromEventList+0xb4>)
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4a13      	ldr	r2, [pc, #76]	@ (800d31c <xTaskRemoveFromEventList+0xb8>)
 800d2d0:	441a      	add	r2, r3
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4610      	mov	r0, r2
 800d2da:	f7fe fcb6 	bl	800bc4a <vListInsertEnd>
 800d2de:	e005      	b.n	800d2ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	3318      	adds	r3, #24
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	480e      	ldr	r0, [pc, #56]	@ (800d320 <xTaskRemoveFromEventList+0xbc>)
 800d2e8:	f7fe fcaf 	bl	800bc4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d324 <xTaskRemoveFromEventList+0xc0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d905      	bls.n	800d306 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d328 <xTaskRemoveFromEventList+0xc4>)
 800d300:	2201      	movs	r2, #1
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	e001      	b.n	800d30a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d30a:	697b      	ldr	r3, [r7, #20]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20001c90 	.word	0x20001c90
 800d318:	20001c70 	.word	0x20001c70
 800d31c:	20001798 	.word	0x20001798
 800d320:	20001c28 	.word	0x20001c28
 800d324:	20001794 	.word	0x20001794
 800d328:	20001c7c 	.word	0x20001c7c

0800d32c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d334:	4b06      	ldr	r3, [pc, #24]	@ (800d350 <vTaskInternalSetTimeOutState+0x24>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d33c:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <vTaskInternalSetTimeOutState+0x28>)
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	605a      	str	r2, [r3, #4]
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	20001c80 	.word	0x20001c80
 800d354:	20001c6c 	.word	0x20001c6c

0800d358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10b      	bne.n	800d380 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	613b      	str	r3, [r7, #16]
}
 800d37a:	bf00      	nop
 800d37c:	bf00      	nop
 800d37e:	e7fd      	b.n	800d37c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10b      	bne.n	800d39e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60fb      	str	r3, [r7, #12]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d39e:	f000 ff73 	bl	800e288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d418 <xTaskCheckForTimeOut+0xc0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3ba:	d102      	bne.n	800d3c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e023      	b.n	800d40a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	4b15      	ldr	r3, [pc, #84]	@ (800d41c <xTaskCheckForTimeOut+0xc4>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d007      	beq.n	800d3de <xTaskCheckForTimeOut+0x86>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	69ba      	ldr	r2, [r7, #24]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d302      	bcc.n	800d3de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	61fb      	str	r3, [r7, #28]
 800d3dc:	e015      	b.n	800d40a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d20b      	bcs.n	800d400 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	1ad2      	subs	r2, r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff ff99 	bl	800d32c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61fb      	str	r3, [r7, #28]
 800d3fe:	e004      	b.n	800d40a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d406:	2301      	movs	r3, #1
 800d408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d40a:	f000 ff6f 	bl	800e2ec <vPortExitCritical>

	return xReturn;
 800d40e:	69fb      	ldr	r3, [r7, #28]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3720      	adds	r7, #32
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	20001c6c 	.word	0x20001c6c
 800d41c:	20001c80 	.word	0x20001c80

0800d420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d424:	4b03      	ldr	r3, [pc, #12]	@ (800d434 <vTaskMissedYield+0x14>)
 800d426:	2201      	movs	r2, #1
 800d428:	601a      	str	r2, [r3, #0]
}
 800d42a:	bf00      	nop
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	20001c7c 	.word	0x20001c7c

0800d438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d440:	f000 f852 	bl	800d4e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d444:	4b06      	ldr	r3, [pc, #24]	@ (800d460 <prvIdleTask+0x28>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d9f9      	bls.n	800d440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d44c:	4b05      	ldr	r3, [pc, #20]	@ (800d464 <prvIdleTask+0x2c>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d45c:	e7f0      	b.n	800d440 <prvIdleTask+0x8>
 800d45e:	bf00      	nop
 800d460:	20001798 	.word	0x20001798
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d46e:	2300      	movs	r3, #0
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	e00c      	b.n	800d48e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	4613      	mov	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4a12      	ldr	r2, [pc, #72]	@ (800d4c8 <prvInitialiseTaskLists+0x60>)
 800d480:	4413      	add	r3, r2
 800d482:	4618      	mov	r0, r3
 800d484:	f7fe fbb4 	bl	800bbf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	3301      	adds	r3, #1
 800d48c:	607b      	str	r3, [r7, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b37      	cmp	r3, #55	@ 0x37
 800d492:	d9ef      	bls.n	800d474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d494:	480d      	ldr	r0, [pc, #52]	@ (800d4cc <prvInitialiseTaskLists+0x64>)
 800d496:	f7fe fbab 	bl	800bbf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d49a:	480d      	ldr	r0, [pc, #52]	@ (800d4d0 <prvInitialiseTaskLists+0x68>)
 800d49c:	f7fe fba8 	bl	800bbf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4a0:	480c      	ldr	r0, [pc, #48]	@ (800d4d4 <prvInitialiseTaskLists+0x6c>)
 800d4a2:	f7fe fba5 	bl	800bbf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4a6:	480c      	ldr	r0, [pc, #48]	@ (800d4d8 <prvInitialiseTaskLists+0x70>)
 800d4a8:	f7fe fba2 	bl	800bbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4ac:	480b      	ldr	r0, [pc, #44]	@ (800d4dc <prvInitialiseTaskLists+0x74>)
 800d4ae:	f7fe fb9f 	bl	800bbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e0 <prvInitialiseTaskLists+0x78>)
 800d4b4:	4a05      	ldr	r2, [pc, #20]	@ (800d4cc <prvInitialiseTaskLists+0x64>)
 800d4b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e4 <prvInitialiseTaskLists+0x7c>)
 800d4ba:	4a05      	ldr	r2, [pc, #20]	@ (800d4d0 <prvInitialiseTaskLists+0x68>)
 800d4bc:	601a      	str	r2, [r3, #0]
}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20001798 	.word	0x20001798
 800d4cc:	20001bf8 	.word	0x20001bf8
 800d4d0:	20001c0c 	.word	0x20001c0c
 800d4d4:	20001c28 	.word	0x20001c28
 800d4d8:	20001c3c 	.word	0x20001c3c
 800d4dc:	20001c54 	.word	0x20001c54
 800d4e0:	20001c20 	.word	0x20001c20
 800d4e4:	20001c24 	.word	0x20001c24

0800d4e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4ee:	e019      	b.n	800d524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4f0:	f000 feca 	bl	800e288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f4:	4b10      	ldr	r3, [pc, #64]	@ (800d538 <prvCheckTasksWaitingTermination+0x50>)
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	3304      	adds	r3, #4
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe fbff 	bl	800bd04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d506:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <prvCheckTasksWaitingTermination+0x54>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	4a0b      	ldr	r2, [pc, #44]	@ (800d53c <prvCheckTasksWaitingTermination+0x54>)
 800d50e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d510:	4b0b      	ldr	r3, [pc, #44]	@ (800d540 <prvCheckTasksWaitingTermination+0x58>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	3b01      	subs	r3, #1
 800d516:	4a0a      	ldr	r2, [pc, #40]	@ (800d540 <prvCheckTasksWaitingTermination+0x58>)
 800d518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d51a:	f000 fee7 	bl	800e2ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f810 	bl	800d544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d524:	4b06      	ldr	r3, [pc, #24]	@ (800d540 <prvCheckTasksWaitingTermination+0x58>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1e1      	bne.n	800d4f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20001c3c 	.word	0x20001c3c
 800d53c:	20001c68 	.word	0x20001c68
 800d540:	20001c50 	.word	0x20001c50

0800d544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	3354      	adds	r3, #84	@ 0x54
 800d550:	4618      	mov	r0, r3
 800d552:	f001 ff1b 	bl	800f38c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d108      	bne.n	800d572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d564:	4618      	mov	r0, r3
 800d566:	f001 f87f 	bl	800e668 <vPortFree>
				vPortFree( pxTCB );
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f001 f87c 	bl	800e668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d570:	e019      	b.n	800d5a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d103      	bne.n	800d584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f001 f873 	bl	800e668 <vPortFree>
	}
 800d582:	e010      	b.n	800d5a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d00b      	beq.n	800d5a6 <prvDeleteTCB+0x62>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	60fb      	str	r3, [r7, #12]
}
 800d5a0:	bf00      	nop
 800d5a2:	bf00      	nop
 800d5a4:	e7fd      	b.n	800d5a2 <prvDeleteTCB+0x5e>
	}
 800d5a6:	bf00      	nop
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e8 <prvResetNextTaskUnblockTime+0x38>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ec <prvResetNextTaskUnblockTime+0x3c>)
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5c8:	e008      	b.n	800d5dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ca:	4b07      	ldr	r3, [pc, #28]	@ (800d5e8 <prvResetNextTaskUnblockTime+0x38>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4a04      	ldr	r2, [pc, #16]	@ (800d5ec <prvResetNextTaskUnblockTime+0x3c>)
 800d5da:	6013      	str	r3, [r2, #0]
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	20001c20 	.word	0x20001c20
 800d5ec:	20001c88 	.word	0x20001c88

0800d5f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d624 <xTaskGetSchedulerState+0x34>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d102      	bne.n	800d604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5fe:	2301      	movs	r3, #1
 800d600:	607b      	str	r3, [r7, #4]
 800d602:	e008      	b.n	800d616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d604:	4b08      	ldr	r3, [pc, #32]	@ (800d628 <xTaskGetSchedulerState+0x38>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d60c:	2302      	movs	r3, #2
 800d60e:	607b      	str	r3, [r7, #4]
 800d610:	e001      	b.n	800d616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d612:	2300      	movs	r3, #0
 800d614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d616:	687b      	ldr	r3, [r7, #4]
	}
 800d618:	4618      	mov	r0, r3
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	20001c74 	.word	0x20001c74
 800d628:	20001c90 	.word	0x20001c90

0800d62c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d058      	beq.n	800d6f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d642:	4b2f      	ldr	r3, [pc, #188]	@ (800d700 <xTaskPriorityDisinherit+0xd4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d00b      	beq.n	800d664 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	60fb      	str	r3, [r7, #12]
}
 800d65e:	bf00      	nop
 800d660:	bf00      	nop
 800d662:	e7fd      	b.n	800d660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	60bb      	str	r3, [r7, #8]
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d688:	1e5a      	subs	r2, r3, #1
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d696:	429a      	cmp	r2, r3
 800d698:	d02c      	beq.n	800d6f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d128      	bne.n	800d6f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fb2c 	bl	800bd04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d704 <xTaskPriorityDisinherit+0xd8>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d903      	bls.n	800d6d4 <xTaskPriorityDisinherit+0xa8>
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d0:	4a0c      	ldr	r2, [pc, #48]	@ (800d704 <xTaskPriorityDisinherit+0xd8>)
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d8:	4613      	mov	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4413      	add	r3, r2
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4a09      	ldr	r2, [pc, #36]	@ (800d708 <xTaskPriorityDisinherit+0xdc>)
 800d6e2:	441a      	add	r2, r3
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fe faad 	bl	800bc4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6f4:	697b      	ldr	r3, [r7, #20]
	}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20001794 	.word	0x20001794
 800d704:	20001c70 	.word	0x20001c70
 800d708:	20001798 	.word	0x20001798

0800d70c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d716:	f000 fdb7 	bl	800e288 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d71a:	4b20      	ldr	r3, [pc, #128]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d113      	bne.n	800d74e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d726:	4b1d      	ldr	r3, [pc, #116]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00b      	beq.n	800d74e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d736:	2101      	movs	r1, #1
 800d738:	6838      	ldr	r0, [r7, #0]
 800d73a:	f000 f8c9 	bl	800d8d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d73e:	4b18      	ldr	r3, [pc, #96]	@ (800d7a0 <ulTaskNotifyTake+0x94>)
 800d740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d74e:	f000 fdcd 	bl	800e2ec <vPortExitCritical>

		taskENTER_CRITICAL();
 800d752:	f000 fd99 	bl	800e288 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d756:	4b11      	ldr	r3, [pc, #68]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d75e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00e      	beq.n	800d784 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d005      	beq.n	800d778 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d76c:	4b0b      	ldr	r3, [pc, #44]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2200      	movs	r2, #0
 800d772:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d776:	e005      	b.n	800d784 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d778:	4b08      	ldr	r3, [pc, #32]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	3a01      	subs	r2, #1
 800d780:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d784:	4b05      	ldr	r3, [pc, #20]	@ (800d79c <ulTaskNotifyTake+0x90>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d78e:	f000 fdad 	bl	800e2ec <vPortExitCritical>

		return ulReturn;
 800d792:	68fb      	ldr	r3, [r7, #12]
	}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20001794 	.word	0x20001794
 800d7a0:	e000ed04 	.word	0xe000ed04

0800d7a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08a      	sub	sp, #40	@ 0x28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10b      	bne.n	800d7cc <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	61bb      	str	r3, [r7, #24]
}
 800d7c6:	bf00      	nop
 800d7c8:	bf00      	nop
 800d7ca:	e7fd      	b.n	800d7c8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7cc:	f000 fe3c 	bl	800e448 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d7d4:	f3ef 8211 	mrs	r2, BASEPRI
 800d7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	617a      	str	r2, [r7, #20]
 800d7ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d7ec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7ee:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d7f6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d80e:	7ffb      	ldrb	r3, [r7, #31]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d147      	bne.n	800d8a4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d820:	f383 8811 	msr	BASEPRI, r3
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	60fb      	str	r3, [r7, #12]
}
 800d82e:	bf00      	nop
 800d830:	bf00      	nop
 800d832:	e7fd      	b.n	800d830 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d834:	4b20      	ldr	r3, [pc, #128]	@ (800d8b8 <vTaskNotifyGiveFromISR+0x114>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d11d      	bne.n	800d878 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	3304      	adds	r3, #4
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fa5f 	bl	800bd04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d84a:	4b1c      	ldr	r3, [pc, #112]	@ (800d8bc <vTaskNotifyGiveFromISR+0x118>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d903      	bls.n	800d85a <vTaskNotifyGiveFromISR+0xb6>
 800d852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d856:	4a19      	ldr	r2, [pc, #100]	@ (800d8bc <vTaskNotifyGiveFromISR+0x118>)
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85e:	4613      	mov	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4413      	add	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4a16      	ldr	r2, [pc, #88]	@ (800d8c0 <vTaskNotifyGiveFromISR+0x11c>)
 800d868:	441a      	add	r2, r3
 800d86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86c:	3304      	adds	r3, #4
 800d86e:	4619      	mov	r1, r3
 800d870:	4610      	mov	r0, r2
 800d872:	f7fe f9ea 	bl	800bc4a <vListInsertEnd>
 800d876:	e005      	b.n	800d884 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87a:	3318      	adds	r3, #24
 800d87c:	4619      	mov	r1, r3
 800d87e:	4811      	ldr	r0, [pc, #68]	@ (800d8c4 <vTaskNotifyGiveFromISR+0x120>)
 800d880:	f7fe f9e3 	bl	800bc4a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d888:	4b0f      	ldr	r3, [pc, #60]	@ (800d8c8 <vTaskNotifyGiveFromISR+0x124>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88e:	429a      	cmp	r2, r3
 800d890:	d908      	bls.n	800d8a4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2201      	movs	r2, #1
 800d89c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d89e:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <vTaskNotifyGiveFromISR+0x128>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	f383 8811 	msr	BASEPRI, r3
}
 800d8ae:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d8b0:	bf00      	nop
 800d8b2:	3728      	adds	r7, #40	@ 0x28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20001c90 	.word	0x20001c90
 800d8bc:	20001c70 	.word	0x20001c70
 800d8c0:	20001798 	.word	0x20001798
 800d8c4:	20001c28 	.word	0x20001c28
 800d8c8:	20001794 	.word	0x20001794
 800d8cc:	20001c7c 	.word	0x20001c7c

0800d8d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8da:	4b21      	ldr	r3, [pc, #132]	@ (800d960 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8e0:	4b20      	ldr	r3, [pc, #128]	@ (800d964 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe fa0c 	bl	800bd04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8f2:	d10a      	bne.n	800d90a <prvAddCurrentTaskToDelayedList+0x3a>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d007      	beq.n	800d90a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8fa:	4b1a      	ldr	r3, [pc, #104]	@ (800d964 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	3304      	adds	r3, #4
 800d900:	4619      	mov	r1, r3
 800d902:	4819      	ldr	r0, [pc, #100]	@ (800d968 <prvAddCurrentTaskToDelayedList+0x98>)
 800d904:	f7fe f9a1 	bl	800bc4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d908:	e026      	b.n	800d958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4413      	add	r3, r2
 800d910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d912:	4b14      	ldr	r3, [pc, #80]	@ (800d964 <prvAddCurrentTaskToDelayedList+0x94>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d209      	bcs.n	800d936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d922:	4b12      	ldr	r3, [pc, #72]	@ (800d96c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	4b0f      	ldr	r3, [pc, #60]	@ (800d964 <prvAddCurrentTaskToDelayedList+0x94>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f7fe f9af 	bl	800bc92 <vListInsert>
}
 800d934:	e010      	b.n	800d958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d936:	4b0e      	ldr	r3, [pc, #56]	@ (800d970 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	4b0a      	ldr	r3, [pc, #40]	@ (800d964 <prvAddCurrentTaskToDelayedList+0x94>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3304      	adds	r3, #4
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7fe f9a5 	bl	800bc92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d948:	4b0a      	ldr	r3, [pc, #40]	@ (800d974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d202      	bcs.n	800d958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d952:	4a08      	ldr	r2, [pc, #32]	@ (800d974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	6013      	str	r3, [r2, #0]
}
 800d958:	bf00      	nop
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	20001c6c 	.word	0x20001c6c
 800d964:	20001794 	.word	0x20001794
 800d968:	20001c54 	.word	0x20001c54
 800d96c:	20001c24 	.word	0x20001c24
 800d970:	20001c20 	.word	0x20001c20
 800d974:	20001c88 	.word	0x20001c88

0800d978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08a      	sub	sp, #40	@ 0x28
 800d97c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d982:	f000 fb13 	bl	800dfac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d986:	4b1d      	ldr	r3, [pc, #116]	@ (800d9fc <xTimerCreateTimerTask+0x84>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d021      	beq.n	800d9d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d98e:	2300      	movs	r3, #0
 800d990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d996:	1d3a      	adds	r2, r7, #4
 800d998:	f107 0108 	add.w	r1, r7, #8
 800d99c:	f107 030c 	add.w	r3, r7, #12
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe f90b 	bl	800bbbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	9202      	str	r2, [sp, #8]
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	460a      	mov	r2, r1
 800d9b8:	4911      	ldr	r1, [pc, #68]	@ (800da00 <xTimerCreateTimerTask+0x88>)
 800d9ba:	4812      	ldr	r0, [pc, #72]	@ (800da04 <xTimerCreateTimerTask+0x8c>)
 800d9bc:	f7fe fec6 	bl	800c74c <xTaskCreateStatic>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4a11      	ldr	r2, [pc, #68]	@ (800da08 <xTimerCreateTimerTask+0x90>)
 800d9c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9c6:	4b10      	ldr	r3, [pc, #64]	@ (800da08 <xTimerCreateTimerTask+0x90>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10b      	bne.n	800d9f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	613b      	str	r3, [r7, #16]
}
 800d9ea:	bf00      	nop
 800d9ec:	bf00      	nop
 800d9ee:	e7fd      	b.n	800d9ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9f0:	697b      	ldr	r3, [r7, #20]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20001cc4 	.word	0x20001cc4
 800da00:	08012338 	.word	0x08012338
 800da04:	0800db45 	.word	0x0800db45
 800da08:	20001cc8 	.word	0x20001cc8

0800da0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	@ 0x28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
 800da18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <xTimerGenericCommand+0x30>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	623b      	str	r3, [r7, #32]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da3c:	4b19      	ldr	r3, [pc, #100]	@ (800daa4 <xTimerGenericCommand+0x98>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d02a      	beq.n	800da9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b05      	cmp	r3, #5
 800da54:	dc18      	bgt.n	800da88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da56:	f7ff fdcb 	bl	800d5f0 <xTaskGetSchedulerState>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d109      	bne.n	800da74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da60:	4b10      	ldr	r3, [pc, #64]	@ (800daa4 <xTimerGenericCommand+0x98>)
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	f107 0110 	add.w	r1, r7, #16
 800da68:	2300      	movs	r3, #0
 800da6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da6c:	f7fe fa7e 	bl	800bf6c <xQueueGenericSend>
 800da70:	6278      	str	r0, [r7, #36]	@ 0x24
 800da72:	e012      	b.n	800da9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da74:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <xTimerGenericCommand+0x98>)
 800da76:	6818      	ldr	r0, [r3, #0]
 800da78:	f107 0110 	add.w	r1, r7, #16
 800da7c:	2300      	movs	r3, #0
 800da7e:	2200      	movs	r2, #0
 800da80:	f7fe fa74 	bl	800bf6c <xQueueGenericSend>
 800da84:	6278      	str	r0, [r7, #36]	@ 0x24
 800da86:	e008      	b.n	800da9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da88:	4b06      	ldr	r3, [pc, #24]	@ (800daa4 <xTimerGenericCommand+0x98>)
 800da8a:	6818      	ldr	r0, [r3, #0]
 800da8c:	f107 0110 	add.w	r1, r7, #16
 800da90:	2300      	movs	r3, #0
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	f7fe fb6c 	bl	800c170 <xQueueGenericSendFromISR>
 800da98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3728      	adds	r7, #40	@ 0x28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	20001cc4 	.word	0x20001cc4

0800daa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af02      	add	r7, sp, #8
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab2:	4b23      	ldr	r3, [pc, #140]	@ (800db40 <prvProcessExpiredTimer+0x98>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	3304      	adds	r3, #4
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fe f91f 	bl	800bd04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d023      	beq.n	800db1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	699a      	ldr	r2, [r3, #24]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	18d1      	adds	r1, r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	6978      	ldr	r0, [r7, #20]
 800dae2:	f000 f8d5 	bl	800dc90 <prvInsertTimerInActiveList>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d020      	beq.n	800db2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daec:	2300      	movs	r3, #0
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	2300      	movs	r3, #0
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	2100      	movs	r1, #0
 800daf6:	6978      	ldr	r0, [r7, #20]
 800daf8:	f7ff ff88 	bl	800da0c <xTimerGenericCommand>
 800dafc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d114      	bne.n	800db2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60fb      	str	r3, [r7, #12]
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	e7fd      	b.n	800db18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db22:	f023 0301 	bic.w	r3, r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	6978      	ldr	r0, [r7, #20]
 800db34:	4798      	blx	r3
}
 800db36:	bf00      	nop
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20001cbc 	.word	0x20001cbc

0800db44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	4618      	mov	r0, r3
 800db52:	f000 f859 	bl	800dc08 <prvGetNextExpireTime>
 800db56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	4619      	mov	r1, r3
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f805 	bl	800db6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db62:	f000 f8d7 	bl	800dd14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db66:	bf00      	nop
 800db68:	e7f0      	b.n	800db4c <prvTimerTask+0x8>
	...

0800db6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db76:	f7ff f84d 	bl	800cc14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db7a:	f107 0308 	add.w	r3, r7, #8
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f866 	bl	800dc50 <prvSampleTimeNow>
 800db84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d130      	bne.n	800dbee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10a      	bne.n	800dba8 <prvProcessTimerOrBlockTask+0x3c>
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	429a      	cmp	r2, r3
 800db98:	d806      	bhi.n	800dba8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db9a:	f7ff f849 	bl	800cc30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db9e:	68f9      	ldr	r1, [r7, #12]
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ff81 	bl	800daa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dba6:	e024      	b.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d008      	beq.n	800dbc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbae:	4b13      	ldr	r3, [pc, #76]	@ (800dbfc <prvProcessTimerOrBlockTask+0x90>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <prvProcessTimerOrBlockTask+0x50>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e000      	b.n	800dbbe <prvProcessTimerOrBlockTask+0x52>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	@ (800dc00 <prvProcessTimerOrBlockTask+0x94>)
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	f7fe fd89 	bl	800c6e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbd2:	f7ff f82d 	bl	800cc30 <xTaskResumeAll>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbdc:	4b09      	ldr	r3, [pc, #36]	@ (800dc04 <prvProcessTimerOrBlockTask+0x98>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
}
 800dbec:	e001      	b.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbee:	f7ff f81f 	bl	800cc30 <xTaskResumeAll>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20001cc0 	.word	0x20001cc0
 800dc00:	20001cc4 	.word	0x20001cc4
 800dc04:	e000ed04 	.word	0xe000ed04

0800dc08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc10:	4b0e      	ldr	r3, [pc, #56]	@ (800dc4c <prvGetNextExpireTime+0x44>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <prvGetNextExpireTime+0x16>
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	e000      	b.n	800dc20 <prvGetNextExpireTime+0x18>
 800dc1e:	2200      	movs	r2, #0
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d105      	bne.n	800dc38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc2c:	4b07      	ldr	r3, [pc, #28]	@ (800dc4c <prvGetNextExpireTime+0x44>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	e001      	b.n	800dc3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	20001cbc 	.word	0x20001cbc

0800dc50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc58:	f7ff f888 	bl	800cd6c <xTaskGetTickCount>
 800dc5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	@ (800dc8c <prvSampleTimeNow+0x3c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d205      	bcs.n	800dc74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc68:	f000 f93a 	bl	800dee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e002      	b.n	800dc7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc7a:	4a04      	ldr	r2, [pc, #16]	@ (800dc8c <prvSampleTimeNow+0x3c>)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc80:	68fb      	ldr	r3, [r7, #12]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20001ccc 	.word	0x20001ccc

0800dc90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d812      	bhi.n	800dcdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	1ad2      	subs	r2, r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d302      	bcc.n	800dcca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e01b      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcca:	4b10      	ldr	r3, [pc, #64]	@ (800dd0c <prvInsertTimerInActiveList+0x7c>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f7fd ffdc 	bl	800bc92 <vListInsert>
 800dcda:	e012      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d206      	bcs.n	800dcf2 <prvInsertTimerInActiveList+0x62>
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d302      	bcc.n	800dcf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcec:	2301      	movs	r3, #1
 800dcee:	617b      	str	r3, [r7, #20]
 800dcf0:	e007      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcf2:	4b07      	ldr	r3, [pc, #28]	@ (800dd10 <prvInsertTimerInActiveList+0x80>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	f7fd ffc8 	bl	800bc92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd02:	697b      	ldr	r3, [r7, #20]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20001cc0 	.word	0x20001cc0
 800dd10:	20001cbc 	.word	0x20001cbc

0800dd14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	@ 0x38
 800dd18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd1a:	e0ce      	b.n	800deba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da19      	bge.n	800dd56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd22:	1d3b      	adds	r3, r7, #4
 800dd24:	3304      	adds	r3, #4
 800dd26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10b      	bne.n	800dd46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	61fb      	str	r3, [r7, #28]
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	e7fd      	b.n	800dd42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd4c:	6850      	ldr	r0, [r2, #4]
 800dd4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd50:	6892      	ldr	r2, [r2, #8]
 800dd52:	4611      	mov	r1, r2
 800dd54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f2c0 80ae 	blt.w	800deba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d004      	beq.n	800dd74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fd ffc8 	bl	800bd04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd74:	463b      	mov	r3, r7
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff ff6a 	bl	800dc50 <prvSampleTimeNow>
 800dd7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b09      	cmp	r3, #9
 800dd82:	f200 8097 	bhi.w	800deb4 <prvProcessReceivedCommands+0x1a0>
 800dd86:	a201      	add	r2, pc, #4	@ (adr r2, 800dd8c <prvProcessReceivedCommands+0x78>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800ddb5 	.word	0x0800ddb5
 800dd90:	0800ddb5 	.word	0x0800ddb5
 800dd94:	0800ddb5 	.word	0x0800ddb5
 800dd98:	0800de2b 	.word	0x0800de2b
 800dd9c:	0800de3f 	.word	0x0800de3f
 800dda0:	0800de8b 	.word	0x0800de8b
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddb5 	.word	0x0800ddb5
 800ddac:	0800de2b 	.word	0x0800de2b
 800ddb0:	0800de3f 	.word	0x0800de3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	18d1      	adds	r1, r2, r3
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddd4:	f7ff ff5c 	bl	800dc90 <prvInsertTimerInActiveList>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d06c      	beq.n	800deb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dde4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d061      	beq.n	800deb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	441a      	add	r2, r3
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	2300      	movs	r3, #0
 800de02:	2100      	movs	r1, #0
 800de04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de06:	f7ff fe01 	bl	800da0c <xTimerGenericCommand>
 800de0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d152      	bne.n	800deb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	61bb      	str	r3, [r7, #24]
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop
 800de28:	e7fd      	b.n	800de26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de30:	f023 0301 	bic.w	r3, r3, #1
 800de34:	b2da      	uxtb	r2, r3
 800de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de3c:	e03d      	b.n	800deba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de44:	f043 0301 	orr.w	r3, r3, #1
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10b      	bne.n	800de76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	617b      	str	r3, [r7, #20]
}
 800de70:	bf00      	nop
 800de72:	bf00      	nop
 800de74:	e7fd      	b.n	800de72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de78:	699a      	ldr	r2, [r3, #24]
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	18d1      	adds	r1, r2, r3
 800de7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de84:	f7ff ff04 	bl	800dc90 <prvInsertTimerInActiveList>
					break;
 800de88:	e017      	b.n	800deba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de90:	f003 0302 	and.w	r3, r3, #2
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800de98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de9a:	f000 fbe5 	bl	800e668 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de9e:	e00c      	b.n	800deba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dea6:	f023 0301 	bic.w	r3, r3, #1
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800deb2:	e002      	b.n	800deba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800deb4:	bf00      	nop
 800deb6:	e000      	b.n	800deba <prvProcessReceivedCommands+0x1a6>
					break;
 800deb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800deba:	4b08      	ldr	r3, [pc, #32]	@ (800dedc <prvProcessReceivedCommands+0x1c8>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	1d39      	adds	r1, r7, #4
 800dec0:	2200      	movs	r2, #0
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe f9f2 	bl	800c2ac <xQueueReceive>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	f47f af26 	bne.w	800dd1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	3730      	adds	r7, #48	@ 0x30
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20001cc4 	.word	0x20001cc4

0800dee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dee6:	e049      	b.n	800df7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee8:	4b2e      	ldr	r3, [pc, #184]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def2:	4b2c      	ldr	r3, [pc, #176]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3304      	adds	r3, #4
 800df00:	4618      	mov	r0, r3
 800df02:	f7fd feff 	bl	800bd04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df14:	f003 0304 	and.w	r3, r3, #4
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d02f      	beq.n	800df7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	4413      	add	r3, r2
 800df24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d90e      	bls.n	800df4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df3a:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3304      	adds	r3, #4
 800df42:	4619      	mov	r1, r3
 800df44:	4610      	mov	r0, r2
 800df46:	f7fd fea4 	bl	800bc92 <vListInsert>
 800df4a:	e017      	b.n	800df7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df4c:	2300      	movs	r3, #0
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	2300      	movs	r3, #0
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	2100      	movs	r1, #0
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f7ff fd58 	bl	800da0c <xTimerGenericCommand>
 800df5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10b      	bne.n	800df7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	603b      	str	r3, [r7, #0]
}
 800df76:	bf00      	nop
 800df78:	bf00      	nop
 800df7a:	e7fd      	b.n	800df78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df7c:	4b09      	ldr	r3, [pc, #36]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1b0      	bne.n	800dee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df86:	4b07      	ldr	r3, [pc, #28]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df8c:	4b06      	ldr	r3, [pc, #24]	@ (800dfa8 <prvSwitchTimerLists+0xc8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a04      	ldr	r2, [pc, #16]	@ (800dfa4 <prvSwitchTimerLists+0xc4>)
 800df92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df94:	4a04      	ldr	r2, [pc, #16]	@ (800dfa8 <prvSwitchTimerLists+0xc8>)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	6013      	str	r3, [r2, #0]
}
 800df9a:	bf00      	nop
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20001cbc 	.word	0x20001cbc
 800dfa8:	20001cc0 	.word	0x20001cc0

0800dfac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfb2:	f000 f969 	bl	800e288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfb6:	4b15      	ldr	r3, [pc, #84]	@ (800e00c <prvCheckForValidListAndQueue+0x60>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d120      	bne.n	800e000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfbe:	4814      	ldr	r0, [pc, #80]	@ (800e010 <prvCheckForValidListAndQueue+0x64>)
 800dfc0:	f7fd fe16 	bl	800bbf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfc4:	4813      	ldr	r0, [pc, #76]	@ (800e014 <prvCheckForValidListAndQueue+0x68>)
 800dfc6:	f7fd fe13 	bl	800bbf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfca:	4b13      	ldr	r3, [pc, #76]	@ (800e018 <prvCheckForValidListAndQueue+0x6c>)
 800dfcc:	4a10      	ldr	r2, [pc, #64]	@ (800e010 <prvCheckForValidListAndQueue+0x64>)
 800dfce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dfd0:	4b12      	ldr	r3, [pc, #72]	@ (800e01c <prvCheckForValidListAndQueue+0x70>)
 800dfd2:	4a10      	ldr	r2, [pc, #64]	@ (800e014 <prvCheckForValidListAndQueue+0x68>)
 800dfd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	4b11      	ldr	r3, [pc, #68]	@ (800e020 <prvCheckForValidListAndQueue+0x74>)
 800dfdc:	4a11      	ldr	r2, [pc, #68]	@ (800e024 <prvCheckForValidListAndQueue+0x78>)
 800dfde:	2110      	movs	r1, #16
 800dfe0:	200a      	movs	r0, #10
 800dfe2:	f7fd ff23 	bl	800be2c <xQueueGenericCreateStatic>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	4a08      	ldr	r2, [pc, #32]	@ (800e00c <prvCheckForValidListAndQueue+0x60>)
 800dfea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfec:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <prvCheckForValidListAndQueue+0x60>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dff4:	4b05      	ldr	r3, [pc, #20]	@ (800e00c <prvCheckForValidListAndQueue+0x60>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	490b      	ldr	r1, [pc, #44]	@ (800e028 <prvCheckForValidListAndQueue+0x7c>)
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fe fb48 	bl	800c690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e000:	f000 f974 	bl	800e2ec <vPortExitCritical>
}
 800e004:	bf00      	nop
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20001cc4 	.word	0x20001cc4
 800e010:	20001c94 	.word	0x20001c94
 800e014:	20001ca8 	.word	0x20001ca8
 800e018:	20001cbc 	.word	0x20001cbc
 800e01c:	20001cc0 	.word	0x20001cc0
 800e020:	20001d70 	.word	0x20001d70
 800e024:	20001cd0 	.word	0x20001cd0
 800e028:	08012340 	.word	0x08012340

0800e02c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	3b04      	subs	r3, #4
 800e03c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3b04      	subs	r3, #4
 800e04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	f023 0201 	bic.w	r2, r3, #1
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3b04      	subs	r3, #4
 800e05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e05c:	4a0c      	ldr	r2, [pc, #48]	@ (800e090 <pxPortInitialiseStack+0x64>)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3b14      	subs	r3, #20
 800e066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3b04      	subs	r3, #4
 800e072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f06f 0202 	mvn.w	r2, #2
 800e07a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3b20      	subs	r3, #32
 800e080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e082:	68fb      	ldr	r3, [r7, #12]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	0800e095 	.word	0x0800e095

0800e094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e09e:	4b13      	ldr	r3, [pc, #76]	@ (800e0ec <prvTaskExitError+0x58>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0a6:	d00b      	beq.n	800e0c0 <prvTaskExitError+0x2c>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	60fb      	str	r3, [r7, #12]
}
 800e0ba:	bf00      	nop
 800e0bc:	bf00      	nop
 800e0be:	e7fd      	b.n	800e0bc <prvTaskExitError+0x28>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	60bb      	str	r3, [r7, #8]
}
 800e0d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0d4:	bf00      	nop
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0fc      	beq.n	800e0d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	20000068 	.word	0x20000068

0800e0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0f0:	4b07      	ldr	r3, [pc, #28]	@ (800e110 <pxCurrentTCBConst2>)
 800e0f2:	6819      	ldr	r1, [r3, #0]
 800e0f4:	6808      	ldr	r0, [r1, #0]
 800e0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fa:	f380 8809 	msr	PSP, r0
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f04f 0000 	mov.w	r0, #0
 800e106:	f380 8811 	msr	BASEPRI, r0
 800e10a:	4770      	bx	lr
 800e10c:	f3af 8000 	nop.w

0800e110 <pxCurrentTCBConst2>:
 800e110:	20001794 	.word	0x20001794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e114:	bf00      	nop
 800e116:	bf00      	nop

0800e118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e118:	4808      	ldr	r0, [pc, #32]	@ (800e13c <prvPortStartFirstTask+0x24>)
 800e11a:	6800      	ldr	r0, [r0, #0]
 800e11c:	6800      	ldr	r0, [r0, #0]
 800e11e:	f380 8808 	msr	MSP, r0
 800e122:	f04f 0000 	mov.w	r0, #0
 800e126:	f380 8814 	msr	CONTROL, r0
 800e12a:	b662      	cpsie	i
 800e12c:	b661      	cpsie	f
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	f3bf 8f6f 	isb	sy
 800e136:	df00      	svc	0
 800e138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e13a:	bf00      	nop
 800e13c:	e000ed08 	.word	0xe000ed08

0800e140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e146:	4b47      	ldr	r3, [pc, #284]	@ (800e264 <xPortStartScheduler+0x124>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a47      	ldr	r2, [pc, #284]	@ (800e268 <xPortStartScheduler+0x128>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d10b      	bne.n	800e168 <xPortStartScheduler+0x28>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	e7fd      	b.n	800e164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e168:	4b3e      	ldr	r3, [pc, #248]	@ (800e264 <xPortStartScheduler+0x124>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a3f      	ldr	r2, [pc, #252]	@ (800e26c <xPortStartScheduler+0x12c>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d10b      	bne.n	800e18a <xPortStartScheduler+0x4a>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	613b      	str	r3, [r7, #16]
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	e7fd      	b.n	800e186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e18a:	4b39      	ldr	r3, [pc, #228]	@ (800e270 <xPortStartScheduler+0x130>)
 800e18c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	b2db      	uxtb	r3, r3
 800e194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	22ff      	movs	r2, #255	@ 0xff
 800e19a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	4b31      	ldr	r3, [pc, #196]	@ (800e274 <xPortStartScheduler+0x134>)
 800e1b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1b2:	4b31      	ldr	r3, [pc, #196]	@ (800e278 <xPortStartScheduler+0x138>)
 800e1b4:	2207      	movs	r2, #7
 800e1b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1b8:	e009      	b.n	800e1ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e1ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e278 <xPortStartScheduler+0x138>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	4a2d      	ldr	r2, [pc, #180]	@ (800e278 <xPortStartScheduler+0x138>)
 800e1c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1c4:	78fb      	ldrb	r3, [r7, #3]
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	005b      	lsls	r3, r3, #1
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1ce:	78fb      	ldrb	r3, [r7, #3]
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1d6:	2b80      	cmp	r3, #128	@ 0x80
 800e1d8:	d0ef      	beq.n	800e1ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1da:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <xPortStartScheduler+0x138>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f1c3 0307 	rsb	r3, r3, #7
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	d00b      	beq.n	800e1fe <xPortStartScheduler+0xbe>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	60bb      	str	r3, [r7, #8]
}
 800e1f8:	bf00      	nop
 800e1fa:	bf00      	nop
 800e1fc:	e7fd      	b.n	800e1fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1fe:	4b1e      	ldr	r3, [pc, #120]	@ (800e278 <xPortStartScheduler+0x138>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	021b      	lsls	r3, r3, #8
 800e204:	4a1c      	ldr	r2, [pc, #112]	@ (800e278 <xPortStartScheduler+0x138>)
 800e206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e208:	4b1b      	ldr	r3, [pc, #108]	@ (800e278 <xPortStartScheduler+0x138>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e210:	4a19      	ldr	r2, [pc, #100]	@ (800e278 <xPortStartScheduler+0x138>)
 800e212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	b2da      	uxtb	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e21c:	4b17      	ldr	r3, [pc, #92]	@ (800e27c <xPortStartScheduler+0x13c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a16      	ldr	r2, [pc, #88]	@ (800e27c <xPortStartScheduler+0x13c>)
 800e222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e228:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <xPortStartScheduler+0x13c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a13      	ldr	r2, [pc, #76]	@ (800e27c <xPortStartScheduler+0x13c>)
 800e22e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e234:	f000 f8da 	bl	800e3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e238:	4b11      	ldr	r3, [pc, #68]	@ (800e280 <xPortStartScheduler+0x140>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e23e:	f000 f8f9 	bl	800e434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e242:	4b10      	ldr	r3, [pc, #64]	@ (800e284 <xPortStartScheduler+0x144>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a0f      	ldr	r2, [pc, #60]	@ (800e284 <xPortStartScheduler+0x144>)
 800e248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e24c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e24e:	f7ff ff63 	bl	800e118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e252:	f7fe ff4f 	bl	800d0f4 <vTaskSwitchContext>
	prvTaskExitError();
 800e256:	f7ff ff1d 	bl	800e094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e25a:	2300      	movs	r3, #0
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	e000ed00 	.word	0xe000ed00
 800e268:	410fc271 	.word	0x410fc271
 800e26c:	410fc270 	.word	0x410fc270
 800e270:	e000e400 	.word	0xe000e400
 800e274:	20001dc0 	.word	0x20001dc0
 800e278:	20001dc4 	.word	0x20001dc4
 800e27c:	e000ed20 	.word	0xe000ed20
 800e280:	20000068 	.word	0x20000068
 800e284:	e000ef34 	.word	0xe000ef34

0800e288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	607b      	str	r3, [r7, #4]
}
 800e2a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2a2:	4b10      	ldr	r3, [pc, #64]	@ (800e2e4 <vPortEnterCritical+0x5c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	4a0e      	ldr	r2, [pc, #56]	@ (800e2e4 <vPortEnterCritical+0x5c>)
 800e2aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e4 <vPortEnterCritical+0x5c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d110      	bne.n	800e2d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800e2e8 <vPortEnterCritical+0x60>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00b      	beq.n	800e2d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	603b      	str	r3, [r7, #0]
}
 800e2d0:	bf00      	nop
 800e2d2:	bf00      	nop
 800e2d4:	e7fd      	b.n	800e2d2 <vPortEnterCritical+0x4a>
	}
}
 800e2d6:	bf00      	nop
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20000068 	.word	0x20000068
 800e2e8:	e000ed04 	.word	0xe000ed04

0800e2ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2f2:	4b12      	ldr	r3, [pc, #72]	@ (800e33c <vPortExitCritical+0x50>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10b      	bne.n	800e312 <vPortExitCritical+0x26>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	607b      	str	r3, [r7, #4]
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	e7fd      	b.n	800e30e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e312:	4b0a      	ldr	r3, [pc, #40]	@ (800e33c <vPortExitCritical+0x50>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	3b01      	subs	r3, #1
 800e318:	4a08      	ldr	r2, [pc, #32]	@ (800e33c <vPortExitCritical+0x50>)
 800e31a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e31c:	4b07      	ldr	r3, [pc, #28]	@ (800e33c <vPortExitCritical+0x50>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d105      	bne.n	800e330 <vPortExitCritical+0x44>
 800e324:	2300      	movs	r3, #0
 800e326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	f383 8811 	msr	BASEPRI, r3
}
 800e32e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	20000068 	.word	0x20000068

0800e340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e340:	f3ef 8009 	mrs	r0, PSP
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	4b15      	ldr	r3, [pc, #84]	@ (800e3a0 <pxCurrentTCBConst>)
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	f01e 0f10 	tst.w	lr, #16
 800e350:	bf08      	it	eq
 800e352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35a:	6010      	str	r0, [r2, #0]
 800e35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e364:	f380 8811 	msr	BASEPRI, r0
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f7fe fec0 	bl	800d0f4 <vTaskSwitchContext>
 800e374:	f04f 0000 	mov.w	r0, #0
 800e378:	f380 8811 	msr	BASEPRI, r0
 800e37c:	bc09      	pop	{r0, r3}
 800e37e:	6819      	ldr	r1, [r3, #0]
 800e380:	6808      	ldr	r0, [r1, #0]
 800e382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e386:	f01e 0f10 	tst.w	lr, #16
 800e38a:	bf08      	it	eq
 800e38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e390:	f380 8809 	msr	PSP, r0
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	f3af 8000 	nop.w

0800e3a0 <pxCurrentTCBConst>:
 800e3a0:	20001794 	.word	0x20001794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop

0800e3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	607b      	str	r3, [r7, #4]
}
 800e3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3c2:	f7fe fddd 	bl	800cf80 <xTaskIncrementTick>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d003      	beq.n	800e3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3cc:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <xPortSysTickHandler+0x40>)
 800e3ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	f383 8811 	msr	BASEPRI, r3
}
 800e3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	e000ed04 	.word	0xe000ed04

0800e3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e420 <vPortSetupTimerInterrupt+0x34>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e424 <vPortSetupTimerInterrupt+0x38>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e428 <vPortSetupTimerInterrupt+0x3c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a0a      	ldr	r2, [pc, #40]	@ (800e42c <vPortSetupTimerInterrupt+0x40>)
 800e402:	fba2 2303 	umull	r2, r3, r2, r3
 800e406:	099b      	lsrs	r3, r3, #6
 800e408:	4a09      	ldr	r2, [pc, #36]	@ (800e430 <vPortSetupTimerInterrupt+0x44>)
 800e40a:	3b01      	subs	r3, #1
 800e40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e40e:	4b04      	ldr	r3, [pc, #16]	@ (800e420 <vPortSetupTimerInterrupt+0x34>)
 800e410:	2207      	movs	r2, #7
 800e412:	601a      	str	r2, [r3, #0]
}
 800e414:	bf00      	nop
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	e000e010 	.word	0xe000e010
 800e424:	e000e018 	.word	0xe000e018
 800e428:	2000005c 	.word	0x2000005c
 800e42c:	10624dd3 	.word	0x10624dd3
 800e430:	e000e014 	.word	0xe000e014

0800e434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e444 <vPortEnableVFP+0x10>
 800e438:	6801      	ldr	r1, [r0, #0]
 800e43a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e43e:	6001      	str	r1, [r0, #0]
 800e440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e442:	bf00      	nop
 800e444:	e000ed88 	.word	0xe000ed88

0800e448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e44e:	f3ef 8305 	mrs	r3, IPSR
 800e452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2b0f      	cmp	r3, #15
 800e458:	d915      	bls.n	800e486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e45a:	4a18      	ldr	r2, [pc, #96]	@ (800e4bc <vPortValidateInterruptPriority+0x74>)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	4413      	add	r3, r2
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e464:	4b16      	ldr	r3, [pc, #88]	@ (800e4c0 <vPortValidateInterruptPriority+0x78>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	7afa      	ldrb	r2, [r7, #11]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d20b      	bcs.n	800e486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	607b      	str	r3, [r7, #4]
}
 800e480:	bf00      	nop
 800e482:	bf00      	nop
 800e484:	e7fd      	b.n	800e482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e486:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c4 <vPortValidateInterruptPriority+0x7c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e48e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <vPortValidateInterruptPriority+0x80>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d90b      	bls.n	800e4ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	603b      	str	r3, [r7, #0]
}
 800e4a8:	bf00      	nop
 800e4aa:	bf00      	nop
 800e4ac:	e7fd      	b.n	800e4aa <vPortValidateInterruptPriority+0x62>
	}
 800e4ae:	bf00      	nop
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	e000e3f0 	.word	0xe000e3f0
 800e4c0:	20001dc0 	.word	0x20001dc0
 800e4c4:	e000ed0c 	.word	0xe000ed0c
 800e4c8:	20001dc4 	.word	0x20001dc4

0800e4cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b08a      	sub	sp, #40	@ 0x28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4d8:	f7fe fb9c 	bl	800cc14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e650 <pvPortMalloc+0x184>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4e4:	f000 f924 	bl	800e730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e654 <pvPortMalloc+0x188>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f040 8095 	bne.w	800e620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01e      	beq.n	800e53a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4413      	add	r3, r2
 800e502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f003 0307 	and.w	r3, r3, #7
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d015      	beq.n	800e53a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f023 0307 	bic.w	r3, r3, #7
 800e514:	3308      	adds	r3, #8
 800e516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f003 0307 	and.w	r3, r3, #7
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00b      	beq.n	800e53a <pvPortMalloc+0x6e>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	617b      	str	r3, [r7, #20]
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop
 800e538:	e7fd      	b.n	800e536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d06f      	beq.n	800e620 <pvPortMalloc+0x154>
 800e540:	4b45      	ldr	r3, [pc, #276]	@ (800e658 <pvPortMalloc+0x18c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	429a      	cmp	r2, r3
 800e548:	d86a      	bhi.n	800e620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e54a:	4b44      	ldr	r3, [pc, #272]	@ (800e65c <pvPortMalloc+0x190>)
 800e54c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e54e:	4b43      	ldr	r3, [pc, #268]	@ (800e65c <pvPortMalloc+0x190>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e554:	e004      	b.n	800e560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	429a      	cmp	r2, r3
 800e568:	d903      	bls.n	800e572 <pvPortMalloc+0xa6>
 800e56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1f1      	bne.n	800e556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e572:	4b37      	ldr	r3, [pc, #220]	@ (800e650 <pvPortMalloc+0x184>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e578:	429a      	cmp	r2, r3
 800e57a:	d051      	beq.n	800e620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e57c:	6a3b      	ldr	r3, [r7, #32]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2208      	movs	r2, #8
 800e582:	4413      	add	r3, r2
 800e584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	6a3b      	ldr	r3, [r7, #32]
 800e58c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	1ad2      	subs	r2, r2, r3
 800e596:	2308      	movs	r3, #8
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d920      	bls.n	800e5e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e59e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	f003 0307 	and.w	r3, r3, #7
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00b      	beq.n	800e5c8 <pvPortMalloc+0xfc>
	__asm volatile
 800e5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	613b      	str	r3, [r7, #16]
}
 800e5c2:	bf00      	nop
 800e5c4:	bf00      	nop
 800e5c6:	e7fd      	b.n	800e5c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	1ad2      	subs	r2, r2, r3
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5da:	69b8      	ldr	r0, [r7, #24]
 800e5dc:	f000 f90a 	bl	800e7f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e658 <pvPortMalloc+0x18c>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e658 <pvPortMalloc+0x18c>)
 800e5ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e658 <pvPortMalloc+0x18c>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e660 <pvPortMalloc+0x194>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d203      	bcs.n	800e602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5fa:	4b17      	ldr	r3, [pc, #92]	@ (800e658 <pvPortMalloc+0x18c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a18      	ldr	r2, [pc, #96]	@ (800e660 <pvPortMalloc+0x194>)
 800e600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4b13      	ldr	r3, [pc, #76]	@ (800e654 <pvPortMalloc+0x188>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	431a      	orrs	r2, r3
 800e60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e616:	4b13      	ldr	r3, [pc, #76]	@ (800e664 <pvPortMalloc+0x198>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3301      	adds	r3, #1
 800e61c:	4a11      	ldr	r2, [pc, #68]	@ (800e664 <pvPortMalloc+0x198>)
 800e61e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e620:	f7fe fb06 	bl	800cc30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00b      	beq.n	800e646 <pvPortMalloc+0x17a>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	60fb      	str	r3, [r7, #12]
}
 800e640:	bf00      	nop
 800e642:	bf00      	nop
 800e644:	e7fd      	b.n	800e642 <pvPortMalloc+0x176>
	return pvReturn;
 800e646:	69fb      	ldr	r3, [r7, #28]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3728      	adds	r7, #40	@ 0x28
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	200059d0 	.word	0x200059d0
 800e654:	200059e4 	.word	0x200059e4
 800e658:	200059d4 	.word	0x200059d4
 800e65c:	200059c8 	.word	0x200059c8
 800e660:	200059d8 	.word	0x200059d8
 800e664:	200059dc 	.word	0x200059dc

0800e668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d04f      	beq.n	800e71a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e67a:	2308      	movs	r3, #8
 800e67c:	425b      	negs	r3, r3
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	4413      	add	r3, r2
 800e682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	4b25      	ldr	r3, [pc, #148]	@ (800e724 <vPortFree+0xbc>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4013      	ands	r3, r2
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10b      	bne.n	800e6ae <vPortFree+0x46>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	60fb      	str	r3, [r7, #12]
}
 800e6a8:	bf00      	nop
 800e6aa:	bf00      	nop
 800e6ac:	e7fd      	b.n	800e6aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00b      	beq.n	800e6ce <vPortFree+0x66>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	60bb      	str	r3, [r7, #8]
}
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
 800e6cc:	e7fd      	b.n	800e6ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	4b14      	ldr	r3, [pc, #80]	@ (800e724 <vPortFree+0xbc>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01e      	beq.n	800e71a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d11a      	bne.n	800e71a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	685a      	ldr	r2, [r3, #4]
 800e6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e724 <vPortFree+0xbc>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	43db      	mvns	r3, r3
 800e6ee:	401a      	ands	r2, r3
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6f4:	f7fe fa8e 	bl	800cc14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <vPortFree+0xc0>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4413      	add	r3, r2
 800e702:	4a09      	ldr	r2, [pc, #36]	@ (800e728 <vPortFree+0xc0>)
 800e704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e706:	6938      	ldr	r0, [r7, #16]
 800e708:	f000 f874 	bl	800e7f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e70c:	4b07      	ldr	r3, [pc, #28]	@ (800e72c <vPortFree+0xc4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3301      	adds	r3, #1
 800e712:	4a06      	ldr	r2, [pc, #24]	@ (800e72c <vPortFree+0xc4>)
 800e714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e716:	f7fe fa8b 	bl	800cc30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e71a:	bf00      	nop
 800e71c:	3718      	adds	r7, #24
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	200059e4 	.word	0x200059e4
 800e728:	200059d4 	.word	0x200059d4
 800e72c:	200059e0 	.word	0x200059e0

0800e730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e730:	b480      	push	{r7}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e736:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e73a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e73c:	4b27      	ldr	r3, [pc, #156]	@ (800e7dc <prvHeapInit+0xac>)
 800e73e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f003 0307 	and.w	r3, r3, #7
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00c      	beq.n	800e764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	3307      	adds	r3, #7
 800e74e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f023 0307 	bic.w	r3, r3, #7
 800e756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	4a1f      	ldr	r2, [pc, #124]	@ (800e7dc <prvHeapInit+0xac>)
 800e760:	4413      	add	r3, r2
 800e762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e768:	4a1d      	ldr	r2, [pc, #116]	@ (800e7e0 <prvHeapInit+0xb0>)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e76e:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e0 <prvHeapInit+0xb0>)
 800e770:	2200      	movs	r2, #0
 800e772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	4413      	add	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e77c:	2208      	movs	r2, #8
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	1a9b      	subs	r3, r3, r2
 800e782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f023 0307 	bic.w	r3, r3, #7
 800e78a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4a15      	ldr	r2, [pc, #84]	@ (800e7e4 <prvHeapInit+0xb4>)
 800e790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e792:	4b14      	ldr	r3, [pc, #80]	@ (800e7e4 <prvHeapInit+0xb4>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2200      	movs	r2, #0
 800e798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e79a:	4b12      	ldr	r3, [pc, #72]	@ (800e7e4 <prvHeapInit+0xb4>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	1ad2      	subs	r2, r2, r3
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e7e4 <prvHeapInit+0xb4>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e7e8 <prvHeapInit+0xb8>)
 800e7be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	4a09      	ldr	r2, [pc, #36]	@ (800e7ec <prvHeapInit+0xbc>)
 800e7c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7c8:	4b09      	ldr	r3, [pc, #36]	@ (800e7f0 <prvHeapInit+0xc0>)
 800e7ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e7ce:	601a      	str	r2, [r3, #0]
}
 800e7d0:	bf00      	nop
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	20001dc8 	.word	0x20001dc8
 800e7e0:	200059c8 	.word	0x200059c8
 800e7e4:	200059d0 	.word	0x200059d0
 800e7e8:	200059d8 	.word	0x200059d8
 800e7ec:	200059d4 	.word	0x200059d4
 800e7f0:	200059e4 	.word	0x200059e4

0800e7f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7fc:	4b28      	ldr	r3, [pc, #160]	@ (800e8a0 <prvInsertBlockIntoFreeList+0xac>)
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	e002      	b.n	800e808 <prvInsertBlockIntoFreeList+0x14>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d8f7      	bhi.n	800e802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	4413      	add	r3, r2
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	429a      	cmp	r2, r3
 800e822:	d108      	bne.n	800e836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	441a      	add	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	441a      	add	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	429a      	cmp	r2, r3
 800e848:	d118      	bne.n	800e87c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	4b15      	ldr	r3, [pc, #84]	@ (800e8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	429a      	cmp	r2, r3
 800e854:	d00d      	beq.n	800e872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	441a      	add	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	e008      	b.n	800e884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e872:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	e003      	b.n	800e884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d002      	beq.n	800e892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e892:	bf00      	nop
 800e894:	3714      	adds	r7, #20
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	200059c8 	.word	0x200059c8
 800e8a4:	200059d0 	.word	0x200059d0

0800e8a8 <__cvt>:
 800e8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ac:	ec57 6b10 	vmov	r6, r7, d0
 800e8b0:	2f00      	cmp	r7, #0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	bfbb      	ittet	lt
 800e8ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e8be:	461f      	movlt	r7, r3
 800e8c0:	2300      	movge	r3, #0
 800e8c2:	232d      	movlt	r3, #45	@ 0x2d
 800e8c4:	700b      	strb	r3, [r1, #0]
 800e8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e8cc:	4691      	mov	r9, r2
 800e8ce:	f023 0820 	bic.w	r8, r3, #32
 800e8d2:	bfbc      	itt	lt
 800e8d4:	4632      	movlt	r2, r6
 800e8d6:	4616      	movlt	r6, r2
 800e8d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e8dc:	d005      	beq.n	800e8ea <__cvt+0x42>
 800e8de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e8e2:	d100      	bne.n	800e8e6 <__cvt+0x3e>
 800e8e4:	3401      	adds	r4, #1
 800e8e6:	2102      	movs	r1, #2
 800e8e8:	e000      	b.n	800e8ec <__cvt+0x44>
 800e8ea:	2103      	movs	r1, #3
 800e8ec:	ab03      	add	r3, sp, #12
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	ab02      	add	r3, sp, #8
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	ec47 6b10 	vmov	d0, r6, r7
 800e8f8:	4653      	mov	r3, sl
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	f000 fe3c 	bl	800f578 <_dtoa_r>
 800e900:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e904:	4605      	mov	r5, r0
 800e906:	d119      	bne.n	800e93c <__cvt+0x94>
 800e908:	f019 0f01 	tst.w	r9, #1
 800e90c:	d00e      	beq.n	800e92c <__cvt+0x84>
 800e90e:	eb00 0904 	add.w	r9, r0, r4
 800e912:	2200      	movs	r2, #0
 800e914:	2300      	movs	r3, #0
 800e916:	4630      	mov	r0, r6
 800e918:	4639      	mov	r1, r7
 800e91a:	f7f2 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e91e:	b108      	cbz	r0, 800e924 <__cvt+0x7c>
 800e920:	f8cd 900c 	str.w	r9, [sp, #12]
 800e924:	2230      	movs	r2, #48	@ 0x30
 800e926:	9b03      	ldr	r3, [sp, #12]
 800e928:	454b      	cmp	r3, r9
 800e92a:	d31e      	bcc.n	800e96a <__cvt+0xc2>
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e930:	1b5b      	subs	r3, r3, r5
 800e932:	4628      	mov	r0, r5
 800e934:	6013      	str	r3, [r2, #0]
 800e936:	b004      	add	sp, #16
 800e938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e940:	eb00 0904 	add.w	r9, r0, r4
 800e944:	d1e5      	bne.n	800e912 <__cvt+0x6a>
 800e946:	7803      	ldrb	r3, [r0, #0]
 800e948:	2b30      	cmp	r3, #48	@ 0x30
 800e94a:	d10a      	bne.n	800e962 <__cvt+0xba>
 800e94c:	2200      	movs	r2, #0
 800e94e:	2300      	movs	r3, #0
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f2 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e958:	b918      	cbnz	r0, 800e962 <__cvt+0xba>
 800e95a:	f1c4 0401 	rsb	r4, r4, #1
 800e95e:	f8ca 4000 	str.w	r4, [sl]
 800e962:	f8da 3000 	ldr.w	r3, [sl]
 800e966:	4499      	add	r9, r3
 800e968:	e7d3      	b.n	800e912 <__cvt+0x6a>
 800e96a:	1c59      	adds	r1, r3, #1
 800e96c:	9103      	str	r1, [sp, #12]
 800e96e:	701a      	strb	r2, [r3, #0]
 800e970:	e7d9      	b.n	800e926 <__cvt+0x7e>

0800e972 <__exponent>:
 800e972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e974:	2900      	cmp	r1, #0
 800e976:	bfba      	itte	lt
 800e978:	4249      	neglt	r1, r1
 800e97a:	232d      	movlt	r3, #45	@ 0x2d
 800e97c:	232b      	movge	r3, #43	@ 0x2b
 800e97e:	2909      	cmp	r1, #9
 800e980:	7002      	strb	r2, [r0, #0]
 800e982:	7043      	strb	r3, [r0, #1]
 800e984:	dd29      	ble.n	800e9da <__exponent+0x68>
 800e986:	f10d 0307 	add.w	r3, sp, #7
 800e98a:	461d      	mov	r5, r3
 800e98c:	270a      	movs	r7, #10
 800e98e:	461a      	mov	r2, r3
 800e990:	fbb1 f6f7 	udiv	r6, r1, r7
 800e994:	fb07 1416 	mls	r4, r7, r6, r1
 800e998:	3430      	adds	r4, #48	@ 0x30
 800e99a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e99e:	460c      	mov	r4, r1
 800e9a0:	2c63      	cmp	r4, #99	@ 0x63
 800e9a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	dcf1      	bgt.n	800e98e <__exponent+0x1c>
 800e9aa:	3130      	adds	r1, #48	@ 0x30
 800e9ac:	1e94      	subs	r4, r2, #2
 800e9ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9b2:	1c41      	adds	r1, r0, #1
 800e9b4:	4623      	mov	r3, r4
 800e9b6:	42ab      	cmp	r3, r5
 800e9b8:	d30a      	bcc.n	800e9d0 <__exponent+0x5e>
 800e9ba:	f10d 0309 	add.w	r3, sp, #9
 800e9be:	1a9b      	subs	r3, r3, r2
 800e9c0:	42ac      	cmp	r4, r5
 800e9c2:	bf88      	it	hi
 800e9c4:	2300      	movhi	r3, #0
 800e9c6:	3302      	adds	r3, #2
 800e9c8:	4403      	add	r3, r0
 800e9ca:	1a18      	subs	r0, r3, r0
 800e9cc:	b003      	add	sp, #12
 800e9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e9d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e9d8:	e7ed      	b.n	800e9b6 <__exponent+0x44>
 800e9da:	2330      	movs	r3, #48	@ 0x30
 800e9dc:	3130      	adds	r1, #48	@ 0x30
 800e9de:	7083      	strb	r3, [r0, #2]
 800e9e0:	70c1      	strb	r1, [r0, #3]
 800e9e2:	1d03      	adds	r3, r0, #4
 800e9e4:	e7f1      	b.n	800e9ca <__exponent+0x58>
	...

0800e9e8 <_printf_float>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	b08d      	sub	sp, #52	@ 0x34
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	461f      	mov	r7, r3
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	f000 fcc3 	bl	800f384 <_localeconv_r>
 800e9fe:	6803      	ldr	r3, [r0, #0]
 800ea00:	9304      	str	r3, [sp, #16]
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7f1 fc34 	bl	8000270 <strlen>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea10:	9005      	str	r0, [sp, #20]
 800ea12:	3307      	adds	r3, #7
 800ea14:	f023 0307 	bic.w	r3, r3, #7
 800ea18:	f103 0208 	add.w	r2, r3, #8
 800ea1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea20:	f8d4 b000 	ldr.w	fp, [r4]
 800ea24:	f8c8 2000 	str.w	r2, [r8]
 800ea28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ea30:	9307      	str	r3, [sp, #28]
 800ea32:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ea3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea3e:	4b9c      	ldr	r3, [pc, #624]	@ (800ecb0 <_printf_float+0x2c8>)
 800ea40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea44:	f7f2 f872 	bl	8000b2c <__aeabi_dcmpun>
 800ea48:	bb70      	cbnz	r0, 800eaa8 <_printf_float+0xc0>
 800ea4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea4e:	4b98      	ldr	r3, [pc, #608]	@ (800ecb0 <_printf_float+0x2c8>)
 800ea50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea54:	f7f2 f84c 	bl	8000af0 <__aeabi_dcmple>
 800ea58:	bb30      	cbnz	r0, 800eaa8 <_printf_float+0xc0>
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4640      	mov	r0, r8
 800ea60:	4649      	mov	r1, r9
 800ea62:	f7f2 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ea66:	b110      	cbz	r0, 800ea6e <_printf_float+0x86>
 800ea68:	232d      	movs	r3, #45	@ 0x2d
 800ea6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea6e:	4a91      	ldr	r2, [pc, #580]	@ (800ecb4 <_printf_float+0x2cc>)
 800ea70:	4b91      	ldr	r3, [pc, #580]	@ (800ecb8 <_printf_float+0x2d0>)
 800ea72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ea76:	bf8c      	ite	hi
 800ea78:	4690      	movhi	r8, r2
 800ea7a:	4698      	movls	r8, r3
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	6123      	str	r3, [r4, #16]
 800ea80:	f02b 0304 	bic.w	r3, fp, #4
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	f04f 0900 	mov.w	r9, #0
 800ea8a:	9700      	str	r7, [sp, #0]
 800ea8c:	4633      	mov	r3, r6
 800ea8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ea90:	4621      	mov	r1, r4
 800ea92:	4628      	mov	r0, r5
 800ea94:	f000 f9d2 	bl	800ee3c <_printf_common>
 800ea98:	3001      	adds	r0, #1
 800ea9a:	f040 808d 	bne.w	800ebb8 <_printf_float+0x1d0>
 800ea9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eaa2:	b00d      	add	sp, #52	@ 0x34
 800eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	464b      	mov	r3, r9
 800eaac:	4640      	mov	r0, r8
 800eaae:	4649      	mov	r1, r9
 800eab0:	f7f2 f83c 	bl	8000b2c <__aeabi_dcmpun>
 800eab4:	b140      	cbz	r0, 800eac8 <_printf_float+0xe0>
 800eab6:	464b      	mov	r3, r9
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bfbc      	itt	lt
 800eabc:	232d      	movlt	r3, #45	@ 0x2d
 800eabe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eac2:	4a7e      	ldr	r2, [pc, #504]	@ (800ecbc <_printf_float+0x2d4>)
 800eac4:	4b7e      	ldr	r3, [pc, #504]	@ (800ecc0 <_printf_float+0x2d8>)
 800eac6:	e7d4      	b.n	800ea72 <_printf_float+0x8a>
 800eac8:	6863      	ldr	r3, [r4, #4]
 800eaca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eace:	9206      	str	r2, [sp, #24]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	d13b      	bne.n	800eb4c <_printf_float+0x164>
 800ead4:	2306      	movs	r3, #6
 800ead6:	6063      	str	r3, [r4, #4]
 800ead8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eadc:	2300      	movs	r3, #0
 800eade:	6022      	str	r2, [r4, #0]
 800eae0:	9303      	str	r3, [sp, #12]
 800eae2:	ab0a      	add	r3, sp, #40	@ 0x28
 800eae4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eae8:	ab09      	add	r3, sp, #36	@ 0x24
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	6861      	ldr	r1, [r4, #4]
 800eaee:	ec49 8b10 	vmov	d0, r8, r9
 800eaf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7ff fed6 	bl	800e8a8 <__cvt>
 800eafc:	9b06      	ldr	r3, [sp, #24]
 800eafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb00:	2b47      	cmp	r3, #71	@ 0x47
 800eb02:	4680      	mov	r8, r0
 800eb04:	d129      	bne.n	800eb5a <_printf_float+0x172>
 800eb06:	1cc8      	adds	r0, r1, #3
 800eb08:	db02      	blt.n	800eb10 <_printf_float+0x128>
 800eb0a:	6863      	ldr	r3, [r4, #4]
 800eb0c:	4299      	cmp	r1, r3
 800eb0e:	dd41      	ble.n	800eb94 <_printf_float+0x1ac>
 800eb10:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb14:	fa5f fa8a 	uxtb.w	sl, sl
 800eb18:	3901      	subs	r1, #1
 800eb1a:	4652      	mov	r2, sl
 800eb1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb20:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb22:	f7ff ff26 	bl	800e972 <__exponent>
 800eb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb28:	1813      	adds	r3, r2, r0
 800eb2a:	2a01      	cmp	r2, #1
 800eb2c:	4681      	mov	r9, r0
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	dc02      	bgt.n	800eb38 <_printf_float+0x150>
 800eb32:	6822      	ldr	r2, [r4, #0]
 800eb34:	07d2      	lsls	r2, r2, #31
 800eb36:	d501      	bpl.n	800eb3c <_printf_float+0x154>
 800eb38:	3301      	adds	r3, #1
 800eb3a:	6123      	str	r3, [r4, #16]
 800eb3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d0a2      	beq.n	800ea8a <_printf_float+0xa2>
 800eb44:	232d      	movs	r3, #45	@ 0x2d
 800eb46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb4a:	e79e      	b.n	800ea8a <_printf_float+0xa2>
 800eb4c:	9a06      	ldr	r2, [sp, #24]
 800eb4e:	2a47      	cmp	r2, #71	@ 0x47
 800eb50:	d1c2      	bne.n	800ead8 <_printf_float+0xf0>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1c0      	bne.n	800ead8 <_printf_float+0xf0>
 800eb56:	2301      	movs	r3, #1
 800eb58:	e7bd      	b.n	800ead6 <_printf_float+0xee>
 800eb5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb5e:	d9db      	bls.n	800eb18 <_printf_float+0x130>
 800eb60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eb64:	d118      	bne.n	800eb98 <_printf_float+0x1b0>
 800eb66:	2900      	cmp	r1, #0
 800eb68:	6863      	ldr	r3, [r4, #4]
 800eb6a:	dd0b      	ble.n	800eb84 <_printf_float+0x19c>
 800eb6c:	6121      	str	r1, [r4, #16]
 800eb6e:	b913      	cbnz	r3, 800eb76 <_printf_float+0x18e>
 800eb70:	6822      	ldr	r2, [r4, #0]
 800eb72:	07d0      	lsls	r0, r2, #31
 800eb74:	d502      	bpl.n	800eb7c <_printf_float+0x194>
 800eb76:	3301      	adds	r3, #1
 800eb78:	440b      	add	r3, r1
 800eb7a:	6123      	str	r3, [r4, #16]
 800eb7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eb7e:	f04f 0900 	mov.w	r9, #0
 800eb82:	e7db      	b.n	800eb3c <_printf_float+0x154>
 800eb84:	b913      	cbnz	r3, 800eb8c <_printf_float+0x1a4>
 800eb86:	6822      	ldr	r2, [r4, #0]
 800eb88:	07d2      	lsls	r2, r2, #31
 800eb8a:	d501      	bpl.n	800eb90 <_printf_float+0x1a8>
 800eb8c:	3302      	adds	r3, #2
 800eb8e:	e7f4      	b.n	800eb7a <_printf_float+0x192>
 800eb90:	2301      	movs	r3, #1
 800eb92:	e7f2      	b.n	800eb7a <_printf_float+0x192>
 800eb94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb9a:	4299      	cmp	r1, r3
 800eb9c:	db05      	blt.n	800ebaa <_printf_float+0x1c2>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	6121      	str	r1, [r4, #16]
 800eba2:	07d8      	lsls	r0, r3, #31
 800eba4:	d5ea      	bpl.n	800eb7c <_printf_float+0x194>
 800eba6:	1c4b      	adds	r3, r1, #1
 800eba8:	e7e7      	b.n	800eb7a <_printf_float+0x192>
 800ebaa:	2900      	cmp	r1, #0
 800ebac:	bfd4      	ite	le
 800ebae:	f1c1 0202 	rsble	r2, r1, #2
 800ebb2:	2201      	movgt	r2, #1
 800ebb4:	4413      	add	r3, r2
 800ebb6:	e7e0      	b.n	800eb7a <_printf_float+0x192>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	055a      	lsls	r2, r3, #21
 800ebbc:	d407      	bmi.n	800ebce <_printf_float+0x1e6>
 800ebbe:	6923      	ldr	r3, [r4, #16]
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	47b8      	blx	r7
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d12b      	bne.n	800ec24 <_printf_float+0x23c>
 800ebcc:	e767      	b.n	800ea9e <_printf_float+0xb6>
 800ebce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ebd2:	f240 80dd 	bls.w	800ed90 <_printf_float+0x3a8>
 800ebd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebda:	2200      	movs	r2, #0
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f7f1 ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d033      	beq.n	800ec4e <_printf_float+0x266>
 800ebe6:	4a37      	ldr	r2, [pc, #220]	@ (800ecc4 <_printf_float+0x2dc>)
 800ebe8:	2301      	movs	r3, #1
 800ebea:	4631      	mov	r1, r6
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b8      	blx	r7
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	f43f af54 	beq.w	800ea9e <_printf_float+0xb6>
 800ebf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ebfa:	4543      	cmp	r3, r8
 800ebfc:	db02      	blt.n	800ec04 <_printf_float+0x21c>
 800ebfe:	6823      	ldr	r3, [r4, #0]
 800ec00:	07d8      	lsls	r0, r3, #31
 800ec02:	d50f      	bpl.n	800ec24 <_printf_float+0x23c>
 800ec04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec08:	4631      	mov	r1, r6
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	47b8      	blx	r7
 800ec0e:	3001      	adds	r0, #1
 800ec10:	f43f af45 	beq.w	800ea9e <_printf_float+0xb6>
 800ec14:	f04f 0900 	mov.w	r9, #0
 800ec18:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ec1c:	f104 0a1a 	add.w	sl, r4, #26
 800ec20:	45c8      	cmp	r8, r9
 800ec22:	dc09      	bgt.n	800ec38 <_printf_float+0x250>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	079b      	lsls	r3, r3, #30
 800ec28:	f100 8103 	bmi.w	800ee32 <_printf_float+0x44a>
 800ec2c:	68e0      	ldr	r0, [r4, #12]
 800ec2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec30:	4298      	cmp	r0, r3
 800ec32:	bfb8      	it	lt
 800ec34:	4618      	movlt	r0, r3
 800ec36:	e734      	b.n	800eaa2 <_printf_float+0xba>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	4652      	mov	r2, sl
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	4628      	mov	r0, r5
 800ec40:	47b8      	blx	r7
 800ec42:	3001      	adds	r0, #1
 800ec44:	f43f af2b 	beq.w	800ea9e <_printf_float+0xb6>
 800ec48:	f109 0901 	add.w	r9, r9, #1
 800ec4c:	e7e8      	b.n	800ec20 <_printf_float+0x238>
 800ec4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dc39      	bgt.n	800ecc8 <_printf_float+0x2e0>
 800ec54:	4a1b      	ldr	r2, [pc, #108]	@ (800ecc4 <_printf_float+0x2dc>)
 800ec56:	2301      	movs	r3, #1
 800ec58:	4631      	mov	r1, r6
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b8      	blx	r7
 800ec5e:	3001      	adds	r0, #1
 800ec60:	f43f af1d 	beq.w	800ea9e <_printf_float+0xb6>
 800ec64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec68:	ea59 0303 	orrs.w	r3, r9, r3
 800ec6c:	d102      	bne.n	800ec74 <_printf_float+0x28c>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	07d9      	lsls	r1, r3, #31
 800ec72:	d5d7      	bpl.n	800ec24 <_printf_float+0x23c>
 800ec74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	47b8      	blx	r7
 800ec7e:	3001      	adds	r0, #1
 800ec80:	f43f af0d 	beq.w	800ea9e <_printf_float+0xb6>
 800ec84:	f04f 0a00 	mov.w	sl, #0
 800ec88:	f104 0b1a 	add.w	fp, r4, #26
 800ec8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec8e:	425b      	negs	r3, r3
 800ec90:	4553      	cmp	r3, sl
 800ec92:	dc01      	bgt.n	800ec98 <_printf_float+0x2b0>
 800ec94:	464b      	mov	r3, r9
 800ec96:	e793      	b.n	800ebc0 <_printf_float+0x1d8>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	465a      	mov	r2, fp
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4628      	mov	r0, r5
 800eca0:	47b8      	blx	r7
 800eca2:	3001      	adds	r0, #1
 800eca4:	f43f aefb 	beq.w	800ea9e <_printf_float+0xb6>
 800eca8:	f10a 0a01 	add.w	sl, sl, #1
 800ecac:	e7ee      	b.n	800ec8c <_printf_float+0x2a4>
 800ecae:	bf00      	nop
 800ecb0:	7fefffff 	.word	0x7fefffff
 800ecb4:	08012608 	.word	0x08012608
 800ecb8:	08012604 	.word	0x08012604
 800ecbc:	08012610 	.word	0x08012610
 800ecc0:	0801260c 	.word	0x0801260c
 800ecc4:	08012614 	.word	0x08012614
 800ecc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecce:	4553      	cmp	r3, sl
 800ecd0:	bfa8      	it	ge
 800ecd2:	4653      	movge	r3, sl
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	4699      	mov	r9, r3
 800ecd8:	dc36      	bgt.n	800ed48 <_printf_float+0x360>
 800ecda:	f04f 0b00 	mov.w	fp, #0
 800ecde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ece2:	f104 021a 	add.w	r2, r4, #26
 800ece6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ece8:	9306      	str	r3, [sp, #24]
 800ecea:	eba3 0309 	sub.w	r3, r3, r9
 800ecee:	455b      	cmp	r3, fp
 800ecf0:	dc31      	bgt.n	800ed56 <_printf_float+0x36e>
 800ecf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf4:	459a      	cmp	sl, r3
 800ecf6:	dc3a      	bgt.n	800ed6e <_printf_float+0x386>
 800ecf8:	6823      	ldr	r3, [r4, #0]
 800ecfa:	07da      	lsls	r2, r3, #31
 800ecfc:	d437      	bmi.n	800ed6e <_printf_float+0x386>
 800ecfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed00:	ebaa 0903 	sub.w	r9, sl, r3
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	ebaa 0303 	sub.w	r3, sl, r3
 800ed0a:	4599      	cmp	r9, r3
 800ed0c:	bfa8      	it	ge
 800ed0e:	4699      	movge	r9, r3
 800ed10:	f1b9 0f00 	cmp.w	r9, #0
 800ed14:	dc33      	bgt.n	800ed7e <_printf_float+0x396>
 800ed16:	f04f 0800 	mov.w	r8, #0
 800ed1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed1e:	f104 0b1a 	add.w	fp, r4, #26
 800ed22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed24:	ebaa 0303 	sub.w	r3, sl, r3
 800ed28:	eba3 0309 	sub.w	r3, r3, r9
 800ed2c:	4543      	cmp	r3, r8
 800ed2e:	f77f af79 	ble.w	800ec24 <_printf_float+0x23c>
 800ed32:	2301      	movs	r3, #1
 800ed34:	465a      	mov	r2, fp
 800ed36:	4631      	mov	r1, r6
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f aeae 	beq.w	800ea9e <_printf_float+0xb6>
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	e7ec      	b.n	800ed22 <_printf_float+0x33a>
 800ed48:	4642      	mov	r2, r8
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	47b8      	blx	r7
 800ed50:	3001      	adds	r0, #1
 800ed52:	d1c2      	bne.n	800ecda <_printf_float+0x2f2>
 800ed54:	e6a3      	b.n	800ea9e <_printf_float+0xb6>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4631      	mov	r1, r6
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	9206      	str	r2, [sp, #24]
 800ed5e:	47b8      	blx	r7
 800ed60:	3001      	adds	r0, #1
 800ed62:	f43f ae9c 	beq.w	800ea9e <_printf_float+0xb6>
 800ed66:	9a06      	ldr	r2, [sp, #24]
 800ed68:	f10b 0b01 	add.w	fp, fp, #1
 800ed6c:	e7bb      	b.n	800ece6 <_printf_float+0x2fe>
 800ed6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed72:	4631      	mov	r1, r6
 800ed74:	4628      	mov	r0, r5
 800ed76:	47b8      	blx	r7
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d1c0      	bne.n	800ecfe <_printf_float+0x316>
 800ed7c:	e68f      	b.n	800ea9e <_printf_float+0xb6>
 800ed7e:	9a06      	ldr	r2, [sp, #24]
 800ed80:	464b      	mov	r3, r9
 800ed82:	4442      	add	r2, r8
 800ed84:	4631      	mov	r1, r6
 800ed86:	4628      	mov	r0, r5
 800ed88:	47b8      	blx	r7
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	d1c3      	bne.n	800ed16 <_printf_float+0x32e>
 800ed8e:	e686      	b.n	800ea9e <_printf_float+0xb6>
 800ed90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed94:	f1ba 0f01 	cmp.w	sl, #1
 800ed98:	dc01      	bgt.n	800ed9e <_printf_float+0x3b6>
 800ed9a:	07db      	lsls	r3, r3, #31
 800ed9c:	d536      	bpl.n	800ee0c <_printf_float+0x424>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4642      	mov	r2, r8
 800eda2:	4631      	mov	r1, r6
 800eda4:	4628      	mov	r0, r5
 800eda6:	47b8      	blx	r7
 800eda8:	3001      	adds	r0, #1
 800edaa:	f43f ae78 	beq.w	800ea9e <_printf_float+0xb6>
 800edae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edb2:	4631      	mov	r1, r6
 800edb4:	4628      	mov	r0, r5
 800edb6:	47b8      	blx	r7
 800edb8:	3001      	adds	r0, #1
 800edba:	f43f ae70 	beq.w	800ea9e <_printf_float+0xb6>
 800edbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edc2:	2200      	movs	r2, #0
 800edc4:	2300      	movs	r3, #0
 800edc6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800edca:	f7f1 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800edce:	b9c0      	cbnz	r0, 800ee02 <_printf_float+0x41a>
 800edd0:	4653      	mov	r3, sl
 800edd2:	f108 0201 	add.w	r2, r8, #1
 800edd6:	4631      	mov	r1, r6
 800edd8:	4628      	mov	r0, r5
 800edda:	47b8      	blx	r7
 800eddc:	3001      	adds	r0, #1
 800edde:	d10c      	bne.n	800edfa <_printf_float+0x412>
 800ede0:	e65d      	b.n	800ea9e <_printf_float+0xb6>
 800ede2:	2301      	movs	r3, #1
 800ede4:	465a      	mov	r2, fp
 800ede6:	4631      	mov	r1, r6
 800ede8:	4628      	mov	r0, r5
 800edea:	47b8      	blx	r7
 800edec:	3001      	adds	r0, #1
 800edee:	f43f ae56 	beq.w	800ea9e <_printf_float+0xb6>
 800edf2:	f108 0801 	add.w	r8, r8, #1
 800edf6:	45d0      	cmp	r8, sl
 800edf8:	dbf3      	blt.n	800ede2 <_printf_float+0x3fa>
 800edfa:	464b      	mov	r3, r9
 800edfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ee00:	e6df      	b.n	800ebc2 <_printf_float+0x1da>
 800ee02:	f04f 0800 	mov.w	r8, #0
 800ee06:	f104 0b1a 	add.w	fp, r4, #26
 800ee0a:	e7f4      	b.n	800edf6 <_printf_float+0x40e>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	4642      	mov	r2, r8
 800ee10:	e7e1      	b.n	800edd6 <_printf_float+0x3ee>
 800ee12:	2301      	movs	r3, #1
 800ee14:	464a      	mov	r2, r9
 800ee16:	4631      	mov	r1, r6
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b8      	blx	r7
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f43f ae3e 	beq.w	800ea9e <_printf_float+0xb6>
 800ee22:	f108 0801 	add.w	r8, r8, #1
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee2a:	1a5b      	subs	r3, r3, r1
 800ee2c:	4543      	cmp	r3, r8
 800ee2e:	dcf0      	bgt.n	800ee12 <_printf_float+0x42a>
 800ee30:	e6fc      	b.n	800ec2c <_printf_float+0x244>
 800ee32:	f04f 0800 	mov.w	r8, #0
 800ee36:	f104 0919 	add.w	r9, r4, #25
 800ee3a:	e7f4      	b.n	800ee26 <_printf_float+0x43e>

0800ee3c <_printf_common>:
 800ee3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	4616      	mov	r6, r2
 800ee42:	4698      	mov	r8, r3
 800ee44:	688a      	ldr	r2, [r1, #8]
 800ee46:	690b      	ldr	r3, [r1, #16]
 800ee48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	bfb8      	it	lt
 800ee50:	4613      	movlt	r3, r2
 800ee52:	6033      	str	r3, [r6, #0]
 800ee54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee58:	4607      	mov	r7, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	b10a      	cbz	r2, 800ee62 <_printf_common+0x26>
 800ee5e:	3301      	adds	r3, #1
 800ee60:	6033      	str	r3, [r6, #0]
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	0699      	lsls	r1, r3, #26
 800ee66:	bf42      	ittt	mi
 800ee68:	6833      	ldrmi	r3, [r6, #0]
 800ee6a:	3302      	addmi	r3, #2
 800ee6c:	6033      	strmi	r3, [r6, #0]
 800ee6e:	6825      	ldr	r5, [r4, #0]
 800ee70:	f015 0506 	ands.w	r5, r5, #6
 800ee74:	d106      	bne.n	800ee84 <_printf_common+0x48>
 800ee76:	f104 0a19 	add.w	sl, r4, #25
 800ee7a:	68e3      	ldr	r3, [r4, #12]
 800ee7c:	6832      	ldr	r2, [r6, #0]
 800ee7e:	1a9b      	subs	r3, r3, r2
 800ee80:	42ab      	cmp	r3, r5
 800ee82:	dc26      	bgt.n	800eed2 <_printf_common+0x96>
 800ee84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee88:	6822      	ldr	r2, [r4, #0]
 800ee8a:	3b00      	subs	r3, #0
 800ee8c:	bf18      	it	ne
 800ee8e:	2301      	movne	r3, #1
 800ee90:	0692      	lsls	r2, r2, #26
 800ee92:	d42b      	bmi.n	800eeec <_printf_common+0xb0>
 800ee94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee98:	4641      	mov	r1, r8
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	47c8      	blx	r9
 800ee9e:	3001      	adds	r0, #1
 800eea0:	d01e      	beq.n	800eee0 <_printf_common+0xa4>
 800eea2:	6823      	ldr	r3, [r4, #0]
 800eea4:	6922      	ldr	r2, [r4, #16]
 800eea6:	f003 0306 	and.w	r3, r3, #6
 800eeaa:	2b04      	cmp	r3, #4
 800eeac:	bf02      	ittt	eq
 800eeae:	68e5      	ldreq	r5, [r4, #12]
 800eeb0:	6833      	ldreq	r3, [r6, #0]
 800eeb2:	1aed      	subeq	r5, r5, r3
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	bf0c      	ite	eq
 800eeb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eebc:	2500      	movne	r5, #0
 800eebe:	4293      	cmp	r3, r2
 800eec0:	bfc4      	itt	gt
 800eec2:	1a9b      	subgt	r3, r3, r2
 800eec4:	18ed      	addgt	r5, r5, r3
 800eec6:	2600      	movs	r6, #0
 800eec8:	341a      	adds	r4, #26
 800eeca:	42b5      	cmp	r5, r6
 800eecc:	d11a      	bne.n	800ef04 <_printf_common+0xc8>
 800eece:	2000      	movs	r0, #0
 800eed0:	e008      	b.n	800eee4 <_printf_common+0xa8>
 800eed2:	2301      	movs	r3, #1
 800eed4:	4652      	mov	r2, sl
 800eed6:	4641      	mov	r1, r8
 800eed8:	4638      	mov	r0, r7
 800eeda:	47c8      	blx	r9
 800eedc:	3001      	adds	r0, #1
 800eede:	d103      	bne.n	800eee8 <_printf_common+0xac>
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee8:	3501      	adds	r5, #1
 800eeea:	e7c6      	b.n	800ee7a <_printf_common+0x3e>
 800eeec:	18e1      	adds	r1, r4, r3
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	2030      	movs	r0, #48	@ 0x30
 800eef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eef6:	4422      	add	r2, r4
 800eef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eefc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef00:	3302      	adds	r3, #2
 800ef02:	e7c7      	b.n	800ee94 <_printf_common+0x58>
 800ef04:	2301      	movs	r3, #1
 800ef06:	4622      	mov	r2, r4
 800ef08:	4641      	mov	r1, r8
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	47c8      	blx	r9
 800ef0e:	3001      	adds	r0, #1
 800ef10:	d0e6      	beq.n	800eee0 <_printf_common+0xa4>
 800ef12:	3601      	adds	r6, #1
 800ef14:	e7d9      	b.n	800eeca <_printf_common+0x8e>
	...

0800ef18 <_printf_i>:
 800ef18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	7e0f      	ldrb	r7, [r1, #24]
 800ef1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef20:	2f78      	cmp	r7, #120	@ 0x78
 800ef22:	4691      	mov	r9, r2
 800ef24:	4680      	mov	r8, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	469a      	mov	sl, r3
 800ef2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef2e:	d807      	bhi.n	800ef40 <_printf_i+0x28>
 800ef30:	2f62      	cmp	r7, #98	@ 0x62
 800ef32:	d80a      	bhi.n	800ef4a <_printf_i+0x32>
 800ef34:	2f00      	cmp	r7, #0
 800ef36:	f000 80d1 	beq.w	800f0dc <_printf_i+0x1c4>
 800ef3a:	2f58      	cmp	r7, #88	@ 0x58
 800ef3c:	f000 80b8 	beq.w	800f0b0 <_printf_i+0x198>
 800ef40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef48:	e03a      	b.n	800efc0 <_printf_i+0xa8>
 800ef4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef4e:	2b15      	cmp	r3, #21
 800ef50:	d8f6      	bhi.n	800ef40 <_printf_i+0x28>
 800ef52:	a101      	add	r1, pc, #4	@ (adr r1, 800ef58 <_printf_i+0x40>)
 800ef54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef58:	0800efb1 	.word	0x0800efb1
 800ef5c:	0800efc5 	.word	0x0800efc5
 800ef60:	0800ef41 	.word	0x0800ef41
 800ef64:	0800ef41 	.word	0x0800ef41
 800ef68:	0800ef41 	.word	0x0800ef41
 800ef6c:	0800ef41 	.word	0x0800ef41
 800ef70:	0800efc5 	.word	0x0800efc5
 800ef74:	0800ef41 	.word	0x0800ef41
 800ef78:	0800ef41 	.word	0x0800ef41
 800ef7c:	0800ef41 	.word	0x0800ef41
 800ef80:	0800ef41 	.word	0x0800ef41
 800ef84:	0800f0c3 	.word	0x0800f0c3
 800ef88:	0800efef 	.word	0x0800efef
 800ef8c:	0800f07d 	.word	0x0800f07d
 800ef90:	0800ef41 	.word	0x0800ef41
 800ef94:	0800ef41 	.word	0x0800ef41
 800ef98:	0800f0e5 	.word	0x0800f0e5
 800ef9c:	0800ef41 	.word	0x0800ef41
 800efa0:	0800efef 	.word	0x0800efef
 800efa4:	0800ef41 	.word	0x0800ef41
 800efa8:	0800ef41 	.word	0x0800ef41
 800efac:	0800f085 	.word	0x0800f085
 800efb0:	6833      	ldr	r3, [r6, #0]
 800efb2:	1d1a      	adds	r2, r3, #4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6032      	str	r2, [r6, #0]
 800efb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efc0:	2301      	movs	r3, #1
 800efc2:	e09c      	b.n	800f0fe <_printf_i+0x1e6>
 800efc4:	6833      	ldr	r3, [r6, #0]
 800efc6:	6820      	ldr	r0, [r4, #0]
 800efc8:	1d19      	adds	r1, r3, #4
 800efca:	6031      	str	r1, [r6, #0]
 800efcc:	0606      	lsls	r6, r0, #24
 800efce:	d501      	bpl.n	800efd4 <_printf_i+0xbc>
 800efd0:	681d      	ldr	r5, [r3, #0]
 800efd2:	e003      	b.n	800efdc <_printf_i+0xc4>
 800efd4:	0645      	lsls	r5, r0, #25
 800efd6:	d5fb      	bpl.n	800efd0 <_printf_i+0xb8>
 800efd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efdc:	2d00      	cmp	r5, #0
 800efde:	da03      	bge.n	800efe8 <_printf_i+0xd0>
 800efe0:	232d      	movs	r3, #45	@ 0x2d
 800efe2:	426d      	negs	r5, r5
 800efe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efe8:	4858      	ldr	r0, [pc, #352]	@ (800f14c <_printf_i+0x234>)
 800efea:	230a      	movs	r3, #10
 800efec:	e011      	b.n	800f012 <_printf_i+0xfa>
 800efee:	6821      	ldr	r1, [r4, #0]
 800eff0:	6833      	ldr	r3, [r6, #0]
 800eff2:	0608      	lsls	r0, r1, #24
 800eff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800eff8:	d402      	bmi.n	800f000 <_printf_i+0xe8>
 800effa:	0649      	lsls	r1, r1, #25
 800effc:	bf48      	it	mi
 800effe:	b2ad      	uxthmi	r5, r5
 800f000:	2f6f      	cmp	r7, #111	@ 0x6f
 800f002:	4852      	ldr	r0, [pc, #328]	@ (800f14c <_printf_i+0x234>)
 800f004:	6033      	str	r3, [r6, #0]
 800f006:	bf14      	ite	ne
 800f008:	230a      	movne	r3, #10
 800f00a:	2308      	moveq	r3, #8
 800f00c:	2100      	movs	r1, #0
 800f00e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f012:	6866      	ldr	r6, [r4, #4]
 800f014:	60a6      	str	r6, [r4, #8]
 800f016:	2e00      	cmp	r6, #0
 800f018:	db05      	blt.n	800f026 <_printf_i+0x10e>
 800f01a:	6821      	ldr	r1, [r4, #0]
 800f01c:	432e      	orrs	r6, r5
 800f01e:	f021 0104 	bic.w	r1, r1, #4
 800f022:	6021      	str	r1, [r4, #0]
 800f024:	d04b      	beq.n	800f0be <_printf_i+0x1a6>
 800f026:	4616      	mov	r6, r2
 800f028:	fbb5 f1f3 	udiv	r1, r5, r3
 800f02c:	fb03 5711 	mls	r7, r3, r1, r5
 800f030:	5dc7      	ldrb	r7, [r0, r7]
 800f032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f036:	462f      	mov	r7, r5
 800f038:	42bb      	cmp	r3, r7
 800f03a:	460d      	mov	r5, r1
 800f03c:	d9f4      	bls.n	800f028 <_printf_i+0x110>
 800f03e:	2b08      	cmp	r3, #8
 800f040:	d10b      	bne.n	800f05a <_printf_i+0x142>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	07df      	lsls	r7, r3, #31
 800f046:	d508      	bpl.n	800f05a <_printf_i+0x142>
 800f048:	6923      	ldr	r3, [r4, #16]
 800f04a:	6861      	ldr	r1, [r4, #4]
 800f04c:	4299      	cmp	r1, r3
 800f04e:	bfde      	ittt	le
 800f050:	2330      	movle	r3, #48	@ 0x30
 800f052:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f056:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f05a:	1b92      	subs	r2, r2, r6
 800f05c:	6122      	str	r2, [r4, #16]
 800f05e:	f8cd a000 	str.w	sl, [sp]
 800f062:	464b      	mov	r3, r9
 800f064:	aa03      	add	r2, sp, #12
 800f066:	4621      	mov	r1, r4
 800f068:	4640      	mov	r0, r8
 800f06a:	f7ff fee7 	bl	800ee3c <_printf_common>
 800f06e:	3001      	adds	r0, #1
 800f070:	d14a      	bne.n	800f108 <_printf_i+0x1f0>
 800f072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f076:	b004      	add	sp, #16
 800f078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	f043 0320 	orr.w	r3, r3, #32
 800f082:	6023      	str	r3, [r4, #0]
 800f084:	4832      	ldr	r0, [pc, #200]	@ (800f150 <_printf_i+0x238>)
 800f086:	2778      	movs	r7, #120	@ 0x78
 800f088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	6831      	ldr	r1, [r6, #0]
 800f090:	061f      	lsls	r7, r3, #24
 800f092:	f851 5b04 	ldr.w	r5, [r1], #4
 800f096:	d402      	bmi.n	800f09e <_printf_i+0x186>
 800f098:	065f      	lsls	r7, r3, #25
 800f09a:	bf48      	it	mi
 800f09c:	b2ad      	uxthmi	r5, r5
 800f09e:	6031      	str	r1, [r6, #0]
 800f0a0:	07d9      	lsls	r1, r3, #31
 800f0a2:	bf44      	itt	mi
 800f0a4:	f043 0320 	orrmi.w	r3, r3, #32
 800f0a8:	6023      	strmi	r3, [r4, #0]
 800f0aa:	b11d      	cbz	r5, 800f0b4 <_printf_i+0x19c>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	e7ad      	b.n	800f00c <_printf_i+0xf4>
 800f0b0:	4826      	ldr	r0, [pc, #152]	@ (800f14c <_printf_i+0x234>)
 800f0b2:	e7e9      	b.n	800f088 <_printf_i+0x170>
 800f0b4:	6823      	ldr	r3, [r4, #0]
 800f0b6:	f023 0320 	bic.w	r3, r3, #32
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	e7f6      	b.n	800f0ac <_printf_i+0x194>
 800f0be:	4616      	mov	r6, r2
 800f0c0:	e7bd      	b.n	800f03e <_printf_i+0x126>
 800f0c2:	6833      	ldr	r3, [r6, #0]
 800f0c4:	6825      	ldr	r5, [r4, #0]
 800f0c6:	6961      	ldr	r1, [r4, #20]
 800f0c8:	1d18      	adds	r0, r3, #4
 800f0ca:	6030      	str	r0, [r6, #0]
 800f0cc:	062e      	lsls	r6, r5, #24
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	d501      	bpl.n	800f0d6 <_printf_i+0x1be>
 800f0d2:	6019      	str	r1, [r3, #0]
 800f0d4:	e002      	b.n	800f0dc <_printf_i+0x1c4>
 800f0d6:	0668      	lsls	r0, r5, #25
 800f0d8:	d5fb      	bpl.n	800f0d2 <_printf_i+0x1ba>
 800f0da:	8019      	strh	r1, [r3, #0]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	6123      	str	r3, [r4, #16]
 800f0e0:	4616      	mov	r6, r2
 800f0e2:	e7bc      	b.n	800f05e <_printf_i+0x146>
 800f0e4:	6833      	ldr	r3, [r6, #0]
 800f0e6:	1d1a      	adds	r2, r3, #4
 800f0e8:	6032      	str	r2, [r6, #0]
 800f0ea:	681e      	ldr	r6, [r3, #0]
 800f0ec:	6862      	ldr	r2, [r4, #4]
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	f7f1 f86d 	bl	80001d0 <memchr>
 800f0f6:	b108      	cbz	r0, 800f0fc <_printf_i+0x1e4>
 800f0f8:	1b80      	subs	r0, r0, r6
 800f0fa:	6060      	str	r0, [r4, #4]
 800f0fc:	6863      	ldr	r3, [r4, #4]
 800f0fe:	6123      	str	r3, [r4, #16]
 800f100:	2300      	movs	r3, #0
 800f102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f106:	e7aa      	b.n	800f05e <_printf_i+0x146>
 800f108:	6923      	ldr	r3, [r4, #16]
 800f10a:	4632      	mov	r2, r6
 800f10c:	4649      	mov	r1, r9
 800f10e:	4640      	mov	r0, r8
 800f110:	47d0      	blx	sl
 800f112:	3001      	adds	r0, #1
 800f114:	d0ad      	beq.n	800f072 <_printf_i+0x15a>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	079b      	lsls	r3, r3, #30
 800f11a:	d413      	bmi.n	800f144 <_printf_i+0x22c>
 800f11c:	68e0      	ldr	r0, [r4, #12]
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	4298      	cmp	r0, r3
 800f122:	bfb8      	it	lt
 800f124:	4618      	movlt	r0, r3
 800f126:	e7a6      	b.n	800f076 <_printf_i+0x15e>
 800f128:	2301      	movs	r3, #1
 800f12a:	4632      	mov	r2, r6
 800f12c:	4649      	mov	r1, r9
 800f12e:	4640      	mov	r0, r8
 800f130:	47d0      	blx	sl
 800f132:	3001      	adds	r0, #1
 800f134:	d09d      	beq.n	800f072 <_printf_i+0x15a>
 800f136:	3501      	adds	r5, #1
 800f138:	68e3      	ldr	r3, [r4, #12]
 800f13a:	9903      	ldr	r1, [sp, #12]
 800f13c:	1a5b      	subs	r3, r3, r1
 800f13e:	42ab      	cmp	r3, r5
 800f140:	dcf2      	bgt.n	800f128 <_printf_i+0x210>
 800f142:	e7eb      	b.n	800f11c <_printf_i+0x204>
 800f144:	2500      	movs	r5, #0
 800f146:	f104 0619 	add.w	r6, r4, #25
 800f14a:	e7f5      	b.n	800f138 <_printf_i+0x220>
 800f14c:	08012616 	.word	0x08012616
 800f150:	08012627 	.word	0x08012627

0800f154 <std>:
 800f154:	2300      	movs	r3, #0
 800f156:	b510      	push	{r4, lr}
 800f158:	4604      	mov	r4, r0
 800f15a:	e9c0 3300 	strd	r3, r3, [r0]
 800f15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f162:	6083      	str	r3, [r0, #8]
 800f164:	8181      	strh	r1, [r0, #12]
 800f166:	6643      	str	r3, [r0, #100]	@ 0x64
 800f168:	81c2      	strh	r2, [r0, #14]
 800f16a:	6183      	str	r3, [r0, #24]
 800f16c:	4619      	mov	r1, r3
 800f16e:	2208      	movs	r2, #8
 800f170:	305c      	adds	r0, #92	@ 0x5c
 800f172:	f000 f8d1 	bl	800f318 <memset>
 800f176:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <std+0x58>)
 800f178:	6263      	str	r3, [r4, #36]	@ 0x24
 800f17a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b0 <std+0x5c>)
 800f17c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f17e:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <std+0x60>)
 800f180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f182:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b8 <std+0x64>)
 800f184:	6323      	str	r3, [r4, #48]	@ 0x30
 800f186:	4b0d      	ldr	r3, [pc, #52]	@ (800f1bc <std+0x68>)
 800f188:	6224      	str	r4, [r4, #32]
 800f18a:	429c      	cmp	r4, r3
 800f18c:	d006      	beq.n	800f19c <std+0x48>
 800f18e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f192:	4294      	cmp	r4, r2
 800f194:	d002      	beq.n	800f19c <std+0x48>
 800f196:	33d0      	adds	r3, #208	@ 0xd0
 800f198:	429c      	cmp	r4, r3
 800f19a:	d105      	bne.n	800f1a8 <std+0x54>
 800f19c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a4:	f000 b8ea 	b.w	800f37c <__retarget_lock_init_recursive>
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop
 800f1ac:	08010e15 	.word	0x08010e15
 800f1b0:	08010e37 	.word	0x08010e37
 800f1b4:	08010e6f 	.word	0x08010e6f
 800f1b8:	08010e93 	.word	0x08010e93
 800f1bc:	200059e8 	.word	0x200059e8

0800f1c0 <stdio_exit_handler>:
 800f1c0:	4a02      	ldr	r2, [pc, #8]	@ (800f1cc <stdio_exit_handler+0xc>)
 800f1c2:	4903      	ldr	r1, [pc, #12]	@ (800f1d0 <stdio_exit_handler+0x10>)
 800f1c4:	4803      	ldr	r0, [pc, #12]	@ (800f1d4 <stdio_exit_handler+0x14>)
 800f1c6:	f000 b889 	b.w	800f2dc <_fwalk_sglue>
 800f1ca:	bf00      	nop
 800f1cc:	2000006c 	.word	0x2000006c
 800f1d0:	080106b9 	.word	0x080106b9
 800f1d4:	2000007c 	.word	0x2000007c

0800f1d8 <cleanup_stdio>:
 800f1d8:	6841      	ldr	r1, [r0, #4]
 800f1da:	4b0c      	ldr	r3, [pc, #48]	@ (800f20c <cleanup_stdio+0x34>)
 800f1dc:	4299      	cmp	r1, r3
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	d001      	beq.n	800f1e8 <cleanup_stdio+0x10>
 800f1e4:	f001 fa68 	bl	80106b8 <_fflush_r>
 800f1e8:	68a1      	ldr	r1, [r4, #8]
 800f1ea:	4b09      	ldr	r3, [pc, #36]	@ (800f210 <cleanup_stdio+0x38>)
 800f1ec:	4299      	cmp	r1, r3
 800f1ee:	d002      	beq.n	800f1f6 <cleanup_stdio+0x1e>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f001 fa61 	bl	80106b8 <_fflush_r>
 800f1f6:	68e1      	ldr	r1, [r4, #12]
 800f1f8:	4b06      	ldr	r3, [pc, #24]	@ (800f214 <cleanup_stdio+0x3c>)
 800f1fa:	4299      	cmp	r1, r3
 800f1fc:	d004      	beq.n	800f208 <cleanup_stdio+0x30>
 800f1fe:	4620      	mov	r0, r4
 800f200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f204:	f001 ba58 	b.w	80106b8 <_fflush_r>
 800f208:	bd10      	pop	{r4, pc}
 800f20a:	bf00      	nop
 800f20c:	200059e8 	.word	0x200059e8
 800f210:	20005a50 	.word	0x20005a50
 800f214:	20005ab8 	.word	0x20005ab8

0800f218 <global_stdio_init.part.0>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	4b0b      	ldr	r3, [pc, #44]	@ (800f248 <global_stdio_init.part.0+0x30>)
 800f21c:	4c0b      	ldr	r4, [pc, #44]	@ (800f24c <global_stdio_init.part.0+0x34>)
 800f21e:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <global_stdio_init.part.0+0x38>)
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	4620      	mov	r0, r4
 800f224:	2200      	movs	r2, #0
 800f226:	2104      	movs	r1, #4
 800f228:	f7ff ff94 	bl	800f154 <std>
 800f22c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f230:	2201      	movs	r2, #1
 800f232:	2109      	movs	r1, #9
 800f234:	f7ff ff8e 	bl	800f154 <std>
 800f238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f23c:	2202      	movs	r2, #2
 800f23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f242:	2112      	movs	r1, #18
 800f244:	f7ff bf86 	b.w	800f154 <std>
 800f248:	20005b20 	.word	0x20005b20
 800f24c:	200059e8 	.word	0x200059e8
 800f250:	0800f1c1 	.word	0x0800f1c1

0800f254 <__sfp_lock_acquire>:
 800f254:	4801      	ldr	r0, [pc, #4]	@ (800f25c <__sfp_lock_acquire+0x8>)
 800f256:	f000 b892 	b.w	800f37e <__retarget_lock_acquire_recursive>
 800f25a:	bf00      	nop
 800f25c:	20005b25 	.word	0x20005b25

0800f260 <__sfp_lock_release>:
 800f260:	4801      	ldr	r0, [pc, #4]	@ (800f268 <__sfp_lock_release+0x8>)
 800f262:	f000 b88d 	b.w	800f380 <__retarget_lock_release_recursive>
 800f266:	bf00      	nop
 800f268:	20005b25 	.word	0x20005b25

0800f26c <__sinit>:
 800f26c:	b510      	push	{r4, lr}
 800f26e:	4604      	mov	r4, r0
 800f270:	f7ff fff0 	bl	800f254 <__sfp_lock_acquire>
 800f274:	6a23      	ldr	r3, [r4, #32]
 800f276:	b11b      	cbz	r3, 800f280 <__sinit+0x14>
 800f278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f27c:	f7ff bff0 	b.w	800f260 <__sfp_lock_release>
 800f280:	4b04      	ldr	r3, [pc, #16]	@ (800f294 <__sinit+0x28>)
 800f282:	6223      	str	r3, [r4, #32]
 800f284:	4b04      	ldr	r3, [pc, #16]	@ (800f298 <__sinit+0x2c>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f5      	bne.n	800f278 <__sinit+0xc>
 800f28c:	f7ff ffc4 	bl	800f218 <global_stdio_init.part.0>
 800f290:	e7f2      	b.n	800f278 <__sinit+0xc>
 800f292:	bf00      	nop
 800f294:	0800f1d9 	.word	0x0800f1d9
 800f298:	20005b20 	.word	0x20005b20

0800f29c <_vsiprintf_r>:
 800f29c:	b510      	push	{r4, lr}
 800f29e:	b09a      	sub	sp, #104	@ 0x68
 800f2a0:	2400      	movs	r4, #0
 800f2a2:	9100      	str	r1, [sp, #0]
 800f2a4:	9104      	str	r1, [sp, #16]
 800f2a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f2aa:	9105      	str	r1, [sp, #20]
 800f2ac:	9102      	str	r1, [sp, #8]
 800f2ae:	4905      	ldr	r1, [pc, #20]	@ (800f2c4 <_vsiprintf_r+0x28>)
 800f2b0:	9103      	str	r1, [sp, #12]
 800f2b2:	4669      	mov	r1, sp
 800f2b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800f2b6:	f000 ffd5 	bl	8010264 <_svfiprintf_r>
 800f2ba:	9b00      	ldr	r3, [sp, #0]
 800f2bc:	701c      	strb	r4, [r3, #0]
 800f2be:	b01a      	add	sp, #104	@ 0x68
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	bf00      	nop
 800f2c4:	ffff0208 	.word	0xffff0208

0800f2c8 <vsiprintf>:
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	460a      	mov	r2, r1
 800f2cc:	4601      	mov	r1, r0
 800f2ce:	4802      	ldr	r0, [pc, #8]	@ (800f2d8 <vsiprintf+0x10>)
 800f2d0:	6800      	ldr	r0, [r0, #0]
 800f2d2:	f7ff bfe3 	b.w	800f29c <_vsiprintf_r>
 800f2d6:	bf00      	nop
 800f2d8:	20000078 	.word	0x20000078

0800f2dc <_fwalk_sglue>:
 800f2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	4688      	mov	r8, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	2600      	movs	r6, #0
 800f2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800f2f0:	d505      	bpl.n	800f2fe <_fwalk_sglue+0x22>
 800f2f2:	6824      	ldr	r4, [r4, #0]
 800f2f4:	2c00      	cmp	r4, #0
 800f2f6:	d1f7      	bne.n	800f2e8 <_fwalk_sglue+0xc>
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d907      	bls.n	800f314 <_fwalk_sglue+0x38>
 800f304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f308:	3301      	adds	r3, #1
 800f30a:	d003      	beq.n	800f314 <_fwalk_sglue+0x38>
 800f30c:	4629      	mov	r1, r5
 800f30e:	4638      	mov	r0, r7
 800f310:	47c0      	blx	r8
 800f312:	4306      	orrs	r6, r0
 800f314:	3568      	adds	r5, #104	@ 0x68
 800f316:	e7e9      	b.n	800f2ec <_fwalk_sglue+0x10>

0800f318 <memset>:
 800f318:	4402      	add	r2, r0
 800f31a:	4603      	mov	r3, r0
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d100      	bne.n	800f322 <memset+0xa>
 800f320:	4770      	bx	lr
 800f322:	f803 1b01 	strb.w	r1, [r3], #1
 800f326:	e7f9      	b.n	800f31c <memset+0x4>

0800f328 <__errno>:
 800f328:	4b01      	ldr	r3, [pc, #4]	@ (800f330 <__errno+0x8>)
 800f32a:	6818      	ldr	r0, [r3, #0]
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	20000078 	.word	0x20000078

0800f334 <__libc_init_array>:
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	4d0d      	ldr	r5, [pc, #52]	@ (800f36c <__libc_init_array+0x38>)
 800f338:	4c0d      	ldr	r4, [pc, #52]	@ (800f370 <__libc_init_array+0x3c>)
 800f33a:	1b64      	subs	r4, r4, r5
 800f33c:	10a4      	asrs	r4, r4, #2
 800f33e:	2600      	movs	r6, #0
 800f340:	42a6      	cmp	r6, r4
 800f342:	d109      	bne.n	800f358 <__libc_init_array+0x24>
 800f344:	4d0b      	ldr	r5, [pc, #44]	@ (800f374 <__libc_init_array+0x40>)
 800f346:	4c0c      	ldr	r4, [pc, #48]	@ (800f378 <__libc_init_array+0x44>)
 800f348:	f002 ffc0 	bl	80122cc <_init>
 800f34c:	1b64      	subs	r4, r4, r5
 800f34e:	10a4      	asrs	r4, r4, #2
 800f350:	2600      	movs	r6, #0
 800f352:	42a6      	cmp	r6, r4
 800f354:	d105      	bne.n	800f362 <__libc_init_array+0x2e>
 800f356:	bd70      	pop	{r4, r5, r6, pc}
 800f358:	f855 3b04 	ldr.w	r3, [r5], #4
 800f35c:	4798      	blx	r3
 800f35e:	3601      	adds	r6, #1
 800f360:	e7ee      	b.n	800f340 <__libc_init_array+0xc>
 800f362:	f855 3b04 	ldr.w	r3, [r5], #4
 800f366:	4798      	blx	r3
 800f368:	3601      	adds	r6, #1
 800f36a:	e7f2      	b.n	800f352 <__libc_init_array+0x1e>
 800f36c:	08012d74 	.word	0x08012d74
 800f370:	08012d74 	.word	0x08012d74
 800f374:	08012d74 	.word	0x08012d74
 800f378:	08012d78 	.word	0x08012d78

0800f37c <__retarget_lock_init_recursive>:
 800f37c:	4770      	bx	lr

0800f37e <__retarget_lock_acquire_recursive>:
 800f37e:	4770      	bx	lr

0800f380 <__retarget_lock_release_recursive>:
 800f380:	4770      	bx	lr
	...

0800f384 <_localeconv_r>:
 800f384:	4800      	ldr	r0, [pc, #0]	@ (800f388 <_localeconv_r+0x4>)
 800f386:	4770      	bx	lr
 800f388:	200001b8 	.word	0x200001b8

0800f38c <_reclaim_reent>:
 800f38c:	4b2d      	ldr	r3, [pc, #180]	@ (800f444 <_reclaim_reent+0xb8>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4283      	cmp	r3, r0
 800f392:	b570      	push	{r4, r5, r6, lr}
 800f394:	4604      	mov	r4, r0
 800f396:	d053      	beq.n	800f440 <_reclaim_reent+0xb4>
 800f398:	69c3      	ldr	r3, [r0, #28]
 800f39a:	b31b      	cbz	r3, 800f3e4 <_reclaim_reent+0x58>
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	b163      	cbz	r3, 800f3ba <_reclaim_reent+0x2e>
 800f3a0:	2500      	movs	r5, #0
 800f3a2:	69e3      	ldr	r3, [r4, #28]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	5959      	ldr	r1, [r3, r5]
 800f3a8:	b9b1      	cbnz	r1, 800f3d8 <_reclaim_reent+0x4c>
 800f3aa:	3504      	adds	r5, #4
 800f3ac:	2d80      	cmp	r5, #128	@ 0x80
 800f3ae:	d1f8      	bne.n	800f3a2 <_reclaim_reent+0x16>
 800f3b0:	69e3      	ldr	r3, [r4, #28]
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	68d9      	ldr	r1, [r3, #12]
 800f3b6:	f000 feaf 	bl	8010118 <_free_r>
 800f3ba:	69e3      	ldr	r3, [r4, #28]
 800f3bc:	6819      	ldr	r1, [r3, #0]
 800f3be:	b111      	cbz	r1, 800f3c6 <_reclaim_reent+0x3a>
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fea9 	bl	8010118 <_free_r>
 800f3c6:	69e3      	ldr	r3, [r4, #28]
 800f3c8:	689d      	ldr	r5, [r3, #8]
 800f3ca:	b15d      	cbz	r5, 800f3e4 <_reclaim_reent+0x58>
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	682d      	ldr	r5, [r5, #0]
 800f3d2:	f000 fea1 	bl	8010118 <_free_r>
 800f3d6:	e7f8      	b.n	800f3ca <_reclaim_reent+0x3e>
 800f3d8:	680e      	ldr	r6, [r1, #0]
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 fe9c 	bl	8010118 <_free_r>
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	e7e1      	b.n	800f3a8 <_reclaim_reent+0x1c>
 800f3e4:	6961      	ldr	r1, [r4, #20]
 800f3e6:	b111      	cbz	r1, 800f3ee <_reclaim_reent+0x62>
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 fe95 	bl	8010118 <_free_r>
 800f3ee:	69e1      	ldr	r1, [r4, #28]
 800f3f0:	b111      	cbz	r1, 800f3f8 <_reclaim_reent+0x6c>
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 fe90 	bl	8010118 <_free_r>
 800f3f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f3fa:	b111      	cbz	r1, 800f402 <_reclaim_reent+0x76>
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f000 fe8b 	bl	8010118 <_free_r>
 800f402:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f404:	b111      	cbz	r1, 800f40c <_reclaim_reent+0x80>
 800f406:	4620      	mov	r0, r4
 800f408:	f000 fe86 	bl	8010118 <_free_r>
 800f40c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f40e:	b111      	cbz	r1, 800f416 <_reclaim_reent+0x8a>
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fe81 	bl	8010118 <_free_r>
 800f416:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f418:	b111      	cbz	r1, 800f420 <_reclaim_reent+0x94>
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 fe7c 	bl	8010118 <_free_r>
 800f420:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f422:	b111      	cbz	r1, 800f42a <_reclaim_reent+0x9e>
 800f424:	4620      	mov	r0, r4
 800f426:	f000 fe77 	bl	8010118 <_free_r>
 800f42a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f42c:	b111      	cbz	r1, 800f434 <_reclaim_reent+0xa8>
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 fe72 	bl	8010118 <_free_r>
 800f434:	6a23      	ldr	r3, [r4, #32]
 800f436:	b11b      	cbz	r3, 800f440 <_reclaim_reent+0xb4>
 800f438:	4620      	mov	r0, r4
 800f43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f43e:	4718      	bx	r3
 800f440:	bd70      	pop	{r4, r5, r6, pc}
 800f442:	bf00      	nop
 800f444:	20000078 	.word	0x20000078

0800f448 <memcpy>:
 800f448:	440a      	add	r2, r1
 800f44a:	4291      	cmp	r1, r2
 800f44c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f450:	d100      	bne.n	800f454 <memcpy+0xc>
 800f452:	4770      	bx	lr
 800f454:	b510      	push	{r4, lr}
 800f456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f45a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f45e:	4291      	cmp	r1, r2
 800f460:	d1f9      	bne.n	800f456 <memcpy+0xe>
 800f462:	bd10      	pop	{r4, pc}

0800f464 <quorem>:
 800f464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f468:	6903      	ldr	r3, [r0, #16]
 800f46a:	690c      	ldr	r4, [r1, #16]
 800f46c:	42a3      	cmp	r3, r4
 800f46e:	4607      	mov	r7, r0
 800f470:	db7e      	blt.n	800f570 <quorem+0x10c>
 800f472:	3c01      	subs	r4, #1
 800f474:	f101 0814 	add.w	r8, r1, #20
 800f478:	00a3      	lsls	r3, r4, #2
 800f47a:	f100 0514 	add.w	r5, r0, #20
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f48a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f48e:	3301      	adds	r3, #1
 800f490:	429a      	cmp	r2, r3
 800f492:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f496:	fbb2 f6f3 	udiv	r6, r2, r3
 800f49a:	d32e      	bcc.n	800f4fa <quorem+0x96>
 800f49c:	f04f 0a00 	mov.w	sl, #0
 800f4a0:	46c4      	mov	ip, r8
 800f4a2:	46ae      	mov	lr, r5
 800f4a4:	46d3      	mov	fp, sl
 800f4a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4aa:	b298      	uxth	r0, r3
 800f4ac:	fb06 a000 	mla	r0, r6, r0, sl
 800f4b0:	0c02      	lsrs	r2, r0, #16
 800f4b2:	0c1b      	lsrs	r3, r3, #16
 800f4b4:	fb06 2303 	mla	r3, r6, r3, r2
 800f4b8:	f8de 2000 	ldr.w	r2, [lr]
 800f4bc:	b280      	uxth	r0, r0
 800f4be:	b292      	uxth	r2, r2
 800f4c0:	1a12      	subs	r2, r2, r0
 800f4c2:	445a      	add	r2, fp
 800f4c4:	f8de 0000 	ldr.w	r0, [lr]
 800f4c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f4d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f4d6:	b292      	uxth	r2, r2
 800f4d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f4dc:	45e1      	cmp	r9, ip
 800f4de:	f84e 2b04 	str.w	r2, [lr], #4
 800f4e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f4e6:	d2de      	bcs.n	800f4a6 <quorem+0x42>
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	58eb      	ldr	r3, [r5, r3]
 800f4ec:	b92b      	cbnz	r3, 800f4fa <quorem+0x96>
 800f4ee:	9b01      	ldr	r3, [sp, #4]
 800f4f0:	3b04      	subs	r3, #4
 800f4f2:	429d      	cmp	r5, r3
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	d32f      	bcc.n	800f558 <quorem+0xf4>
 800f4f8:	613c      	str	r4, [r7, #16]
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	f001 fb82 	bl	8010c04 <__mcmp>
 800f500:	2800      	cmp	r0, #0
 800f502:	db25      	blt.n	800f550 <quorem+0xec>
 800f504:	4629      	mov	r1, r5
 800f506:	2000      	movs	r0, #0
 800f508:	f858 2b04 	ldr.w	r2, [r8], #4
 800f50c:	f8d1 c000 	ldr.w	ip, [r1]
 800f510:	fa1f fe82 	uxth.w	lr, r2
 800f514:	fa1f f38c 	uxth.w	r3, ip
 800f518:	eba3 030e 	sub.w	r3, r3, lr
 800f51c:	4403      	add	r3, r0
 800f51e:	0c12      	lsrs	r2, r2, #16
 800f520:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f524:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f528:	b29b      	uxth	r3, r3
 800f52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f52e:	45c1      	cmp	r9, r8
 800f530:	f841 3b04 	str.w	r3, [r1], #4
 800f534:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f538:	d2e6      	bcs.n	800f508 <quorem+0xa4>
 800f53a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f542:	b922      	cbnz	r2, 800f54e <quorem+0xea>
 800f544:	3b04      	subs	r3, #4
 800f546:	429d      	cmp	r5, r3
 800f548:	461a      	mov	r2, r3
 800f54a:	d30b      	bcc.n	800f564 <quorem+0x100>
 800f54c:	613c      	str	r4, [r7, #16]
 800f54e:	3601      	adds	r6, #1
 800f550:	4630      	mov	r0, r6
 800f552:	b003      	add	sp, #12
 800f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	3b04      	subs	r3, #4
 800f55c:	2a00      	cmp	r2, #0
 800f55e:	d1cb      	bne.n	800f4f8 <quorem+0x94>
 800f560:	3c01      	subs	r4, #1
 800f562:	e7c6      	b.n	800f4f2 <quorem+0x8e>
 800f564:	6812      	ldr	r2, [r2, #0]
 800f566:	3b04      	subs	r3, #4
 800f568:	2a00      	cmp	r2, #0
 800f56a:	d1ef      	bne.n	800f54c <quorem+0xe8>
 800f56c:	3c01      	subs	r4, #1
 800f56e:	e7ea      	b.n	800f546 <quorem+0xe2>
 800f570:	2000      	movs	r0, #0
 800f572:	e7ee      	b.n	800f552 <quorem+0xee>
 800f574:	0000      	movs	r0, r0
	...

0800f578 <_dtoa_r>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	69c7      	ldr	r7, [r0, #28]
 800f57e:	b097      	sub	sp, #92	@ 0x5c
 800f580:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f584:	ec55 4b10 	vmov	r4, r5, d0
 800f588:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f58a:	9107      	str	r1, [sp, #28]
 800f58c:	4681      	mov	r9, r0
 800f58e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f590:	9311      	str	r3, [sp, #68]	@ 0x44
 800f592:	b97f      	cbnz	r7, 800f5b4 <_dtoa_r+0x3c>
 800f594:	2010      	movs	r0, #16
 800f596:	f000 ff61 	bl	801045c <malloc>
 800f59a:	4602      	mov	r2, r0
 800f59c:	f8c9 001c 	str.w	r0, [r9, #28]
 800f5a0:	b920      	cbnz	r0, 800f5ac <_dtoa_r+0x34>
 800f5a2:	4ba9      	ldr	r3, [pc, #676]	@ (800f848 <_dtoa_r+0x2d0>)
 800f5a4:	21ef      	movs	r1, #239	@ 0xef
 800f5a6:	48a9      	ldr	r0, [pc, #676]	@ (800f84c <_dtoa_r+0x2d4>)
 800f5a8:	f001 fd16 	bl	8010fd8 <__assert_func>
 800f5ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f5b0:	6007      	str	r7, [r0, #0]
 800f5b2:	60c7      	str	r7, [r0, #12]
 800f5b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f5b8:	6819      	ldr	r1, [r3, #0]
 800f5ba:	b159      	cbz	r1, 800f5d4 <_dtoa_r+0x5c>
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	604a      	str	r2, [r1, #4]
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	4093      	lsls	r3, r2
 800f5c4:	608b      	str	r3, [r1, #8]
 800f5c6:	4648      	mov	r0, r9
 800f5c8:	f001 f8ea 	bl	80107a0 <_Bfree>
 800f5cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	1e2b      	subs	r3, r5, #0
 800f5d6:	bfb9      	ittee	lt
 800f5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f5dc:	9305      	strlt	r3, [sp, #20]
 800f5de:	2300      	movge	r3, #0
 800f5e0:	6033      	strge	r3, [r6, #0]
 800f5e2:	9f05      	ldr	r7, [sp, #20]
 800f5e4:	4b9a      	ldr	r3, [pc, #616]	@ (800f850 <_dtoa_r+0x2d8>)
 800f5e6:	bfbc      	itt	lt
 800f5e8:	2201      	movlt	r2, #1
 800f5ea:	6032      	strlt	r2, [r6, #0]
 800f5ec:	43bb      	bics	r3, r7
 800f5ee:	d112      	bne.n	800f616 <_dtoa_r+0x9e>
 800f5f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f5f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5fc:	4323      	orrs	r3, r4
 800f5fe:	f000 855a 	beq.w	80100b6 <_dtoa_r+0xb3e>
 800f602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f604:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f864 <_dtoa_r+0x2ec>
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f000 855c 	beq.w	80100c6 <_dtoa_r+0xb4e>
 800f60e:	f10a 0303 	add.w	r3, sl, #3
 800f612:	f000 bd56 	b.w	80100c2 <_dtoa_r+0xb4a>
 800f616:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f61a:	2200      	movs	r2, #0
 800f61c:	ec51 0b17 	vmov	r0, r1, d7
 800f620:	2300      	movs	r3, #0
 800f622:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f626:	f7f1 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f62a:	4680      	mov	r8, r0
 800f62c:	b158      	cbz	r0, 800f646 <_dtoa_r+0xce>
 800f62e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f630:	2301      	movs	r3, #1
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f636:	b113      	cbz	r3, 800f63e <_dtoa_r+0xc6>
 800f638:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f63a:	4b86      	ldr	r3, [pc, #536]	@ (800f854 <_dtoa_r+0x2dc>)
 800f63c:	6013      	str	r3, [r2, #0]
 800f63e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f868 <_dtoa_r+0x2f0>
 800f642:	f000 bd40 	b.w	80100c6 <_dtoa_r+0xb4e>
 800f646:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f64a:	aa14      	add	r2, sp, #80	@ 0x50
 800f64c:	a915      	add	r1, sp, #84	@ 0x54
 800f64e:	4648      	mov	r0, r9
 800f650:	f001 fb88 	bl	8010d64 <__d2b>
 800f654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f658:	9002      	str	r0, [sp, #8]
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d078      	beq.n	800f750 <_dtoa_r+0x1d8>
 800f65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f660:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f66c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f678:	4619      	mov	r1, r3
 800f67a:	2200      	movs	r2, #0
 800f67c:	4b76      	ldr	r3, [pc, #472]	@ (800f858 <_dtoa_r+0x2e0>)
 800f67e:	f7f0 fe03 	bl	8000288 <__aeabi_dsub>
 800f682:	a36b      	add	r3, pc, #428	@ (adr r3, 800f830 <_dtoa_r+0x2b8>)
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	f7f0 ffb6 	bl	80005f8 <__aeabi_dmul>
 800f68c:	a36a      	add	r3, pc, #424	@ (adr r3, 800f838 <_dtoa_r+0x2c0>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f7f0 fdfb 	bl	800028c <__adddf3>
 800f696:	4604      	mov	r4, r0
 800f698:	4630      	mov	r0, r6
 800f69a:	460d      	mov	r5, r1
 800f69c:	f7f0 ff42 	bl	8000524 <__aeabi_i2d>
 800f6a0:	a367      	add	r3, pc, #412	@ (adr r3, 800f840 <_dtoa_r+0x2c8>)
 800f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a6:	f7f0 ffa7 	bl	80005f8 <__aeabi_dmul>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f0 fdeb 	bl	800028c <__adddf3>
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	460d      	mov	r5, r1
 800f6ba:	f7f1 fa4d 	bl	8000b58 <__aeabi_d2iz>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4607      	mov	r7, r0
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f7f1 fa08 	bl	8000adc <__aeabi_dcmplt>
 800f6cc:	b140      	cbz	r0, 800f6e0 <_dtoa_r+0x168>
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f7f0 ff28 	bl	8000524 <__aeabi_i2d>
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	f7f1 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6dc:	b900      	cbnz	r0, 800f6e0 <_dtoa_r+0x168>
 800f6de:	3f01      	subs	r7, #1
 800f6e0:	2f16      	cmp	r7, #22
 800f6e2:	d852      	bhi.n	800f78a <_dtoa_r+0x212>
 800f6e4:	4b5d      	ldr	r3, [pc, #372]	@ (800f85c <_dtoa_r+0x2e4>)
 800f6e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f6f2:	f7f1 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d049      	beq.n	800f78e <_dtoa_r+0x216>
 800f6fa:	3f01      	subs	r7, #1
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800f700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f702:	1b9b      	subs	r3, r3, r6
 800f704:	1e5a      	subs	r2, r3, #1
 800f706:	bf45      	ittet	mi
 800f708:	f1c3 0301 	rsbmi	r3, r3, #1
 800f70c:	9300      	strmi	r3, [sp, #0]
 800f70e:	2300      	movpl	r3, #0
 800f710:	2300      	movmi	r3, #0
 800f712:	9206      	str	r2, [sp, #24]
 800f714:	bf54      	ite	pl
 800f716:	9300      	strpl	r3, [sp, #0]
 800f718:	9306      	strmi	r3, [sp, #24]
 800f71a:	2f00      	cmp	r7, #0
 800f71c:	db39      	blt.n	800f792 <_dtoa_r+0x21a>
 800f71e:	9b06      	ldr	r3, [sp, #24]
 800f720:	970d      	str	r7, [sp, #52]	@ 0x34
 800f722:	443b      	add	r3, r7
 800f724:	9306      	str	r3, [sp, #24]
 800f726:	2300      	movs	r3, #0
 800f728:	9308      	str	r3, [sp, #32]
 800f72a:	9b07      	ldr	r3, [sp, #28]
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d863      	bhi.n	800f7f8 <_dtoa_r+0x280>
 800f730:	2b05      	cmp	r3, #5
 800f732:	bfc4      	itt	gt
 800f734:	3b04      	subgt	r3, #4
 800f736:	9307      	strgt	r3, [sp, #28]
 800f738:	9b07      	ldr	r3, [sp, #28]
 800f73a:	f1a3 0302 	sub.w	r3, r3, #2
 800f73e:	bfcc      	ite	gt
 800f740:	2400      	movgt	r4, #0
 800f742:	2401      	movle	r4, #1
 800f744:	2b03      	cmp	r3, #3
 800f746:	d863      	bhi.n	800f810 <_dtoa_r+0x298>
 800f748:	e8df f003 	tbb	[pc, r3]
 800f74c:	2b375452 	.word	0x2b375452
 800f750:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f754:	441e      	add	r6, r3
 800f756:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f75a:	2b20      	cmp	r3, #32
 800f75c:	bfc1      	itttt	gt
 800f75e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f762:	409f      	lslgt	r7, r3
 800f764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f768:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f76c:	bfd6      	itet	le
 800f76e:	f1c3 0320 	rsble	r3, r3, #32
 800f772:	ea47 0003 	orrgt.w	r0, r7, r3
 800f776:	fa04 f003 	lslle.w	r0, r4, r3
 800f77a:	f7f0 fec3 	bl	8000504 <__aeabi_ui2d>
 800f77e:	2201      	movs	r2, #1
 800f780:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f784:	3e01      	subs	r6, #1
 800f786:	9212      	str	r2, [sp, #72]	@ 0x48
 800f788:	e776      	b.n	800f678 <_dtoa_r+0x100>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e7b7      	b.n	800f6fe <_dtoa_r+0x186>
 800f78e:	9010      	str	r0, [sp, #64]	@ 0x40
 800f790:	e7b6      	b.n	800f700 <_dtoa_r+0x188>
 800f792:	9b00      	ldr	r3, [sp, #0]
 800f794:	1bdb      	subs	r3, r3, r7
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	427b      	negs	r3, r7
 800f79a:	9308      	str	r3, [sp, #32]
 800f79c:	2300      	movs	r3, #0
 800f79e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f7a0:	e7c3      	b.n	800f72a <_dtoa_r+0x1b2>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7a8:	eb07 0b03 	add.w	fp, r7, r3
 800f7ac:	f10b 0301 	add.w	r3, fp, #1
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	9303      	str	r3, [sp, #12]
 800f7b4:	bfb8      	it	lt
 800f7b6:	2301      	movlt	r3, #1
 800f7b8:	e006      	b.n	800f7c8 <_dtoa_r+0x250>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	dd28      	ble.n	800f816 <_dtoa_r+0x29e>
 800f7c4:	469b      	mov	fp, r3
 800f7c6:	9303      	str	r3, [sp, #12]
 800f7c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	2204      	movs	r2, #4
 800f7d0:	f102 0514 	add.w	r5, r2, #20
 800f7d4:	429d      	cmp	r5, r3
 800f7d6:	d926      	bls.n	800f826 <_dtoa_r+0x2ae>
 800f7d8:	6041      	str	r1, [r0, #4]
 800f7da:	4648      	mov	r0, r9
 800f7dc:	f000 ffa0 	bl	8010720 <_Balloc>
 800f7e0:	4682      	mov	sl, r0
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d142      	bne.n	800f86c <_dtoa_r+0x2f4>
 800f7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f860 <_dtoa_r+0x2e8>)
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800f7ee:	e6da      	b.n	800f5a6 <_dtoa_r+0x2e>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	e7e3      	b.n	800f7bc <_dtoa_r+0x244>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	e7d5      	b.n	800f7a4 <_dtoa_r+0x22c>
 800f7f8:	2401      	movs	r4, #1
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	9307      	str	r3, [sp, #28]
 800f7fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800f800:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f804:	2200      	movs	r2, #0
 800f806:	f8cd b00c 	str.w	fp, [sp, #12]
 800f80a:	2312      	movs	r3, #18
 800f80c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f80e:	e7db      	b.n	800f7c8 <_dtoa_r+0x250>
 800f810:	2301      	movs	r3, #1
 800f812:	9309      	str	r3, [sp, #36]	@ 0x24
 800f814:	e7f4      	b.n	800f800 <_dtoa_r+0x288>
 800f816:	f04f 0b01 	mov.w	fp, #1
 800f81a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f81e:	465b      	mov	r3, fp
 800f820:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f824:	e7d0      	b.n	800f7c8 <_dtoa_r+0x250>
 800f826:	3101      	adds	r1, #1
 800f828:	0052      	lsls	r2, r2, #1
 800f82a:	e7d1      	b.n	800f7d0 <_dtoa_r+0x258>
 800f82c:	f3af 8000 	nop.w
 800f830:	636f4361 	.word	0x636f4361
 800f834:	3fd287a7 	.word	0x3fd287a7
 800f838:	8b60c8b3 	.word	0x8b60c8b3
 800f83c:	3fc68a28 	.word	0x3fc68a28
 800f840:	509f79fb 	.word	0x509f79fb
 800f844:	3fd34413 	.word	0x3fd34413
 800f848:	08012645 	.word	0x08012645
 800f84c:	0801265c 	.word	0x0801265c
 800f850:	7ff00000 	.word	0x7ff00000
 800f854:	08012615 	.word	0x08012615
 800f858:	3ff80000 	.word	0x3ff80000
 800f85c:	080127b0 	.word	0x080127b0
 800f860:	080126b4 	.word	0x080126b4
 800f864:	08012641 	.word	0x08012641
 800f868:	08012614 	.word	0x08012614
 800f86c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f870:	6018      	str	r0, [r3, #0]
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	2b0e      	cmp	r3, #14
 800f876:	f200 80a1 	bhi.w	800f9bc <_dtoa_r+0x444>
 800f87a:	2c00      	cmp	r4, #0
 800f87c:	f000 809e 	beq.w	800f9bc <_dtoa_r+0x444>
 800f880:	2f00      	cmp	r7, #0
 800f882:	dd33      	ble.n	800f8ec <_dtoa_r+0x374>
 800f884:	4b9c      	ldr	r3, [pc, #624]	@ (800faf8 <_dtoa_r+0x580>)
 800f886:	f007 020f 	and.w	r2, r7, #15
 800f88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f88e:	ed93 7b00 	vldr	d7, [r3]
 800f892:	05f8      	lsls	r0, r7, #23
 800f894:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f89c:	d516      	bpl.n	800f8cc <_dtoa_r+0x354>
 800f89e:	4b97      	ldr	r3, [pc, #604]	@ (800fafc <_dtoa_r+0x584>)
 800f8a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8a8:	f7f0 ffd0 	bl	800084c <__aeabi_ddiv>
 800f8ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8b0:	f004 040f 	and.w	r4, r4, #15
 800f8b4:	2603      	movs	r6, #3
 800f8b6:	4d91      	ldr	r5, [pc, #580]	@ (800fafc <_dtoa_r+0x584>)
 800f8b8:	b954      	cbnz	r4, 800f8d0 <_dtoa_r+0x358>
 800f8ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8c2:	f7f0 ffc3 	bl	800084c <__aeabi_ddiv>
 800f8c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8ca:	e028      	b.n	800f91e <_dtoa_r+0x3a6>
 800f8cc:	2602      	movs	r6, #2
 800f8ce:	e7f2      	b.n	800f8b6 <_dtoa_r+0x33e>
 800f8d0:	07e1      	lsls	r1, r4, #31
 800f8d2:	d508      	bpl.n	800f8e6 <_dtoa_r+0x36e>
 800f8d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f8d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8dc:	f7f0 fe8c 	bl	80005f8 <__aeabi_dmul>
 800f8e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f8e4:	3601      	adds	r6, #1
 800f8e6:	1064      	asrs	r4, r4, #1
 800f8e8:	3508      	adds	r5, #8
 800f8ea:	e7e5      	b.n	800f8b8 <_dtoa_r+0x340>
 800f8ec:	f000 80af 	beq.w	800fa4e <_dtoa_r+0x4d6>
 800f8f0:	427c      	negs	r4, r7
 800f8f2:	4b81      	ldr	r3, [pc, #516]	@ (800faf8 <_dtoa_r+0x580>)
 800f8f4:	4d81      	ldr	r5, [pc, #516]	@ (800fafc <_dtoa_r+0x584>)
 800f8f6:	f004 020f 	and.w	r2, r4, #15
 800f8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f906:	f7f0 fe77 	bl	80005f8 <__aeabi_dmul>
 800f90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f90e:	1124      	asrs	r4, r4, #4
 800f910:	2300      	movs	r3, #0
 800f912:	2602      	movs	r6, #2
 800f914:	2c00      	cmp	r4, #0
 800f916:	f040 808f 	bne.w	800fa38 <_dtoa_r+0x4c0>
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1d3      	bne.n	800f8c6 <_dtoa_r+0x34e>
 800f91e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f920:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 8094 	beq.w	800fa52 <_dtoa_r+0x4da>
 800f92a:	4b75      	ldr	r3, [pc, #468]	@ (800fb00 <_dtoa_r+0x588>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	4620      	mov	r0, r4
 800f930:	4629      	mov	r1, r5
 800f932:	f7f1 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800f936:	2800      	cmp	r0, #0
 800f938:	f000 808b 	beq.w	800fa52 <_dtoa_r+0x4da>
 800f93c:	9b03      	ldr	r3, [sp, #12]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 8087 	beq.w	800fa52 <_dtoa_r+0x4da>
 800f944:	f1bb 0f00 	cmp.w	fp, #0
 800f948:	dd34      	ble.n	800f9b4 <_dtoa_r+0x43c>
 800f94a:	4620      	mov	r0, r4
 800f94c:	4b6d      	ldr	r3, [pc, #436]	@ (800fb04 <_dtoa_r+0x58c>)
 800f94e:	2200      	movs	r2, #0
 800f950:	4629      	mov	r1, r5
 800f952:	f7f0 fe51 	bl	80005f8 <__aeabi_dmul>
 800f956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f95a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800f95e:	3601      	adds	r6, #1
 800f960:	465c      	mov	r4, fp
 800f962:	4630      	mov	r0, r6
 800f964:	f7f0 fdde 	bl	8000524 <__aeabi_i2d>
 800f968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f96c:	f7f0 fe44 	bl	80005f8 <__aeabi_dmul>
 800f970:	4b65      	ldr	r3, [pc, #404]	@ (800fb08 <_dtoa_r+0x590>)
 800f972:	2200      	movs	r2, #0
 800f974:	f7f0 fc8a 	bl	800028c <__adddf3>
 800f978:	4605      	mov	r5, r0
 800f97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f97e:	2c00      	cmp	r4, #0
 800f980:	d16a      	bne.n	800fa58 <_dtoa_r+0x4e0>
 800f982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f986:	4b61      	ldr	r3, [pc, #388]	@ (800fb0c <_dtoa_r+0x594>)
 800f988:	2200      	movs	r2, #0
 800f98a:	f7f0 fc7d 	bl	8000288 <__aeabi_dsub>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f996:	462a      	mov	r2, r5
 800f998:	4633      	mov	r3, r6
 800f99a:	f7f1 f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	f040 8298 	bne.w	800fed4 <_dtoa_r+0x95c>
 800f9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9a8:	462a      	mov	r2, r5
 800f9aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f9ae:	f7f1 f895 	bl	8000adc <__aeabi_dcmplt>
 800f9b2:	bb38      	cbnz	r0, 800fa04 <_dtoa_r+0x48c>
 800f9b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f9b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f9bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f2c0 8157 	blt.w	800fc72 <_dtoa_r+0x6fa>
 800f9c4:	2f0e      	cmp	r7, #14
 800f9c6:	f300 8154 	bgt.w	800fc72 <_dtoa_r+0x6fa>
 800f9ca:	4b4b      	ldr	r3, [pc, #300]	@ (800faf8 <_dtoa_r+0x580>)
 800f9cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f9d0:	ed93 7b00 	vldr	d7, [r3]
 800f9d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	ed8d 7b00 	vstr	d7, [sp]
 800f9dc:	f280 80e5 	bge.w	800fbaa <_dtoa_r+0x632>
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f300 80e1 	bgt.w	800fbaa <_dtoa_r+0x632>
 800f9e8:	d10c      	bne.n	800fa04 <_dtoa_r+0x48c>
 800f9ea:	4b48      	ldr	r3, [pc, #288]	@ (800fb0c <_dtoa_r+0x594>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	ec51 0b17 	vmov	r0, r1, d7
 800f9f2:	f7f0 fe01 	bl	80005f8 <__aeabi_dmul>
 800f9f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9fa:	f7f1 f883 	bl	8000b04 <__aeabi_dcmpge>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f000 8266 	beq.w	800fed0 <_dtoa_r+0x958>
 800fa04:	2400      	movs	r4, #0
 800fa06:	4625      	mov	r5, r4
 800fa08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa0a:	4656      	mov	r6, sl
 800fa0c:	ea6f 0803 	mvn.w	r8, r3
 800fa10:	2700      	movs	r7, #0
 800fa12:	4621      	mov	r1, r4
 800fa14:	4648      	mov	r0, r9
 800fa16:	f000 fec3 	bl	80107a0 <_Bfree>
 800fa1a:	2d00      	cmp	r5, #0
 800fa1c:	f000 80bd 	beq.w	800fb9a <_dtoa_r+0x622>
 800fa20:	b12f      	cbz	r7, 800fa2e <_dtoa_r+0x4b6>
 800fa22:	42af      	cmp	r7, r5
 800fa24:	d003      	beq.n	800fa2e <_dtoa_r+0x4b6>
 800fa26:	4639      	mov	r1, r7
 800fa28:	4648      	mov	r0, r9
 800fa2a:	f000 feb9 	bl	80107a0 <_Bfree>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4648      	mov	r0, r9
 800fa32:	f000 feb5 	bl	80107a0 <_Bfree>
 800fa36:	e0b0      	b.n	800fb9a <_dtoa_r+0x622>
 800fa38:	07e2      	lsls	r2, r4, #31
 800fa3a:	d505      	bpl.n	800fa48 <_dtoa_r+0x4d0>
 800fa3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa40:	f7f0 fdda 	bl	80005f8 <__aeabi_dmul>
 800fa44:	3601      	adds	r6, #1
 800fa46:	2301      	movs	r3, #1
 800fa48:	1064      	asrs	r4, r4, #1
 800fa4a:	3508      	adds	r5, #8
 800fa4c:	e762      	b.n	800f914 <_dtoa_r+0x39c>
 800fa4e:	2602      	movs	r6, #2
 800fa50:	e765      	b.n	800f91e <_dtoa_r+0x3a6>
 800fa52:	9c03      	ldr	r4, [sp, #12]
 800fa54:	46b8      	mov	r8, r7
 800fa56:	e784      	b.n	800f962 <_dtoa_r+0x3ea>
 800fa58:	4b27      	ldr	r3, [pc, #156]	@ (800faf8 <_dtoa_r+0x580>)
 800fa5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa64:	4454      	add	r4, sl
 800fa66:	2900      	cmp	r1, #0
 800fa68:	d054      	beq.n	800fb14 <_dtoa_r+0x59c>
 800fa6a:	4929      	ldr	r1, [pc, #164]	@ (800fb10 <_dtoa_r+0x598>)
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	f7f0 feed 	bl	800084c <__aeabi_ddiv>
 800fa72:	4633      	mov	r3, r6
 800fa74:	462a      	mov	r2, r5
 800fa76:	f7f0 fc07 	bl	8000288 <__aeabi_dsub>
 800fa7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa7e:	4656      	mov	r6, sl
 800fa80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa84:	f7f1 f868 	bl	8000b58 <__aeabi_d2iz>
 800fa88:	4605      	mov	r5, r0
 800fa8a:	f7f0 fd4b 	bl	8000524 <__aeabi_i2d>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa96:	f7f0 fbf7 	bl	8000288 <__aeabi_dsub>
 800fa9a:	3530      	adds	r5, #48	@ 0x30
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800faa4:	f806 5b01 	strb.w	r5, [r6], #1
 800faa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800faac:	f7f1 f816 	bl	8000adc <__aeabi_dcmplt>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d172      	bne.n	800fb9a <_dtoa_r+0x622>
 800fab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fab8:	4911      	ldr	r1, [pc, #68]	@ (800fb00 <_dtoa_r+0x588>)
 800faba:	2000      	movs	r0, #0
 800fabc:	f7f0 fbe4 	bl	8000288 <__aeabi_dsub>
 800fac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fac4:	f7f1 f80a 	bl	8000adc <__aeabi_dcmplt>
 800fac8:	2800      	cmp	r0, #0
 800faca:	f040 80b4 	bne.w	800fc36 <_dtoa_r+0x6be>
 800face:	42a6      	cmp	r6, r4
 800fad0:	f43f af70 	beq.w	800f9b4 <_dtoa_r+0x43c>
 800fad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fad8:	4b0a      	ldr	r3, [pc, #40]	@ (800fb04 <_dtoa_r+0x58c>)
 800fada:	2200      	movs	r2, #0
 800fadc:	f7f0 fd8c 	bl	80005f8 <__aeabi_dmul>
 800fae0:	4b08      	ldr	r3, [pc, #32]	@ (800fb04 <_dtoa_r+0x58c>)
 800fae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fae6:	2200      	movs	r2, #0
 800fae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800faec:	f7f0 fd84 	bl	80005f8 <__aeabi_dmul>
 800faf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faf4:	e7c4      	b.n	800fa80 <_dtoa_r+0x508>
 800faf6:	bf00      	nop
 800faf8:	080127b0 	.word	0x080127b0
 800fafc:	08012788 	.word	0x08012788
 800fb00:	3ff00000 	.word	0x3ff00000
 800fb04:	40240000 	.word	0x40240000
 800fb08:	401c0000 	.word	0x401c0000
 800fb0c:	40140000 	.word	0x40140000
 800fb10:	3fe00000 	.word	0x3fe00000
 800fb14:	4631      	mov	r1, r6
 800fb16:	4628      	mov	r0, r5
 800fb18:	f7f0 fd6e 	bl	80005f8 <__aeabi_dmul>
 800fb1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fb20:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fb22:	4656      	mov	r6, sl
 800fb24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb28:	f7f1 f816 	bl	8000b58 <__aeabi_d2iz>
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	f7f0 fcf9 	bl	8000524 <__aeabi_i2d>
 800fb32:	4602      	mov	r2, r0
 800fb34:	460b      	mov	r3, r1
 800fb36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb3a:	f7f0 fba5 	bl	8000288 <__aeabi_dsub>
 800fb3e:	3530      	adds	r5, #48	@ 0x30
 800fb40:	f806 5b01 	strb.w	r5, [r6], #1
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	42a6      	cmp	r6, r4
 800fb4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fb4e:	f04f 0200 	mov.w	r2, #0
 800fb52:	d124      	bne.n	800fb9e <_dtoa_r+0x626>
 800fb54:	4baf      	ldr	r3, [pc, #700]	@ (800fe14 <_dtoa_r+0x89c>)
 800fb56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fb5a:	f7f0 fb97 	bl	800028c <__adddf3>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb66:	f7f0 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d163      	bne.n	800fc36 <_dtoa_r+0x6be>
 800fb6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fb72:	49a8      	ldr	r1, [pc, #672]	@ (800fe14 <_dtoa_r+0x89c>)
 800fb74:	2000      	movs	r0, #0
 800fb76:	f7f0 fb87 	bl	8000288 <__aeabi_dsub>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb82:	f7f0 ffab 	bl	8000adc <__aeabi_dcmplt>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	f43f af14 	beq.w	800f9b4 <_dtoa_r+0x43c>
 800fb8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fb8e:	1e73      	subs	r3, r6, #1
 800fb90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb96:	2b30      	cmp	r3, #48	@ 0x30
 800fb98:	d0f8      	beq.n	800fb8c <_dtoa_r+0x614>
 800fb9a:	4647      	mov	r7, r8
 800fb9c:	e03b      	b.n	800fc16 <_dtoa_r+0x69e>
 800fb9e:	4b9e      	ldr	r3, [pc, #632]	@ (800fe18 <_dtoa_r+0x8a0>)
 800fba0:	f7f0 fd2a 	bl	80005f8 <__aeabi_dmul>
 800fba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fba8:	e7bc      	b.n	800fb24 <_dtoa_r+0x5ac>
 800fbaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fbae:	4656      	mov	r6, sl
 800fbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fe48 	bl	800084c <__aeabi_ddiv>
 800fbbc:	f7f0 ffcc 	bl	8000b58 <__aeabi_d2iz>
 800fbc0:	4680      	mov	r8, r0
 800fbc2:	f7f0 fcaf 	bl	8000524 <__aeabi_i2d>
 800fbc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbca:	f7f0 fd15 	bl	80005f8 <__aeabi_dmul>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fbda:	f7f0 fb55 	bl	8000288 <__aeabi_dsub>
 800fbde:	f806 4b01 	strb.w	r4, [r6], #1
 800fbe2:	9d03      	ldr	r5, [sp, #12]
 800fbe4:	eba6 040a 	sub.w	r4, r6, sl
 800fbe8:	42a5      	cmp	r5, r4
 800fbea:	4602      	mov	r2, r0
 800fbec:	460b      	mov	r3, r1
 800fbee:	d133      	bne.n	800fc58 <_dtoa_r+0x6e0>
 800fbf0:	f7f0 fb4c 	bl	800028c <__adddf3>
 800fbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	460d      	mov	r5, r1
 800fbfc:	f7f0 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 800fc00:	b9c0      	cbnz	r0, 800fc34 <_dtoa_r+0x6bc>
 800fc02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc0e:	b110      	cbz	r0, 800fc16 <_dtoa_r+0x69e>
 800fc10:	f018 0f01 	tst.w	r8, #1
 800fc14:	d10e      	bne.n	800fc34 <_dtoa_r+0x6bc>
 800fc16:	9902      	ldr	r1, [sp, #8]
 800fc18:	4648      	mov	r0, r9
 800fc1a:	f000 fdc1 	bl	80107a0 <_Bfree>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	7033      	strb	r3, [r6, #0]
 800fc22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc24:	3701      	adds	r7, #1
 800fc26:	601f      	str	r7, [r3, #0]
 800fc28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 824b 	beq.w	80100c6 <_dtoa_r+0xb4e>
 800fc30:	601e      	str	r6, [r3, #0]
 800fc32:	e248      	b.n	80100c6 <_dtoa_r+0xb4e>
 800fc34:	46b8      	mov	r8, r7
 800fc36:	4633      	mov	r3, r6
 800fc38:	461e      	mov	r6, r3
 800fc3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc3e:	2a39      	cmp	r2, #57	@ 0x39
 800fc40:	d106      	bne.n	800fc50 <_dtoa_r+0x6d8>
 800fc42:	459a      	cmp	sl, r3
 800fc44:	d1f8      	bne.n	800fc38 <_dtoa_r+0x6c0>
 800fc46:	2230      	movs	r2, #48	@ 0x30
 800fc48:	f108 0801 	add.w	r8, r8, #1
 800fc4c:	f88a 2000 	strb.w	r2, [sl]
 800fc50:	781a      	ldrb	r2, [r3, #0]
 800fc52:	3201      	adds	r2, #1
 800fc54:	701a      	strb	r2, [r3, #0]
 800fc56:	e7a0      	b.n	800fb9a <_dtoa_r+0x622>
 800fc58:	4b6f      	ldr	r3, [pc, #444]	@ (800fe18 <_dtoa_r+0x8a0>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f7f0 fccc 	bl	80005f8 <__aeabi_dmul>
 800fc60:	2200      	movs	r2, #0
 800fc62:	2300      	movs	r3, #0
 800fc64:	4604      	mov	r4, r0
 800fc66:	460d      	mov	r5, r1
 800fc68:	f7f0 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d09f      	beq.n	800fbb0 <_dtoa_r+0x638>
 800fc70:	e7d1      	b.n	800fc16 <_dtoa_r+0x69e>
 800fc72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc74:	2a00      	cmp	r2, #0
 800fc76:	f000 80ea 	beq.w	800fe4e <_dtoa_r+0x8d6>
 800fc7a:	9a07      	ldr	r2, [sp, #28]
 800fc7c:	2a01      	cmp	r2, #1
 800fc7e:	f300 80cd 	bgt.w	800fe1c <_dtoa_r+0x8a4>
 800fc82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	f000 80c1 	beq.w	800fe0c <_dtoa_r+0x894>
 800fc8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fc8e:	9c08      	ldr	r4, [sp, #32]
 800fc90:	9e00      	ldr	r6, [sp, #0]
 800fc92:	9a00      	ldr	r2, [sp, #0]
 800fc94:	441a      	add	r2, r3
 800fc96:	9200      	str	r2, [sp, #0]
 800fc98:	9a06      	ldr	r2, [sp, #24]
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	441a      	add	r2, r3
 800fc9e:	4648      	mov	r0, r9
 800fca0:	9206      	str	r2, [sp, #24]
 800fca2:	f000 fe31 	bl	8010908 <__i2b>
 800fca6:	4605      	mov	r5, r0
 800fca8:	b166      	cbz	r6, 800fcc4 <_dtoa_r+0x74c>
 800fcaa:	9b06      	ldr	r3, [sp, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	dd09      	ble.n	800fcc4 <_dtoa_r+0x74c>
 800fcb0:	42b3      	cmp	r3, r6
 800fcb2:	9a00      	ldr	r2, [sp, #0]
 800fcb4:	bfa8      	it	ge
 800fcb6:	4633      	movge	r3, r6
 800fcb8:	1ad2      	subs	r2, r2, r3
 800fcba:	9200      	str	r2, [sp, #0]
 800fcbc:	9a06      	ldr	r2, [sp, #24]
 800fcbe:	1af6      	subs	r6, r6, r3
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	9306      	str	r3, [sp, #24]
 800fcc4:	9b08      	ldr	r3, [sp, #32]
 800fcc6:	b30b      	cbz	r3, 800fd0c <_dtoa_r+0x794>
 800fcc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 80c6 	beq.w	800fe5c <_dtoa_r+0x8e4>
 800fcd0:	2c00      	cmp	r4, #0
 800fcd2:	f000 80c0 	beq.w	800fe56 <_dtoa_r+0x8de>
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4622      	mov	r2, r4
 800fcda:	4648      	mov	r0, r9
 800fcdc:	f000 fecc 	bl	8010a78 <__pow5mult>
 800fce0:	9a02      	ldr	r2, [sp, #8]
 800fce2:	4601      	mov	r1, r0
 800fce4:	4605      	mov	r5, r0
 800fce6:	4648      	mov	r0, r9
 800fce8:	f000 fe24 	bl	8010934 <__multiply>
 800fcec:	9902      	ldr	r1, [sp, #8]
 800fcee:	4680      	mov	r8, r0
 800fcf0:	4648      	mov	r0, r9
 800fcf2:	f000 fd55 	bl	80107a0 <_Bfree>
 800fcf6:	9b08      	ldr	r3, [sp, #32]
 800fcf8:	1b1b      	subs	r3, r3, r4
 800fcfa:	9308      	str	r3, [sp, #32]
 800fcfc:	f000 80b1 	beq.w	800fe62 <_dtoa_r+0x8ea>
 800fd00:	9a08      	ldr	r2, [sp, #32]
 800fd02:	4641      	mov	r1, r8
 800fd04:	4648      	mov	r0, r9
 800fd06:	f000 feb7 	bl	8010a78 <__pow5mult>
 800fd0a:	9002      	str	r0, [sp, #8]
 800fd0c:	2101      	movs	r1, #1
 800fd0e:	4648      	mov	r0, r9
 800fd10:	f000 fdfa 	bl	8010908 <__i2b>
 800fd14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd16:	4604      	mov	r4, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f000 81d8 	beq.w	80100ce <_dtoa_r+0xb56>
 800fd1e:	461a      	mov	r2, r3
 800fd20:	4601      	mov	r1, r0
 800fd22:	4648      	mov	r0, r9
 800fd24:	f000 fea8 	bl	8010a78 <__pow5mult>
 800fd28:	9b07      	ldr	r3, [sp, #28]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	f300 809f 	bgt.w	800fe70 <_dtoa_r+0x8f8>
 800fd32:	9b04      	ldr	r3, [sp, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f040 8097 	bne.w	800fe68 <_dtoa_r+0x8f0>
 800fd3a:	9b05      	ldr	r3, [sp, #20]
 800fd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f040 8093 	bne.w	800fe6c <_dtoa_r+0x8f4>
 800fd46:	9b05      	ldr	r3, [sp, #20]
 800fd48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd4c:	0d1b      	lsrs	r3, r3, #20
 800fd4e:	051b      	lsls	r3, r3, #20
 800fd50:	b133      	cbz	r3, 800fd60 <_dtoa_r+0x7e8>
 800fd52:	9b00      	ldr	r3, [sp, #0]
 800fd54:	3301      	adds	r3, #1
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	9b06      	ldr	r3, [sp, #24]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	9306      	str	r3, [sp, #24]
 800fd5e:	2301      	movs	r3, #1
 800fd60:	9308      	str	r3, [sp, #32]
 800fd62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 81b8 	beq.w	80100da <_dtoa_r+0xb62>
 800fd6a:	6923      	ldr	r3, [r4, #16]
 800fd6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd70:	6918      	ldr	r0, [r3, #16]
 800fd72:	f000 fd7d 	bl	8010870 <__hi0bits>
 800fd76:	f1c0 0020 	rsb	r0, r0, #32
 800fd7a:	9b06      	ldr	r3, [sp, #24]
 800fd7c:	4418      	add	r0, r3
 800fd7e:	f010 001f 	ands.w	r0, r0, #31
 800fd82:	f000 8082 	beq.w	800fe8a <_dtoa_r+0x912>
 800fd86:	f1c0 0320 	rsb	r3, r0, #32
 800fd8a:	2b04      	cmp	r3, #4
 800fd8c:	dd73      	ble.n	800fe76 <_dtoa_r+0x8fe>
 800fd8e:	9b00      	ldr	r3, [sp, #0]
 800fd90:	f1c0 001c 	rsb	r0, r0, #28
 800fd94:	4403      	add	r3, r0
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	9b06      	ldr	r3, [sp, #24]
 800fd9a:	4403      	add	r3, r0
 800fd9c:	4406      	add	r6, r0
 800fd9e:	9306      	str	r3, [sp, #24]
 800fda0:	9b00      	ldr	r3, [sp, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dd05      	ble.n	800fdb2 <_dtoa_r+0x83a>
 800fda6:	9902      	ldr	r1, [sp, #8]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4648      	mov	r0, r9
 800fdac:	f000 febe 	bl	8010b2c <__lshift>
 800fdb0:	9002      	str	r0, [sp, #8]
 800fdb2:	9b06      	ldr	r3, [sp, #24]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dd05      	ble.n	800fdc4 <_dtoa_r+0x84c>
 800fdb8:	4621      	mov	r1, r4
 800fdba:	461a      	mov	r2, r3
 800fdbc:	4648      	mov	r0, r9
 800fdbe:	f000 feb5 	bl	8010b2c <__lshift>
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d061      	beq.n	800fe8e <_dtoa_r+0x916>
 800fdca:	9802      	ldr	r0, [sp, #8]
 800fdcc:	4621      	mov	r1, r4
 800fdce:	f000 ff19 	bl	8010c04 <__mcmp>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	da5b      	bge.n	800fe8e <_dtoa_r+0x916>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	9902      	ldr	r1, [sp, #8]
 800fdda:	220a      	movs	r2, #10
 800fddc:	4648      	mov	r0, r9
 800fdde:	f000 fd01 	bl	80107e4 <__multadd>
 800fde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fde4:	9002      	str	r0, [sp, #8]
 800fde6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 8177 	beq.w	80100de <_dtoa_r+0xb66>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	220a      	movs	r2, #10
 800fdf6:	4648      	mov	r0, r9
 800fdf8:	f000 fcf4 	bl	80107e4 <__multadd>
 800fdfc:	f1bb 0f00 	cmp.w	fp, #0
 800fe00:	4605      	mov	r5, r0
 800fe02:	dc6f      	bgt.n	800fee4 <_dtoa_r+0x96c>
 800fe04:	9b07      	ldr	r3, [sp, #28]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	dc49      	bgt.n	800fe9e <_dtoa_r+0x926>
 800fe0a:	e06b      	b.n	800fee4 <_dtoa_r+0x96c>
 800fe0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fe0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe12:	e73c      	b.n	800fc8e <_dtoa_r+0x716>
 800fe14:	3fe00000 	.word	0x3fe00000
 800fe18:	40240000 	.word	0x40240000
 800fe1c:	9b03      	ldr	r3, [sp, #12]
 800fe1e:	1e5c      	subs	r4, r3, #1
 800fe20:	9b08      	ldr	r3, [sp, #32]
 800fe22:	42a3      	cmp	r3, r4
 800fe24:	db09      	blt.n	800fe3a <_dtoa_r+0x8c2>
 800fe26:	1b1c      	subs	r4, r3, r4
 800fe28:	9b03      	ldr	r3, [sp, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f6bf af30 	bge.w	800fc90 <_dtoa_r+0x718>
 800fe30:	9b00      	ldr	r3, [sp, #0]
 800fe32:	9a03      	ldr	r2, [sp, #12]
 800fe34:	1a9e      	subs	r6, r3, r2
 800fe36:	2300      	movs	r3, #0
 800fe38:	e72b      	b.n	800fc92 <_dtoa_r+0x71a>
 800fe3a:	9b08      	ldr	r3, [sp, #32]
 800fe3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe3e:	9408      	str	r4, [sp, #32]
 800fe40:	1ae3      	subs	r3, r4, r3
 800fe42:	441a      	add	r2, r3
 800fe44:	9e00      	ldr	r6, [sp, #0]
 800fe46:	9b03      	ldr	r3, [sp, #12]
 800fe48:	920d      	str	r2, [sp, #52]	@ 0x34
 800fe4a:	2400      	movs	r4, #0
 800fe4c:	e721      	b.n	800fc92 <_dtoa_r+0x71a>
 800fe4e:	9c08      	ldr	r4, [sp, #32]
 800fe50:	9e00      	ldr	r6, [sp, #0]
 800fe52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fe54:	e728      	b.n	800fca8 <_dtoa_r+0x730>
 800fe56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fe5a:	e751      	b.n	800fd00 <_dtoa_r+0x788>
 800fe5c:	9a08      	ldr	r2, [sp, #32]
 800fe5e:	9902      	ldr	r1, [sp, #8]
 800fe60:	e750      	b.n	800fd04 <_dtoa_r+0x78c>
 800fe62:	f8cd 8008 	str.w	r8, [sp, #8]
 800fe66:	e751      	b.n	800fd0c <_dtoa_r+0x794>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e779      	b.n	800fd60 <_dtoa_r+0x7e8>
 800fe6c:	9b04      	ldr	r3, [sp, #16]
 800fe6e:	e777      	b.n	800fd60 <_dtoa_r+0x7e8>
 800fe70:	2300      	movs	r3, #0
 800fe72:	9308      	str	r3, [sp, #32]
 800fe74:	e779      	b.n	800fd6a <_dtoa_r+0x7f2>
 800fe76:	d093      	beq.n	800fda0 <_dtoa_r+0x828>
 800fe78:	9a00      	ldr	r2, [sp, #0]
 800fe7a:	331c      	adds	r3, #28
 800fe7c:	441a      	add	r2, r3
 800fe7e:	9200      	str	r2, [sp, #0]
 800fe80:	9a06      	ldr	r2, [sp, #24]
 800fe82:	441a      	add	r2, r3
 800fe84:	441e      	add	r6, r3
 800fe86:	9206      	str	r2, [sp, #24]
 800fe88:	e78a      	b.n	800fda0 <_dtoa_r+0x828>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	e7f4      	b.n	800fe78 <_dtoa_r+0x900>
 800fe8e:	9b03      	ldr	r3, [sp, #12]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	46b8      	mov	r8, r7
 800fe94:	dc20      	bgt.n	800fed8 <_dtoa_r+0x960>
 800fe96:	469b      	mov	fp, r3
 800fe98:	9b07      	ldr	r3, [sp, #28]
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	dd1e      	ble.n	800fedc <_dtoa_r+0x964>
 800fe9e:	f1bb 0f00 	cmp.w	fp, #0
 800fea2:	f47f adb1 	bne.w	800fa08 <_dtoa_r+0x490>
 800fea6:	4621      	mov	r1, r4
 800fea8:	465b      	mov	r3, fp
 800feaa:	2205      	movs	r2, #5
 800feac:	4648      	mov	r0, r9
 800feae:	f000 fc99 	bl	80107e4 <__multadd>
 800feb2:	4601      	mov	r1, r0
 800feb4:	4604      	mov	r4, r0
 800feb6:	9802      	ldr	r0, [sp, #8]
 800feb8:	f000 fea4 	bl	8010c04 <__mcmp>
 800febc:	2800      	cmp	r0, #0
 800febe:	f77f ada3 	ble.w	800fa08 <_dtoa_r+0x490>
 800fec2:	4656      	mov	r6, sl
 800fec4:	2331      	movs	r3, #49	@ 0x31
 800fec6:	f806 3b01 	strb.w	r3, [r6], #1
 800feca:	f108 0801 	add.w	r8, r8, #1
 800fece:	e59f      	b.n	800fa10 <_dtoa_r+0x498>
 800fed0:	9c03      	ldr	r4, [sp, #12]
 800fed2:	46b8      	mov	r8, r7
 800fed4:	4625      	mov	r5, r4
 800fed6:	e7f4      	b.n	800fec2 <_dtoa_r+0x94a>
 800fed8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f000 8101 	beq.w	80100e6 <_dtoa_r+0xb6e>
 800fee4:	2e00      	cmp	r6, #0
 800fee6:	dd05      	ble.n	800fef4 <_dtoa_r+0x97c>
 800fee8:	4629      	mov	r1, r5
 800feea:	4632      	mov	r2, r6
 800feec:	4648      	mov	r0, r9
 800feee:	f000 fe1d 	bl	8010b2c <__lshift>
 800fef2:	4605      	mov	r5, r0
 800fef4:	9b08      	ldr	r3, [sp, #32]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d05c      	beq.n	800ffb4 <_dtoa_r+0xa3c>
 800fefa:	6869      	ldr	r1, [r5, #4]
 800fefc:	4648      	mov	r0, r9
 800fefe:	f000 fc0f 	bl	8010720 <_Balloc>
 800ff02:	4606      	mov	r6, r0
 800ff04:	b928      	cbnz	r0, 800ff12 <_dtoa_r+0x99a>
 800ff06:	4b82      	ldr	r3, [pc, #520]	@ (8010110 <_dtoa_r+0xb98>)
 800ff08:	4602      	mov	r2, r0
 800ff0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ff0e:	f7ff bb4a 	b.w	800f5a6 <_dtoa_r+0x2e>
 800ff12:	692a      	ldr	r2, [r5, #16]
 800ff14:	3202      	adds	r2, #2
 800ff16:	0092      	lsls	r2, r2, #2
 800ff18:	f105 010c 	add.w	r1, r5, #12
 800ff1c:	300c      	adds	r0, #12
 800ff1e:	f7ff fa93 	bl	800f448 <memcpy>
 800ff22:	2201      	movs	r2, #1
 800ff24:	4631      	mov	r1, r6
 800ff26:	4648      	mov	r0, r9
 800ff28:	f000 fe00 	bl	8010b2c <__lshift>
 800ff2c:	f10a 0301 	add.w	r3, sl, #1
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	eb0a 030b 	add.w	r3, sl, fp
 800ff36:	9308      	str	r3, [sp, #32]
 800ff38:	9b04      	ldr	r3, [sp, #16]
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	462f      	mov	r7, r5
 800ff40:	9306      	str	r3, [sp, #24]
 800ff42:	4605      	mov	r5, r0
 800ff44:	9b00      	ldr	r3, [sp, #0]
 800ff46:	9802      	ldr	r0, [sp, #8]
 800ff48:	4621      	mov	r1, r4
 800ff4a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ff4e:	f7ff fa89 	bl	800f464 <quorem>
 800ff52:	4603      	mov	r3, r0
 800ff54:	3330      	adds	r3, #48	@ 0x30
 800ff56:	9003      	str	r0, [sp, #12]
 800ff58:	4639      	mov	r1, r7
 800ff5a:	9802      	ldr	r0, [sp, #8]
 800ff5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff5e:	f000 fe51 	bl	8010c04 <__mcmp>
 800ff62:	462a      	mov	r2, r5
 800ff64:	9004      	str	r0, [sp, #16]
 800ff66:	4621      	mov	r1, r4
 800ff68:	4648      	mov	r0, r9
 800ff6a:	f000 fe67 	bl	8010c3c <__mdiff>
 800ff6e:	68c2      	ldr	r2, [r0, #12]
 800ff70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff72:	4606      	mov	r6, r0
 800ff74:	bb02      	cbnz	r2, 800ffb8 <_dtoa_r+0xa40>
 800ff76:	4601      	mov	r1, r0
 800ff78:	9802      	ldr	r0, [sp, #8]
 800ff7a:	f000 fe43 	bl	8010c04 <__mcmp>
 800ff7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff80:	4602      	mov	r2, r0
 800ff82:	4631      	mov	r1, r6
 800ff84:	4648      	mov	r0, r9
 800ff86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff8a:	f000 fc09 	bl	80107a0 <_Bfree>
 800ff8e:	9b07      	ldr	r3, [sp, #28]
 800ff90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ff92:	9e00      	ldr	r6, [sp, #0]
 800ff94:	ea42 0103 	orr.w	r1, r2, r3
 800ff98:	9b06      	ldr	r3, [sp, #24]
 800ff9a:	4319      	orrs	r1, r3
 800ff9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff9e:	d10d      	bne.n	800ffbc <_dtoa_r+0xa44>
 800ffa0:	2b39      	cmp	r3, #57	@ 0x39
 800ffa2:	d027      	beq.n	800fff4 <_dtoa_r+0xa7c>
 800ffa4:	9a04      	ldr	r2, [sp, #16]
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	dd01      	ble.n	800ffae <_dtoa_r+0xa36>
 800ffaa:	9b03      	ldr	r3, [sp, #12]
 800ffac:	3331      	adds	r3, #49	@ 0x31
 800ffae:	f88b 3000 	strb.w	r3, [fp]
 800ffb2:	e52e      	b.n	800fa12 <_dtoa_r+0x49a>
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	e7b9      	b.n	800ff2c <_dtoa_r+0x9b4>
 800ffb8:	2201      	movs	r2, #1
 800ffba:	e7e2      	b.n	800ff82 <_dtoa_r+0xa0a>
 800ffbc:	9904      	ldr	r1, [sp, #16]
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	db04      	blt.n	800ffcc <_dtoa_r+0xa54>
 800ffc2:	9807      	ldr	r0, [sp, #28]
 800ffc4:	4301      	orrs	r1, r0
 800ffc6:	9806      	ldr	r0, [sp, #24]
 800ffc8:	4301      	orrs	r1, r0
 800ffca:	d120      	bne.n	801000e <_dtoa_r+0xa96>
 800ffcc:	2a00      	cmp	r2, #0
 800ffce:	ddee      	ble.n	800ffae <_dtoa_r+0xa36>
 800ffd0:	9902      	ldr	r1, [sp, #8]
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4648      	mov	r0, r9
 800ffd8:	f000 fda8 	bl	8010b2c <__lshift>
 800ffdc:	4621      	mov	r1, r4
 800ffde:	9002      	str	r0, [sp, #8]
 800ffe0:	f000 fe10 	bl	8010c04 <__mcmp>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	9b00      	ldr	r3, [sp, #0]
 800ffe8:	dc02      	bgt.n	800fff0 <_dtoa_r+0xa78>
 800ffea:	d1e0      	bne.n	800ffae <_dtoa_r+0xa36>
 800ffec:	07da      	lsls	r2, r3, #31
 800ffee:	d5de      	bpl.n	800ffae <_dtoa_r+0xa36>
 800fff0:	2b39      	cmp	r3, #57	@ 0x39
 800fff2:	d1da      	bne.n	800ffaa <_dtoa_r+0xa32>
 800fff4:	2339      	movs	r3, #57	@ 0x39
 800fff6:	f88b 3000 	strb.w	r3, [fp]
 800fffa:	4633      	mov	r3, r6
 800fffc:	461e      	mov	r6, r3
 800fffe:	3b01      	subs	r3, #1
 8010000:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010004:	2a39      	cmp	r2, #57	@ 0x39
 8010006:	d04e      	beq.n	80100a6 <_dtoa_r+0xb2e>
 8010008:	3201      	adds	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
 801000c:	e501      	b.n	800fa12 <_dtoa_r+0x49a>
 801000e:	2a00      	cmp	r2, #0
 8010010:	dd03      	ble.n	801001a <_dtoa_r+0xaa2>
 8010012:	2b39      	cmp	r3, #57	@ 0x39
 8010014:	d0ee      	beq.n	800fff4 <_dtoa_r+0xa7c>
 8010016:	3301      	adds	r3, #1
 8010018:	e7c9      	b.n	800ffae <_dtoa_r+0xa36>
 801001a:	9a00      	ldr	r2, [sp, #0]
 801001c:	9908      	ldr	r1, [sp, #32]
 801001e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010022:	428a      	cmp	r2, r1
 8010024:	d028      	beq.n	8010078 <_dtoa_r+0xb00>
 8010026:	9902      	ldr	r1, [sp, #8]
 8010028:	2300      	movs	r3, #0
 801002a:	220a      	movs	r2, #10
 801002c:	4648      	mov	r0, r9
 801002e:	f000 fbd9 	bl	80107e4 <__multadd>
 8010032:	42af      	cmp	r7, r5
 8010034:	9002      	str	r0, [sp, #8]
 8010036:	f04f 0300 	mov.w	r3, #0
 801003a:	f04f 020a 	mov.w	r2, #10
 801003e:	4639      	mov	r1, r7
 8010040:	4648      	mov	r0, r9
 8010042:	d107      	bne.n	8010054 <_dtoa_r+0xadc>
 8010044:	f000 fbce 	bl	80107e4 <__multadd>
 8010048:	4607      	mov	r7, r0
 801004a:	4605      	mov	r5, r0
 801004c:	9b00      	ldr	r3, [sp, #0]
 801004e:	3301      	adds	r3, #1
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	e777      	b.n	800ff44 <_dtoa_r+0x9cc>
 8010054:	f000 fbc6 	bl	80107e4 <__multadd>
 8010058:	4629      	mov	r1, r5
 801005a:	4607      	mov	r7, r0
 801005c:	2300      	movs	r3, #0
 801005e:	220a      	movs	r2, #10
 8010060:	4648      	mov	r0, r9
 8010062:	f000 fbbf 	bl	80107e4 <__multadd>
 8010066:	4605      	mov	r5, r0
 8010068:	e7f0      	b.n	801004c <_dtoa_r+0xad4>
 801006a:	f1bb 0f00 	cmp.w	fp, #0
 801006e:	bfcc      	ite	gt
 8010070:	465e      	movgt	r6, fp
 8010072:	2601      	movle	r6, #1
 8010074:	4456      	add	r6, sl
 8010076:	2700      	movs	r7, #0
 8010078:	9902      	ldr	r1, [sp, #8]
 801007a:	9300      	str	r3, [sp, #0]
 801007c:	2201      	movs	r2, #1
 801007e:	4648      	mov	r0, r9
 8010080:	f000 fd54 	bl	8010b2c <__lshift>
 8010084:	4621      	mov	r1, r4
 8010086:	9002      	str	r0, [sp, #8]
 8010088:	f000 fdbc 	bl	8010c04 <__mcmp>
 801008c:	2800      	cmp	r0, #0
 801008e:	dcb4      	bgt.n	800fffa <_dtoa_r+0xa82>
 8010090:	d102      	bne.n	8010098 <_dtoa_r+0xb20>
 8010092:	9b00      	ldr	r3, [sp, #0]
 8010094:	07db      	lsls	r3, r3, #31
 8010096:	d4b0      	bmi.n	800fffa <_dtoa_r+0xa82>
 8010098:	4633      	mov	r3, r6
 801009a:	461e      	mov	r6, r3
 801009c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100a0:	2a30      	cmp	r2, #48	@ 0x30
 80100a2:	d0fa      	beq.n	801009a <_dtoa_r+0xb22>
 80100a4:	e4b5      	b.n	800fa12 <_dtoa_r+0x49a>
 80100a6:	459a      	cmp	sl, r3
 80100a8:	d1a8      	bne.n	800fffc <_dtoa_r+0xa84>
 80100aa:	2331      	movs	r3, #49	@ 0x31
 80100ac:	f108 0801 	add.w	r8, r8, #1
 80100b0:	f88a 3000 	strb.w	r3, [sl]
 80100b4:	e4ad      	b.n	800fa12 <_dtoa_r+0x49a>
 80100b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010114 <_dtoa_r+0xb9c>
 80100bc:	b11b      	cbz	r3, 80100c6 <_dtoa_r+0xb4e>
 80100be:	f10a 0308 	add.w	r3, sl, #8
 80100c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	4650      	mov	r0, sl
 80100c8:	b017      	add	sp, #92	@ 0x5c
 80100ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ce:	9b07      	ldr	r3, [sp, #28]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	f77f ae2e 	ble.w	800fd32 <_dtoa_r+0x7ba>
 80100d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80100d8:	9308      	str	r3, [sp, #32]
 80100da:	2001      	movs	r0, #1
 80100dc:	e64d      	b.n	800fd7a <_dtoa_r+0x802>
 80100de:	f1bb 0f00 	cmp.w	fp, #0
 80100e2:	f77f aed9 	ble.w	800fe98 <_dtoa_r+0x920>
 80100e6:	4656      	mov	r6, sl
 80100e8:	9802      	ldr	r0, [sp, #8]
 80100ea:	4621      	mov	r1, r4
 80100ec:	f7ff f9ba 	bl	800f464 <quorem>
 80100f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80100f4:	f806 3b01 	strb.w	r3, [r6], #1
 80100f8:	eba6 020a 	sub.w	r2, r6, sl
 80100fc:	4593      	cmp	fp, r2
 80100fe:	ddb4      	ble.n	801006a <_dtoa_r+0xaf2>
 8010100:	9902      	ldr	r1, [sp, #8]
 8010102:	2300      	movs	r3, #0
 8010104:	220a      	movs	r2, #10
 8010106:	4648      	mov	r0, r9
 8010108:	f000 fb6c 	bl	80107e4 <__multadd>
 801010c:	9002      	str	r0, [sp, #8]
 801010e:	e7eb      	b.n	80100e8 <_dtoa_r+0xb70>
 8010110:	080126b4 	.word	0x080126b4
 8010114:	08012638 	.word	0x08012638

08010118 <_free_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4605      	mov	r5, r0
 801011c:	2900      	cmp	r1, #0
 801011e:	d041      	beq.n	80101a4 <_free_r+0x8c>
 8010120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010124:	1f0c      	subs	r4, r1, #4
 8010126:	2b00      	cmp	r3, #0
 8010128:	bfb8      	it	lt
 801012a:	18e4      	addlt	r4, r4, r3
 801012c:	f000 faec 	bl	8010708 <__malloc_lock>
 8010130:	4a1d      	ldr	r2, [pc, #116]	@ (80101a8 <_free_r+0x90>)
 8010132:	6813      	ldr	r3, [r2, #0]
 8010134:	b933      	cbnz	r3, 8010144 <_free_r+0x2c>
 8010136:	6063      	str	r3, [r4, #4]
 8010138:	6014      	str	r4, [r2, #0]
 801013a:	4628      	mov	r0, r5
 801013c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010140:	f000 bae8 	b.w	8010714 <__malloc_unlock>
 8010144:	42a3      	cmp	r3, r4
 8010146:	d908      	bls.n	801015a <_free_r+0x42>
 8010148:	6820      	ldr	r0, [r4, #0]
 801014a:	1821      	adds	r1, r4, r0
 801014c:	428b      	cmp	r3, r1
 801014e:	bf01      	itttt	eq
 8010150:	6819      	ldreq	r1, [r3, #0]
 8010152:	685b      	ldreq	r3, [r3, #4]
 8010154:	1809      	addeq	r1, r1, r0
 8010156:	6021      	streq	r1, [r4, #0]
 8010158:	e7ed      	b.n	8010136 <_free_r+0x1e>
 801015a:	461a      	mov	r2, r3
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	b10b      	cbz	r3, 8010164 <_free_r+0x4c>
 8010160:	42a3      	cmp	r3, r4
 8010162:	d9fa      	bls.n	801015a <_free_r+0x42>
 8010164:	6811      	ldr	r1, [r2, #0]
 8010166:	1850      	adds	r0, r2, r1
 8010168:	42a0      	cmp	r0, r4
 801016a:	d10b      	bne.n	8010184 <_free_r+0x6c>
 801016c:	6820      	ldr	r0, [r4, #0]
 801016e:	4401      	add	r1, r0
 8010170:	1850      	adds	r0, r2, r1
 8010172:	4283      	cmp	r3, r0
 8010174:	6011      	str	r1, [r2, #0]
 8010176:	d1e0      	bne.n	801013a <_free_r+0x22>
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	6053      	str	r3, [r2, #4]
 801017e:	4408      	add	r0, r1
 8010180:	6010      	str	r0, [r2, #0]
 8010182:	e7da      	b.n	801013a <_free_r+0x22>
 8010184:	d902      	bls.n	801018c <_free_r+0x74>
 8010186:	230c      	movs	r3, #12
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	e7d6      	b.n	801013a <_free_r+0x22>
 801018c:	6820      	ldr	r0, [r4, #0]
 801018e:	1821      	adds	r1, r4, r0
 8010190:	428b      	cmp	r3, r1
 8010192:	bf04      	itt	eq
 8010194:	6819      	ldreq	r1, [r3, #0]
 8010196:	685b      	ldreq	r3, [r3, #4]
 8010198:	6063      	str	r3, [r4, #4]
 801019a:	bf04      	itt	eq
 801019c:	1809      	addeq	r1, r1, r0
 801019e:	6021      	streq	r1, [r4, #0]
 80101a0:	6054      	str	r4, [r2, #4]
 80101a2:	e7ca      	b.n	801013a <_free_r+0x22>
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
 80101a6:	bf00      	nop
 80101a8:	20005b30 	.word	0x20005b30

080101ac <__ssputs_r>:
 80101ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b0:	688e      	ldr	r6, [r1, #8]
 80101b2:	461f      	mov	r7, r3
 80101b4:	42be      	cmp	r6, r7
 80101b6:	680b      	ldr	r3, [r1, #0]
 80101b8:	4682      	mov	sl, r0
 80101ba:	460c      	mov	r4, r1
 80101bc:	4690      	mov	r8, r2
 80101be:	d82d      	bhi.n	801021c <__ssputs_r+0x70>
 80101c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101c8:	d026      	beq.n	8010218 <__ssputs_r+0x6c>
 80101ca:	6965      	ldr	r5, [r4, #20]
 80101cc:	6909      	ldr	r1, [r1, #16]
 80101ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101d2:	eba3 0901 	sub.w	r9, r3, r1
 80101d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101da:	1c7b      	adds	r3, r7, #1
 80101dc:	444b      	add	r3, r9
 80101de:	106d      	asrs	r5, r5, #1
 80101e0:	429d      	cmp	r5, r3
 80101e2:	bf38      	it	cc
 80101e4:	461d      	movcc	r5, r3
 80101e6:	0553      	lsls	r3, r2, #21
 80101e8:	d527      	bpl.n	801023a <__ssputs_r+0x8e>
 80101ea:	4629      	mov	r1, r5
 80101ec:	f000 f960 	bl	80104b0 <_malloc_r>
 80101f0:	4606      	mov	r6, r0
 80101f2:	b360      	cbz	r0, 801024e <__ssputs_r+0xa2>
 80101f4:	6921      	ldr	r1, [r4, #16]
 80101f6:	464a      	mov	r2, r9
 80101f8:	f7ff f926 	bl	800f448 <memcpy>
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010206:	81a3      	strh	r3, [r4, #12]
 8010208:	6126      	str	r6, [r4, #16]
 801020a:	6165      	str	r5, [r4, #20]
 801020c:	444e      	add	r6, r9
 801020e:	eba5 0509 	sub.w	r5, r5, r9
 8010212:	6026      	str	r6, [r4, #0]
 8010214:	60a5      	str	r5, [r4, #8]
 8010216:	463e      	mov	r6, r7
 8010218:	42be      	cmp	r6, r7
 801021a:	d900      	bls.n	801021e <__ssputs_r+0x72>
 801021c:	463e      	mov	r6, r7
 801021e:	6820      	ldr	r0, [r4, #0]
 8010220:	4632      	mov	r2, r6
 8010222:	4641      	mov	r1, r8
 8010224:	f000 fe67 	bl	8010ef6 <memmove>
 8010228:	68a3      	ldr	r3, [r4, #8]
 801022a:	1b9b      	subs	r3, r3, r6
 801022c:	60a3      	str	r3, [r4, #8]
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	4433      	add	r3, r6
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	2000      	movs	r0, #0
 8010236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801023a:	462a      	mov	r2, r5
 801023c:	f000 fe2d 	bl	8010e9a <_realloc_r>
 8010240:	4606      	mov	r6, r0
 8010242:	2800      	cmp	r0, #0
 8010244:	d1e0      	bne.n	8010208 <__ssputs_r+0x5c>
 8010246:	6921      	ldr	r1, [r4, #16]
 8010248:	4650      	mov	r0, sl
 801024a:	f7ff ff65 	bl	8010118 <_free_r>
 801024e:	230c      	movs	r3, #12
 8010250:	f8ca 3000 	str.w	r3, [sl]
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801025a:	81a3      	strh	r3, [r4, #12]
 801025c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010260:	e7e9      	b.n	8010236 <__ssputs_r+0x8a>
	...

08010264 <_svfiprintf_r>:
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	4698      	mov	r8, r3
 801026a:	898b      	ldrh	r3, [r1, #12]
 801026c:	061b      	lsls	r3, r3, #24
 801026e:	b09d      	sub	sp, #116	@ 0x74
 8010270:	4607      	mov	r7, r0
 8010272:	460d      	mov	r5, r1
 8010274:	4614      	mov	r4, r2
 8010276:	d510      	bpl.n	801029a <_svfiprintf_r+0x36>
 8010278:	690b      	ldr	r3, [r1, #16]
 801027a:	b973      	cbnz	r3, 801029a <_svfiprintf_r+0x36>
 801027c:	2140      	movs	r1, #64	@ 0x40
 801027e:	f000 f917 	bl	80104b0 <_malloc_r>
 8010282:	6028      	str	r0, [r5, #0]
 8010284:	6128      	str	r0, [r5, #16]
 8010286:	b930      	cbnz	r0, 8010296 <_svfiprintf_r+0x32>
 8010288:	230c      	movs	r3, #12
 801028a:	603b      	str	r3, [r7, #0]
 801028c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010290:	b01d      	add	sp, #116	@ 0x74
 8010292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010296:	2340      	movs	r3, #64	@ 0x40
 8010298:	616b      	str	r3, [r5, #20]
 801029a:	2300      	movs	r3, #0
 801029c:	9309      	str	r3, [sp, #36]	@ 0x24
 801029e:	2320      	movs	r3, #32
 80102a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102a8:	2330      	movs	r3, #48	@ 0x30
 80102aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010448 <_svfiprintf_r+0x1e4>
 80102ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102b2:	f04f 0901 	mov.w	r9, #1
 80102b6:	4623      	mov	r3, r4
 80102b8:	469a      	mov	sl, r3
 80102ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102be:	b10a      	cbz	r2, 80102c4 <_svfiprintf_r+0x60>
 80102c0:	2a25      	cmp	r2, #37	@ 0x25
 80102c2:	d1f9      	bne.n	80102b8 <_svfiprintf_r+0x54>
 80102c4:	ebba 0b04 	subs.w	fp, sl, r4
 80102c8:	d00b      	beq.n	80102e2 <_svfiprintf_r+0x7e>
 80102ca:	465b      	mov	r3, fp
 80102cc:	4622      	mov	r2, r4
 80102ce:	4629      	mov	r1, r5
 80102d0:	4638      	mov	r0, r7
 80102d2:	f7ff ff6b 	bl	80101ac <__ssputs_r>
 80102d6:	3001      	adds	r0, #1
 80102d8:	f000 80a7 	beq.w	801042a <_svfiprintf_r+0x1c6>
 80102dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102de:	445a      	add	r2, fp
 80102e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80102e2:	f89a 3000 	ldrb.w	r3, [sl]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 809f 	beq.w	801042a <_svfiprintf_r+0x1c6>
 80102ec:	2300      	movs	r3, #0
 80102ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102f6:	f10a 0a01 	add.w	sl, sl, #1
 80102fa:	9304      	str	r3, [sp, #16]
 80102fc:	9307      	str	r3, [sp, #28]
 80102fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010302:	931a      	str	r3, [sp, #104]	@ 0x68
 8010304:	4654      	mov	r4, sl
 8010306:	2205      	movs	r2, #5
 8010308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801030c:	484e      	ldr	r0, [pc, #312]	@ (8010448 <_svfiprintf_r+0x1e4>)
 801030e:	f7ef ff5f 	bl	80001d0 <memchr>
 8010312:	9a04      	ldr	r2, [sp, #16]
 8010314:	b9d8      	cbnz	r0, 801034e <_svfiprintf_r+0xea>
 8010316:	06d0      	lsls	r0, r2, #27
 8010318:	bf44      	itt	mi
 801031a:	2320      	movmi	r3, #32
 801031c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010320:	0711      	lsls	r1, r2, #28
 8010322:	bf44      	itt	mi
 8010324:	232b      	movmi	r3, #43	@ 0x2b
 8010326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801032a:	f89a 3000 	ldrb.w	r3, [sl]
 801032e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010330:	d015      	beq.n	801035e <_svfiprintf_r+0xfa>
 8010332:	9a07      	ldr	r2, [sp, #28]
 8010334:	4654      	mov	r4, sl
 8010336:	2000      	movs	r0, #0
 8010338:	f04f 0c0a 	mov.w	ip, #10
 801033c:	4621      	mov	r1, r4
 801033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010342:	3b30      	subs	r3, #48	@ 0x30
 8010344:	2b09      	cmp	r3, #9
 8010346:	d94b      	bls.n	80103e0 <_svfiprintf_r+0x17c>
 8010348:	b1b0      	cbz	r0, 8010378 <_svfiprintf_r+0x114>
 801034a:	9207      	str	r2, [sp, #28]
 801034c:	e014      	b.n	8010378 <_svfiprintf_r+0x114>
 801034e:	eba0 0308 	sub.w	r3, r0, r8
 8010352:	fa09 f303 	lsl.w	r3, r9, r3
 8010356:	4313      	orrs	r3, r2
 8010358:	9304      	str	r3, [sp, #16]
 801035a:	46a2      	mov	sl, r4
 801035c:	e7d2      	b.n	8010304 <_svfiprintf_r+0xa0>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	1d19      	adds	r1, r3, #4
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	9103      	str	r1, [sp, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	bfbb      	ittet	lt
 801036a:	425b      	neglt	r3, r3
 801036c:	f042 0202 	orrlt.w	r2, r2, #2
 8010370:	9307      	strge	r3, [sp, #28]
 8010372:	9307      	strlt	r3, [sp, #28]
 8010374:	bfb8      	it	lt
 8010376:	9204      	strlt	r2, [sp, #16]
 8010378:	7823      	ldrb	r3, [r4, #0]
 801037a:	2b2e      	cmp	r3, #46	@ 0x2e
 801037c:	d10a      	bne.n	8010394 <_svfiprintf_r+0x130>
 801037e:	7863      	ldrb	r3, [r4, #1]
 8010380:	2b2a      	cmp	r3, #42	@ 0x2a
 8010382:	d132      	bne.n	80103ea <_svfiprintf_r+0x186>
 8010384:	9b03      	ldr	r3, [sp, #12]
 8010386:	1d1a      	adds	r2, r3, #4
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	9203      	str	r2, [sp, #12]
 801038c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010390:	3402      	adds	r4, #2
 8010392:	9305      	str	r3, [sp, #20]
 8010394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010458 <_svfiprintf_r+0x1f4>
 8010398:	7821      	ldrb	r1, [r4, #0]
 801039a:	2203      	movs	r2, #3
 801039c:	4650      	mov	r0, sl
 801039e:	f7ef ff17 	bl	80001d0 <memchr>
 80103a2:	b138      	cbz	r0, 80103b4 <_svfiprintf_r+0x150>
 80103a4:	9b04      	ldr	r3, [sp, #16]
 80103a6:	eba0 000a 	sub.w	r0, r0, sl
 80103aa:	2240      	movs	r2, #64	@ 0x40
 80103ac:	4082      	lsls	r2, r0
 80103ae:	4313      	orrs	r3, r2
 80103b0:	3401      	adds	r4, #1
 80103b2:	9304      	str	r3, [sp, #16]
 80103b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103b8:	4824      	ldr	r0, [pc, #144]	@ (801044c <_svfiprintf_r+0x1e8>)
 80103ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103be:	2206      	movs	r2, #6
 80103c0:	f7ef ff06 	bl	80001d0 <memchr>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d036      	beq.n	8010436 <_svfiprintf_r+0x1d2>
 80103c8:	4b21      	ldr	r3, [pc, #132]	@ (8010450 <_svfiprintf_r+0x1ec>)
 80103ca:	bb1b      	cbnz	r3, 8010414 <_svfiprintf_r+0x1b0>
 80103cc:	9b03      	ldr	r3, [sp, #12]
 80103ce:	3307      	adds	r3, #7
 80103d0:	f023 0307 	bic.w	r3, r3, #7
 80103d4:	3308      	adds	r3, #8
 80103d6:	9303      	str	r3, [sp, #12]
 80103d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103da:	4433      	add	r3, r6
 80103dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80103de:	e76a      	b.n	80102b6 <_svfiprintf_r+0x52>
 80103e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80103e4:	460c      	mov	r4, r1
 80103e6:	2001      	movs	r0, #1
 80103e8:	e7a8      	b.n	801033c <_svfiprintf_r+0xd8>
 80103ea:	2300      	movs	r3, #0
 80103ec:	3401      	adds	r4, #1
 80103ee:	9305      	str	r3, [sp, #20]
 80103f0:	4619      	mov	r1, r3
 80103f2:	f04f 0c0a 	mov.w	ip, #10
 80103f6:	4620      	mov	r0, r4
 80103f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103fc:	3a30      	subs	r2, #48	@ 0x30
 80103fe:	2a09      	cmp	r2, #9
 8010400:	d903      	bls.n	801040a <_svfiprintf_r+0x1a6>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d0c6      	beq.n	8010394 <_svfiprintf_r+0x130>
 8010406:	9105      	str	r1, [sp, #20]
 8010408:	e7c4      	b.n	8010394 <_svfiprintf_r+0x130>
 801040a:	fb0c 2101 	mla	r1, ip, r1, r2
 801040e:	4604      	mov	r4, r0
 8010410:	2301      	movs	r3, #1
 8010412:	e7f0      	b.n	80103f6 <_svfiprintf_r+0x192>
 8010414:	ab03      	add	r3, sp, #12
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	462a      	mov	r2, r5
 801041a:	4b0e      	ldr	r3, [pc, #56]	@ (8010454 <_svfiprintf_r+0x1f0>)
 801041c:	a904      	add	r1, sp, #16
 801041e:	4638      	mov	r0, r7
 8010420:	f7fe fae2 	bl	800e9e8 <_printf_float>
 8010424:	1c42      	adds	r2, r0, #1
 8010426:	4606      	mov	r6, r0
 8010428:	d1d6      	bne.n	80103d8 <_svfiprintf_r+0x174>
 801042a:	89ab      	ldrh	r3, [r5, #12]
 801042c:	065b      	lsls	r3, r3, #25
 801042e:	f53f af2d 	bmi.w	801028c <_svfiprintf_r+0x28>
 8010432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010434:	e72c      	b.n	8010290 <_svfiprintf_r+0x2c>
 8010436:	ab03      	add	r3, sp, #12
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	462a      	mov	r2, r5
 801043c:	4b05      	ldr	r3, [pc, #20]	@ (8010454 <_svfiprintf_r+0x1f0>)
 801043e:	a904      	add	r1, sp, #16
 8010440:	4638      	mov	r0, r7
 8010442:	f7fe fd69 	bl	800ef18 <_printf_i>
 8010446:	e7ed      	b.n	8010424 <_svfiprintf_r+0x1c0>
 8010448:	080126c5 	.word	0x080126c5
 801044c:	080126cf 	.word	0x080126cf
 8010450:	0800e9e9 	.word	0x0800e9e9
 8010454:	080101ad 	.word	0x080101ad
 8010458:	080126cb 	.word	0x080126cb

0801045c <malloc>:
 801045c:	4b02      	ldr	r3, [pc, #8]	@ (8010468 <malloc+0xc>)
 801045e:	4601      	mov	r1, r0
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f000 b825 	b.w	80104b0 <_malloc_r>
 8010466:	bf00      	nop
 8010468:	20000078 	.word	0x20000078

0801046c <sbrk_aligned>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	4e0f      	ldr	r6, [pc, #60]	@ (80104ac <sbrk_aligned+0x40>)
 8010470:	460c      	mov	r4, r1
 8010472:	6831      	ldr	r1, [r6, #0]
 8010474:	4605      	mov	r5, r0
 8010476:	b911      	cbnz	r1, 801047e <sbrk_aligned+0x12>
 8010478:	f000 fd7c 	bl	8010f74 <_sbrk_r>
 801047c:	6030      	str	r0, [r6, #0]
 801047e:	4621      	mov	r1, r4
 8010480:	4628      	mov	r0, r5
 8010482:	f000 fd77 	bl	8010f74 <_sbrk_r>
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	d103      	bne.n	8010492 <sbrk_aligned+0x26>
 801048a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801048e:	4620      	mov	r0, r4
 8010490:	bd70      	pop	{r4, r5, r6, pc}
 8010492:	1cc4      	adds	r4, r0, #3
 8010494:	f024 0403 	bic.w	r4, r4, #3
 8010498:	42a0      	cmp	r0, r4
 801049a:	d0f8      	beq.n	801048e <sbrk_aligned+0x22>
 801049c:	1a21      	subs	r1, r4, r0
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 fd68 	bl	8010f74 <_sbrk_r>
 80104a4:	3001      	adds	r0, #1
 80104a6:	d1f2      	bne.n	801048e <sbrk_aligned+0x22>
 80104a8:	e7ef      	b.n	801048a <sbrk_aligned+0x1e>
 80104aa:	bf00      	nop
 80104ac:	20005b2c 	.word	0x20005b2c

080104b0 <_malloc_r>:
 80104b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104b4:	1ccd      	adds	r5, r1, #3
 80104b6:	f025 0503 	bic.w	r5, r5, #3
 80104ba:	3508      	adds	r5, #8
 80104bc:	2d0c      	cmp	r5, #12
 80104be:	bf38      	it	cc
 80104c0:	250c      	movcc	r5, #12
 80104c2:	2d00      	cmp	r5, #0
 80104c4:	4606      	mov	r6, r0
 80104c6:	db01      	blt.n	80104cc <_malloc_r+0x1c>
 80104c8:	42a9      	cmp	r1, r5
 80104ca:	d904      	bls.n	80104d6 <_malloc_r+0x26>
 80104cc:	230c      	movs	r3, #12
 80104ce:	6033      	str	r3, [r6, #0]
 80104d0:	2000      	movs	r0, #0
 80104d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80105ac <_malloc_r+0xfc>
 80104da:	f000 f915 	bl	8010708 <__malloc_lock>
 80104de:	f8d8 3000 	ldr.w	r3, [r8]
 80104e2:	461c      	mov	r4, r3
 80104e4:	bb44      	cbnz	r4, 8010538 <_malloc_r+0x88>
 80104e6:	4629      	mov	r1, r5
 80104e8:	4630      	mov	r0, r6
 80104ea:	f7ff ffbf 	bl	801046c <sbrk_aligned>
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	4604      	mov	r4, r0
 80104f2:	d158      	bne.n	80105a6 <_malloc_r+0xf6>
 80104f4:	f8d8 4000 	ldr.w	r4, [r8]
 80104f8:	4627      	mov	r7, r4
 80104fa:	2f00      	cmp	r7, #0
 80104fc:	d143      	bne.n	8010586 <_malloc_r+0xd6>
 80104fe:	2c00      	cmp	r4, #0
 8010500:	d04b      	beq.n	801059a <_malloc_r+0xea>
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	4639      	mov	r1, r7
 8010506:	4630      	mov	r0, r6
 8010508:	eb04 0903 	add.w	r9, r4, r3
 801050c:	f000 fd32 	bl	8010f74 <_sbrk_r>
 8010510:	4581      	cmp	r9, r0
 8010512:	d142      	bne.n	801059a <_malloc_r+0xea>
 8010514:	6821      	ldr	r1, [r4, #0]
 8010516:	1a6d      	subs	r5, r5, r1
 8010518:	4629      	mov	r1, r5
 801051a:	4630      	mov	r0, r6
 801051c:	f7ff ffa6 	bl	801046c <sbrk_aligned>
 8010520:	3001      	adds	r0, #1
 8010522:	d03a      	beq.n	801059a <_malloc_r+0xea>
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	442b      	add	r3, r5
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	f8d8 3000 	ldr.w	r3, [r8]
 801052e:	685a      	ldr	r2, [r3, #4]
 8010530:	bb62      	cbnz	r2, 801058c <_malloc_r+0xdc>
 8010532:	f8c8 7000 	str.w	r7, [r8]
 8010536:	e00f      	b.n	8010558 <_malloc_r+0xa8>
 8010538:	6822      	ldr	r2, [r4, #0]
 801053a:	1b52      	subs	r2, r2, r5
 801053c:	d420      	bmi.n	8010580 <_malloc_r+0xd0>
 801053e:	2a0b      	cmp	r2, #11
 8010540:	d917      	bls.n	8010572 <_malloc_r+0xc2>
 8010542:	1961      	adds	r1, r4, r5
 8010544:	42a3      	cmp	r3, r4
 8010546:	6025      	str	r5, [r4, #0]
 8010548:	bf18      	it	ne
 801054a:	6059      	strne	r1, [r3, #4]
 801054c:	6863      	ldr	r3, [r4, #4]
 801054e:	bf08      	it	eq
 8010550:	f8c8 1000 	streq.w	r1, [r8]
 8010554:	5162      	str	r2, [r4, r5]
 8010556:	604b      	str	r3, [r1, #4]
 8010558:	4630      	mov	r0, r6
 801055a:	f000 f8db 	bl	8010714 <__malloc_unlock>
 801055e:	f104 000b 	add.w	r0, r4, #11
 8010562:	1d23      	adds	r3, r4, #4
 8010564:	f020 0007 	bic.w	r0, r0, #7
 8010568:	1ac2      	subs	r2, r0, r3
 801056a:	bf1c      	itt	ne
 801056c:	1a1b      	subne	r3, r3, r0
 801056e:	50a3      	strne	r3, [r4, r2]
 8010570:	e7af      	b.n	80104d2 <_malloc_r+0x22>
 8010572:	6862      	ldr	r2, [r4, #4]
 8010574:	42a3      	cmp	r3, r4
 8010576:	bf0c      	ite	eq
 8010578:	f8c8 2000 	streq.w	r2, [r8]
 801057c:	605a      	strne	r2, [r3, #4]
 801057e:	e7eb      	b.n	8010558 <_malloc_r+0xa8>
 8010580:	4623      	mov	r3, r4
 8010582:	6864      	ldr	r4, [r4, #4]
 8010584:	e7ae      	b.n	80104e4 <_malloc_r+0x34>
 8010586:	463c      	mov	r4, r7
 8010588:	687f      	ldr	r7, [r7, #4]
 801058a:	e7b6      	b.n	80104fa <_malloc_r+0x4a>
 801058c:	461a      	mov	r2, r3
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	42a3      	cmp	r3, r4
 8010592:	d1fb      	bne.n	801058c <_malloc_r+0xdc>
 8010594:	2300      	movs	r3, #0
 8010596:	6053      	str	r3, [r2, #4]
 8010598:	e7de      	b.n	8010558 <_malloc_r+0xa8>
 801059a:	230c      	movs	r3, #12
 801059c:	6033      	str	r3, [r6, #0]
 801059e:	4630      	mov	r0, r6
 80105a0:	f000 f8b8 	bl	8010714 <__malloc_unlock>
 80105a4:	e794      	b.n	80104d0 <_malloc_r+0x20>
 80105a6:	6005      	str	r5, [r0, #0]
 80105a8:	e7d6      	b.n	8010558 <_malloc_r+0xa8>
 80105aa:	bf00      	nop
 80105ac:	20005b30 	.word	0x20005b30

080105b0 <__sflush_r>:
 80105b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b8:	0716      	lsls	r6, r2, #28
 80105ba:	4605      	mov	r5, r0
 80105bc:	460c      	mov	r4, r1
 80105be:	d454      	bmi.n	801066a <__sflush_r+0xba>
 80105c0:	684b      	ldr	r3, [r1, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dc02      	bgt.n	80105cc <__sflush_r+0x1c>
 80105c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	dd48      	ble.n	801065e <__sflush_r+0xae>
 80105cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105ce:	2e00      	cmp	r6, #0
 80105d0:	d045      	beq.n	801065e <__sflush_r+0xae>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105d8:	682f      	ldr	r7, [r5, #0]
 80105da:	6a21      	ldr	r1, [r4, #32]
 80105dc:	602b      	str	r3, [r5, #0]
 80105de:	d030      	beq.n	8010642 <__sflush_r+0x92>
 80105e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	0759      	lsls	r1, r3, #29
 80105e6:	d505      	bpl.n	80105f4 <__sflush_r+0x44>
 80105e8:	6863      	ldr	r3, [r4, #4]
 80105ea:	1ad2      	subs	r2, r2, r3
 80105ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105ee:	b10b      	cbz	r3, 80105f4 <__sflush_r+0x44>
 80105f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105f2:	1ad2      	subs	r2, r2, r3
 80105f4:	2300      	movs	r3, #0
 80105f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105f8:	6a21      	ldr	r1, [r4, #32]
 80105fa:	4628      	mov	r0, r5
 80105fc:	47b0      	blx	r6
 80105fe:	1c43      	adds	r3, r0, #1
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	d106      	bne.n	8010612 <__sflush_r+0x62>
 8010604:	6829      	ldr	r1, [r5, #0]
 8010606:	291d      	cmp	r1, #29
 8010608:	d82b      	bhi.n	8010662 <__sflush_r+0xb2>
 801060a:	4a2a      	ldr	r2, [pc, #168]	@ (80106b4 <__sflush_r+0x104>)
 801060c:	40ca      	lsrs	r2, r1
 801060e:	07d6      	lsls	r6, r2, #31
 8010610:	d527      	bpl.n	8010662 <__sflush_r+0xb2>
 8010612:	2200      	movs	r2, #0
 8010614:	6062      	str	r2, [r4, #4]
 8010616:	04d9      	lsls	r1, r3, #19
 8010618:	6922      	ldr	r2, [r4, #16]
 801061a:	6022      	str	r2, [r4, #0]
 801061c:	d504      	bpl.n	8010628 <__sflush_r+0x78>
 801061e:	1c42      	adds	r2, r0, #1
 8010620:	d101      	bne.n	8010626 <__sflush_r+0x76>
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	b903      	cbnz	r3, 8010628 <__sflush_r+0x78>
 8010626:	6560      	str	r0, [r4, #84]	@ 0x54
 8010628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801062a:	602f      	str	r7, [r5, #0]
 801062c:	b1b9      	cbz	r1, 801065e <__sflush_r+0xae>
 801062e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010632:	4299      	cmp	r1, r3
 8010634:	d002      	beq.n	801063c <__sflush_r+0x8c>
 8010636:	4628      	mov	r0, r5
 8010638:	f7ff fd6e 	bl	8010118 <_free_r>
 801063c:	2300      	movs	r3, #0
 801063e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010640:	e00d      	b.n	801065e <__sflush_r+0xae>
 8010642:	2301      	movs	r3, #1
 8010644:	4628      	mov	r0, r5
 8010646:	47b0      	blx	r6
 8010648:	4602      	mov	r2, r0
 801064a:	1c50      	adds	r0, r2, #1
 801064c:	d1c9      	bne.n	80105e2 <__sflush_r+0x32>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d0c6      	beq.n	80105e2 <__sflush_r+0x32>
 8010654:	2b1d      	cmp	r3, #29
 8010656:	d001      	beq.n	801065c <__sflush_r+0xac>
 8010658:	2b16      	cmp	r3, #22
 801065a:	d11e      	bne.n	801069a <__sflush_r+0xea>
 801065c:	602f      	str	r7, [r5, #0]
 801065e:	2000      	movs	r0, #0
 8010660:	e022      	b.n	80106a8 <__sflush_r+0xf8>
 8010662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010666:	b21b      	sxth	r3, r3
 8010668:	e01b      	b.n	80106a2 <__sflush_r+0xf2>
 801066a:	690f      	ldr	r7, [r1, #16]
 801066c:	2f00      	cmp	r7, #0
 801066e:	d0f6      	beq.n	801065e <__sflush_r+0xae>
 8010670:	0793      	lsls	r3, r2, #30
 8010672:	680e      	ldr	r6, [r1, #0]
 8010674:	bf08      	it	eq
 8010676:	694b      	ldreq	r3, [r1, #20]
 8010678:	600f      	str	r7, [r1, #0]
 801067a:	bf18      	it	ne
 801067c:	2300      	movne	r3, #0
 801067e:	eba6 0807 	sub.w	r8, r6, r7
 8010682:	608b      	str	r3, [r1, #8]
 8010684:	f1b8 0f00 	cmp.w	r8, #0
 8010688:	dde9      	ble.n	801065e <__sflush_r+0xae>
 801068a:	6a21      	ldr	r1, [r4, #32]
 801068c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801068e:	4643      	mov	r3, r8
 8010690:	463a      	mov	r2, r7
 8010692:	4628      	mov	r0, r5
 8010694:	47b0      	blx	r6
 8010696:	2800      	cmp	r0, #0
 8010698:	dc08      	bgt.n	80106ac <__sflush_r+0xfc>
 801069a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801069e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ac:	4407      	add	r7, r0
 80106ae:	eba8 0800 	sub.w	r8, r8, r0
 80106b2:	e7e7      	b.n	8010684 <__sflush_r+0xd4>
 80106b4:	20400001 	.word	0x20400001

080106b8 <_fflush_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	690b      	ldr	r3, [r1, #16]
 80106bc:	4605      	mov	r5, r0
 80106be:	460c      	mov	r4, r1
 80106c0:	b913      	cbnz	r3, 80106c8 <_fflush_r+0x10>
 80106c2:	2500      	movs	r5, #0
 80106c4:	4628      	mov	r0, r5
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	b118      	cbz	r0, 80106d2 <_fflush_r+0x1a>
 80106ca:	6a03      	ldr	r3, [r0, #32]
 80106cc:	b90b      	cbnz	r3, 80106d2 <_fflush_r+0x1a>
 80106ce:	f7fe fdcd 	bl	800f26c <__sinit>
 80106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d0f3      	beq.n	80106c2 <_fflush_r+0xa>
 80106da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106dc:	07d0      	lsls	r0, r2, #31
 80106de:	d404      	bmi.n	80106ea <_fflush_r+0x32>
 80106e0:	0599      	lsls	r1, r3, #22
 80106e2:	d402      	bmi.n	80106ea <_fflush_r+0x32>
 80106e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106e6:	f7fe fe4a 	bl	800f37e <__retarget_lock_acquire_recursive>
 80106ea:	4628      	mov	r0, r5
 80106ec:	4621      	mov	r1, r4
 80106ee:	f7ff ff5f 	bl	80105b0 <__sflush_r>
 80106f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106f4:	07da      	lsls	r2, r3, #31
 80106f6:	4605      	mov	r5, r0
 80106f8:	d4e4      	bmi.n	80106c4 <_fflush_r+0xc>
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	059b      	lsls	r3, r3, #22
 80106fe:	d4e1      	bmi.n	80106c4 <_fflush_r+0xc>
 8010700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010702:	f7fe fe3d 	bl	800f380 <__retarget_lock_release_recursive>
 8010706:	e7dd      	b.n	80106c4 <_fflush_r+0xc>

08010708 <__malloc_lock>:
 8010708:	4801      	ldr	r0, [pc, #4]	@ (8010710 <__malloc_lock+0x8>)
 801070a:	f7fe be38 	b.w	800f37e <__retarget_lock_acquire_recursive>
 801070e:	bf00      	nop
 8010710:	20005b24 	.word	0x20005b24

08010714 <__malloc_unlock>:
 8010714:	4801      	ldr	r0, [pc, #4]	@ (801071c <__malloc_unlock+0x8>)
 8010716:	f7fe be33 	b.w	800f380 <__retarget_lock_release_recursive>
 801071a:	bf00      	nop
 801071c:	20005b24 	.word	0x20005b24

08010720 <_Balloc>:
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	69c6      	ldr	r6, [r0, #28]
 8010724:	4604      	mov	r4, r0
 8010726:	460d      	mov	r5, r1
 8010728:	b976      	cbnz	r6, 8010748 <_Balloc+0x28>
 801072a:	2010      	movs	r0, #16
 801072c:	f7ff fe96 	bl	801045c <malloc>
 8010730:	4602      	mov	r2, r0
 8010732:	61e0      	str	r0, [r4, #28]
 8010734:	b920      	cbnz	r0, 8010740 <_Balloc+0x20>
 8010736:	4b18      	ldr	r3, [pc, #96]	@ (8010798 <_Balloc+0x78>)
 8010738:	4818      	ldr	r0, [pc, #96]	@ (801079c <_Balloc+0x7c>)
 801073a:	216b      	movs	r1, #107	@ 0x6b
 801073c:	f000 fc4c 	bl	8010fd8 <__assert_func>
 8010740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010744:	6006      	str	r6, [r0, #0]
 8010746:	60c6      	str	r6, [r0, #12]
 8010748:	69e6      	ldr	r6, [r4, #28]
 801074a:	68f3      	ldr	r3, [r6, #12]
 801074c:	b183      	cbz	r3, 8010770 <_Balloc+0x50>
 801074e:	69e3      	ldr	r3, [r4, #28]
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010756:	b9b8      	cbnz	r0, 8010788 <_Balloc+0x68>
 8010758:	2101      	movs	r1, #1
 801075a:	fa01 f605 	lsl.w	r6, r1, r5
 801075e:	1d72      	adds	r2, r6, #5
 8010760:	0092      	lsls	r2, r2, #2
 8010762:	4620      	mov	r0, r4
 8010764:	f000 fc56 	bl	8011014 <_calloc_r>
 8010768:	b160      	cbz	r0, 8010784 <_Balloc+0x64>
 801076a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801076e:	e00e      	b.n	801078e <_Balloc+0x6e>
 8010770:	2221      	movs	r2, #33	@ 0x21
 8010772:	2104      	movs	r1, #4
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fc4d 	bl	8011014 <_calloc_r>
 801077a:	69e3      	ldr	r3, [r4, #28]
 801077c:	60f0      	str	r0, [r6, #12]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1e4      	bne.n	801074e <_Balloc+0x2e>
 8010784:	2000      	movs	r0, #0
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	6802      	ldr	r2, [r0, #0]
 801078a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801078e:	2300      	movs	r3, #0
 8010790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010794:	e7f7      	b.n	8010786 <_Balloc+0x66>
 8010796:	bf00      	nop
 8010798:	08012645 	.word	0x08012645
 801079c:	080126d6 	.word	0x080126d6

080107a0 <_Bfree>:
 80107a0:	b570      	push	{r4, r5, r6, lr}
 80107a2:	69c6      	ldr	r6, [r0, #28]
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
 80107a8:	b976      	cbnz	r6, 80107c8 <_Bfree+0x28>
 80107aa:	2010      	movs	r0, #16
 80107ac:	f7ff fe56 	bl	801045c <malloc>
 80107b0:	4602      	mov	r2, r0
 80107b2:	61e8      	str	r0, [r5, #28]
 80107b4:	b920      	cbnz	r0, 80107c0 <_Bfree+0x20>
 80107b6:	4b09      	ldr	r3, [pc, #36]	@ (80107dc <_Bfree+0x3c>)
 80107b8:	4809      	ldr	r0, [pc, #36]	@ (80107e0 <_Bfree+0x40>)
 80107ba:	218f      	movs	r1, #143	@ 0x8f
 80107bc:	f000 fc0c 	bl	8010fd8 <__assert_func>
 80107c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107c4:	6006      	str	r6, [r0, #0]
 80107c6:	60c6      	str	r6, [r0, #12]
 80107c8:	b13c      	cbz	r4, 80107da <_Bfree+0x3a>
 80107ca:	69eb      	ldr	r3, [r5, #28]
 80107cc:	6862      	ldr	r2, [r4, #4]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80107d4:	6021      	str	r1, [r4, #0]
 80107d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	08012645 	.word	0x08012645
 80107e0:	080126d6 	.word	0x080126d6

080107e4 <__multadd>:
 80107e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e8:	690d      	ldr	r5, [r1, #16]
 80107ea:	4607      	mov	r7, r0
 80107ec:	460c      	mov	r4, r1
 80107ee:	461e      	mov	r6, r3
 80107f0:	f101 0c14 	add.w	ip, r1, #20
 80107f4:	2000      	movs	r0, #0
 80107f6:	f8dc 3000 	ldr.w	r3, [ip]
 80107fa:	b299      	uxth	r1, r3
 80107fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010800:	0c1e      	lsrs	r6, r3, #16
 8010802:	0c0b      	lsrs	r3, r1, #16
 8010804:	fb02 3306 	mla	r3, r2, r6, r3
 8010808:	b289      	uxth	r1, r1
 801080a:	3001      	adds	r0, #1
 801080c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010810:	4285      	cmp	r5, r0
 8010812:	f84c 1b04 	str.w	r1, [ip], #4
 8010816:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801081a:	dcec      	bgt.n	80107f6 <__multadd+0x12>
 801081c:	b30e      	cbz	r6, 8010862 <__multadd+0x7e>
 801081e:	68a3      	ldr	r3, [r4, #8]
 8010820:	42ab      	cmp	r3, r5
 8010822:	dc19      	bgt.n	8010858 <__multadd+0x74>
 8010824:	6861      	ldr	r1, [r4, #4]
 8010826:	4638      	mov	r0, r7
 8010828:	3101      	adds	r1, #1
 801082a:	f7ff ff79 	bl	8010720 <_Balloc>
 801082e:	4680      	mov	r8, r0
 8010830:	b928      	cbnz	r0, 801083e <__multadd+0x5a>
 8010832:	4602      	mov	r2, r0
 8010834:	4b0c      	ldr	r3, [pc, #48]	@ (8010868 <__multadd+0x84>)
 8010836:	480d      	ldr	r0, [pc, #52]	@ (801086c <__multadd+0x88>)
 8010838:	21ba      	movs	r1, #186	@ 0xba
 801083a:	f000 fbcd 	bl	8010fd8 <__assert_func>
 801083e:	6922      	ldr	r2, [r4, #16]
 8010840:	3202      	adds	r2, #2
 8010842:	f104 010c 	add.w	r1, r4, #12
 8010846:	0092      	lsls	r2, r2, #2
 8010848:	300c      	adds	r0, #12
 801084a:	f7fe fdfd 	bl	800f448 <memcpy>
 801084e:	4621      	mov	r1, r4
 8010850:	4638      	mov	r0, r7
 8010852:	f7ff ffa5 	bl	80107a0 <_Bfree>
 8010856:	4644      	mov	r4, r8
 8010858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801085c:	3501      	adds	r5, #1
 801085e:	615e      	str	r6, [r3, #20]
 8010860:	6125      	str	r5, [r4, #16]
 8010862:	4620      	mov	r0, r4
 8010864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010868:	080126b4 	.word	0x080126b4
 801086c:	080126d6 	.word	0x080126d6

08010870 <__hi0bits>:
 8010870:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010874:	4603      	mov	r3, r0
 8010876:	bf36      	itet	cc
 8010878:	0403      	lslcc	r3, r0, #16
 801087a:	2000      	movcs	r0, #0
 801087c:	2010      	movcc	r0, #16
 801087e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010882:	bf3c      	itt	cc
 8010884:	021b      	lslcc	r3, r3, #8
 8010886:	3008      	addcc	r0, #8
 8010888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801088c:	bf3c      	itt	cc
 801088e:	011b      	lslcc	r3, r3, #4
 8010890:	3004      	addcc	r0, #4
 8010892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010896:	bf3c      	itt	cc
 8010898:	009b      	lslcc	r3, r3, #2
 801089a:	3002      	addcc	r0, #2
 801089c:	2b00      	cmp	r3, #0
 801089e:	db05      	blt.n	80108ac <__hi0bits+0x3c>
 80108a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80108a4:	f100 0001 	add.w	r0, r0, #1
 80108a8:	bf08      	it	eq
 80108aa:	2020      	moveq	r0, #32
 80108ac:	4770      	bx	lr

080108ae <__lo0bits>:
 80108ae:	6803      	ldr	r3, [r0, #0]
 80108b0:	4602      	mov	r2, r0
 80108b2:	f013 0007 	ands.w	r0, r3, #7
 80108b6:	d00b      	beq.n	80108d0 <__lo0bits+0x22>
 80108b8:	07d9      	lsls	r1, r3, #31
 80108ba:	d421      	bmi.n	8010900 <__lo0bits+0x52>
 80108bc:	0798      	lsls	r0, r3, #30
 80108be:	bf49      	itett	mi
 80108c0:	085b      	lsrmi	r3, r3, #1
 80108c2:	089b      	lsrpl	r3, r3, #2
 80108c4:	2001      	movmi	r0, #1
 80108c6:	6013      	strmi	r3, [r2, #0]
 80108c8:	bf5c      	itt	pl
 80108ca:	6013      	strpl	r3, [r2, #0]
 80108cc:	2002      	movpl	r0, #2
 80108ce:	4770      	bx	lr
 80108d0:	b299      	uxth	r1, r3
 80108d2:	b909      	cbnz	r1, 80108d8 <__lo0bits+0x2a>
 80108d4:	0c1b      	lsrs	r3, r3, #16
 80108d6:	2010      	movs	r0, #16
 80108d8:	b2d9      	uxtb	r1, r3
 80108da:	b909      	cbnz	r1, 80108e0 <__lo0bits+0x32>
 80108dc:	3008      	adds	r0, #8
 80108de:	0a1b      	lsrs	r3, r3, #8
 80108e0:	0719      	lsls	r1, r3, #28
 80108e2:	bf04      	itt	eq
 80108e4:	091b      	lsreq	r3, r3, #4
 80108e6:	3004      	addeq	r0, #4
 80108e8:	0799      	lsls	r1, r3, #30
 80108ea:	bf04      	itt	eq
 80108ec:	089b      	lsreq	r3, r3, #2
 80108ee:	3002      	addeq	r0, #2
 80108f0:	07d9      	lsls	r1, r3, #31
 80108f2:	d403      	bmi.n	80108fc <__lo0bits+0x4e>
 80108f4:	085b      	lsrs	r3, r3, #1
 80108f6:	f100 0001 	add.w	r0, r0, #1
 80108fa:	d003      	beq.n	8010904 <__lo0bits+0x56>
 80108fc:	6013      	str	r3, [r2, #0]
 80108fe:	4770      	bx	lr
 8010900:	2000      	movs	r0, #0
 8010902:	4770      	bx	lr
 8010904:	2020      	movs	r0, #32
 8010906:	4770      	bx	lr

08010908 <__i2b>:
 8010908:	b510      	push	{r4, lr}
 801090a:	460c      	mov	r4, r1
 801090c:	2101      	movs	r1, #1
 801090e:	f7ff ff07 	bl	8010720 <_Balloc>
 8010912:	4602      	mov	r2, r0
 8010914:	b928      	cbnz	r0, 8010922 <__i2b+0x1a>
 8010916:	4b05      	ldr	r3, [pc, #20]	@ (801092c <__i2b+0x24>)
 8010918:	4805      	ldr	r0, [pc, #20]	@ (8010930 <__i2b+0x28>)
 801091a:	f240 1145 	movw	r1, #325	@ 0x145
 801091e:	f000 fb5b 	bl	8010fd8 <__assert_func>
 8010922:	2301      	movs	r3, #1
 8010924:	6144      	str	r4, [r0, #20]
 8010926:	6103      	str	r3, [r0, #16]
 8010928:	bd10      	pop	{r4, pc}
 801092a:	bf00      	nop
 801092c:	080126b4 	.word	0x080126b4
 8010930:	080126d6 	.word	0x080126d6

08010934 <__multiply>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	4617      	mov	r7, r2
 801093a:	690a      	ldr	r2, [r1, #16]
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	429a      	cmp	r2, r3
 8010940:	bfa8      	it	ge
 8010942:	463b      	movge	r3, r7
 8010944:	4689      	mov	r9, r1
 8010946:	bfa4      	itt	ge
 8010948:	460f      	movge	r7, r1
 801094a:	4699      	movge	r9, r3
 801094c:	693d      	ldr	r5, [r7, #16]
 801094e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6879      	ldr	r1, [r7, #4]
 8010956:	eb05 060a 	add.w	r6, r5, sl
 801095a:	42b3      	cmp	r3, r6
 801095c:	b085      	sub	sp, #20
 801095e:	bfb8      	it	lt
 8010960:	3101      	addlt	r1, #1
 8010962:	f7ff fedd 	bl	8010720 <_Balloc>
 8010966:	b930      	cbnz	r0, 8010976 <__multiply+0x42>
 8010968:	4602      	mov	r2, r0
 801096a:	4b41      	ldr	r3, [pc, #260]	@ (8010a70 <__multiply+0x13c>)
 801096c:	4841      	ldr	r0, [pc, #260]	@ (8010a74 <__multiply+0x140>)
 801096e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010972:	f000 fb31 	bl	8010fd8 <__assert_func>
 8010976:	f100 0414 	add.w	r4, r0, #20
 801097a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801097e:	4623      	mov	r3, r4
 8010980:	2200      	movs	r2, #0
 8010982:	4573      	cmp	r3, lr
 8010984:	d320      	bcc.n	80109c8 <__multiply+0x94>
 8010986:	f107 0814 	add.w	r8, r7, #20
 801098a:	f109 0114 	add.w	r1, r9, #20
 801098e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010992:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010996:	9302      	str	r3, [sp, #8]
 8010998:	1beb      	subs	r3, r5, r7
 801099a:	3b15      	subs	r3, #21
 801099c:	f023 0303 	bic.w	r3, r3, #3
 80109a0:	3304      	adds	r3, #4
 80109a2:	3715      	adds	r7, #21
 80109a4:	42bd      	cmp	r5, r7
 80109a6:	bf38      	it	cc
 80109a8:	2304      	movcc	r3, #4
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	9b02      	ldr	r3, [sp, #8]
 80109ae:	9103      	str	r1, [sp, #12]
 80109b0:	428b      	cmp	r3, r1
 80109b2:	d80c      	bhi.n	80109ce <__multiply+0x9a>
 80109b4:	2e00      	cmp	r6, #0
 80109b6:	dd03      	ble.n	80109c0 <__multiply+0x8c>
 80109b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d055      	beq.n	8010a6c <__multiply+0x138>
 80109c0:	6106      	str	r6, [r0, #16]
 80109c2:	b005      	add	sp, #20
 80109c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c8:	f843 2b04 	str.w	r2, [r3], #4
 80109cc:	e7d9      	b.n	8010982 <__multiply+0x4e>
 80109ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80109d2:	f1ba 0f00 	cmp.w	sl, #0
 80109d6:	d01f      	beq.n	8010a18 <__multiply+0xe4>
 80109d8:	46c4      	mov	ip, r8
 80109da:	46a1      	mov	r9, r4
 80109dc:	2700      	movs	r7, #0
 80109de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109e2:	f8d9 3000 	ldr.w	r3, [r9]
 80109e6:	fa1f fb82 	uxth.w	fp, r2
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80109f0:	443b      	add	r3, r7
 80109f2:	f8d9 7000 	ldr.w	r7, [r9]
 80109f6:	0c12      	lsrs	r2, r2, #16
 80109f8:	0c3f      	lsrs	r7, r7, #16
 80109fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80109fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a08:	4565      	cmp	r5, ip
 8010a0a:	f849 3b04 	str.w	r3, [r9], #4
 8010a0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010a12:	d8e4      	bhi.n	80109de <__multiply+0xaa>
 8010a14:	9b01      	ldr	r3, [sp, #4]
 8010a16:	50e7      	str	r7, [r4, r3]
 8010a18:	9b03      	ldr	r3, [sp, #12]
 8010a1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010a1e:	3104      	adds	r1, #4
 8010a20:	f1b9 0f00 	cmp.w	r9, #0
 8010a24:	d020      	beq.n	8010a68 <__multiply+0x134>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	4647      	mov	r7, r8
 8010a2a:	46a4      	mov	ip, r4
 8010a2c:	f04f 0a00 	mov.w	sl, #0
 8010a30:	f8b7 b000 	ldrh.w	fp, [r7]
 8010a34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010a38:	fb09 220b 	mla	r2, r9, fp, r2
 8010a3c:	4452      	add	r2, sl
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a44:	f84c 3b04 	str.w	r3, [ip], #4
 8010a48:	f857 3b04 	ldr.w	r3, [r7], #4
 8010a4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a50:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a54:	fb09 330a 	mla	r3, r9, sl, r3
 8010a58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010a5c:	42bd      	cmp	r5, r7
 8010a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a62:	d8e5      	bhi.n	8010a30 <__multiply+0xfc>
 8010a64:	9a01      	ldr	r2, [sp, #4]
 8010a66:	50a3      	str	r3, [r4, r2]
 8010a68:	3404      	adds	r4, #4
 8010a6a:	e79f      	b.n	80109ac <__multiply+0x78>
 8010a6c:	3e01      	subs	r6, #1
 8010a6e:	e7a1      	b.n	80109b4 <__multiply+0x80>
 8010a70:	080126b4 	.word	0x080126b4
 8010a74:	080126d6 	.word	0x080126d6

08010a78 <__pow5mult>:
 8010a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a7c:	4615      	mov	r5, r2
 8010a7e:	f012 0203 	ands.w	r2, r2, #3
 8010a82:	4607      	mov	r7, r0
 8010a84:	460e      	mov	r6, r1
 8010a86:	d007      	beq.n	8010a98 <__pow5mult+0x20>
 8010a88:	4c25      	ldr	r4, [pc, #148]	@ (8010b20 <__pow5mult+0xa8>)
 8010a8a:	3a01      	subs	r2, #1
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a92:	f7ff fea7 	bl	80107e4 <__multadd>
 8010a96:	4606      	mov	r6, r0
 8010a98:	10ad      	asrs	r5, r5, #2
 8010a9a:	d03d      	beq.n	8010b18 <__pow5mult+0xa0>
 8010a9c:	69fc      	ldr	r4, [r7, #28]
 8010a9e:	b97c      	cbnz	r4, 8010ac0 <__pow5mult+0x48>
 8010aa0:	2010      	movs	r0, #16
 8010aa2:	f7ff fcdb 	bl	801045c <malloc>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	61f8      	str	r0, [r7, #28]
 8010aaa:	b928      	cbnz	r0, 8010ab8 <__pow5mult+0x40>
 8010aac:	4b1d      	ldr	r3, [pc, #116]	@ (8010b24 <__pow5mult+0xac>)
 8010aae:	481e      	ldr	r0, [pc, #120]	@ (8010b28 <__pow5mult+0xb0>)
 8010ab0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010ab4:	f000 fa90 	bl	8010fd8 <__assert_func>
 8010ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010abc:	6004      	str	r4, [r0, #0]
 8010abe:	60c4      	str	r4, [r0, #12]
 8010ac0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ac8:	b94c      	cbnz	r4, 8010ade <__pow5mult+0x66>
 8010aca:	f240 2171 	movw	r1, #625	@ 0x271
 8010ace:	4638      	mov	r0, r7
 8010ad0:	f7ff ff1a 	bl	8010908 <__i2b>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ada:	4604      	mov	r4, r0
 8010adc:	6003      	str	r3, [r0, #0]
 8010ade:	f04f 0900 	mov.w	r9, #0
 8010ae2:	07eb      	lsls	r3, r5, #31
 8010ae4:	d50a      	bpl.n	8010afc <__pow5mult+0x84>
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4622      	mov	r2, r4
 8010aea:	4638      	mov	r0, r7
 8010aec:	f7ff ff22 	bl	8010934 <__multiply>
 8010af0:	4631      	mov	r1, r6
 8010af2:	4680      	mov	r8, r0
 8010af4:	4638      	mov	r0, r7
 8010af6:	f7ff fe53 	bl	80107a0 <_Bfree>
 8010afa:	4646      	mov	r6, r8
 8010afc:	106d      	asrs	r5, r5, #1
 8010afe:	d00b      	beq.n	8010b18 <__pow5mult+0xa0>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	b938      	cbnz	r0, 8010b14 <__pow5mult+0x9c>
 8010b04:	4622      	mov	r2, r4
 8010b06:	4621      	mov	r1, r4
 8010b08:	4638      	mov	r0, r7
 8010b0a:	f7ff ff13 	bl	8010934 <__multiply>
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	f8c0 9000 	str.w	r9, [r0]
 8010b14:	4604      	mov	r4, r0
 8010b16:	e7e4      	b.n	8010ae2 <__pow5mult+0x6a>
 8010b18:	4630      	mov	r0, r6
 8010b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1e:	bf00      	nop
 8010b20:	08012778 	.word	0x08012778
 8010b24:	08012645 	.word	0x08012645
 8010b28:	080126d6 	.word	0x080126d6

08010b2c <__lshift>:
 8010b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b30:	460c      	mov	r4, r1
 8010b32:	6849      	ldr	r1, [r1, #4]
 8010b34:	6923      	ldr	r3, [r4, #16]
 8010b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b3a:	68a3      	ldr	r3, [r4, #8]
 8010b3c:	4607      	mov	r7, r0
 8010b3e:	4691      	mov	r9, r2
 8010b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b44:	f108 0601 	add.w	r6, r8, #1
 8010b48:	42b3      	cmp	r3, r6
 8010b4a:	db0b      	blt.n	8010b64 <__lshift+0x38>
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	f7ff fde7 	bl	8010720 <_Balloc>
 8010b52:	4605      	mov	r5, r0
 8010b54:	b948      	cbnz	r0, 8010b6a <__lshift+0x3e>
 8010b56:	4602      	mov	r2, r0
 8010b58:	4b28      	ldr	r3, [pc, #160]	@ (8010bfc <__lshift+0xd0>)
 8010b5a:	4829      	ldr	r0, [pc, #164]	@ (8010c00 <__lshift+0xd4>)
 8010b5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b60:	f000 fa3a 	bl	8010fd8 <__assert_func>
 8010b64:	3101      	adds	r1, #1
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	e7ee      	b.n	8010b48 <__lshift+0x1c>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f100 0114 	add.w	r1, r0, #20
 8010b70:	f100 0210 	add.w	r2, r0, #16
 8010b74:	4618      	mov	r0, r3
 8010b76:	4553      	cmp	r3, sl
 8010b78:	db33      	blt.n	8010be2 <__lshift+0xb6>
 8010b7a:	6920      	ldr	r0, [r4, #16]
 8010b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b80:	f104 0314 	add.w	r3, r4, #20
 8010b84:	f019 091f 	ands.w	r9, r9, #31
 8010b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b90:	d02b      	beq.n	8010bea <__lshift+0xbe>
 8010b92:	f1c9 0e20 	rsb	lr, r9, #32
 8010b96:	468a      	mov	sl, r1
 8010b98:	2200      	movs	r2, #0
 8010b9a:	6818      	ldr	r0, [r3, #0]
 8010b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8010ba0:	4310      	orrs	r0, r2
 8010ba2:	f84a 0b04 	str.w	r0, [sl], #4
 8010ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010baa:	459c      	cmp	ip, r3
 8010bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8010bb0:	d8f3      	bhi.n	8010b9a <__lshift+0x6e>
 8010bb2:	ebac 0304 	sub.w	r3, ip, r4
 8010bb6:	3b15      	subs	r3, #21
 8010bb8:	f023 0303 	bic.w	r3, r3, #3
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	f104 0015 	add.w	r0, r4, #21
 8010bc2:	4560      	cmp	r0, ip
 8010bc4:	bf88      	it	hi
 8010bc6:	2304      	movhi	r3, #4
 8010bc8:	50ca      	str	r2, [r1, r3]
 8010bca:	b10a      	cbz	r2, 8010bd0 <__lshift+0xa4>
 8010bcc:	f108 0602 	add.w	r6, r8, #2
 8010bd0:	3e01      	subs	r6, #1
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	612e      	str	r6, [r5, #16]
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	f7ff fde2 	bl	80107a0 <_Bfree>
 8010bdc:	4628      	mov	r0, r5
 8010bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010be6:	3301      	adds	r3, #1
 8010be8:	e7c5      	b.n	8010b76 <__lshift+0x4a>
 8010bea:	3904      	subs	r1, #4
 8010bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bf4:	459c      	cmp	ip, r3
 8010bf6:	d8f9      	bhi.n	8010bec <__lshift+0xc0>
 8010bf8:	e7ea      	b.n	8010bd0 <__lshift+0xa4>
 8010bfa:	bf00      	nop
 8010bfc:	080126b4 	.word	0x080126b4
 8010c00:	080126d6 	.word	0x080126d6

08010c04 <__mcmp>:
 8010c04:	690a      	ldr	r2, [r1, #16]
 8010c06:	4603      	mov	r3, r0
 8010c08:	6900      	ldr	r0, [r0, #16]
 8010c0a:	1a80      	subs	r0, r0, r2
 8010c0c:	b530      	push	{r4, r5, lr}
 8010c0e:	d10e      	bne.n	8010c2e <__mcmp+0x2a>
 8010c10:	3314      	adds	r3, #20
 8010c12:	3114      	adds	r1, #20
 8010c14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010c18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010c24:	4295      	cmp	r5, r2
 8010c26:	d003      	beq.n	8010c30 <__mcmp+0x2c>
 8010c28:	d205      	bcs.n	8010c36 <__mcmp+0x32>
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c2e:	bd30      	pop	{r4, r5, pc}
 8010c30:	42a3      	cmp	r3, r4
 8010c32:	d3f3      	bcc.n	8010c1c <__mcmp+0x18>
 8010c34:	e7fb      	b.n	8010c2e <__mcmp+0x2a>
 8010c36:	2001      	movs	r0, #1
 8010c38:	e7f9      	b.n	8010c2e <__mcmp+0x2a>
	...

08010c3c <__mdiff>:
 8010c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	4689      	mov	r9, r1
 8010c42:	4606      	mov	r6, r0
 8010c44:	4611      	mov	r1, r2
 8010c46:	4648      	mov	r0, r9
 8010c48:	4614      	mov	r4, r2
 8010c4a:	f7ff ffdb 	bl	8010c04 <__mcmp>
 8010c4e:	1e05      	subs	r5, r0, #0
 8010c50:	d112      	bne.n	8010c78 <__mdiff+0x3c>
 8010c52:	4629      	mov	r1, r5
 8010c54:	4630      	mov	r0, r6
 8010c56:	f7ff fd63 	bl	8010720 <_Balloc>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	b928      	cbnz	r0, 8010c6a <__mdiff+0x2e>
 8010c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8010d5c <__mdiff+0x120>)
 8010c60:	f240 2137 	movw	r1, #567	@ 0x237
 8010c64:	483e      	ldr	r0, [pc, #248]	@ (8010d60 <__mdiff+0x124>)
 8010c66:	f000 f9b7 	bl	8010fd8 <__assert_func>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c70:	4610      	mov	r0, r2
 8010c72:	b003      	add	sp, #12
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	bfbc      	itt	lt
 8010c7a:	464b      	movlt	r3, r9
 8010c7c:	46a1      	movlt	r9, r4
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c84:	bfba      	itte	lt
 8010c86:	461c      	movlt	r4, r3
 8010c88:	2501      	movlt	r5, #1
 8010c8a:	2500      	movge	r5, #0
 8010c8c:	f7ff fd48 	bl	8010720 <_Balloc>
 8010c90:	4602      	mov	r2, r0
 8010c92:	b918      	cbnz	r0, 8010c9c <__mdiff+0x60>
 8010c94:	4b31      	ldr	r3, [pc, #196]	@ (8010d5c <__mdiff+0x120>)
 8010c96:	f240 2145 	movw	r1, #581	@ 0x245
 8010c9a:	e7e3      	b.n	8010c64 <__mdiff+0x28>
 8010c9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010ca0:	6926      	ldr	r6, [r4, #16]
 8010ca2:	60c5      	str	r5, [r0, #12]
 8010ca4:	f109 0310 	add.w	r3, r9, #16
 8010ca8:	f109 0514 	add.w	r5, r9, #20
 8010cac:	f104 0e14 	add.w	lr, r4, #20
 8010cb0:	f100 0b14 	add.w	fp, r0, #20
 8010cb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010cb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	46d9      	mov	r9, fp
 8010cc0:	f04f 0c00 	mov.w	ip, #0
 8010cc4:	9b01      	ldr	r3, [sp, #4]
 8010cc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010cca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	fa1f f38a 	uxth.w	r3, sl
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	b283      	uxth	r3, r0
 8010cd8:	1acb      	subs	r3, r1, r3
 8010cda:	0c00      	lsrs	r0, r0, #16
 8010cdc:	4463      	add	r3, ip
 8010cde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ce2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010cec:	4576      	cmp	r6, lr
 8010cee:	f849 3b04 	str.w	r3, [r9], #4
 8010cf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cf6:	d8e5      	bhi.n	8010cc4 <__mdiff+0x88>
 8010cf8:	1b33      	subs	r3, r6, r4
 8010cfa:	3b15      	subs	r3, #21
 8010cfc:	f023 0303 	bic.w	r3, r3, #3
 8010d00:	3415      	adds	r4, #21
 8010d02:	3304      	adds	r3, #4
 8010d04:	42a6      	cmp	r6, r4
 8010d06:	bf38      	it	cc
 8010d08:	2304      	movcc	r3, #4
 8010d0a:	441d      	add	r5, r3
 8010d0c:	445b      	add	r3, fp
 8010d0e:	461e      	mov	r6, r3
 8010d10:	462c      	mov	r4, r5
 8010d12:	4544      	cmp	r4, r8
 8010d14:	d30e      	bcc.n	8010d34 <__mdiff+0xf8>
 8010d16:	f108 0103 	add.w	r1, r8, #3
 8010d1a:	1b49      	subs	r1, r1, r5
 8010d1c:	f021 0103 	bic.w	r1, r1, #3
 8010d20:	3d03      	subs	r5, #3
 8010d22:	45a8      	cmp	r8, r5
 8010d24:	bf38      	it	cc
 8010d26:	2100      	movcc	r1, #0
 8010d28:	440b      	add	r3, r1
 8010d2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d2e:	b191      	cbz	r1, 8010d56 <__mdiff+0x11a>
 8010d30:	6117      	str	r7, [r2, #16]
 8010d32:	e79d      	b.n	8010c70 <__mdiff+0x34>
 8010d34:	f854 1b04 	ldr.w	r1, [r4], #4
 8010d38:	46e6      	mov	lr, ip
 8010d3a:	0c08      	lsrs	r0, r1, #16
 8010d3c:	fa1c fc81 	uxtah	ip, ip, r1
 8010d40:	4471      	add	r1, lr
 8010d42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d46:	b289      	uxth	r1, r1
 8010d48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d4c:	f846 1b04 	str.w	r1, [r6], #4
 8010d50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d54:	e7dd      	b.n	8010d12 <__mdiff+0xd6>
 8010d56:	3f01      	subs	r7, #1
 8010d58:	e7e7      	b.n	8010d2a <__mdiff+0xee>
 8010d5a:	bf00      	nop
 8010d5c:	080126b4 	.word	0x080126b4
 8010d60:	080126d6 	.word	0x080126d6

08010d64 <__d2b>:
 8010d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d68:	460f      	mov	r7, r1
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	ec59 8b10 	vmov	r8, r9, d0
 8010d70:	4616      	mov	r6, r2
 8010d72:	f7ff fcd5 	bl	8010720 <_Balloc>
 8010d76:	4604      	mov	r4, r0
 8010d78:	b930      	cbnz	r0, 8010d88 <__d2b+0x24>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	4b23      	ldr	r3, [pc, #140]	@ (8010e0c <__d2b+0xa8>)
 8010d7e:	4824      	ldr	r0, [pc, #144]	@ (8010e10 <__d2b+0xac>)
 8010d80:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d84:	f000 f928 	bl	8010fd8 <__assert_func>
 8010d88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d90:	b10d      	cbz	r5, 8010d96 <__d2b+0x32>
 8010d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d96:	9301      	str	r3, [sp, #4]
 8010d98:	f1b8 0300 	subs.w	r3, r8, #0
 8010d9c:	d023      	beq.n	8010de6 <__d2b+0x82>
 8010d9e:	4668      	mov	r0, sp
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	f7ff fd84 	bl	80108ae <__lo0bits>
 8010da6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010daa:	b1d0      	cbz	r0, 8010de2 <__d2b+0x7e>
 8010dac:	f1c0 0320 	rsb	r3, r0, #32
 8010db0:	fa02 f303 	lsl.w	r3, r2, r3
 8010db4:	430b      	orrs	r3, r1
 8010db6:	40c2      	lsrs	r2, r0
 8010db8:	6163      	str	r3, [r4, #20]
 8010dba:	9201      	str	r2, [sp, #4]
 8010dbc:	9b01      	ldr	r3, [sp, #4]
 8010dbe:	61a3      	str	r3, [r4, #24]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	bf0c      	ite	eq
 8010dc4:	2201      	moveq	r2, #1
 8010dc6:	2202      	movne	r2, #2
 8010dc8:	6122      	str	r2, [r4, #16]
 8010dca:	b1a5      	cbz	r5, 8010df6 <__d2b+0x92>
 8010dcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010dd0:	4405      	add	r5, r0
 8010dd2:	603d      	str	r5, [r7, #0]
 8010dd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010dd8:	6030      	str	r0, [r6, #0]
 8010dda:	4620      	mov	r0, r4
 8010ddc:	b003      	add	sp, #12
 8010dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010de2:	6161      	str	r1, [r4, #20]
 8010de4:	e7ea      	b.n	8010dbc <__d2b+0x58>
 8010de6:	a801      	add	r0, sp, #4
 8010de8:	f7ff fd61 	bl	80108ae <__lo0bits>
 8010dec:	9b01      	ldr	r3, [sp, #4]
 8010dee:	6163      	str	r3, [r4, #20]
 8010df0:	3020      	adds	r0, #32
 8010df2:	2201      	movs	r2, #1
 8010df4:	e7e8      	b.n	8010dc8 <__d2b+0x64>
 8010df6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010dfe:	6038      	str	r0, [r7, #0]
 8010e00:	6918      	ldr	r0, [r3, #16]
 8010e02:	f7ff fd35 	bl	8010870 <__hi0bits>
 8010e06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e0a:	e7e5      	b.n	8010dd8 <__d2b+0x74>
 8010e0c:	080126b4 	.word	0x080126b4
 8010e10:	080126d6 	.word	0x080126d6

08010e14 <__sread>:
 8010e14:	b510      	push	{r4, lr}
 8010e16:	460c      	mov	r4, r1
 8010e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e1c:	f000 f898 	bl	8010f50 <_read_r>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	bfab      	itete	ge
 8010e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e26:	89a3      	ldrhlt	r3, [r4, #12]
 8010e28:	181b      	addge	r3, r3, r0
 8010e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e2e:	bfac      	ite	ge
 8010e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e32:	81a3      	strhlt	r3, [r4, #12]
 8010e34:	bd10      	pop	{r4, pc}

08010e36 <__swrite>:
 8010e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3a:	461f      	mov	r7, r3
 8010e3c:	898b      	ldrh	r3, [r1, #12]
 8010e3e:	05db      	lsls	r3, r3, #23
 8010e40:	4605      	mov	r5, r0
 8010e42:	460c      	mov	r4, r1
 8010e44:	4616      	mov	r6, r2
 8010e46:	d505      	bpl.n	8010e54 <__swrite+0x1e>
 8010e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f000 f86c 	bl	8010f2c <_lseek_r>
 8010e54:	89a3      	ldrh	r3, [r4, #12]
 8010e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e5e:	81a3      	strh	r3, [r4, #12]
 8010e60:	4632      	mov	r2, r6
 8010e62:	463b      	mov	r3, r7
 8010e64:	4628      	mov	r0, r5
 8010e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6a:	f000 b893 	b.w	8010f94 <_write_r>

08010e6e <__sseek>:
 8010e6e:	b510      	push	{r4, lr}
 8010e70:	460c      	mov	r4, r1
 8010e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e76:	f000 f859 	bl	8010f2c <_lseek_r>
 8010e7a:	1c43      	adds	r3, r0, #1
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	bf15      	itete	ne
 8010e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e8a:	81a3      	strheq	r3, [r4, #12]
 8010e8c:	bf18      	it	ne
 8010e8e:	81a3      	strhne	r3, [r4, #12]
 8010e90:	bd10      	pop	{r4, pc}

08010e92 <__sclose>:
 8010e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e96:	f000 b88f 	b.w	8010fb8 <_close_r>

08010e9a <_realloc_r>:
 8010e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9e:	4607      	mov	r7, r0
 8010ea0:	4614      	mov	r4, r2
 8010ea2:	460d      	mov	r5, r1
 8010ea4:	b921      	cbnz	r1, 8010eb0 <_realloc_r+0x16>
 8010ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eaa:	4611      	mov	r1, r2
 8010eac:	f7ff bb00 	b.w	80104b0 <_malloc_r>
 8010eb0:	b92a      	cbnz	r2, 8010ebe <_realloc_r+0x24>
 8010eb2:	f7ff f931 	bl	8010118 <_free_r>
 8010eb6:	4625      	mov	r5, r4
 8010eb8:	4628      	mov	r0, r5
 8010eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ebe:	f000 f8cf 	bl	8011060 <_malloc_usable_size_r>
 8010ec2:	4284      	cmp	r4, r0
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	d802      	bhi.n	8010ece <_realloc_r+0x34>
 8010ec8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ecc:	d8f4      	bhi.n	8010eb8 <_realloc_r+0x1e>
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4638      	mov	r0, r7
 8010ed2:	f7ff faed 	bl	80104b0 <_malloc_r>
 8010ed6:	4680      	mov	r8, r0
 8010ed8:	b908      	cbnz	r0, 8010ede <_realloc_r+0x44>
 8010eda:	4645      	mov	r5, r8
 8010edc:	e7ec      	b.n	8010eb8 <_realloc_r+0x1e>
 8010ede:	42b4      	cmp	r4, r6
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	bf28      	it	cs
 8010ee6:	4632      	movcs	r2, r6
 8010ee8:	f7fe faae 	bl	800f448 <memcpy>
 8010eec:	4629      	mov	r1, r5
 8010eee:	4638      	mov	r0, r7
 8010ef0:	f7ff f912 	bl	8010118 <_free_r>
 8010ef4:	e7f1      	b.n	8010eda <_realloc_r+0x40>

08010ef6 <memmove>:
 8010ef6:	4288      	cmp	r0, r1
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	eb01 0402 	add.w	r4, r1, r2
 8010efe:	d902      	bls.n	8010f06 <memmove+0x10>
 8010f00:	4284      	cmp	r4, r0
 8010f02:	4623      	mov	r3, r4
 8010f04:	d807      	bhi.n	8010f16 <memmove+0x20>
 8010f06:	1e43      	subs	r3, r0, #1
 8010f08:	42a1      	cmp	r1, r4
 8010f0a:	d008      	beq.n	8010f1e <memmove+0x28>
 8010f0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f14:	e7f8      	b.n	8010f08 <memmove+0x12>
 8010f16:	4402      	add	r2, r0
 8010f18:	4601      	mov	r1, r0
 8010f1a:	428a      	cmp	r2, r1
 8010f1c:	d100      	bne.n	8010f20 <memmove+0x2a>
 8010f1e:	bd10      	pop	{r4, pc}
 8010f20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f28:	e7f7      	b.n	8010f1a <memmove+0x24>
	...

08010f2c <_lseek_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4d07      	ldr	r5, [pc, #28]	@ (8010f4c <_lseek_r+0x20>)
 8010f30:	4604      	mov	r4, r0
 8010f32:	4608      	mov	r0, r1
 8010f34:	4611      	mov	r1, r2
 8010f36:	2200      	movs	r2, #0
 8010f38:	602a      	str	r2, [r5, #0]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f7f5 fda7 	bl	8006a8e <_lseek>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	d102      	bne.n	8010f4a <_lseek_r+0x1e>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b103      	cbz	r3, 8010f4a <_lseek_r+0x1e>
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	20005b28 	.word	0x20005b28

08010f50 <_read_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	4d07      	ldr	r5, [pc, #28]	@ (8010f70 <_read_r+0x20>)
 8010f54:	4604      	mov	r4, r0
 8010f56:	4608      	mov	r0, r1
 8010f58:	4611      	mov	r1, r2
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	602a      	str	r2, [r5, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	f7f5 fd35 	bl	80069ce <_read>
 8010f64:	1c43      	adds	r3, r0, #1
 8010f66:	d102      	bne.n	8010f6e <_read_r+0x1e>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	b103      	cbz	r3, 8010f6e <_read_r+0x1e>
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	20005b28 	.word	0x20005b28

08010f74 <_sbrk_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	4d06      	ldr	r5, [pc, #24]	@ (8010f90 <_sbrk_r+0x1c>)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	4608      	mov	r0, r1
 8010f7e:	602b      	str	r3, [r5, #0]
 8010f80:	f7f5 fd92 	bl	8006aa8 <_sbrk>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <_sbrk_r+0x1a>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	b103      	cbz	r3, 8010f8e <_sbrk_r+0x1a>
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	20005b28 	.word	0x20005b28

08010f94 <_write_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d07      	ldr	r5, [pc, #28]	@ (8010fb4 <_write_r+0x20>)
 8010f98:	4604      	mov	r4, r0
 8010f9a:	4608      	mov	r0, r1
 8010f9c:	4611      	mov	r1, r2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	602a      	str	r2, [r5, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	f7f5 fd30 	bl	8006a08 <_write>
 8010fa8:	1c43      	adds	r3, r0, #1
 8010faa:	d102      	bne.n	8010fb2 <_write_r+0x1e>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	b103      	cbz	r3, 8010fb2 <_write_r+0x1e>
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	bd38      	pop	{r3, r4, r5, pc}
 8010fb4:	20005b28 	.word	0x20005b28

08010fb8 <_close_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4d06      	ldr	r5, [pc, #24]	@ (8010fd4 <_close_r+0x1c>)
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	602b      	str	r3, [r5, #0]
 8010fc4:	f7f5 fd3c 	bl	8006a40 <_close>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d102      	bne.n	8010fd2 <_close_r+0x1a>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	b103      	cbz	r3, 8010fd2 <_close_r+0x1a>
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	bd38      	pop	{r3, r4, r5, pc}
 8010fd4:	20005b28 	.word	0x20005b28

08010fd8 <__assert_func>:
 8010fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fda:	4614      	mov	r4, r2
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b09      	ldr	r3, [pc, #36]	@ (8011004 <__assert_func+0x2c>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4605      	mov	r5, r0
 8010fe4:	68d8      	ldr	r0, [r3, #12]
 8010fe6:	b14c      	cbz	r4, 8010ffc <__assert_func+0x24>
 8010fe8:	4b07      	ldr	r3, [pc, #28]	@ (8011008 <__assert_func+0x30>)
 8010fea:	9100      	str	r1, [sp, #0]
 8010fec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ff0:	4906      	ldr	r1, [pc, #24]	@ (801100c <__assert_func+0x34>)
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	f000 f83c 	bl	8011070 <fiprintf>
 8010ff8:	f000 f859 	bl	80110ae <abort>
 8010ffc:	4b04      	ldr	r3, [pc, #16]	@ (8011010 <__assert_func+0x38>)
 8010ffe:	461c      	mov	r4, r3
 8011000:	e7f3      	b.n	8010fea <__assert_func+0x12>
 8011002:	bf00      	nop
 8011004:	20000078 	.word	0x20000078
 8011008:	08012739 	.word	0x08012739
 801100c:	08012746 	.word	0x08012746
 8011010:	08012774 	.word	0x08012774

08011014 <_calloc_r>:
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	fba1 5402 	umull	r5, r4, r1, r2
 801101a:	b934      	cbnz	r4, 801102a <_calloc_r+0x16>
 801101c:	4629      	mov	r1, r5
 801101e:	f7ff fa47 	bl	80104b0 <_malloc_r>
 8011022:	4606      	mov	r6, r0
 8011024:	b928      	cbnz	r0, 8011032 <_calloc_r+0x1e>
 8011026:	4630      	mov	r0, r6
 8011028:	bd70      	pop	{r4, r5, r6, pc}
 801102a:	220c      	movs	r2, #12
 801102c:	6002      	str	r2, [r0, #0]
 801102e:	2600      	movs	r6, #0
 8011030:	e7f9      	b.n	8011026 <_calloc_r+0x12>
 8011032:	462a      	mov	r2, r5
 8011034:	4621      	mov	r1, r4
 8011036:	f7fe f96f 	bl	800f318 <memset>
 801103a:	e7f4      	b.n	8011026 <_calloc_r+0x12>

0801103c <__ascii_mbtowc>:
 801103c:	b082      	sub	sp, #8
 801103e:	b901      	cbnz	r1, 8011042 <__ascii_mbtowc+0x6>
 8011040:	a901      	add	r1, sp, #4
 8011042:	b142      	cbz	r2, 8011056 <__ascii_mbtowc+0x1a>
 8011044:	b14b      	cbz	r3, 801105a <__ascii_mbtowc+0x1e>
 8011046:	7813      	ldrb	r3, [r2, #0]
 8011048:	600b      	str	r3, [r1, #0]
 801104a:	7812      	ldrb	r2, [r2, #0]
 801104c:	1e10      	subs	r0, r2, #0
 801104e:	bf18      	it	ne
 8011050:	2001      	movne	r0, #1
 8011052:	b002      	add	sp, #8
 8011054:	4770      	bx	lr
 8011056:	4610      	mov	r0, r2
 8011058:	e7fb      	b.n	8011052 <__ascii_mbtowc+0x16>
 801105a:	f06f 0001 	mvn.w	r0, #1
 801105e:	e7f8      	b.n	8011052 <__ascii_mbtowc+0x16>

08011060 <_malloc_usable_size_r>:
 8011060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011064:	1f18      	subs	r0, r3, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	bfbc      	itt	lt
 801106a:	580b      	ldrlt	r3, [r1, r0]
 801106c:	18c0      	addlt	r0, r0, r3
 801106e:	4770      	bx	lr

08011070 <fiprintf>:
 8011070:	b40e      	push	{r1, r2, r3}
 8011072:	b503      	push	{r0, r1, lr}
 8011074:	4601      	mov	r1, r0
 8011076:	ab03      	add	r3, sp, #12
 8011078:	4805      	ldr	r0, [pc, #20]	@ (8011090 <fiprintf+0x20>)
 801107a:	f853 2b04 	ldr.w	r2, [r3], #4
 801107e:	6800      	ldr	r0, [r0, #0]
 8011080:	9301      	str	r3, [sp, #4]
 8011082:	f000 f845 	bl	8011110 <_vfiprintf_r>
 8011086:	b002      	add	sp, #8
 8011088:	f85d eb04 	ldr.w	lr, [sp], #4
 801108c:	b003      	add	sp, #12
 801108e:	4770      	bx	lr
 8011090:	20000078 	.word	0x20000078

08011094 <__ascii_wctomb>:
 8011094:	4603      	mov	r3, r0
 8011096:	4608      	mov	r0, r1
 8011098:	b141      	cbz	r1, 80110ac <__ascii_wctomb+0x18>
 801109a:	2aff      	cmp	r2, #255	@ 0xff
 801109c:	d904      	bls.n	80110a8 <__ascii_wctomb+0x14>
 801109e:	228a      	movs	r2, #138	@ 0x8a
 80110a0:	601a      	str	r2, [r3, #0]
 80110a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110a6:	4770      	bx	lr
 80110a8:	700a      	strb	r2, [r1, #0]
 80110aa:	2001      	movs	r0, #1
 80110ac:	4770      	bx	lr

080110ae <abort>:
 80110ae:	b508      	push	{r3, lr}
 80110b0:	2006      	movs	r0, #6
 80110b2:	f000 fa63 	bl	801157c <raise>
 80110b6:	2001      	movs	r0, #1
 80110b8:	f7f5 fc7e 	bl	80069b8 <_exit>

080110bc <__sfputc_r>:
 80110bc:	6893      	ldr	r3, [r2, #8]
 80110be:	3b01      	subs	r3, #1
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	b410      	push	{r4}
 80110c4:	6093      	str	r3, [r2, #8]
 80110c6:	da08      	bge.n	80110da <__sfputc_r+0x1e>
 80110c8:	6994      	ldr	r4, [r2, #24]
 80110ca:	42a3      	cmp	r3, r4
 80110cc:	db01      	blt.n	80110d2 <__sfputc_r+0x16>
 80110ce:	290a      	cmp	r1, #10
 80110d0:	d103      	bne.n	80110da <__sfputc_r+0x1e>
 80110d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110d6:	f000 b933 	b.w	8011340 <__swbuf_r>
 80110da:	6813      	ldr	r3, [r2, #0]
 80110dc:	1c58      	adds	r0, r3, #1
 80110de:	6010      	str	r0, [r2, #0]
 80110e0:	7019      	strb	r1, [r3, #0]
 80110e2:	4608      	mov	r0, r1
 80110e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <__sfputs_r>:
 80110ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ec:	4606      	mov	r6, r0
 80110ee:	460f      	mov	r7, r1
 80110f0:	4614      	mov	r4, r2
 80110f2:	18d5      	adds	r5, r2, r3
 80110f4:	42ac      	cmp	r4, r5
 80110f6:	d101      	bne.n	80110fc <__sfputs_r+0x12>
 80110f8:	2000      	movs	r0, #0
 80110fa:	e007      	b.n	801110c <__sfputs_r+0x22>
 80110fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011100:	463a      	mov	r2, r7
 8011102:	4630      	mov	r0, r6
 8011104:	f7ff ffda 	bl	80110bc <__sfputc_r>
 8011108:	1c43      	adds	r3, r0, #1
 801110a:	d1f3      	bne.n	80110f4 <__sfputs_r+0xa>
 801110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011110 <_vfiprintf_r>:
 8011110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011114:	460d      	mov	r5, r1
 8011116:	b09d      	sub	sp, #116	@ 0x74
 8011118:	4614      	mov	r4, r2
 801111a:	4698      	mov	r8, r3
 801111c:	4606      	mov	r6, r0
 801111e:	b118      	cbz	r0, 8011128 <_vfiprintf_r+0x18>
 8011120:	6a03      	ldr	r3, [r0, #32]
 8011122:	b90b      	cbnz	r3, 8011128 <_vfiprintf_r+0x18>
 8011124:	f7fe f8a2 	bl	800f26c <__sinit>
 8011128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801112a:	07d9      	lsls	r1, r3, #31
 801112c:	d405      	bmi.n	801113a <_vfiprintf_r+0x2a>
 801112e:	89ab      	ldrh	r3, [r5, #12]
 8011130:	059a      	lsls	r2, r3, #22
 8011132:	d402      	bmi.n	801113a <_vfiprintf_r+0x2a>
 8011134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011136:	f7fe f922 	bl	800f37e <__retarget_lock_acquire_recursive>
 801113a:	89ab      	ldrh	r3, [r5, #12]
 801113c:	071b      	lsls	r3, r3, #28
 801113e:	d501      	bpl.n	8011144 <_vfiprintf_r+0x34>
 8011140:	692b      	ldr	r3, [r5, #16]
 8011142:	b99b      	cbnz	r3, 801116c <_vfiprintf_r+0x5c>
 8011144:	4629      	mov	r1, r5
 8011146:	4630      	mov	r0, r6
 8011148:	f000 f938 	bl	80113bc <__swsetup_r>
 801114c:	b170      	cbz	r0, 801116c <_vfiprintf_r+0x5c>
 801114e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011150:	07dc      	lsls	r4, r3, #31
 8011152:	d504      	bpl.n	801115e <_vfiprintf_r+0x4e>
 8011154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011158:	b01d      	add	sp, #116	@ 0x74
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	0598      	lsls	r0, r3, #22
 8011162:	d4f7      	bmi.n	8011154 <_vfiprintf_r+0x44>
 8011164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011166:	f7fe f90b 	bl	800f380 <__retarget_lock_release_recursive>
 801116a:	e7f3      	b.n	8011154 <_vfiprintf_r+0x44>
 801116c:	2300      	movs	r3, #0
 801116e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011170:	2320      	movs	r3, #32
 8011172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011176:	f8cd 800c 	str.w	r8, [sp, #12]
 801117a:	2330      	movs	r3, #48	@ 0x30
 801117c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801132c <_vfiprintf_r+0x21c>
 8011180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011184:	f04f 0901 	mov.w	r9, #1
 8011188:	4623      	mov	r3, r4
 801118a:	469a      	mov	sl, r3
 801118c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011190:	b10a      	cbz	r2, 8011196 <_vfiprintf_r+0x86>
 8011192:	2a25      	cmp	r2, #37	@ 0x25
 8011194:	d1f9      	bne.n	801118a <_vfiprintf_r+0x7a>
 8011196:	ebba 0b04 	subs.w	fp, sl, r4
 801119a:	d00b      	beq.n	80111b4 <_vfiprintf_r+0xa4>
 801119c:	465b      	mov	r3, fp
 801119e:	4622      	mov	r2, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	4630      	mov	r0, r6
 80111a4:	f7ff ffa1 	bl	80110ea <__sfputs_r>
 80111a8:	3001      	adds	r0, #1
 80111aa:	f000 80a7 	beq.w	80112fc <_vfiprintf_r+0x1ec>
 80111ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111b0:	445a      	add	r2, fp
 80111b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80111b4:	f89a 3000 	ldrb.w	r3, [sl]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 809f 	beq.w	80112fc <_vfiprintf_r+0x1ec>
 80111be:	2300      	movs	r3, #0
 80111c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80111c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111c8:	f10a 0a01 	add.w	sl, sl, #1
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	9307      	str	r3, [sp, #28]
 80111d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80111d6:	4654      	mov	r4, sl
 80111d8:	2205      	movs	r2, #5
 80111da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111de:	4853      	ldr	r0, [pc, #332]	@ (801132c <_vfiprintf_r+0x21c>)
 80111e0:	f7ee fff6 	bl	80001d0 <memchr>
 80111e4:	9a04      	ldr	r2, [sp, #16]
 80111e6:	b9d8      	cbnz	r0, 8011220 <_vfiprintf_r+0x110>
 80111e8:	06d1      	lsls	r1, r2, #27
 80111ea:	bf44      	itt	mi
 80111ec:	2320      	movmi	r3, #32
 80111ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111f2:	0713      	lsls	r3, r2, #28
 80111f4:	bf44      	itt	mi
 80111f6:	232b      	movmi	r3, #43	@ 0x2b
 80111f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011200:	2b2a      	cmp	r3, #42	@ 0x2a
 8011202:	d015      	beq.n	8011230 <_vfiprintf_r+0x120>
 8011204:	9a07      	ldr	r2, [sp, #28]
 8011206:	4654      	mov	r4, sl
 8011208:	2000      	movs	r0, #0
 801120a:	f04f 0c0a 	mov.w	ip, #10
 801120e:	4621      	mov	r1, r4
 8011210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011214:	3b30      	subs	r3, #48	@ 0x30
 8011216:	2b09      	cmp	r3, #9
 8011218:	d94b      	bls.n	80112b2 <_vfiprintf_r+0x1a2>
 801121a:	b1b0      	cbz	r0, 801124a <_vfiprintf_r+0x13a>
 801121c:	9207      	str	r2, [sp, #28]
 801121e:	e014      	b.n	801124a <_vfiprintf_r+0x13a>
 8011220:	eba0 0308 	sub.w	r3, r0, r8
 8011224:	fa09 f303 	lsl.w	r3, r9, r3
 8011228:	4313      	orrs	r3, r2
 801122a:	9304      	str	r3, [sp, #16]
 801122c:	46a2      	mov	sl, r4
 801122e:	e7d2      	b.n	80111d6 <_vfiprintf_r+0xc6>
 8011230:	9b03      	ldr	r3, [sp, #12]
 8011232:	1d19      	adds	r1, r3, #4
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	9103      	str	r1, [sp, #12]
 8011238:	2b00      	cmp	r3, #0
 801123a:	bfbb      	ittet	lt
 801123c:	425b      	neglt	r3, r3
 801123e:	f042 0202 	orrlt.w	r2, r2, #2
 8011242:	9307      	strge	r3, [sp, #28]
 8011244:	9307      	strlt	r3, [sp, #28]
 8011246:	bfb8      	it	lt
 8011248:	9204      	strlt	r2, [sp, #16]
 801124a:	7823      	ldrb	r3, [r4, #0]
 801124c:	2b2e      	cmp	r3, #46	@ 0x2e
 801124e:	d10a      	bne.n	8011266 <_vfiprintf_r+0x156>
 8011250:	7863      	ldrb	r3, [r4, #1]
 8011252:	2b2a      	cmp	r3, #42	@ 0x2a
 8011254:	d132      	bne.n	80112bc <_vfiprintf_r+0x1ac>
 8011256:	9b03      	ldr	r3, [sp, #12]
 8011258:	1d1a      	adds	r2, r3, #4
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	9203      	str	r2, [sp, #12]
 801125e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011262:	3402      	adds	r4, #2
 8011264:	9305      	str	r3, [sp, #20]
 8011266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801133c <_vfiprintf_r+0x22c>
 801126a:	7821      	ldrb	r1, [r4, #0]
 801126c:	2203      	movs	r2, #3
 801126e:	4650      	mov	r0, sl
 8011270:	f7ee ffae 	bl	80001d0 <memchr>
 8011274:	b138      	cbz	r0, 8011286 <_vfiprintf_r+0x176>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	eba0 000a 	sub.w	r0, r0, sl
 801127c:	2240      	movs	r2, #64	@ 0x40
 801127e:	4082      	lsls	r2, r0
 8011280:	4313      	orrs	r3, r2
 8011282:	3401      	adds	r4, #1
 8011284:	9304      	str	r3, [sp, #16]
 8011286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801128a:	4829      	ldr	r0, [pc, #164]	@ (8011330 <_vfiprintf_r+0x220>)
 801128c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011290:	2206      	movs	r2, #6
 8011292:	f7ee ff9d 	bl	80001d0 <memchr>
 8011296:	2800      	cmp	r0, #0
 8011298:	d03f      	beq.n	801131a <_vfiprintf_r+0x20a>
 801129a:	4b26      	ldr	r3, [pc, #152]	@ (8011334 <_vfiprintf_r+0x224>)
 801129c:	bb1b      	cbnz	r3, 80112e6 <_vfiprintf_r+0x1d6>
 801129e:	9b03      	ldr	r3, [sp, #12]
 80112a0:	3307      	adds	r3, #7
 80112a2:	f023 0307 	bic.w	r3, r3, #7
 80112a6:	3308      	adds	r3, #8
 80112a8:	9303      	str	r3, [sp, #12]
 80112aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ac:	443b      	add	r3, r7
 80112ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80112b0:	e76a      	b.n	8011188 <_vfiprintf_r+0x78>
 80112b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80112b6:	460c      	mov	r4, r1
 80112b8:	2001      	movs	r0, #1
 80112ba:	e7a8      	b.n	801120e <_vfiprintf_r+0xfe>
 80112bc:	2300      	movs	r3, #0
 80112be:	3401      	adds	r4, #1
 80112c0:	9305      	str	r3, [sp, #20]
 80112c2:	4619      	mov	r1, r3
 80112c4:	f04f 0c0a 	mov.w	ip, #10
 80112c8:	4620      	mov	r0, r4
 80112ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ce:	3a30      	subs	r2, #48	@ 0x30
 80112d0:	2a09      	cmp	r2, #9
 80112d2:	d903      	bls.n	80112dc <_vfiprintf_r+0x1cc>
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d0c6      	beq.n	8011266 <_vfiprintf_r+0x156>
 80112d8:	9105      	str	r1, [sp, #20]
 80112da:	e7c4      	b.n	8011266 <_vfiprintf_r+0x156>
 80112dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80112e0:	4604      	mov	r4, r0
 80112e2:	2301      	movs	r3, #1
 80112e4:	e7f0      	b.n	80112c8 <_vfiprintf_r+0x1b8>
 80112e6:	ab03      	add	r3, sp, #12
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	462a      	mov	r2, r5
 80112ec:	4b12      	ldr	r3, [pc, #72]	@ (8011338 <_vfiprintf_r+0x228>)
 80112ee:	a904      	add	r1, sp, #16
 80112f0:	4630      	mov	r0, r6
 80112f2:	f7fd fb79 	bl	800e9e8 <_printf_float>
 80112f6:	4607      	mov	r7, r0
 80112f8:	1c78      	adds	r0, r7, #1
 80112fa:	d1d6      	bne.n	80112aa <_vfiprintf_r+0x19a>
 80112fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112fe:	07d9      	lsls	r1, r3, #31
 8011300:	d405      	bmi.n	801130e <_vfiprintf_r+0x1fe>
 8011302:	89ab      	ldrh	r3, [r5, #12]
 8011304:	059a      	lsls	r2, r3, #22
 8011306:	d402      	bmi.n	801130e <_vfiprintf_r+0x1fe>
 8011308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801130a:	f7fe f839 	bl	800f380 <__retarget_lock_release_recursive>
 801130e:	89ab      	ldrh	r3, [r5, #12]
 8011310:	065b      	lsls	r3, r3, #25
 8011312:	f53f af1f 	bmi.w	8011154 <_vfiprintf_r+0x44>
 8011316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011318:	e71e      	b.n	8011158 <_vfiprintf_r+0x48>
 801131a:	ab03      	add	r3, sp, #12
 801131c:	9300      	str	r3, [sp, #0]
 801131e:	462a      	mov	r2, r5
 8011320:	4b05      	ldr	r3, [pc, #20]	@ (8011338 <_vfiprintf_r+0x228>)
 8011322:	a904      	add	r1, sp, #16
 8011324:	4630      	mov	r0, r6
 8011326:	f7fd fdf7 	bl	800ef18 <_printf_i>
 801132a:	e7e4      	b.n	80112f6 <_vfiprintf_r+0x1e6>
 801132c:	080126c5 	.word	0x080126c5
 8011330:	080126cf 	.word	0x080126cf
 8011334:	0800e9e9 	.word	0x0800e9e9
 8011338:	080110eb 	.word	0x080110eb
 801133c:	080126cb 	.word	0x080126cb

08011340 <__swbuf_r>:
 8011340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011342:	460e      	mov	r6, r1
 8011344:	4614      	mov	r4, r2
 8011346:	4605      	mov	r5, r0
 8011348:	b118      	cbz	r0, 8011352 <__swbuf_r+0x12>
 801134a:	6a03      	ldr	r3, [r0, #32]
 801134c:	b90b      	cbnz	r3, 8011352 <__swbuf_r+0x12>
 801134e:	f7fd ff8d 	bl	800f26c <__sinit>
 8011352:	69a3      	ldr	r3, [r4, #24]
 8011354:	60a3      	str	r3, [r4, #8]
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	071a      	lsls	r2, r3, #28
 801135a:	d501      	bpl.n	8011360 <__swbuf_r+0x20>
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	b943      	cbnz	r3, 8011372 <__swbuf_r+0x32>
 8011360:	4621      	mov	r1, r4
 8011362:	4628      	mov	r0, r5
 8011364:	f000 f82a 	bl	80113bc <__swsetup_r>
 8011368:	b118      	cbz	r0, 8011372 <__swbuf_r+0x32>
 801136a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801136e:	4638      	mov	r0, r7
 8011370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	6922      	ldr	r2, [r4, #16]
 8011376:	1a98      	subs	r0, r3, r2
 8011378:	6963      	ldr	r3, [r4, #20]
 801137a:	b2f6      	uxtb	r6, r6
 801137c:	4283      	cmp	r3, r0
 801137e:	4637      	mov	r7, r6
 8011380:	dc05      	bgt.n	801138e <__swbuf_r+0x4e>
 8011382:	4621      	mov	r1, r4
 8011384:	4628      	mov	r0, r5
 8011386:	f7ff f997 	bl	80106b8 <_fflush_r>
 801138a:	2800      	cmp	r0, #0
 801138c:	d1ed      	bne.n	801136a <__swbuf_r+0x2a>
 801138e:	68a3      	ldr	r3, [r4, #8]
 8011390:	3b01      	subs	r3, #1
 8011392:	60a3      	str	r3, [r4, #8]
 8011394:	6823      	ldr	r3, [r4, #0]
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	6022      	str	r2, [r4, #0]
 801139a:	701e      	strb	r6, [r3, #0]
 801139c:	6962      	ldr	r2, [r4, #20]
 801139e:	1c43      	adds	r3, r0, #1
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d004      	beq.n	80113ae <__swbuf_r+0x6e>
 80113a4:	89a3      	ldrh	r3, [r4, #12]
 80113a6:	07db      	lsls	r3, r3, #31
 80113a8:	d5e1      	bpl.n	801136e <__swbuf_r+0x2e>
 80113aa:	2e0a      	cmp	r6, #10
 80113ac:	d1df      	bne.n	801136e <__swbuf_r+0x2e>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	f7ff f981 	bl	80106b8 <_fflush_r>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d0d9      	beq.n	801136e <__swbuf_r+0x2e>
 80113ba:	e7d6      	b.n	801136a <__swbuf_r+0x2a>

080113bc <__swsetup_r>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	4b29      	ldr	r3, [pc, #164]	@ (8011464 <__swsetup_r+0xa8>)
 80113c0:	4605      	mov	r5, r0
 80113c2:	6818      	ldr	r0, [r3, #0]
 80113c4:	460c      	mov	r4, r1
 80113c6:	b118      	cbz	r0, 80113d0 <__swsetup_r+0x14>
 80113c8:	6a03      	ldr	r3, [r0, #32]
 80113ca:	b90b      	cbnz	r3, 80113d0 <__swsetup_r+0x14>
 80113cc:	f7fd ff4e 	bl	800f26c <__sinit>
 80113d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d4:	0719      	lsls	r1, r3, #28
 80113d6:	d422      	bmi.n	801141e <__swsetup_r+0x62>
 80113d8:	06da      	lsls	r2, r3, #27
 80113da:	d407      	bmi.n	80113ec <__swsetup_r+0x30>
 80113dc:	2209      	movs	r2, #9
 80113de:	602a      	str	r2, [r5, #0]
 80113e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113ea:	e033      	b.n	8011454 <__swsetup_r+0x98>
 80113ec:	0758      	lsls	r0, r3, #29
 80113ee:	d512      	bpl.n	8011416 <__swsetup_r+0x5a>
 80113f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113f2:	b141      	cbz	r1, 8011406 <__swsetup_r+0x4a>
 80113f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113f8:	4299      	cmp	r1, r3
 80113fa:	d002      	beq.n	8011402 <__swsetup_r+0x46>
 80113fc:	4628      	mov	r0, r5
 80113fe:	f7fe fe8b 	bl	8010118 <_free_r>
 8011402:	2300      	movs	r3, #0
 8011404:	6363      	str	r3, [r4, #52]	@ 0x34
 8011406:	89a3      	ldrh	r3, [r4, #12]
 8011408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801140c:	81a3      	strh	r3, [r4, #12]
 801140e:	2300      	movs	r3, #0
 8011410:	6063      	str	r3, [r4, #4]
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	89a3      	ldrh	r3, [r4, #12]
 8011418:	f043 0308 	orr.w	r3, r3, #8
 801141c:	81a3      	strh	r3, [r4, #12]
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	b94b      	cbnz	r3, 8011436 <__swsetup_r+0x7a>
 8011422:	89a3      	ldrh	r3, [r4, #12]
 8011424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801142c:	d003      	beq.n	8011436 <__swsetup_r+0x7a>
 801142e:	4621      	mov	r1, r4
 8011430:	4628      	mov	r0, r5
 8011432:	f000 f83f 	bl	80114b4 <__smakebuf_r>
 8011436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801143a:	f013 0201 	ands.w	r2, r3, #1
 801143e:	d00a      	beq.n	8011456 <__swsetup_r+0x9a>
 8011440:	2200      	movs	r2, #0
 8011442:	60a2      	str	r2, [r4, #8]
 8011444:	6962      	ldr	r2, [r4, #20]
 8011446:	4252      	negs	r2, r2
 8011448:	61a2      	str	r2, [r4, #24]
 801144a:	6922      	ldr	r2, [r4, #16]
 801144c:	b942      	cbnz	r2, 8011460 <__swsetup_r+0xa4>
 801144e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011452:	d1c5      	bne.n	80113e0 <__swsetup_r+0x24>
 8011454:	bd38      	pop	{r3, r4, r5, pc}
 8011456:	0799      	lsls	r1, r3, #30
 8011458:	bf58      	it	pl
 801145a:	6962      	ldrpl	r2, [r4, #20]
 801145c:	60a2      	str	r2, [r4, #8]
 801145e:	e7f4      	b.n	801144a <__swsetup_r+0x8e>
 8011460:	2000      	movs	r0, #0
 8011462:	e7f7      	b.n	8011454 <__swsetup_r+0x98>
 8011464:	20000078 	.word	0x20000078

08011468 <__swhatbuf_r>:
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	460c      	mov	r4, r1
 801146c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011470:	2900      	cmp	r1, #0
 8011472:	b096      	sub	sp, #88	@ 0x58
 8011474:	4615      	mov	r5, r2
 8011476:	461e      	mov	r6, r3
 8011478:	da0d      	bge.n	8011496 <__swhatbuf_r+0x2e>
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011480:	f04f 0100 	mov.w	r1, #0
 8011484:	bf14      	ite	ne
 8011486:	2340      	movne	r3, #64	@ 0x40
 8011488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801148c:	2000      	movs	r0, #0
 801148e:	6031      	str	r1, [r6, #0]
 8011490:	602b      	str	r3, [r5, #0]
 8011492:	b016      	add	sp, #88	@ 0x58
 8011494:	bd70      	pop	{r4, r5, r6, pc}
 8011496:	466a      	mov	r2, sp
 8011498:	f000 f89c 	bl	80115d4 <_fstat_r>
 801149c:	2800      	cmp	r0, #0
 801149e:	dbec      	blt.n	801147a <__swhatbuf_r+0x12>
 80114a0:	9901      	ldr	r1, [sp, #4]
 80114a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80114a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80114aa:	4259      	negs	r1, r3
 80114ac:	4159      	adcs	r1, r3
 80114ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80114b2:	e7eb      	b.n	801148c <__swhatbuf_r+0x24>

080114b4 <__smakebuf_r>:
 80114b4:	898b      	ldrh	r3, [r1, #12]
 80114b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114b8:	079d      	lsls	r5, r3, #30
 80114ba:	4606      	mov	r6, r0
 80114bc:	460c      	mov	r4, r1
 80114be:	d507      	bpl.n	80114d0 <__smakebuf_r+0x1c>
 80114c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80114c4:	6023      	str	r3, [r4, #0]
 80114c6:	6123      	str	r3, [r4, #16]
 80114c8:	2301      	movs	r3, #1
 80114ca:	6163      	str	r3, [r4, #20]
 80114cc:	b003      	add	sp, #12
 80114ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d0:	ab01      	add	r3, sp, #4
 80114d2:	466a      	mov	r2, sp
 80114d4:	f7ff ffc8 	bl	8011468 <__swhatbuf_r>
 80114d8:	9f00      	ldr	r7, [sp, #0]
 80114da:	4605      	mov	r5, r0
 80114dc:	4639      	mov	r1, r7
 80114de:	4630      	mov	r0, r6
 80114e0:	f7fe ffe6 	bl	80104b0 <_malloc_r>
 80114e4:	b948      	cbnz	r0, 80114fa <__smakebuf_r+0x46>
 80114e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ea:	059a      	lsls	r2, r3, #22
 80114ec:	d4ee      	bmi.n	80114cc <__smakebuf_r+0x18>
 80114ee:	f023 0303 	bic.w	r3, r3, #3
 80114f2:	f043 0302 	orr.w	r3, r3, #2
 80114f6:	81a3      	strh	r3, [r4, #12]
 80114f8:	e7e2      	b.n	80114c0 <__smakebuf_r+0xc>
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	6020      	str	r0, [r4, #0]
 80114fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011502:	81a3      	strh	r3, [r4, #12]
 8011504:	9b01      	ldr	r3, [sp, #4]
 8011506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801150a:	b15b      	cbz	r3, 8011524 <__smakebuf_r+0x70>
 801150c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011510:	4630      	mov	r0, r6
 8011512:	f000 f83b 	bl	801158c <_isatty_r>
 8011516:	b128      	cbz	r0, 8011524 <__smakebuf_r+0x70>
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	f023 0303 	bic.w	r3, r3, #3
 801151e:	f043 0301 	orr.w	r3, r3, #1
 8011522:	81a3      	strh	r3, [r4, #12]
 8011524:	89a3      	ldrh	r3, [r4, #12]
 8011526:	431d      	orrs	r5, r3
 8011528:	81a5      	strh	r5, [r4, #12]
 801152a:	e7cf      	b.n	80114cc <__smakebuf_r+0x18>

0801152c <_raise_r>:
 801152c:	291f      	cmp	r1, #31
 801152e:	b538      	push	{r3, r4, r5, lr}
 8011530:	4605      	mov	r5, r0
 8011532:	460c      	mov	r4, r1
 8011534:	d904      	bls.n	8011540 <_raise_r+0x14>
 8011536:	2316      	movs	r3, #22
 8011538:	6003      	str	r3, [r0, #0]
 801153a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801153e:	bd38      	pop	{r3, r4, r5, pc}
 8011540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011542:	b112      	cbz	r2, 801154a <_raise_r+0x1e>
 8011544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011548:	b94b      	cbnz	r3, 801155e <_raise_r+0x32>
 801154a:	4628      	mov	r0, r5
 801154c:	f000 f840 	bl	80115d0 <_getpid_r>
 8011550:	4622      	mov	r2, r4
 8011552:	4601      	mov	r1, r0
 8011554:	4628      	mov	r0, r5
 8011556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801155a:	f000 b827 	b.w	80115ac <_kill_r>
 801155e:	2b01      	cmp	r3, #1
 8011560:	d00a      	beq.n	8011578 <_raise_r+0x4c>
 8011562:	1c59      	adds	r1, r3, #1
 8011564:	d103      	bne.n	801156e <_raise_r+0x42>
 8011566:	2316      	movs	r3, #22
 8011568:	6003      	str	r3, [r0, #0]
 801156a:	2001      	movs	r0, #1
 801156c:	e7e7      	b.n	801153e <_raise_r+0x12>
 801156e:	2100      	movs	r1, #0
 8011570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011574:	4620      	mov	r0, r4
 8011576:	4798      	blx	r3
 8011578:	2000      	movs	r0, #0
 801157a:	e7e0      	b.n	801153e <_raise_r+0x12>

0801157c <raise>:
 801157c:	4b02      	ldr	r3, [pc, #8]	@ (8011588 <raise+0xc>)
 801157e:	4601      	mov	r1, r0
 8011580:	6818      	ldr	r0, [r3, #0]
 8011582:	f7ff bfd3 	b.w	801152c <_raise_r>
 8011586:	bf00      	nop
 8011588:	20000078 	.word	0x20000078

0801158c <_isatty_r>:
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	4d06      	ldr	r5, [pc, #24]	@ (80115a8 <_isatty_r+0x1c>)
 8011590:	2300      	movs	r3, #0
 8011592:	4604      	mov	r4, r0
 8011594:	4608      	mov	r0, r1
 8011596:	602b      	str	r3, [r5, #0]
 8011598:	f7f5 fa6e 	bl	8006a78 <_isatty>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_isatty_r+0x1a>
 80115a0:	682b      	ldr	r3, [r5, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_isatty_r+0x1a>
 80115a4:	6023      	str	r3, [r4, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	20005b28 	.word	0x20005b28

080115ac <_kill_r>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4d07      	ldr	r5, [pc, #28]	@ (80115cc <_kill_r+0x20>)
 80115b0:	2300      	movs	r3, #0
 80115b2:	4604      	mov	r4, r0
 80115b4:	4608      	mov	r0, r1
 80115b6:	4611      	mov	r1, r2
 80115b8:	602b      	str	r3, [r5, #0]
 80115ba:	f7f5 f9ed 	bl	8006998 <_kill>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	d102      	bne.n	80115c8 <_kill_r+0x1c>
 80115c2:	682b      	ldr	r3, [r5, #0]
 80115c4:	b103      	cbz	r3, 80115c8 <_kill_r+0x1c>
 80115c6:	6023      	str	r3, [r4, #0]
 80115c8:	bd38      	pop	{r3, r4, r5, pc}
 80115ca:	bf00      	nop
 80115cc:	20005b28 	.word	0x20005b28

080115d0 <_getpid_r>:
 80115d0:	f7f5 b9da 	b.w	8006988 <_getpid>

080115d4 <_fstat_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d07      	ldr	r5, [pc, #28]	@ (80115f4 <_fstat_r+0x20>)
 80115d8:	2300      	movs	r3, #0
 80115da:	4604      	mov	r4, r0
 80115dc:	4608      	mov	r0, r1
 80115de:	4611      	mov	r1, r2
 80115e0:	602b      	str	r3, [r5, #0]
 80115e2:	f7f5 fa39 	bl	8006a58 <_fstat>
 80115e6:	1c43      	adds	r3, r0, #1
 80115e8:	d102      	bne.n	80115f0 <_fstat_r+0x1c>
 80115ea:	682b      	ldr	r3, [r5, #0]
 80115ec:	b103      	cbz	r3, 80115f0 <_fstat_r+0x1c>
 80115ee:	6023      	str	r3, [r4, #0]
 80115f0:	bd38      	pop	{r3, r4, r5, pc}
 80115f2:	bf00      	nop
 80115f4:	20005b28 	.word	0x20005b28

080115f8 <sqrtf>:
 80115f8:	b508      	push	{r3, lr}
 80115fa:	ed2d 8b02 	vpush	{d8}
 80115fe:	eeb0 8a40 	vmov.f32	s16, s0
 8011602:	f000 fa1d 	bl	8011a40 <__ieee754_sqrtf>
 8011606:	eeb4 8a48 	vcmp.f32	s16, s16
 801160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160e:	d60c      	bvs.n	801162a <sqrtf+0x32>
 8011610:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011630 <sqrtf+0x38>
 8011614:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161c:	d505      	bpl.n	801162a <sqrtf+0x32>
 801161e:	f7fd fe83 	bl	800f328 <__errno>
 8011622:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011626:	2321      	movs	r3, #33	@ 0x21
 8011628:	6003      	str	r3, [r0, #0]
 801162a:	ecbd 8b02 	vpop	{d8}
 801162e:	bd08      	pop	{r3, pc}
 8011630:	00000000 	.word	0x00000000

08011634 <atanf>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	ee10 5a10 	vmov	r5, s0
 801163a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801163e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011642:	eef0 7a40 	vmov.f32	s15, s0
 8011646:	d310      	bcc.n	801166a <atanf+0x36>
 8011648:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801164c:	d904      	bls.n	8011658 <atanf+0x24>
 801164e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011652:	eeb0 0a67 	vmov.f32	s0, s15
 8011656:	bd38      	pop	{r3, r4, r5, pc}
 8011658:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011790 <atanf+0x15c>
 801165c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011794 <atanf+0x160>
 8011660:	2d00      	cmp	r5, #0
 8011662:	bfc8      	it	gt
 8011664:	eef0 7a47 	vmovgt.f32	s15, s14
 8011668:	e7f3      	b.n	8011652 <atanf+0x1e>
 801166a:	4b4b      	ldr	r3, [pc, #300]	@ (8011798 <atanf+0x164>)
 801166c:	429c      	cmp	r4, r3
 801166e:	d810      	bhi.n	8011692 <atanf+0x5e>
 8011670:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011674:	d20a      	bcs.n	801168c <atanf+0x58>
 8011676:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801179c <atanf+0x168>
 801167a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801167e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011682:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168a:	dce2      	bgt.n	8011652 <atanf+0x1e>
 801168c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011690:	e013      	b.n	80116ba <atanf+0x86>
 8011692:	f000 f8e7 	bl	8011864 <fabsf>
 8011696:	4b42      	ldr	r3, [pc, #264]	@ (80117a0 <atanf+0x16c>)
 8011698:	429c      	cmp	r4, r3
 801169a:	d84f      	bhi.n	801173c <atanf+0x108>
 801169c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80116a0:	429c      	cmp	r4, r3
 80116a2:	d841      	bhi.n	8011728 <atanf+0xf4>
 80116a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80116a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80116ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80116b0:	2300      	movs	r3, #0
 80116b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80116b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80116c0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80117a4 <atanf+0x170>
 80116c4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80117a8 <atanf+0x174>
 80116c8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80117ac <atanf+0x178>
 80116cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80116d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80116d4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80117b0 <atanf+0x17c>
 80116d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80116dc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80117b4 <atanf+0x180>
 80116e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80116e4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80117b8 <atanf+0x184>
 80116e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80116ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80117bc <atanf+0x188>
 80116f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80116f4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80117c0 <atanf+0x18c>
 80116f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80116fc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80117c4 <atanf+0x190>
 8011700:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011704:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80117c8 <atanf+0x194>
 8011708:	eea7 5a26 	vfma.f32	s10, s14, s13
 801170c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80117cc <atanf+0x198>
 8011710:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011714:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011718:	eea5 7a86 	vfma.f32	s14, s11, s12
 801171c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011720:	d121      	bne.n	8011766 <atanf+0x132>
 8011722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011726:	e794      	b.n	8011652 <atanf+0x1e>
 8011728:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801172c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011730:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011734:	2301      	movs	r3, #1
 8011736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801173a:	e7be      	b.n	80116ba <atanf+0x86>
 801173c:	4b24      	ldr	r3, [pc, #144]	@ (80117d0 <atanf+0x19c>)
 801173e:	429c      	cmp	r4, r3
 8011740:	d80b      	bhi.n	801175a <atanf+0x126>
 8011742:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801174a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801174e:	2302      	movs	r3, #2
 8011750:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011758:	e7af      	b.n	80116ba <atanf+0x86>
 801175a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801175e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011762:	2303      	movs	r3, #3
 8011764:	e7a9      	b.n	80116ba <atanf+0x86>
 8011766:	4a1b      	ldr	r2, [pc, #108]	@ (80117d4 <atanf+0x1a0>)
 8011768:	491b      	ldr	r1, [pc, #108]	@ (80117d8 <atanf+0x1a4>)
 801176a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801176e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011772:	edd3 6a00 	vldr	s13, [r3]
 8011776:	ee37 7a66 	vsub.f32	s14, s14, s13
 801177a:	2d00      	cmp	r5, #0
 801177c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011780:	edd2 7a00 	vldr	s15, [r2]
 8011784:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011788:	bfb8      	it	lt
 801178a:	eef1 7a67 	vneglt.f32	s15, s15
 801178e:	e760      	b.n	8011652 <atanf+0x1e>
 8011790:	bfc90fdb 	.word	0xbfc90fdb
 8011794:	3fc90fdb 	.word	0x3fc90fdb
 8011798:	3edfffff 	.word	0x3edfffff
 801179c:	7149f2ca 	.word	0x7149f2ca
 80117a0:	3f97ffff 	.word	0x3f97ffff
 80117a4:	3c8569d7 	.word	0x3c8569d7
 80117a8:	3d4bda59 	.word	0x3d4bda59
 80117ac:	bd6ef16b 	.word	0xbd6ef16b
 80117b0:	3d886b35 	.word	0x3d886b35
 80117b4:	3dba2e6e 	.word	0x3dba2e6e
 80117b8:	3e124925 	.word	0x3e124925
 80117bc:	3eaaaaab 	.word	0x3eaaaaab
 80117c0:	bd15a221 	.word	0xbd15a221
 80117c4:	bd9d8795 	.word	0xbd9d8795
 80117c8:	bde38e38 	.word	0xbde38e38
 80117cc:	be4ccccd 	.word	0xbe4ccccd
 80117d0:	401bffff 	.word	0x401bffff
 80117d4:	0801298c 	.word	0x0801298c
 80117d8:	0801297c 	.word	0x0801297c

080117dc <cosf>:
 80117dc:	ee10 3a10 	vmov	r3, s0
 80117e0:	b507      	push	{r0, r1, r2, lr}
 80117e2:	4a1e      	ldr	r2, [pc, #120]	@ (801185c <cosf+0x80>)
 80117e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d806      	bhi.n	80117fa <cosf+0x1e>
 80117ec:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011860 <cosf+0x84>
 80117f0:	b003      	add	sp, #12
 80117f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80117f6:	f000 b883 	b.w	8011900 <__kernel_cosf>
 80117fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80117fe:	d304      	bcc.n	801180a <cosf+0x2e>
 8011800:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011804:	b003      	add	sp, #12
 8011806:	f85d fb04 	ldr.w	pc, [sp], #4
 801180a:	4668      	mov	r0, sp
 801180c:	f000 f91c 	bl	8011a48 <__ieee754_rem_pio2f>
 8011810:	f000 0003 	and.w	r0, r0, #3
 8011814:	2801      	cmp	r0, #1
 8011816:	d009      	beq.n	801182c <cosf+0x50>
 8011818:	2802      	cmp	r0, #2
 801181a:	d010      	beq.n	801183e <cosf+0x62>
 801181c:	b9b0      	cbnz	r0, 801184c <cosf+0x70>
 801181e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011822:	ed9d 0a00 	vldr	s0, [sp]
 8011826:	f000 f86b 	bl	8011900 <__kernel_cosf>
 801182a:	e7eb      	b.n	8011804 <cosf+0x28>
 801182c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011830:	ed9d 0a00 	vldr	s0, [sp]
 8011834:	f000 f8bc 	bl	80119b0 <__kernel_sinf>
 8011838:	eeb1 0a40 	vneg.f32	s0, s0
 801183c:	e7e2      	b.n	8011804 <cosf+0x28>
 801183e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011842:	ed9d 0a00 	vldr	s0, [sp]
 8011846:	f000 f85b 	bl	8011900 <__kernel_cosf>
 801184a:	e7f5      	b.n	8011838 <cosf+0x5c>
 801184c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011850:	ed9d 0a00 	vldr	s0, [sp]
 8011854:	2001      	movs	r0, #1
 8011856:	f000 f8ab 	bl	80119b0 <__kernel_sinf>
 801185a:	e7d3      	b.n	8011804 <cosf+0x28>
 801185c:	3f490fd8 	.word	0x3f490fd8
 8011860:	00000000 	.word	0x00000000

08011864 <fabsf>:
 8011864:	ee10 3a10 	vmov	r3, s0
 8011868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801186c:	ee00 3a10 	vmov	s0, r3
 8011870:	4770      	bx	lr
	...

08011874 <sinf>:
 8011874:	ee10 3a10 	vmov	r3, s0
 8011878:	b507      	push	{r0, r1, r2, lr}
 801187a:	4a1f      	ldr	r2, [pc, #124]	@ (80118f8 <sinf+0x84>)
 801187c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011880:	4293      	cmp	r3, r2
 8011882:	d807      	bhi.n	8011894 <sinf+0x20>
 8011884:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80118fc <sinf+0x88>
 8011888:	2000      	movs	r0, #0
 801188a:	b003      	add	sp, #12
 801188c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011890:	f000 b88e 	b.w	80119b0 <__kernel_sinf>
 8011894:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011898:	d304      	bcc.n	80118a4 <sinf+0x30>
 801189a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801189e:	b003      	add	sp, #12
 80118a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80118a4:	4668      	mov	r0, sp
 80118a6:	f000 f8cf 	bl	8011a48 <__ieee754_rem_pio2f>
 80118aa:	f000 0003 	and.w	r0, r0, #3
 80118ae:	2801      	cmp	r0, #1
 80118b0:	d00a      	beq.n	80118c8 <sinf+0x54>
 80118b2:	2802      	cmp	r0, #2
 80118b4:	d00f      	beq.n	80118d6 <sinf+0x62>
 80118b6:	b9c0      	cbnz	r0, 80118ea <sinf+0x76>
 80118b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80118bc:	ed9d 0a00 	vldr	s0, [sp]
 80118c0:	2001      	movs	r0, #1
 80118c2:	f000 f875 	bl	80119b0 <__kernel_sinf>
 80118c6:	e7ea      	b.n	801189e <sinf+0x2a>
 80118c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80118cc:	ed9d 0a00 	vldr	s0, [sp]
 80118d0:	f000 f816 	bl	8011900 <__kernel_cosf>
 80118d4:	e7e3      	b.n	801189e <sinf+0x2a>
 80118d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80118da:	ed9d 0a00 	vldr	s0, [sp]
 80118de:	2001      	movs	r0, #1
 80118e0:	f000 f866 	bl	80119b0 <__kernel_sinf>
 80118e4:	eeb1 0a40 	vneg.f32	s0, s0
 80118e8:	e7d9      	b.n	801189e <sinf+0x2a>
 80118ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80118ee:	ed9d 0a00 	vldr	s0, [sp]
 80118f2:	f000 f805 	bl	8011900 <__kernel_cosf>
 80118f6:	e7f5      	b.n	80118e4 <sinf+0x70>
 80118f8:	3f490fd8 	.word	0x3f490fd8
 80118fc:	00000000 	.word	0x00000000

08011900 <__kernel_cosf>:
 8011900:	ee10 3a10 	vmov	r3, s0
 8011904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011908:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801190c:	eef0 6a40 	vmov.f32	s13, s0
 8011910:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011914:	d204      	bcs.n	8011920 <__kernel_cosf+0x20>
 8011916:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801191a:	ee17 2a90 	vmov	r2, s15
 801191e:	b342      	cbz	r2, 8011972 <__kernel_cosf+0x72>
 8011920:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011924:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011990 <__kernel_cosf+0x90>
 8011928:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011994 <__kernel_cosf+0x94>
 801192c:	4a1a      	ldr	r2, [pc, #104]	@ (8011998 <__kernel_cosf+0x98>)
 801192e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011932:	4293      	cmp	r3, r2
 8011934:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801199c <__kernel_cosf+0x9c>
 8011938:	eee6 7a07 	vfma.f32	s15, s12, s14
 801193c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80119a0 <__kernel_cosf+0xa0>
 8011940:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011944:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80119a4 <__kernel_cosf+0xa4>
 8011948:	eee6 7a07 	vfma.f32	s15, s12, s14
 801194c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80119a8 <__kernel_cosf+0xa8>
 8011950:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011954:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011958:	ee26 6a07 	vmul.f32	s12, s12, s14
 801195c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011960:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011968:	d804      	bhi.n	8011974 <__kernel_cosf+0x74>
 801196a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801196e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011972:	4770      	bx	lr
 8011974:	4a0d      	ldr	r2, [pc, #52]	@ (80119ac <__kernel_cosf+0xac>)
 8011976:	4293      	cmp	r3, r2
 8011978:	bf9a      	itte	ls
 801197a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801197e:	ee07 3a10 	vmovls	s14, r3
 8011982:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011986:	ee30 0a47 	vsub.f32	s0, s0, s14
 801198a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801198e:	e7ec      	b.n	801196a <__kernel_cosf+0x6a>
 8011990:	ad47d74e 	.word	0xad47d74e
 8011994:	310f74f6 	.word	0x310f74f6
 8011998:	3e999999 	.word	0x3e999999
 801199c:	b493f27c 	.word	0xb493f27c
 80119a0:	37d00d01 	.word	0x37d00d01
 80119a4:	bab60b61 	.word	0xbab60b61
 80119a8:	3d2aaaab 	.word	0x3d2aaaab
 80119ac:	3f480000 	.word	0x3f480000

080119b0 <__kernel_sinf>:
 80119b0:	ee10 3a10 	vmov	r3, s0
 80119b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80119bc:	d204      	bcs.n	80119c8 <__kernel_sinf+0x18>
 80119be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80119c2:	ee17 3a90 	vmov	r3, s15
 80119c6:	b35b      	cbz	r3, 8011a20 <__kernel_sinf+0x70>
 80119c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80119cc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011a24 <__kernel_sinf+0x74>
 80119d0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011a28 <__kernel_sinf+0x78>
 80119d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80119d8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011a2c <__kernel_sinf+0x7c>
 80119dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80119e0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011a30 <__kernel_sinf+0x80>
 80119e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80119e8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011a34 <__kernel_sinf+0x84>
 80119ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 80119f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80119f4:	b930      	cbnz	r0, 8011a04 <__kernel_sinf+0x54>
 80119f6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011a38 <__kernel_sinf+0x88>
 80119fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80119fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011a02:	4770      	bx	lr
 8011a04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011a08:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011a0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011a10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011a14:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011a3c <__kernel_sinf+0x8c>
 8011a18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011a1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	2f2ec9d3 	.word	0x2f2ec9d3
 8011a28:	b2d72f34 	.word	0xb2d72f34
 8011a2c:	3638ef1b 	.word	0x3638ef1b
 8011a30:	b9500d01 	.word	0xb9500d01
 8011a34:	3c088889 	.word	0x3c088889
 8011a38:	be2aaaab 	.word	0xbe2aaaab
 8011a3c:	3e2aaaab 	.word	0x3e2aaaab

08011a40 <__ieee754_sqrtf>:
 8011a40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011a44:	4770      	bx	lr
	...

08011a48 <__ieee754_rem_pio2f>:
 8011a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a4a:	ee10 6a10 	vmov	r6, s0
 8011a4e:	4b88      	ldr	r3, [pc, #544]	@ (8011c70 <__ieee754_rem_pio2f+0x228>)
 8011a50:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011a54:	429d      	cmp	r5, r3
 8011a56:	b087      	sub	sp, #28
 8011a58:	4604      	mov	r4, r0
 8011a5a:	d805      	bhi.n	8011a68 <__ieee754_rem_pio2f+0x20>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	ed80 0a00 	vstr	s0, [r0]
 8011a62:	6043      	str	r3, [r0, #4]
 8011a64:	2000      	movs	r0, #0
 8011a66:	e022      	b.n	8011aae <__ieee754_rem_pio2f+0x66>
 8011a68:	4b82      	ldr	r3, [pc, #520]	@ (8011c74 <__ieee754_rem_pio2f+0x22c>)
 8011a6a:	429d      	cmp	r5, r3
 8011a6c:	d83a      	bhi.n	8011ae4 <__ieee754_rem_pio2f+0x9c>
 8011a6e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011a72:	2e00      	cmp	r6, #0
 8011a74:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011c78 <__ieee754_rem_pio2f+0x230>
 8011a78:	4a80      	ldr	r2, [pc, #512]	@ (8011c7c <__ieee754_rem_pio2f+0x234>)
 8011a7a:	f023 030f 	bic.w	r3, r3, #15
 8011a7e:	dd18      	ble.n	8011ab2 <__ieee754_rem_pio2f+0x6a>
 8011a80:	4293      	cmp	r3, r2
 8011a82:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011a86:	bf09      	itett	eq
 8011a88:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011c80 <__ieee754_rem_pio2f+0x238>
 8011a8c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011c84 <__ieee754_rem_pio2f+0x23c>
 8011a90:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011c88 <__ieee754_rem_pio2f+0x240>
 8011a94:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011a98:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011aa0:	ed80 7a00 	vstr	s14, [r0]
 8011aa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011aa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8011aac:	2001      	movs	r0, #1
 8011aae:	b007      	add	sp, #28
 8011ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011ab8:	bf09      	itett	eq
 8011aba:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011c80 <__ieee754_rem_pio2f+0x238>
 8011abe:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011c84 <__ieee754_rem_pio2f+0x23c>
 8011ac2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011c88 <__ieee754_rem_pio2f+0x240>
 8011ac6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011aca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ad2:	ed80 7a00 	vstr	s14, [r0]
 8011ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ada:	edc0 7a01 	vstr	s15, [r0, #4]
 8011ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ae2:	e7e4      	b.n	8011aae <__ieee754_rem_pio2f+0x66>
 8011ae4:	4b69      	ldr	r3, [pc, #420]	@ (8011c8c <__ieee754_rem_pio2f+0x244>)
 8011ae6:	429d      	cmp	r5, r3
 8011ae8:	d873      	bhi.n	8011bd2 <__ieee754_rem_pio2f+0x18a>
 8011aea:	f7ff febb 	bl	8011864 <fabsf>
 8011aee:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011c90 <__ieee754_rem_pio2f+0x248>
 8011af2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011af6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011b02:	ee17 0a90 	vmov	r0, s15
 8011b06:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c78 <__ieee754_rem_pio2f+0x230>
 8011b0a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011b0e:	281f      	cmp	r0, #31
 8011b10:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c84 <__ieee754_rem_pio2f+0x23c>
 8011b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b18:	eeb1 6a47 	vneg.f32	s12, s14
 8011b1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011b20:	ee16 1a90 	vmov	r1, s13
 8011b24:	dc09      	bgt.n	8011b3a <__ieee754_rem_pio2f+0xf2>
 8011b26:	4a5b      	ldr	r2, [pc, #364]	@ (8011c94 <__ieee754_rem_pio2f+0x24c>)
 8011b28:	1e47      	subs	r7, r0, #1
 8011b2a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011b2e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d107      	bne.n	8011b4a <__ieee754_rem_pio2f+0x102>
 8011b3a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011b3e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011b42:	2a08      	cmp	r2, #8
 8011b44:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011b48:	dc14      	bgt.n	8011b74 <__ieee754_rem_pio2f+0x12c>
 8011b4a:	6021      	str	r1, [r4, #0]
 8011b4c:	ed94 7a00 	vldr	s14, [r4]
 8011b50:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011b54:	2e00      	cmp	r6, #0
 8011b56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b5a:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b5e:	daa6      	bge.n	8011aae <__ieee754_rem_pio2f+0x66>
 8011b60:	eeb1 7a47 	vneg.f32	s14, s14
 8011b64:	eeb1 0a40 	vneg.f32	s0, s0
 8011b68:	ed84 7a00 	vstr	s14, [r4]
 8011b6c:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b70:	4240      	negs	r0, r0
 8011b72:	e79c      	b.n	8011aae <__ieee754_rem_pio2f+0x66>
 8011b74:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011c80 <__ieee754_rem_pio2f+0x238>
 8011b78:	eef0 6a40 	vmov.f32	s13, s0
 8011b7c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011b80:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011b84:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b88:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011c88 <__ieee754_rem_pio2f+0x240>
 8011b8c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011b90:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011b94:	ee15 2a90 	vmov	r2, s11
 8011b98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011b9c:	1a5b      	subs	r3, r3, r1
 8011b9e:	2b19      	cmp	r3, #25
 8011ba0:	dc04      	bgt.n	8011bac <__ieee754_rem_pio2f+0x164>
 8011ba2:	edc4 5a00 	vstr	s11, [r4]
 8011ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8011baa:	e7cf      	b.n	8011b4c <__ieee754_rem_pio2f+0x104>
 8011bac:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011c98 <__ieee754_rem_pio2f+0x250>
 8011bb0:	eeb0 0a66 	vmov.f32	s0, s13
 8011bb4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011bb8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011bbc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011c9c <__ieee754_rem_pio2f+0x254>
 8011bc0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011bc4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011bc8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011bcc:	ed84 7a00 	vstr	s14, [r4]
 8011bd0:	e7bc      	b.n	8011b4c <__ieee754_rem_pio2f+0x104>
 8011bd2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011bd6:	d306      	bcc.n	8011be6 <__ieee754_rem_pio2f+0x19e>
 8011bd8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011bdc:	edc0 7a01 	vstr	s15, [r0, #4]
 8011be0:	edc0 7a00 	vstr	s15, [r0]
 8011be4:	e73e      	b.n	8011a64 <__ieee754_rem_pio2f+0x1c>
 8011be6:	15ea      	asrs	r2, r5, #23
 8011be8:	3a86      	subs	r2, #134	@ 0x86
 8011bea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011bee:	ee07 3a90 	vmov	s15, r3
 8011bf2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011bf6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011ca0 <__ieee754_rem_pio2f+0x258>
 8011bfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c02:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c16:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c26:	edcd 7a05 	vstr	s15, [sp, #20]
 8011c2a:	d11e      	bne.n	8011c6a <__ieee754_rem_pio2f+0x222>
 8011c2c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c34:	bf0c      	ite	eq
 8011c36:	2301      	moveq	r3, #1
 8011c38:	2302      	movne	r3, #2
 8011c3a:	491a      	ldr	r1, [pc, #104]	@ (8011ca4 <__ieee754_rem_pio2f+0x25c>)
 8011c3c:	9101      	str	r1, [sp, #4]
 8011c3e:	2102      	movs	r1, #2
 8011c40:	9100      	str	r1, [sp, #0]
 8011c42:	a803      	add	r0, sp, #12
 8011c44:	4621      	mov	r1, r4
 8011c46:	f000 f82f 	bl	8011ca8 <__kernel_rem_pio2f>
 8011c4a:	2e00      	cmp	r6, #0
 8011c4c:	f6bf af2f 	bge.w	8011aae <__ieee754_rem_pio2f+0x66>
 8011c50:	edd4 7a00 	vldr	s15, [r4]
 8011c54:	eef1 7a67 	vneg.f32	s15, s15
 8011c58:	edc4 7a00 	vstr	s15, [r4]
 8011c5c:	edd4 7a01 	vldr	s15, [r4, #4]
 8011c60:	eef1 7a67 	vneg.f32	s15, s15
 8011c64:	edc4 7a01 	vstr	s15, [r4, #4]
 8011c68:	e782      	b.n	8011b70 <__ieee754_rem_pio2f+0x128>
 8011c6a:	2303      	movs	r3, #3
 8011c6c:	e7e5      	b.n	8011c3a <__ieee754_rem_pio2f+0x1f2>
 8011c6e:	bf00      	nop
 8011c70:	3f490fd8 	.word	0x3f490fd8
 8011c74:	4016cbe3 	.word	0x4016cbe3
 8011c78:	3fc90f80 	.word	0x3fc90f80
 8011c7c:	3fc90fd0 	.word	0x3fc90fd0
 8011c80:	37354400 	.word	0x37354400
 8011c84:	37354443 	.word	0x37354443
 8011c88:	2e85a308 	.word	0x2e85a308
 8011c8c:	43490f80 	.word	0x43490f80
 8011c90:	3f22f984 	.word	0x3f22f984
 8011c94:	0801299c 	.word	0x0801299c
 8011c98:	2e85a300 	.word	0x2e85a300
 8011c9c:	248d3132 	.word	0x248d3132
 8011ca0:	43800000 	.word	0x43800000
 8011ca4:	08012a1c 	.word	0x08012a1c

08011ca8 <__kernel_rem_pio2f>:
 8011ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cac:	ed2d 8b04 	vpush	{d8-d9}
 8011cb0:	b0d9      	sub	sp, #356	@ 0x164
 8011cb2:	4690      	mov	r8, r2
 8011cb4:	9001      	str	r0, [sp, #4]
 8011cb6:	4ab6      	ldr	r2, [pc, #728]	@ (8011f90 <__kernel_rem_pio2f+0x2e8>)
 8011cb8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011cba:	f118 0f04 	cmn.w	r8, #4
 8011cbe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011cc2:	460f      	mov	r7, r1
 8011cc4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011cc8:	db26      	blt.n	8011d18 <__kernel_rem_pio2f+0x70>
 8011cca:	f1b8 0203 	subs.w	r2, r8, #3
 8011cce:	bf48      	it	mi
 8011cd0:	f108 0204 	addmi.w	r2, r8, #4
 8011cd4:	10d2      	asrs	r2, r2, #3
 8011cd6:	1c55      	adds	r5, r2, #1
 8011cd8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011cda:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 8011cde:	00e8      	lsls	r0, r5, #3
 8011ce0:	eba2 060b 	sub.w	r6, r2, fp
 8011ce4:	9002      	str	r0, [sp, #8]
 8011ce6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011cea:	eb0a 0c0b 	add.w	ip, sl, fp
 8011cee:	ac1c      	add	r4, sp, #112	@ 0x70
 8011cf0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	4560      	cmp	r0, ip
 8011cf8:	dd10      	ble.n	8011d1c <__kernel_rem_pio2f+0x74>
 8011cfa:	a91c      	add	r1, sp, #112	@ 0x70
 8011cfc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011d00:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011d04:	2600      	movs	r6, #0
 8011d06:	4556      	cmp	r6, sl
 8011d08:	dc24      	bgt.n	8011d54 <__kernel_rem_pio2f+0xac>
 8011d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011d0e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 8011d12:	4684      	mov	ip, r0
 8011d14:	2400      	movs	r4, #0
 8011d16:	e016      	b.n	8011d46 <__kernel_rem_pio2f+0x9e>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	e7dc      	b.n	8011cd6 <__kernel_rem_pio2f+0x2e>
 8011d1c:	42c6      	cmn	r6, r0
 8011d1e:	bf5d      	ittte	pl
 8011d20:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011d24:	ee07 1a90 	vmovpl	s15, r1
 8011d28:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011d2c:	eef0 7a47 	vmovmi.f32	s15, s14
 8011d30:	ece4 7a01 	vstmia	r4!, {s15}
 8011d34:	3001      	adds	r0, #1
 8011d36:	e7de      	b.n	8011cf6 <__kernel_rem_pio2f+0x4e>
 8011d38:	ecfe 6a01 	vldmia	lr!, {s13}
 8011d3c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8011d40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011d44:	3401      	adds	r4, #1
 8011d46:	455c      	cmp	r4, fp
 8011d48:	ddf6      	ble.n	8011d38 <__kernel_rem_pio2f+0x90>
 8011d4a:	ece9 7a01 	vstmia	r9!, {s15}
 8011d4e:	3601      	adds	r6, #1
 8011d50:	3004      	adds	r0, #4
 8011d52:	e7d8      	b.n	8011d06 <__kernel_rem_pio2f+0x5e>
 8011d54:	a908      	add	r1, sp, #32
 8011d56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d5a:	9104      	str	r1, [sp, #16]
 8011d5c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011d5e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011f9c <__kernel_rem_pio2f+0x2f4>
 8011d62:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011f98 <__kernel_rem_pio2f+0x2f0>
 8011d66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011d6a:	9203      	str	r2, [sp, #12]
 8011d6c:	4654      	mov	r4, sl
 8011d6e:	00a2      	lsls	r2, r4, #2
 8011d70:	9205      	str	r2, [sp, #20]
 8011d72:	aa58      	add	r2, sp, #352	@ 0x160
 8011d74:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011d78:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011d7c:	a944      	add	r1, sp, #272	@ 0x110
 8011d7e:	aa08      	add	r2, sp, #32
 8011d80:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011d84:	4694      	mov	ip, r2
 8011d86:	4626      	mov	r6, r4
 8011d88:	2e00      	cmp	r6, #0
 8011d8a:	dc4c      	bgt.n	8011e26 <__kernel_rem_pio2f+0x17e>
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011d92:	f000 fa35 	bl	8012200 <scalbnf>
 8011d96:	eeb0 8a40 	vmov.f32	s16, s0
 8011d9a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011d9e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011da2:	f000 f9e9 	bl	8012178 <floorf>
 8011da6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011daa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011dae:	2d00      	cmp	r5, #0
 8011db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011db4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011db8:	ee17 9a90 	vmov	r9, s15
 8011dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dc0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011dc4:	dd41      	ble.n	8011e4a <__kernel_rem_pio2f+0x1a2>
 8011dc6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8011dca:	a908      	add	r1, sp, #32
 8011dcc:	f1c5 0e08 	rsb	lr, r5, #8
 8011dd0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011dd4:	fa46 f00e 	asr.w	r0, r6, lr
 8011dd8:	4481      	add	r9, r0
 8011dda:	fa00 f00e 	lsl.w	r0, r0, lr
 8011dde:	1a36      	subs	r6, r6, r0
 8011de0:	f1c5 0007 	rsb	r0, r5, #7
 8011de4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011de8:	4106      	asrs	r6, r0
 8011dea:	2e00      	cmp	r6, #0
 8011dec:	dd3c      	ble.n	8011e68 <__kernel_rem_pio2f+0x1c0>
 8011dee:	f04f 0e00 	mov.w	lr, #0
 8011df2:	f109 0901 	add.w	r9, r9, #1
 8011df6:	4670      	mov	r0, lr
 8011df8:	4574      	cmp	r4, lr
 8011dfa:	dc68      	bgt.n	8011ece <__kernel_rem_pio2f+0x226>
 8011dfc:	2d00      	cmp	r5, #0
 8011dfe:	dd03      	ble.n	8011e08 <__kernel_rem_pio2f+0x160>
 8011e00:	2d01      	cmp	r5, #1
 8011e02:	d074      	beq.n	8011eee <__kernel_rem_pio2f+0x246>
 8011e04:	2d02      	cmp	r5, #2
 8011e06:	d07d      	beq.n	8011f04 <__kernel_rem_pio2f+0x25c>
 8011e08:	2e02      	cmp	r6, #2
 8011e0a:	d12d      	bne.n	8011e68 <__kernel_rem_pio2f+0x1c0>
 8011e0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011e10:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011e14:	b340      	cbz	r0, 8011e68 <__kernel_rem_pio2f+0x1c0>
 8011e16:	4628      	mov	r0, r5
 8011e18:	9306      	str	r3, [sp, #24]
 8011e1a:	f000 f9f1 	bl	8012200 <scalbnf>
 8011e1e:	9b06      	ldr	r3, [sp, #24]
 8011e20:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011e24:	e020      	b.n	8011e68 <__kernel_rem_pio2f+0x1c0>
 8011e26:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011e2a:	3e01      	subs	r6, #1
 8011e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e34:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011e38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011e3c:	ecac 0a01 	vstmia	ip!, {s0}
 8011e40:	ed30 0a01 	vldmdb	r0!, {s0}
 8011e44:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011e48:	e79e      	b.n	8011d88 <__kernel_rem_pio2f+0xe0>
 8011e4a:	d105      	bne.n	8011e58 <__kernel_rem_pio2f+0x1b0>
 8011e4c:	1e60      	subs	r0, r4, #1
 8011e4e:	a908      	add	r1, sp, #32
 8011e50:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011e54:	11f6      	asrs	r6, r6, #7
 8011e56:	e7c8      	b.n	8011dea <__kernel_rem_pio2f+0x142>
 8011e58:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011e5c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e64:	da31      	bge.n	8011eca <__kernel_rem_pio2f+0x222>
 8011e66:	2600      	movs	r6, #0
 8011e68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e70:	f040 8098 	bne.w	8011fa4 <__kernel_rem_pio2f+0x2fc>
 8011e74:	1e60      	subs	r0, r4, #1
 8011e76:	2200      	movs	r2, #0
 8011e78:	4550      	cmp	r0, sl
 8011e7a:	da4b      	bge.n	8011f14 <__kernel_rem_pio2f+0x26c>
 8011e7c:	2a00      	cmp	r2, #0
 8011e7e:	d065      	beq.n	8011f4c <__kernel_rem_pio2f+0x2a4>
 8011e80:	3c01      	subs	r4, #1
 8011e82:	ab08      	add	r3, sp, #32
 8011e84:	3d08      	subs	r5, #8
 8011e86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d0f8      	beq.n	8011e80 <__kernel_rem_pio2f+0x1d8>
 8011e8e:	4628      	mov	r0, r5
 8011e90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011e94:	f000 f9b4 	bl	8012200 <scalbnf>
 8011e98:	1c63      	adds	r3, r4, #1
 8011e9a:	aa44      	add	r2, sp, #272	@ 0x110
 8011e9c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011f9c <__kernel_rem_pio2f+0x2f4>
 8011ea0:	0099      	lsls	r1, r3, #2
 8011ea2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011ea6:	4623      	mov	r3, r4
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f280 80a9 	bge.w	8012000 <__kernel_rem_pio2f+0x358>
 8011eae:	4623      	mov	r3, r4
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	f2c0 80c7 	blt.w	8012044 <__kernel_rem_pio2f+0x39c>
 8011eb6:	aa44      	add	r2, sp, #272	@ 0x110
 8011eb8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011ebc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011f94 <__kernel_rem_pio2f+0x2ec>
 8011ec0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 8011ec4:	2000      	movs	r0, #0
 8011ec6:	1ae2      	subs	r2, r4, r3
 8011ec8:	e0b1      	b.n	801202e <__kernel_rem_pio2f+0x386>
 8011eca:	2602      	movs	r6, #2
 8011ecc:	e78f      	b.n	8011dee <__kernel_rem_pio2f+0x146>
 8011ece:	f852 1b04 	ldr.w	r1, [r2], #4
 8011ed2:	b948      	cbnz	r0, 8011ee8 <__kernel_rem_pio2f+0x240>
 8011ed4:	b121      	cbz	r1, 8011ee0 <__kernel_rem_pio2f+0x238>
 8011ed6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011eda:	f842 1c04 	str.w	r1, [r2, #-4]
 8011ede:	2101      	movs	r1, #1
 8011ee0:	f10e 0e01 	add.w	lr, lr, #1
 8011ee4:	4608      	mov	r0, r1
 8011ee6:	e787      	b.n	8011df8 <__kernel_rem_pio2f+0x150>
 8011ee8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011eec:	e7f5      	b.n	8011eda <__kernel_rem_pio2f+0x232>
 8011eee:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8011ef2:	aa08      	add	r2, sp, #32
 8011ef4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011ef8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011efc:	a908      	add	r1, sp, #32
 8011efe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011f02:	e781      	b.n	8011e08 <__kernel_rem_pio2f+0x160>
 8011f04:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8011f08:	aa08      	add	r2, sp, #32
 8011f0a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011f0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011f12:	e7f3      	b.n	8011efc <__kernel_rem_pio2f+0x254>
 8011f14:	a908      	add	r1, sp, #32
 8011f16:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011f1a:	3801      	subs	r0, #1
 8011f1c:	430a      	orrs	r2, r1
 8011f1e:	e7ab      	b.n	8011e78 <__kernel_rem_pio2f+0x1d0>
 8011f20:	3201      	adds	r2, #1
 8011f22:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011f26:	2e00      	cmp	r6, #0
 8011f28:	d0fa      	beq.n	8011f20 <__kernel_rem_pio2f+0x278>
 8011f2a:	9905      	ldr	r1, [sp, #20]
 8011f2c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8011f30:	eb0d 0001 	add.w	r0, sp, r1
 8011f34:	18e6      	adds	r6, r4, r3
 8011f36:	a91c      	add	r1, sp, #112	@ 0x70
 8011f38:	f104 0c01 	add.w	ip, r4, #1
 8011f3c:	384c      	subs	r0, #76	@ 0x4c
 8011f3e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8011f42:	4422      	add	r2, r4
 8011f44:	4562      	cmp	r2, ip
 8011f46:	da04      	bge.n	8011f52 <__kernel_rem_pio2f+0x2aa>
 8011f48:	4614      	mov	r4, r2
 8011f4a:	e710      	b.n	8011d6e <__kernel_rem_pio2f+0xc6>
 8011f4c:	9804      	ldr	r0, [sp, #16]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	e7e7      	b.n	8011f22 <__kernel_rem_pio2f+0x27a>
 8011f52:	9903      	ldr	r1, [sp, #12]
 8011f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011f58:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011f5c:	9105      	str	r1, [sp, #20]
 8011f5e:	ee07 1a90 	vmov	s15, r1
 8011f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f66:	2400      	movs	r4, #0
 8011f68:	ece6 7a01 	vstmia	r6!, {s15}
 8011f6c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 8011f70:	46b1      	mov	r9, r6
 8011f72:	455c      	cmp	r4, fp
 8011f74:	dd04      	ble.n	8011f80 <__kernel_rem_pio2f+0x2d8>
 8011f76:	ece0 7a01 	vstmia	r0!, {s15}
 8011f7a:	f10c 0c01 	add.w	ip, ip, #1
 8011f7e:	e7e1      	b.n	8011f44 <__kernel_rem_pio2f+0x29c>
 8011f80:	ecfe 6a01 	vldmia	lr!, {s13}
 8011f84:	ed39 7a01 	vldmdb	r9!, {s14}
 8011f88:	3401      	adds	r4, #1
 8011f8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011f8e:	e7f0      	b.n	8011f72 <__kernel_rem_pio2f+0x2ca>
 8011f90:	08012d60 	.word	0x08012d60
 8011f94:	08012d34 	.word	0x08012d34
 8011f98:	43800000 	.word	0x43800000
 8011f9c:	3b800000 	.word	0x3b800000
 8011fa0:	00000000 	.word	0x00000000
 8011fa4:	9b02      	ldr	r3, [sp, #8]
 8011fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8011faa:	eba3 0008 	sub.w	r0, r3, r8
 8011fae:	f000 f927 	bl	8012200 <scalbnf>
 8011fb2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011f98 <__kernel_rem_pio2f+0x2f0>
 8011fb6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbe:	db19      	blt.n	8011ff4 <__kernel_rem_pio2f+0x34c>
 8011fc0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011f9c <__kernel_rem_pio2f+0x2f4>
 8011fc4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011fc8:	aa08      	add	r2, sp, #32
 8011fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fce:	3508      	adds	r5, #8
 8011fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fd4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fdc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011fe0:	ee10 3a10 	vmov	r3, s0
 8011fe4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011fe8:	ee17 3a90 	vmov	r3, s15
 8011fec:	3401      	adds	r4, #1
 8011fee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011ff2:	e74c      	b.n	8011e8e <__kernel_rem_pio2f+0x1e6>
 8011ff4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011ff8:	aa08      	add	r2, sp, #32
 8011ffa:	ee10 3a10 	vmov	r3, s0
 8011ffe:	e7f6      	b.n	8011fee <__kernel_rem_pio2f+0x346>
 8012000:	a808      	add	r0, sp, #32
 8012002:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012006:	9001      	str	r0, [sp, #4]
 8012008:	ee07 0a90 	vmov	s15, r0
 801200c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012010:	3b01      	subs	r3, #1
 8012012:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012016:	ee20 0a07 	vmul.f32	s0, s0, s14
 801201a:	ed62 7a01 	vstmdb	r2!, {s15}
 801201e:	e743      	b.n	8011ea8 <__kernel_rem_pio2f+0x200>
 8012020:	ecfc 6a01 	vldmia	ip!, {s13}
 8012024:	ecb5 7a01 	vldmia	r5!, {s14}
 8012028:	eee6 7a87 	vfma.f32	s15, s13, s14
 801202c:	3001      	adds	r0, #1
 801202e:	4550      	cmp	r0, sl
 8012030:	dc01      	bgt.n	8012036 <__kernel_rem_pio2f+0x38e>
 8012032:	4290      	cmp	r0, r2
 8012034:	ddf4      	ble.n	8012020 <__kernel_rem_pio2f+0x378>
 8012036:	a858      	add	r0, sp, #352	@ 0x160
 8012038:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801203c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012040:	3b01      	subs	r3, #1
 8012042:	e735      	b.n	8011eb0 <__kernel_rem_pio2f+0x208>
 8012044:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012046:	2b02      	cmp	r3, #2
 8012048:	dc09      	bgt.n	801205e <__kernel_rem_pio2f+0x3b6>
 801204a:	2b00      	cmp	r3, #0
 801204c:	dc27      	bgt.n	801209e <__kernel_rem_pio2f+0x3f6>
 801204e:	d040      	beq.n	80120d2 <__kernel_rem_pio2f+0x42a>
 8012050:	f009 0007 	and.w	r0, r9, #7
 8012054:	b059      	add	sp, #356	@ 0x164
 8012056:	ecbd 8b04 	vpop	{d8-d9}
 801205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012060:	2b03      	cmp	r3, #3
 8012062:	d1f5      	bne.n	8012050 <__kernel_rem_pio2f+0x3a8>
 8012064:	aa30      	add	r2, sp, #192	@ 0xc0
 8012066:	1f0b      	subs	r3, r1, #4
 8012068:	4413      	add	r3, r2
 801206a:	461a      	mov	r2, r3
 801206c:	4620      	mov	r0, r4
 801206e:	2800      	cmp	r0, #0
 8012070:	dc50      	bgt.n	8012114 <__kernel_rem_pio2f+0x46c>
 8012072:	4622      	mov	r2, r4
 8012074:	2a01      	cmp	r2, #1
 8012076:	dc5d      	bgt.n	8012134 <__kernel_rem_pio2f+0x48c>
 8012078:	ab30      	add	r3, sp, #192	@ 0xc0
 801207a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 801207e:	440b      	add	r3, r1
 8012080:	2c01      	cmp	r4, #1
 8012082:	dc67      	bgt.n	8012154 <__kernel_rem_pio2f+0x4ac>
 8012084:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012088:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801208c:	2e00      	cmp	r6, #0
 801208e:	d167      	bne.n	8012160 <__kernel_rem_pio2f+0x4b8>
 8012090:	edc7 6a00 	vstr	s13, [r7]
 8012094:	ed87 7a01 	vstr	s14, [r7, #4]
 8012098:	edc7 7a02 	vstr	s15, [r7, #8]
 801209c:	e7d8      	b.n	8012050 <__kernel_rem_pio2f+0x3a8>
 801209e:	ab30      	add	r3, sp, #192	@ 0xc0
 80120a0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 80120a4:	440b      	add	r3, r1
 80120a6:	4622      	mov	r2, r4
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	da24      	bge.n	80120f6 <__kernel_rem_pio2f+0x44e>
 80120ac:	b34e      	cbz	r6, 8012102 <__kernel_rem_pio2f+0x45a>
 80120ae:	eef1 7a47 	vneg.f32	s15, s14
 80120b2:	edc7 7a00 	vstr	s15, [r7]
 80120b6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80120ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120be:	aa31      	add	r2, sp, #196	@ 0xc4
 80120c0:	2301      	movs	r3, #1
 80120c2:	429c      	cmp	r4, r3
 80120c4:	da20      	bge.n	8012108 <__kernel_rem_pio2f+0x460>
 80120c6:	b10e      	cbz	r6, 80120cc <__kernel_rem_pio2f+0x424>
 80120c8:	eef1 7a67 	vneg.f32	s15, s15
 80120cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80120d0:	e7be      	b.n	8012050 <__kernel_rem_pio2f+0x3a8>
 80120d2:	ab30      	add	r3, sp, #192	@ 0xc0
 80120d4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011fa0 <__kernel_rem_pio2f+0x2f8>
 80120d8:	440b      	add	r3, r1
 80120da:	2c00      	cmp	r4, #0
 80120dc:	da05      	bge.n	80120ea <__kernel_rem_pio2f+0x442>
 80120de:	b10e      	cbz	r6, 80120e4 <__kernel_rem_pio2f+0x43c>
 80120e0:	eef1 7a67 	vneg.f32	s15, s15
 80120e4:	edc7 7a00 	vstr	s15, [r7]
 80120e8:	e7b2      	b.n	8012050 <__kernel_rem_pio2f+0x3a8>
 80120ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80120ee:	3c01      	subs	r4, #1
 80120f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120f4:	e7f1      	b.n	80120da <__kernel_rem_pio2f+0x432>
 80120f6:	ed73 7a01 	vldmdb	r3!, {s15}
 80120fa:	3a01      	subs	r2, #1
 80120fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012100:	e7d2      	b.n	80120a8 <__kernel_rem_pio2f+0x400>
 8012102:	eef0 7a47 	vmov.f32	s15, s14
 8012106:	e7d4      	b.n	80120b2 <__kernel_rem_pio2f+0x40a>
 8012108:	ecb2 7a01 	vldmia	r2!, {s14}
 801210c:	3301      	adds	r3, #1
 801210e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012112:	e7d6      	b.n	80120c2 <__kernel_rem_pio2f+0x41a>
 8012114:	ed72 7a01 	vldmdb	r2!, {s15}
 8012118:	edd2 6a01 	vldr	s13, [r2, #4]
 801211c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012120:	3801      	subs	r0, #1
 8012122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012126:	ed82 7a00 	vstr	s14, [r2]
 801212a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801212e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012132:	e79c      	b.n	801206e <__kernel_rem_pio2f+0x3c6>
 8012134:	ed73 7a01 	vldmdb	r3!, {s15}
 8012138:	edd3 6a01 	vldr	s13, [r3, #4]
 801213c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012140:	3a01      	subs	r2, #1
 8012142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012146:	ed83 7a00 	vstr	s14, [r3]
 801214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801214e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012152:	e78f      	b.n	8012074 <__kernel_rem_pio2f+0x3cc>
 8012154:	ed33 7a01 	vldmdb	r3!, {s14}
 8012158:	3c01      	subs	r4, #1
 801215a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801215e:	e78f      	b.n	8012080 <__kernel_rem_pio2f+0x3d8>
 8012160:	eef1 6a66 	vneg.f32	s13, s13
 8012164:	eeb1 7a47 	vneg.f32	s14, s14
 8012168:	edc7 6a00 	vstr	s13, [r7]
 801216c:	ed87 7a01 	vstr	s14, [r7, #4]
 8012170:	eef1 7a67 	vneg.f32	s15, s15
 8012174:	e790      	b.n	8012098 <__kernel_rem_pio2f+0x3f0>
 8012176:	bf00      	nop

08012178 <floorf>:
 8012178:	ee10 3a10 	vmov	r3, s0
 801217c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012180:	3a7f      	subs	r2, #127	@ 0x7f
 8012182:	2a16      	cmp	r2, #22
 8012184:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012188:	dc2b      	bgt.n	80121e2 <floorf+0x6a>
 801218a:	2a00      	cmp	r2, #0
 801218c:	da12      	bge.n	80121b4 <floorf+0x3c>
 801218e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80121f4 <floorf+0x7c>
 8012192:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012196:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219e:	dd06      	ble.n	80121ae <floorf+0x36>
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	da24      	bge.n	80121ee <floorf+0x76>
 80121a4:	2900      	cmp	r1, #0
 80121a6:	4b14      	ldr	r3, [pc, #80]	@ (80121f8 <floorf+0x80>)
 80121a8:	bf08      	it	eq
 80121aa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80121ae:	ee00 3a10 	vmov	s0, r3
 80121b2:	4770      	bx	lr
 80121b4:	4911      	ldr	r1, [pc, #68]	@ (80121fc <floorf+0x84>)
 80121b6:	4111      	asrs	r1, r2
 80121b8:	420b      	tst	r3, r1
 80121ba:	d0fa      	beq.n	80121b2 <floorf+0x3a>
 80121bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80121f4 <floorf+0x7c>
 80121c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121cc:	ddef      	ble.n	80121ae <floorf+0x36>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	bfbe      	ittt	lt
 80121d2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80121d6:	fa40 f202 	asrlt.w	r2, r0, r2
 80121da:	189b      	addlt	r3, r3, r2
 80121dc:	ea23 0301 	bic.w	r3, r3, r1
 80121e0:	e7e5      	b.n	80121ae <floorf+0x36>
 80121e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80121e6:	d3e4      	bcc.n	80121b2 <floorf+0x3a>
 80121e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80121ec:	4770      	bx	lr
 80121ee:	2300      	movs	r3, #0
 80121f0:	e7dd      	b.n	80121ae <floorf+0x36>
 80121f2:	bf00      	nop
 80121f4:	7149f2ca 	.word	0x7149f2ca
 80121f8:	bf800000 	.word	0xbf800000
 80121fc:	007fffff 	.word	0x007fffff

08012200 <scalbnf>:
 8012200:	ee10 3a10 	vmov	r3, s0
 8012204:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012208:	d02b      	beq.n	8012262 <scalbnf+0x62>
 801220a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801220e:	d302      	bcc.n	8012216 <scalbnf+0x16>
 8012210:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012214:	4770      	bx	lr
 8012216:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801221a:	d123      	bne.n	8012264 <scalbnf+0x64>
 801221c:	4b24      	ldr	r3, [pc, #144]	@ (80122b0 <scalbnf+0xb0>)
 801221e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80122b4 <scalbnf+0xb4>
 8012222:	4298      	cmp	r0, r3
 8012224:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012228:	db17      	blt.n	801225a <scalbnf+0x5a>
 801222a:	ee10 3a10 	vmov	r3, s0
 801222e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012232:	3a19      	subs	r2, #25
 8012234:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012238:	4288      	cmp	r0, r1
 801223a:	dd15      	ble.n	8012268 <scalbnf+0x68>
 801223c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80122b8 <scalbnf+0xb8>
 8012240:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80122bc <scalbnf+0xbc>
 8012244:	ee10 3a10 	vmov	r3, s0
 8012248:	eeb0 7a67 	vmov.f32	s14, s15
 801224c:	2b00      	cmp	r3, #0
 801224e:	bfb8      	it	lt
 8012250:	eef0 7a66 	vmovlt.f32	s15, s13
 8012254:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012258:	4770      	bx	lr
 801225a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80122c0 <scalbnf+0xc0>
 801225e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012262:	4770      	bx	lr
 8012264:	0dd2      	lsrs	r2, r2, #23
 8012266:	e7e5      	b.n	8012234 <scalbnf+0x34>
 8012268:	4410      	add	r0, r2
 801226a:	28fe      	cmp	r0, #254	@ 0xfe
 801226c:	dce6      	bgt.n	801223c <scalbnf+0x3c>
 801226e:	2800      	cmp	r0, #0
 8012270:	dd06      	ble.n	8012280 <scalbnf+0x80>
 8012272:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012276:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801227a:	ee00 3a10 	vmov	s0, r3
 801227e:	4770      	bx	lr
 8012280:	f110 0f16 	cmn.w	r0, #22
 8012284:	da09      	bge.n	801229a <scalbnf+0x9a>
 8012286:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80122c0 <scalbnf+0xc0>
 801228a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80122c4 <scalbnf+0xc4>
 801228e:	ee10 3a10 	vmov	r3, s0
 8012292:	eeb0 7a67 	vmov.f32	s14, s15
 8012296:	2b00      	cmp	r3, #0
 8012298:	e7d9      	b.n	801224e <scalbnf+0x4e>
 801229a:	3019      	adds	r0, #25
 801229c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80122a0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80122a4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80122c8 <scalbnf+0xc8>
 80122a8:	ee07 3a90 	vmov	s15, r3
 80122ac:	e7d7      	b.n	801225e <scalbnf+0x5e>
 80122ae:	bf00      	nop
 80122b0:	ffff3cb0 	.word	0xffff3cb0
 80122b4:	4c000000 	.word	0x4c000000
 80122b8:	7149f2ca 	.word	0x7149f2ca
 80122bc:	f149f2ca 	.word	0xf149f2ca
 80122c0:	0da24260 	.word	0x0da24260
 80122c4:	8da24260 	.word	0x8da24260
 80122c8:	33000000 	.word	0x33000000

080122cc <_init>:
 80122cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ce:	bf00      	nop
 80122d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122d2:	bc08      	pop	{r3}
 80122d4:	469e      	mov	lr, r3
 80122d6:	4770      	bx	lr

080122d8 <_fini>:
 80122d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122da:	bf00      	nop
 80122dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122de:	bc08      	pop	{r3}
 80122e0:	469e      	mov	lr, r3
 80122e2:	4770      	bx	lr
